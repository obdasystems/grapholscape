/* tslint:disable */
/* eslint-disable */
/**
 * Swagger Sparqling WS
 * This server will expose an API to Sparqling front end to create new SPARQL queries with a combinations of point and click on the [GRAPHOLscape](https://github.com/obdasystems/grapholscape) graph.  Sparqling will be released as a standalone appication but also the server will embedded in [MWS](https://github.com/obdasystems/mws) and Sparqling will be integrated in [Monolith](https://www.monolith.obdasystems.com/).
 *
 * The version of the OpenAPI document: 1.0.3
 * Contact: info@obdasystems.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface Entity
 */
export interface Entity {
    /**
     * 
     * @type {string}
     * @memberof Entity
     */
    type?: EntityTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof Entity
     */
    iri?: string;
    /**
     * 
     * @type {string}
     * @memberof Entity
     */
    prefixedIri?: string;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof Entity
     */
    labels?: { [key: string]: string; };
}


/**
 * @export
 */
export const EntityTypeEnum = {
    Class: 'class',
    ObjectProperty: 'objectProperty',
    InverseObjectProperty: 'inverseObjectProperty',
    DataProperty: 'dataProperty',
    Annotation: 'annotation'
} as const;
export type EntityTypeEnum = typeof EntityTypeEnum[keyof typeof EntityTypeEnum];


/**
 * Check if a given object implements the Entity interface.
 */
export function instanceOfEntity(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function EntityFromJSON(json: any): Entity {
    return EntityFromJSONTyped(json, false);
}

export function EntityFromJSONTyped(json: any, ignoreDiscriminator: boolean): Entity {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'type': !exists(json, 'type') ? undefined : json['type'],
        'iri': !exists(json, 'iri') ? undefined : json['iri'],
        'prefixedIri': !exists(json, 'prefixedIri') ? undefined : json['prefixedIri'],
        'labels': !exists(json, 'labels') ? undefined : json['labels'],
    };
}

export function EntityToJSON(value?: Entity | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'type': value.type,
        'iri': value.iri,
        'prefixedIri': value.prefixedIri,
        'labels': value.labels,
    };
}

