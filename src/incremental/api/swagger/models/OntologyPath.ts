/* tslint:disable */
/* eslint-disable */
/**
 * Swagger Sparqling WS
 * This server will expose an API to Sparqling front end to create new SPARQL queries with a combinations of point and click on the [GRAPHOLscape](https://github.com/obdasystems/grapholscape) graph.  Sparqling will be released as a standalone appication but also the server will embedded in [MWS](https://github.com/obdasystems/mws) and Sparqling will be integrated in [Monolith](https://www.monolith.obdasystems.com/).
 *
 * The version of the OpenAPI document: 1.0.3
 * Contact: info@obdasystems.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Entity } from './Entity';
import {
    EntityFromJSON,
    EntityFromJSONTyped,
    EntityToJSON,
} from './Entity';

/**
 * 
 * @export
 * @interface OntologyPath
 */
export interface OntologyPath {
    /**
     * Starts with lastSelectedIRI and ends with clickedIRI. In between the nodes and edges traversed in the path (ISA edge are marked as ISA)
     * @type {Array<Entity>}
     * @memberof OntologyPath
     */
    entities?: Array<Entity>;
}

/**
 * Check if a given object implements the OntologyPath interface.
 */
export function instanceOfOntologyPath(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function OntologyPathFromJSON(json: any): OntologyPath {
    return OntologyPathFromJSONTyped(json, false);
}

export function OntologyPathFromJSONTyped(json: any, ignoreDiscriminator: boolean): OntologyPath {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'entities': !exists(json, 'entities') ? undefined : ((json['entities'] as Array<any>).map(EntityFromJSON)),
    };
}

export function OntologyPathToJSON(value?: OntologyPath | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'entities': value.entities === undefined ? undefined : ((value.entities as Array<any>).map(EntityToJSON)),
    };
}

