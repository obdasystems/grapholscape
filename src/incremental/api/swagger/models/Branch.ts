/* tslint:disable */
/* eslint-disable */
/**
 * Swagger Sparqling WS
 * This server will expose an API to Sparqling front end to create new SPARQL queries with a combinations of point and click on the [GRAPHOLscape](https://github.com/obdasystems/grapholscape) graph.  Sparqling will be released as a standalone appication but also the server will embedded in [MWS](https://github.com/obdasystems/mws) and Sparqling will be integrated in [Monolith](https://www.monolith.obdasystems.com/).
 *
 * The version of the OpenAPI document: 1.0.1
 * Contact: info@obdasystems.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface Branch
 */
export interface Branch {
    /**
     * 
     * @type {string}
     * @memberof Branch
     */
    objectPropertyIRI?: string;
    /**
     * It is true when domain and range are the same class.
     * @type {boolean}
     * @memberof Branch
     */
    cyclic?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Branch
     */
    direct?: boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof Branch
     */
    relatedClasses?: Array<string>;
}

/**
 * Check if a given object implements the Branch interface.
 */
export function instanceOfBranch(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function BranchFromJSON(json: any): Branch {
    return BranchFromJSONTyped(json, false);
}

export function BranchFromJSONTyped(json: any, ignoreDiscriminator: boolean): Branch {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'objectPropertyIRI': !exists(json, 'objectPropertyIRI') ? undefined : json['objectPropertyIRI'],
        'cyclic': !exists(json, 'cyclic') ? undefined : json['cyclic'],
        'direct': !exists(json, 'direct') ? undefined : json['direct'],
        'relatedClasses': !exists(json, 'relatedClasses') ? undefined : json['relatedClasses'],
    };
}

export function BranchToJSON(value?: Branch | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'objectPropertyIRI': value.objectPropertyIRI,
        'cyclic': value.cyclic,
        'direct': value.direct,
        'relatedClasses': value.relatedClasses,
    };
}

