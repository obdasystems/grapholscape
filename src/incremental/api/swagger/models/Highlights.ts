/* tslint:disable */
/* eslint-disable */
/**
 * Swagger Sparqling WS
 * This server will expose an API to Sparqling front end to create new SPARQL queries with a combinations of point and click on the [GRAPHOLscape](https://github.com/obdasystems/grapholscape) graph.  Sparqling will be released as a standalone appication but also the server will embedded in [MWS](https://github.com/obdasystems/mws) and Sparqling will be integrated in [Monolith](https://www.monolith.obdasystems.com/).
 *
 * The version of the OpenAPI document: 1.0.3
 * Contact: info@obdasystems.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Branch } from './Branch';
import {
    BranchFromJSON,
    BranchFromJSONTyped,
    BranchToJSON,
} from './Branch';

/**
 * 
 * @export
 * @interface Highlights
 */
export interface Highlights {
    /**
     * Subclasses or brother classes
     * @type {Array<string>}
     * @memberof Highlights
     */
    classes?: Array<string>;
    /**
     * 
     * @type {Array<Branch>}
     * @memberof Highlights
     */
    objectProperties?: Array<Branch>;
    /**
     * 
     * @type {Array<string>}
     * @memberof Highlights
     */
    dataProperties?: Array<string>;
}

/**
 * Check if a given object implements the Highlights interface.
 */
export function instanceOfHighlights(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function HighlightsFromJSON(json: any): Highlights {
    return HighlightsFromJSONTyped(json, false);
}

export function HighlightsFromJSONTyped(json: any, ignoreDiscriminator: boolean): Highlights {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'classes': !exists(json, 'classes') ? undefined : json['classes'],
        'objectProperties': !exists(json, 'objectProperties') ? undefined : ((json['objectProperties'] as Array<any>).map(BranchFromJSON)),
        'dataProperties': !exists(json, 'dataProperties') ? undefined : json['dataProperties'],
    };
}

export function HighlightsToJSON(value?: Highlights | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'classes': value.classes,
        'objectProperties': value.objectProperties === undefined ? undefined : ((value.objectProperties as Array<any>).map(BranchToJSON)),
        'dataProperties': value.dataProperties,
    };
}

