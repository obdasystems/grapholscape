/* tslint:disable */
/* eslint-disable */
/**
 * Swagger Sparqling WS
 * This server will expose an API to Sparqling front end to create new SPARQL queries with a combinations of point and click on the [GRAPHOLscape](https://github.com/obdasystems/grapholscape) graph.  Sparqling will be released as a standalone appication but also the server will embedded in [MWS](https://github.com/obdasystems/mws) and Sparqling will be integrated in [Monolith](https://www.monolith.obdasystems.com/).
 *
 * The version of the OpenAPI document: 1.0.3
 * Contact: info@obdasystems.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Highlights,
  OntologyPath,
} from '../models';
import {
    HighlightsFromJSON,
    HighlightsToJSON,
    OntologyPathFromJSON,
    OntologyPathToJSON,
} from '../models';

export interface HighligthsRequest {
    clickedClassIRI: string;
    params?: Array<string>;
}

export interface HighligthsPathsRequest {
    lastSelectedIRI: string;
    clickedIRI: string;
    allPaths?: boolean;
}

/**
 * 
 */
export class OntologyGraphApi extends runtime.BaseAPI {

    /**
     * This route is used to highlight the negihbours of the selected class. The neighbours can be classes (brother classes or child classes), object properties (the class or one of his father partecipate or are typed to domain/range) or data properties (the class or one of its fathers partecipates or is typed to its domain).
     * Get the IRIs of the ontology entities \"related\" to the clicked and selected.
     */
    async highligthsRaw(requestParameters: HighligthsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Highlights>> {
        if (requestParameters.clickedClassIRI === null || requestParameters.clickedClassIRI === undefined) {
            throw new runtime.RequiredError('clickedClassIRI','Required parameter requestParameters.clickedClassIRI was null or undefined when calling highligths.');
        }

        const queryParameters: any = {};

        if (requestParameters.clickedClassIRI !== undefined) {
            queryParameters['clickedClassIRI'] = requestParameters.clickedClassIRI;
        }

        if (requestParameters.params) {
            queryParameters['params'] = requestParameters.params;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/highlights`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HighlightsFromJSON(jsonValue));
    }

    /**
     * This route is used to highlight the negihbours of the selected class. The neighbours can be classes (brother classes or child classes), object properties (the class or one of his father partecipate or are typed to domain/range) or data properties (the class or one of its fathers partecipates or is typed to its domain).
     * Get the IRIs of the ontology entities \"related\" to the clicked and selected.
     */
    async highligths(requestParameters: HighligthsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Highlights> {
        const response = await this.highligthsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * The results should be based on Dijkstra algorithm for shortest paths. ISA wieght is 0 while role weight is 1.
     * Find paths between selected class and clicked class.
     */
    async highligthsPathsRaw(requestParameters: HighligthsPathsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<OntologyPath>>> {
        if (requestParameters.lastSelectedIRI === null || requestParameters.lastSelectedIRI === undefined) {
            throw new runtime.RequiredError('lastSelectedIRI','Required parameter requestParameters.lastSelectedIRI was null or undefined when calling highligthsPaths.');
        }

        if (requestParameters.clickedIRI === null || requestParameters.clickedIRI === undefined) {
            throw new runtime.RequiredError('clickedIRI','Required parameter requestParameters.clickedIRI was null or undefined when calling highligthsPaths.');
        }

        const queryParameters: any = {};

        if (requestParameters.lastSelectedIRI !== undefined) {
            queryParameters['lastSelectedIRI'] = requestParameters.lastSelectedIRI;
        }

        if (requestParameters.clickedIRI !== undefined) {
            queryParameters['clickedIRI'] = requestParameters.clickedIRI;
        }

        if (requestParameters.allPaths !== undefined) {
            queryParameters['allPaths'] = requestParameters.allPaths;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/highlights/paths`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(OntologyPathFromJSON));
    }

    /**
     * The results should be based on Dijkstra algorithm for shortest paths. ISA wieght is 0 while role weight is 1.
     * Find paths between selected class and clicked class.
     */
    async highligthsPaths(requestParameters: HighligthsPathsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<OntologyPath>> {
        const response = await this.highligthsPathsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
