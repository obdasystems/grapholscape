/* tslint:disable */
/* eslint-disable */
/**
 * Swagger Sparqling WS
 * This server will expose an API to Sparqling front end to create new SPARQL queries with a combinations of point and click on the [GRAPHOLscape](https://github.com/obdasystems/grapholscape) graph.  Sparqling will be released as a standalone appication but also the server will embedded in [MWS](https://github.com/obdasystems/mws) and Sparqling will be integrated in [Monolith](https://www.monolith.obdasystems.com/).
 *
 * The version of the OpenAPI document: 1.0.3
 * Contact: info@obdasystems.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  OntologyPath,
} from '../models';
import {
    OntologyPathFromJSON,
    OntologyPathToJSON,
} from '../models';

export interface InstanceShortestPathPostRequest {
    ontologyPath: OntologyPath;
    sourceInstanceIRI?: string;
    targetInstanceIRI?: string;
    labels?: boolean;
}

/**
 * 
 */
export class VKGApi extends runtime.BaseAPI {

    /**
     * Return the CONSTRUCT query based on the shortest path between an instance and another instance or class
     */
    async instanceShortestPathPostRaw(requestParameters: InstanceShortestPathPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.ontologyPath === null || requestParameters.ontologyPath === undefined) {
            throw new runtime.RequiredError('ontologyPath','Required parameter requestParameters.ontologyPath was null or undefined when calling instanceShortestPathPost.');
        }

        const queryParameters: any = {};

        if (requestParameters.sourceInstanceIRI !== undefined) {
            queryParameters['sourceInstanceIRI'] = requestParameters.sourceInstanceIRI;
        }

        if (requestParameters.targetInstanceIRI !== undefined) {
            queryParameters['targetInstanceIRI'] = requestParameters.targetInstanceIRI;
        }

        if (requestParameters.labels !== undefined) {
            queryParameters['labels'] = requestParameters.labels;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/instanceShortestPath`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OntologyPathToJSON(requestParameters.ontologyPath),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Return the CONSTRUCT query based on the shortest path between an instance and another instance or class
     */
    async instanceShortestPathPost(requestParameters: InstanceShortestPathPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.instanceShortestPathPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
