openapi: 3.0.0
servers:
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/PEPE_2/Grapholscape_Model/1.0.0
info:
  description: This is the API for retaining a Grapholscape's loaded ontology (or graph) in order to restart navigation from a previous state.
  version: 1.0.0
  title: Grapholscape API model
  contact:
    email: obdasystems@info.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
paths: 
  /ontologyDrafts:
    get:
      tags:
      - Ontology Designer
      summary: Returns the list of all ontology drafts made by the user
      operationId: getOntologyDrafts
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items: 
                  $ref: '#/components/schemas/RDFGraph'
    post:
      tags:
      - Ontology Designer
      summary: Add to the list of all ontology drafts a new draft
      operationId: postOntologyDrafts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RDFGraph'
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items: 
                  $ref: '#/components/schemas/RDFGraph'
  /ontologyDraft/{ontologyName}:
    get:
      tags:
      - Ontology Designer
      summary: Returns the ontology draft {ontologyName}
      operationId: getOntologyDraft
      parameters:
      - name: ontologyName
        in: path
        required: true
        schema:
          type: string
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RDFGraph'
    put:
      tags:
      - Ontology Designer
      summary: Modify the ontology draft {ontologyName} (called when using the ontology builder to save the draft)
      operationId: putOntologyDraft
      parameters:
      - name: ontologyName
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RDFGraph'
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items: 
                  $ref: '#/components/schemas/RDFGraph'
    delete:
      tags:
      - Ontology Designer
      summary: Delete the ontology draft {ontologyName}
      operationId: deleteOntologyDraft
      parameters:
      - name: ontologyName
        in: path
        required: true
        schema:
          type: string
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items: 
                  $ref: '#/components/schemas/RDFGraph'
  /ontologyDraft/download:
    get:
      tags:
      - Ontology Designer
      summary: Download the ontology draft {ontologyName} converted in OWL2
      operationId: downloadOntologyDraft
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: string
                description: FileInfo object
  /owlOntology/{ontologyName}/version/fromRDFGraph:
    post:
      tags:
      - Ontology Designer
      summary: Add to the ontology a new version translated from the RDFGraph
      operationId: postOntologyVersionFromRDFGraph
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RDFGraph'
      parameters:
      - name: ontologyName
        in: path
        required: true
        schema:
          type: string
      - name: version
        description: Ontology version
        in: query
        required: true
        schema:
          type: string 
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: string
                description: FileInfo object
  /owlOntology/{ontologyName}/vkg/catalog:
    get:
      tags:
      - VKG
      summary: Returns the saved RDFGraph for VKGs exploration
      parameters:
      - name: ontologyName
        in: path
        required: true
        schema:
          type: string
      - name: version
        description: Ontology version
        in: query
        required: true
        schema:
          type: string 
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items: 
                  $ref: '#/components/schemas/VKGSnapshot'
    post:
      tags:
      - VKG
      summary: Save a new VKG exploration
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VKGSnapshot'  
      parameters:
      - name: ontologyName
        in: path
        required: true
        schema:
          type: string
      - name: version
        description: Ontology version
        in: query
        required: true
        schema:
          type: string 
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items: 
                  $ref: '#/components/schemas/VKGSnapshot'
    delete:
      tags:
      - VKG
      summary: Delete all the saved RDFGraph for VKGs exploration
      parameters:
      - name: ontologyName
        in: path
        required: true
        schema:
          type: string
      - name: version
        description: Ontology version
        in: query
        required: true
        schema:
          type: string 
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items: 
                  $ref: '#/components/schemas/VKGSnapshot'
  /owlOntology/{ontologyName}/vkg/catalog/export:
    get:
      tags:
      - VKG
      summary: Returns the catalog as a FileInfo
      parameters:
      - name: ontologyName
        in: path
        required: true
        schema:
          type: string
      - name: version
        description: Ontology version
        in: query
        required: true
        schema:
          type: string 
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: string
                description: A FileInfo that contains the VKGs catalog
  /owlOntology/{ontologyName}/vkg/catalog/import:
    post:
      tags:
      - VKG
      summary: Import a FileInfo in the ontology VKG's catalog
      requestBody:
        content:
          application/json:
            schema:
                type: string
                description: A FileInfo that contains the VKGs catalog
      parameters:
      - name: ontologyName
        in: path
        required: true
        schema:
          type: string
      - name: version
        description: Ontology version
        in: query
        required: true
        schema:
          type: string
      - name: additive
        in: query
        schema:
          type: boolean
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items: 
                  $ref: '#/components/schemas/VKGSnapshot'
  /owlOntology/{ontologyName}/vkg/catalog/{snapshotId}:
    delete:
      tags:
      - VKG
      summary: Delete the VKG exploration
      parameters:
      - name: ontologyName
        in: path
        required: true
        schema:
          type: string
      - name: version
        description: Ontology version
        in: query
        required: true
        schema:
          type: string 
      - name: snapshotId
        in: path
        required: true
        schema:
          type: integer
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items: 
                  $ref: '#/components/schemas/VKGSnapshot'
    put:
      tags:
      - VKG
      summary: Modify a VKG exploration
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VKGSnapshot'  
      parameters:
      - name: ontologyName
        in: path
        required: true
        schema:
          type: string
      - name: version
        description: Ontology version
        in: query
        required: true
        schema:
          type: string 
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items: 
                  $ref: '#/components/schemas/VKGSnapshot'

  /endpoint/{name}/cquery/{queryID}/results/rdfGraph:
    get:
      tags:
      - VKG
      summary: Returns RDFGraph for CONSTRUCT visualization
      operationId: getRDFGraphConstruct
      parameters:
      - name: name
        description: Endpoint name
        in: path
        required: true
        schema:
          type: string
      - name: queryID
        description: Query execution id
        in: path
        required: true
        schema:
          type: string
      - name: pageSize
        in: query
        required: true
        schema:
          type: integer
      - name: pageNumber
        in: query
        required: true
        schema:
          type: integer
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RDFGraph'
components:
  schemas:
    RDFGraph:
      type: object
      required:
        - entities
        - diagrams
        - modelType
        - metadata
      properties:
        diagrams:
          type: array
          items:
            $ref: "#/components/schemas/Diagram"
        entities:
          type: array
          items:
            $ref: "#/components/schemas/Entity"
        classInstanceEntities:
          type: array
          items:
            $ref: "#/components/schemas/ClassInstanceEntity"
        metadata:
          type: object
          required:
            - namespaces
          properties:
            name:
              type: string
            iri:
              type: string
            version:
              type: string
            languages:
              type: array
              items:
                type: string
            defaultLanguage:
              type: string
            namespaces:
              type: array
              items:
                $ref: "#/components/schemas/Namespace"
            annotations:
              type: array
              items:
                $ref: "#/components/schemas/Annotation"
        config:
          type: object
          properties:
            themes:
              type: array
              items:
                $ref: "#/components/schemas/Theme"
            selectedTheme:
              type: string
            language:
              type: string
            entityNameType:
              type: string
              enum: [ label, prefixed_iri, full_iri ]
            renderers:
              type: array
              items:
                type: string
            widgets:
              type: object
            filters:
              type: array
              items:
                type: string
                enum:
                  [
                    "all",
                    "data-property",
                    "value-domain",
                    "individual",
                    "universal_quantifier",
                    "complement",
                    "has-key",
                  ]
        selectedDiagramId:
          type: integer
        modelType:
          type: string
          enum: ["ontology", "vkg", "rdf"]
        # actions:
        #   type: array
        #   items:
        #     $ref: "#/components/schemas/Action"
    Theme:
      type: object
      required:
        - id
      properties:
        id:
          type: string
        name:
          type: string
        colours:
          type: object
    Viewport:
      type: object
      required:
        - pan
        - zoom
      properties:
        pan:
          $ref: "#/components/schemas/Position"
        zoom:
          type: number
          format: float
    Diagram:
      type: object
      required:
        - id
        - name
        - elements
      properties:
        id:
          type: integer
        name:
          type: string
        nodes:
          type: array
          items:
            $ref: "#/components/schemas/Node"
        edges:
          type: array
          items:
            $ref: "#/components/schemas/Edge"
        lastViewportState:
          $ref: "#/components/schemas/Viewport"
    Element:
      type: object
      required:
        - id
        - type
      properties:
        id:
          type: string
        originalId:
          type: string
          description:
            In case of replicated elements, this is the ID of the original
            element replicated in multiple occurrences, all of them with
            different IDs
        diagramId:
          type: integer
        displayedName:
          type: string
        iri:
          type: string
        type:
          type: string
          $ref: "#/components/schemas/TypesEnum"
    Edge:
      type: object
      allOf:
        - $ref: "#/components/schemas/Element"
        - type: object
          required:
            - sourceId
            - targetId
          properties:
            sourceId:
              type: string
            targetId:
              type: string
            breakpoints:
              type: array
              items:
                $ref: "#/components/schemas/Position"
    Node:
      type: object
      allOf:
        - $ref: "#/components/schemas/Element"
        - type: object
          properties:
            position:
              $ref: "#/components/schemas/Position"
            labelPosition:
              $ref: "#/components/schemas/Position"
    Namespace:
      type: object
      required:
        - value
        - prefixes
      properties:
        value:
          type: string
        prefixes:
          type: array
          items:
            type: string
    Entity:
      type: object
      required:
        - fullIri
      properties:
        fullIri:
          type: string
        annotations:
          type: array
          items:
            $ref: "#/components/schemas/Annotation"
        datatype:
          type: string
        isDataPropertyFunctional:
          type: boolean
        functionProperties:
          type: array
          items:
            $ref: "#/components/schemas/FunctionPropertiesEnum"
    ClassInstanceEntity:
      type: object
      allOf:
        - $ref: "#/components/schemas/Entity"
        - type: object
          properties:
            parentClasses:
              type: array
              items:
                type: string
            dataProperties:
              type: array
              items:
                $ref: "#/components/schemas/DataPropertyValue"
            shortIri:
              type: string
    FunctionPropertiesEnum:
      type: string
      enum:
        - functional
        - inverseFunctional
        - transitive
        - symmetric
        - asymmetric
        - reflexive
        - irreflexive
    Annotation:
      type: object
      required:
        - lexicalForm
        - property
      properties:
        lexicalForm:
          type: string
        property:
          type: string
          example: rdfs:label
        language:
          type: string
        datatype:
          type: string
    DataPropertyValue:
      type: object
      required:
        - value
        - iri
      properties:
        value:
          type: string
        iri:
          type: string
        language:
          type: string
        datatype:
          type: string
    TypesEnum:
      description: 
        Contiene tutti i tipi di nodi/archi orginirari dal Graphol per evitare di duplicare gli enumeratori.
        Nella rappresentazione Floaty/vkg vengono usati questi valori.

        NODI
          class
          data-property
          class-instance (vkg)
          individual (floaty)
          union
          disjoint-union

        ARCHI
          object-property
          instance-of
          input
          inclusion
          equivalence
          attribute-edge
          union
          disjoint-union
          complete-union
          complete-disjoint-union

      type: string
      enum:
        - class
        - object-property
        - data-property
        - individual
        - class-instance
        - domain-restriction
        - range-restriction
        - union
        - complete-union
        - disjoint-union
        - complete-disjoint-union
        - complement
        - intersection
        - enumeration
        - has-key
        - role-inverse
        - role-chain
        - datatype-restriction
        - value-domain
        - property-assertion
        - literal
        - facet
        - neutral
        - value
        - inclusion
        - equivalence
        - instance-of
        - input
        - same
        - different
        - membership
        - attribute-edge
    Position:
      type: object
      required:
        - x
        - y
      properties:
        x:
          type: number
          format: float
        y:
          type: number
          format: float      

    Hierarchy:
      type: object
      required:
        - id
        - type
        - inputs
        - superclasses
      properties:
        id:
          type: string
        type:
          $ref: "#/components/schemas/TypesEnum"
        inputs:
          type: array
          items:
            $ref: "#/components/schemas/Entity"
        superclasses:
          type: array
          items:
            required:
              - classEntity
              - complete
            properties:
              classEntity:
                $ref: "#/components/schemas/Entity"
              complete:
                type: boolean

    # Action:
    #   description:
    #     Actions describes what user has done on a single element or element's metadata.
    #     The user can add, edit or remove something.
    #     The "something" is described by the operation involved in the action, it can be
    #     an operation over an entity, a diagram, a hierarchy and so on.

    #     Reverting an action means reverting the operation that has been done and it
    #     depends on the type of the action.
    #     - Add => Remove
    #     - Remove => Add
    #     - Edit => restore the previous state of the subject of the operation made
    #   type: object
    #   properties:
    #     operationType:
    #       type: string
    #       enum: ["add", "edit", "remove"]
    #     operation:
    #       description:
    #         Operations differ by their subject, that is the object on which
    #         the operation take place (if the user perform the action of adding a diagram,
    #         the subject of the operation will be the diagram).
    #         The previousState of a operation must be set in case of editing a single field
    #         of the subject, it is not needed in case of 'add' or 'remove' actions.
    #       type: object
    #       oneOf:
    #         - $ref: "#/components/schemas/ElementOp"
    #         - $ref: "#/components/schemas/EntityOp"
    #         - $ref: "#/components/schemas/DiagramOp"
    #         - $ref: "#/components/schemas/HierarchyOp"
    #         - $ref: "#/components/schemas/AnnotationOp"
    #         - $ref: "#/components/schemas/PropertyOp"
    #         - $ref: "#/components/schemas/NamespaceOp"
    #     user:
    #       type: object
    #       required:
    #         - name
    #       properties:
    #         name:
    #           type: string
    #         firstName:
    #           type: string
    #         lastName:
    #           type: string
    #         email:
    #           type: string
    #     timestamp:
    #       type: number

    ElementOp:
      type: object
      required:
        - subject
      properties:
        subject:
          oneOf:
            - $ref: "#/components/schemas/Node"
            - $ref: "#/components/schemas/Edge"
            - $ref: "#/components/schemas/Hierarchy"
        previousState:
          oneOf:
            - $ref: "#/components/schemas/Node"
            - $ref: "#/components/schemas/Edge"
        involvedElements:
          description:
            Array of other elements involved in the operation. Only for Remove actions.
            The remove action on an Entity might involve other elements.
            i.e. if the class removed was the superclass of a hierarchy, the whole hierarchy might become not valid"
          type: array
          items:
            oneOf:
              - $ref: "#/components/schemas/Node"
              - $ref: "#/components/schemas/Edge"
              - $ref: "#/components/schemas/Hierarchy"

    EntityOp:
      type: object
      required:
        - subject
        - diagramId
      properties:
        subject:
          $ref: "#/components/schemas/Entity"
        previousState:
          $ref: "#/components/schemas/Entity"
        involvedElements:
          description:
            Array of other elements involved in the operation. Only for Remove actions.
            The remove action on an Entity might involve other elements.
            i.e. if the class removed was the superclass of a hierarchy, the whole hierarchy might become not valid"
          type: array
          items:
            oneOf:
              - $ref: "#/components/schemas/Node"
              - $ref: "#/components/schemas/Edge"
              - $ref: "#/components/schemas/Hierarchy"

    DiagramOp:
      type: object
      required:
        - subject
      properties:
        subject:
          $ref: "#/components/schemas/Diagram"
        previousState:
          $ref: "#/components/schemas/Diagram"

    HierarchyOp:
      type: object
      required:
        - subject
        - diagramId
      properties:
        subject:
          $ref: "#/components/schemas/Hierarchy"
        diagramId:
          type: string
        previousState:
          $ref: "#/components/schemas/Hierarchy"

    AnnotationOp:
      type: object
      required:
        - subject
      properties:
        subject:
          $ref: "#/components/schemas/Annotation"
        previousState:
          $ref: "#/components/schemas/Annotation"
        entity:
          $ref: "#/components/schemas/Entity"

    PropertyOp:
      type: object
      required:
        - subject
      properties:
        subject:
          $ref: "#/components/schemas/Entity"
        previousState:
          $ref: "#/components/schemas/Entity"

    NamespaceOp:
      type: object
      required:
        - subject
      properties:
        subject:
          $ref: "#/components/schemas/Namespace"
        previousState:
          $ref: "#/components/schemas/Namespace"
    
    VKGSnapshot:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        lastModification:
          type: integer
          format: int64
        rdfGraph:
          $ref: '#/components/schemas/RDFGraph'
