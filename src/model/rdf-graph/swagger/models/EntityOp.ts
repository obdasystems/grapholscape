/* tslint:disable */
/* eslint-disable */
/**
 * Grapholscape API model
 * This is the API for retaining a Grapholscape\'s loaded ontology (or graph) in order to restart navigation from a previous state.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: obdasystems@info.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ElementOpSubject } from './ElementOpSubject';
import {
    ElementOpSubjectFromJSON,
    ElementOpSubjectFromJSONTyped,
    ElementOpSubjectToJSON,
} from './ElementOpSubject';
import type { Entity } from './Entity';
import {
    EntityFromJSON,
    EntityFromJSONTyped,
    EntityToJSON,
} from './Entity';

/**
 * 
 * @export
 * @interface EntityOp
 */
export interface EntityOp {
    /**
     * 
     * @type {Entity}
     * @memberof EntityOp
     */
    subject: Entity;
    /**
     * 
     * @type {Entity}
     * @memberof EntityOp
     */
    previousState?: Entity;
    /**
     * Array of other elements involved in the operation. Only for Remove actions. The remove action on an Entity might involve other elements. i.e. if the class removed was the superclass of a hierarchy, the whole hierarchy might become not valid"
     * @type {Array<ElementOpSubject>}
     * @memberof EntityOp
     */
    involvedElements?: Array<ElementOpSubject>;
}

/**
 * Check if a given object implements the EntityOp interface.
 */
export function instanceOfEntityOp(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "subject" in value;

    return isInstance;
}

export function EntityOpFromJSON(json: any): EntityOp {
    return EntityOpFromJSONTyped(json, false);
}

export function EntityOpFromJSONTyped(json: any, ignoreDiscriminator: boolean): EntityOp {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'subject': EntityFromJSON(json['subject']),
        'previousState': !exists(json, 'previousState') ? undefined : EntityFromJSON(json['previousState']),
        'involvedElements': !exists(json, 'involvedElements') ? undefined : ((json['involvedElements'] as Array<any>).map(ElementOpSubjectFromJSON)),
    };
}

export function EntityOpToJSON(value?: EntityOp | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'subject': EntityToJSON(value.subject),
        'previousState': EntityToJSON(value.previousState),
        'involvedElements': value.involvedElements === undefined ? undefined : ((value.involvedElements as Array<any>).map(ElementOpSubjectToJSON)),
    };
}

