/* tslint:disable */
/* eslint-disable */
/**
 * VKG API model
 * This is the API for managing virtual knowledge graphs VKGs. VKGs are  crwated by exploring the data through the interface and then saved through this API.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@obdasystems.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { OntologyPath } from './OntologyPath';
import {
    OntologyPathFromJSON,
    OntologyPathFromJSONTyped,
    OntologyPathToJSON,
} from './OntologyPath';

/**
 * 
 * @export
 * @interface BasePropertyInfo
 */
export interface BasePropertyInfo {
    /**
     * 
     * @type {boolean}
     * @memberof BasePropertyInfo
     */
    inherited?: boolean;
    /**
     * 
     * @type {string}
     * @memberof BasePropertyInfo
     */
    dataPropertyIri?: string;
    /**
     * 
     * @type {OntologyPath}
     * @memberof BasePropertyInfo
     */
    pathToDataProperty?: OntologyPath;
    /**
     * 
     * @type {boolean}
     * @memberof BasePropertyInfo
     */
    log?: boolean;
}

/**
 * Check if a given object implements the BasePropertyInfo interface.
 */
export function instanceOfBasePropertyInfo(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function BasePropertyInfoFromJSON(json: any): BasePropertyInfo {
    return BasePropertyInfoFromJSONTyped(json, false);
}

export function BasePropertyInfoFromJSONTyped(json: any, ignoreDiscriminator: boolean): BasePropertyInfo {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'inherited': !exists(json, 'inherited') ? undefined : json['inherited'],
        'dataPropertyIri': !exists(json, 'dataPropertyIri') ? undefined : json['dataPropertyIri'],
        'pathToDataProperty': !exists(json, 'pathToDataProperty') ? undefined : OntologyPathFromJSON(json['pathToDataProperty']),
        'log': !exists(json, 'log') ? undefined : json['log'],
    };
}

export function BasePropertyInfoToJSON(value?: BasePropertyInfo | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'inherited': value.inherited,
        'dataPropertyIri': value.dataPropertyIri,
        'pathToDataProperty': OntologyPathToJSON(value.pathToDataProperty),
        'log': value.log,
    };
}

