/* tslint:disable */
/* eslint-disable */
/**
 * VKG API model
 * This is the API for managing virtual knowledge graphs VKGs. VKGs are  crwated by exploring the data through the interface and then saved through this API.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@obdasystems.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Edge } from './Edge';
import {
    EdgeFromJSON,
    EdgeFromJSONTyped,
    EdgeToJSON,
} from './Edge';
import type { Node } from './Node';
import {
    NodeFromJSON,
    NodeFromJSONTyped,
    NodeToJSON,
} from './Node';
import type { Viewport } from './Viewport';
import {
    ViewportFromJSON,
    ViewportFromJSONTyped,
    ViewportToJSON,
} from './Viewport';

/**
 * 
 * @export
 * @interface Diagram
 */
export interface Diagram {
    /**
     * 
     * @type {number}
     * @memberof Diagram
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof Diagram
     */
    name: string;
    /**
     * 
     * @type {Array<Node>}
     * @memberof Diagram
     */
    nodes?: Array<Node>;
    /**
     * 
     * @type {Array<Edge>}
     * @memberof Diagram
     */
    edges?: Array<Edge>;
    /**
     * 
     * @type {Viewport}
     * @memberof Diagram
     */
    lastViewportState?: Viewport;
}

/**
 * Check if a given object implements the Diagram interface.
 */
export function instanceOfDiagram(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "name" in value;

    return isInstance;
}

export function DiagramFromJSON(json: any): Diagram {
    return DiagramFromJSONTyped(json, false);
}

export function DiagramFromJSONTyped(json: any, ignoreDiscriminator: boolean): Diagram {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'name': json['name'],
        'nodes': !exists(json, 'nodes') ? undefined : ((json['nodes'] as Array<any>).map(NodeFromJSON)),
        'edges': !exists(json, 'edges') ? undefined : ((json['edges'] as Array<any>).map(EdgeFromJSON)),
        'lastViewportState': !exists(json, 'lastViewportState') ? undefined : ViewportFromJSON(json['lastViewportState']),
    };
}

export function DiagramToJSON(value?: Diagram | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'name': value.name,
        'nodes': value.nodes === undefined ? undefined : ((value.nodes as Array<any>).map(NodeToJSON)),
        'edges': value.edges === undefined ? undefined : ((value.edges as Array<any>).map(EdgeToJSON)),
        'lastViewportState': ViewportToJSON(value.lastViewportState),
    };
}

