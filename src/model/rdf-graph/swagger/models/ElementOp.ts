/* tslint:disable */
/* eslint-disable */
/**
 * Grapholscape API model
 * This is the API for retaining a Grapholscape\'s loaded ontology (or graph) in order to restart navigation from a previous state.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: obdasystems@info.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ElementOpSubject } from './ElementOpSubject';
import {
    ElementOpSubjectFromJSON,
    ElementOpSubjectFromJSONTyped,
    ElementOpSubjectToJSON,
} from './ElementOpSubject';

/**
 * 
 * @export
 * @interface ElementOp
 */
export interface ElementOp {
    /**
     * 
     * @type {ElementOpSubject}
     * @memberof ElementOp
     */
    subject: ElementOpSubject;
    /**
     * 
     * @type {ElementOpSubject}
     * @memberof ElementOp
     */
    previousState?: ElementOpSubject;
    /**
     * Array of other elements involved in the operation. Only for Remove actions. The remove action on an Entity might involve other elements. i.e. if the class removed was the superclass of a hierarchy, the whole hierarchy might become not valid"
     * @type {Array<ElementOpSubject>}
     * @memberof ElementOp
     */
    involvedElements?: Array<ElementOpSubject>;
}

/**
 * Check if a given object implements the ElementOp interface.
 */
export function instanceOfElementOp(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "subject" in value;

    return isInstance;
}

export function ElementOpFromJSON(json: any): ElementOp {
    return ElementOpFromJSONTyped(json, false);
}

export function ElementOpFromJSONTyped(json: any, ignoreDiscriminator: boolean): ElementOp {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'subject': ElementOpSubjectFromJSON(json['subject']),
        'previousState': !exists(json, 'previousState') ? undefined : ElementOpSubjectFromJSON(json['previousState']),
        'involvedElements': !exists(json, 'involvedElements') ? undefined : ((json['involvedElements'] as Array<any>).map(ElementOpSubjectFromJSON)),
    };
}

export function ElementOpToJSON(value?: ElementOp | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'subject': ElementOpSubjectToJSON(value.subject),
        'previousState': ElementOpSubjectToJSON(value.previousState),
        'involvedElements': value.involvedElements === undefined ? undefined : ((value.involvedElements as Array<any>).map(ElementOpSubjectToJSON)),
    };
}

