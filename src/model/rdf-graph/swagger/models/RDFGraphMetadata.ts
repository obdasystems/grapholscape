/* tslint:disable */
/* eslint-disable */
/**
 * Grapholscape API model
 * This is the API for retaining a Grapholscape\'s loaded ontology (or graph) in order to restart navigation from a previous state.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: obdasystems@info.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Annotation } from './Annotation';
import {
    AnnotationFromJSON,
    AnnotationFromJSONTyped,
    AnnotationToJSON,
} from './Annotation';
import type { Namespace } from './Namespace';
import {
    NamespaceFromJSON,
    NamespaceFromJSONTyped,
    NamespaceToJSON,
} from './Namespace';

/**
 * 
 * @export
 * @interface RDFGraphMetadata
 */
export interface RDFGraphMetadata {
    /**
     * 
     * @type {string}
     * @memberof RDFGraphMetadata
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof RDFGraphMetadata
     */
    iri?: string;
    /**
     * 
     * @type {string}
     * @memberof RDFGraphMetadata
     */
    version: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof RDFGraphMetadata
     */
    languages?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof RDFGraphMetadata
     */
    defaultLanguage?: string;
    /**
     * 
     * @type {Array<Namespace>}
     * @memberof RDFGraphMetadata
     */
    namespaces: Array<Namespace>;
    /**
     * 
     * @type {Array<Annotation>}
     * @memberof RDFGraphMetadata
     */
    annotations?: Array<Annotation>;
}

/**
 * Check if a given object implements the RDFGraphMetadata interface.
 */
export function instanceOfRDFGraphMetadata(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "version" in value;
    isInstance = isInstance && "namespaces" in value;

    return isInstance;
}

export function RDFGraphMetadataFromJSON(json: any): RDFGraphMetadata {
    return RDFGraphMetadataFromJSONTyped(json, false);
}

export function RDFGraphMetadataFromJSONTyped(json: any, ignoreDiscriminator: boolean): RDFGraphMetadata {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'name': json['name'],
        'iri': !exists(json, 'iri') ? undefined : json['iri'],
        'version': json['version'],
        'languages': !exists(json, 'languages') ? undefined : json['languages'],
        'defaultLanguage': !exists(json, 'defaultLanguage') ? undefined : json['defaultLanguage'],
        'namespaces': ((json['namespaces'] as Array<any>).map(NamespaceFromJSON)),
        'annotations': !exists(json, 'annotations') ? undefined : ((json['annotations'] as Array<any>).map(AnnotationFromJSON)),
    };
}

export function RDFGraphMetadataToJSON(value?: RDFGraphMetadata | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'name': value.name,
        'iri': value.iri,
        'version': value.version,
        'languages': value.languages,
        'defaultLanguage': value.defaultLanguage,
        'namespaces': ((value.namespaces as Array<any>).map(NamespaceToJSON)),
        'annotations': value.annotations === undefined ? undefined : ((value.annotations as Array<any>).map(AnnotationToJSON)),
    };
}

