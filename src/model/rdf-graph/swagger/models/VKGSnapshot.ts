/* tslint:disable */
/* eslint-disable */
/**
 * Grapholscape API model
 * This is the API for retaining a Grapholscape\'s loaded ontology (or graph) in order to restart navigation from a previous state.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: obdasystems@info.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { RDFGraph } from './RDFGraph';
import {
    RDFGraphFromJSON,
    RDFGraphFromJSONTyped,
    RDFGraphToJSON,
} from './RDFGraph';

/**
 * 
 * @export
 * @interface VKGSnapshot
 */
export interface VKGSnapshot {
    /**
     * 
     * @type {string}
     * @memberof VKGSnapshot
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof VKGSnapshot
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof VKGSnapshot
     */
    description?: string;
    /**
     * 
     * @type {number}
     * @memberof VKGSnapshot
     */
    lastModification?: number;
    /**
     * 
     * @type {RDFGraph}
     * @memberof VKGSnapshot
     */
    rdfGraph?: RDFGraph;
}

/**
 * Check if a given object implements the VKGSnapshot interface.
 */
export function instanceOfVKGSnapshot(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function VKGSnapshotFromJSON(json: any): VKGSnapshot {
    return VKGSnapshotFromJSONTyped(json, false);
}

export function VKGSnapshotFromJSONTyped(json: any, ignoreDiscriminator: boolean): VKGSnapshot {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'lastModification': !exists(json, 'lastModification') ? undefined : json['lastModification'],
        'rdfGraph': !exists(json, 'rdfGraph') ? undefined : RDFGraphFromJSON(json['rdfGraph']),
    };
}

export function VKGSnapshotToJSON(value?: VKGSnapshot | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'name': value.name,
        'description': value.description,
        'lastModification': value.lastModification,
        'rdfGraph': RDFGraphToJSON(value.rdfGraph),
    };
}

