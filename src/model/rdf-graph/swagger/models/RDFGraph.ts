/* tslint:disable */
/* eslint-disable */
/**
 * Grapholscape API model
 * This is the API for retaining a Grapholscape\'s loaded ontology (or graph) in order to restart navigation from a previous state.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: obdasystems@info.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Action } from './Action';
import {
    ActionFromJSON,
    ActionFromJSONTyped,
    ActionToJSON,
} from './Action';
import type { ClassInstanceEntity } from './ClassInstanceEntity';
import {
    ClassInstanceEntityFromJSON,
    ClassInstanceEntityFromJSONTyped,
    ClassInstanceEntityToJSON,
} from './ClassInstanceEntity';
import type { Diagram } from './Diagram';
import {
    DiagramFromJSON,
    DiagramFromJSONTyped,
    DiagramToJSON,
} from './Diagram';
import type { Entity } from './Entity';
import {
    EntityFromJSON,
    EntityFromJSONTyped,
    EntityToJSON,
} from './Entity';
import type { RDFGraphConfig } from './RDFGraphConfig';
import {
    RDFGraphConfigFromJSON,
    RDFGraphConfigFromJSONTyped,
    RDFGraphConfigToJSON,
} from './RDFGraphConfig';
import type { RDFGraphMetadata } from './RDFGraphMetadata';
import {
    RDFGraphMetadataFromJSON,
    RDFGraphMetadataFromJSONTyped,
    RDFGraphMetadataToJSON,
} from './RDFGraphMetadata';

/**
 * 
 * @export
 * @interface RDFGraph
 */
export interface RDFGraph {
    /**
     * 
     * @type {Array<Diagram>}
     * @memberof RDFGraph
     */
    diagrams: Array<Diagram>;
    /**
     * 
     * @type {Array<Entity>}
     * @memberof RDFGraph
     */
    entities: Array<Entity>;
    /**
     * 
     * @type {Array<ClassInstanceEntity>}
     * @memberof RDFGraph
     */
    classInstanceEntities?: Array<ClassInstanceEntity>;
    /**
     * 
     * @type {RDFGraphMetadata}
     * @memberof RDFGraph
     */
    metadata: RDFGraphMetadata;
    /**
     * 
     * @type {RDFGraphConfig}
     * @memberof RDFGraph
     */
    config?: RDFGraphConfig;
    /**
     * 
     * @type {number}
     * @memberof RDFGraph
     */
    selectedDiagramId?: number;
    /**
     * 
     * @type {string}
     * @memberof RDFGraph
     */
    modelType: RDFGraphModelTypeEnum;
    /**
     * 
     * @type {Array<Action>}
     * @memberof RDFGraph
     */
    actions?: Array<Action>;
    /**
     * 
     * @type {string}
     * @memberof RDFGraph
     */
    creator?: string;
}

/**
* @export
* @enum {string}
*/
export enum RDFGraphModelTypeEnum {
    ONTOLOGY = 'ontology',
    VKG = 'vkg',
    RDF = 'rdf'
}


/**
 * Check if a given object implements the RDFGraph interface.
 */
export function instanceOfRDFGraph(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "diagrams" in value;
    isInstance = isInstance && "entities" in value;
    isInstance = isInstance && "metadata" in value;
    isInstance = isInstance && "modelType" in value;

    return isInstance;
}

export function RDFGraphFromJSON(json: any): RDFGraph {
    return RDFGraphFromJSONTyped(json, false);
}

export function RDFGraphFromJSONTyped(json: any, ignoreDiscriminator: boolean): RDFGraph {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'diagrams': ((json['diagrams'] as Array<any>).map(DiagramFromJSON)),
        'entities': ((json['entities'] as Array<any>).map(EntityFromJSON)),
        'classInstanceEntities': !exists(json, 'classInstanceEntities') ? undefined : ((json['classInstanceEntities'] as Array<any>).map(ClassInstanceEntityFromJSON)),
        'metadata': RDFGraphMetadataFromJSON(json['metadata']),
        'config': !exists(json, 'config') ? undefined : RDFGraphConfigFromJSON(json['config']),
        'selectedDiagramId': !exists(json, 'selectedDiagramId') ? undefined : json['selectedDiagramId'],
        'modelType': json['modelType'],
        'actions': !exists(json, 'actions') ? undefined : ((json['actions'] as Array<any>).map(ActionFromJSON)),
        'creator': !exists(json, 'creator') ? undefined : json['creator'],
    };
}

export function RDFGraphToJSON(value?: RDFGraph | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'diagrams': ((value.diagrams as Array<any>).map(DiagramToJSON)),
        'entities': ((value.entities as Array<any>).map(EntityToJSON)),
        'classInstanceEntities': value.classInstanceEntities === undefined ? undefined : ((value.classInstanceEntities as Array<any>).map(ClassInstanceEntityToJSON)),
        'metadata': RDFGraphMetadataToJSON(value.metadata),
        'config': RDFGraphConfigToJSON(value.config),
        'selectedDiagramId': value.selectedDiagramId,
        'modelType': value.modelType,
        'actions': value.actions === undefined ? undefined : ((value.actions as Array<any>).map(ActionToJSON)),
        'creator': value.creator,
    };
}

