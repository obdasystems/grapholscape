/* tslint:disable */
/* eslint-disable */
/**
 * VKG API model
 * This is the API for managing virtual knowledge graphs VKGs. VKGs are  crwated by exploring the data through the interface and then saved through this API.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@obdasystems.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Position } from './Position';
import {
    PositionFromJSON,
    PositionFromJSONTyped,
    PositionToJSON,
} from './Position';

/**
 * 
 * @export
 * @interface EdgeAllOf
 */
export interface EdgeAllOf {
    /**
     * 
     * @type {string}
     * @memberof EdgeAllOf
     */
    sourceId: string;
    /**
     * 
     * @type {string}
     * @memberof EdgeAllOf
     */
    targetId: string;
    /**
     * 
     * @type {Array<Position>}
     * @memberof EdgeAllOf
     */
    breakpoints?: Array<Position>;
    /**
     * 
     * @type {boolean}
     * @memberof EdgeAllOf
     */
    domainTyped?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof EdgeAllOf
     */
    rangeTyped?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof EdgeAllOf
     */
    domainMandatory?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof EdgeAllOf
     */
    rangeMandatory?: boolean;
}

/**
 * Check if a given object implements the EdgeAllOf interface.
 */
export function instanceOfEdgeAllOf(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "sourceId" in value;
    isInstance = isInstance && "targetId" in value;

    return isInstance;
}

export function EdgeAllOfFromJSON(json: any): EdgeAllOf {
    return EdgeAllOfFromJSONTyped(json, false);
}

export function EdgeAllOfFromJSONTyped(json: any, ignoreDiscriminator: boolean): EdgeAllOf {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'sourceId': json['sourceId'],
        'targetId': json['targetId'],
        'breakpoints': !exists(json, 'breakpoints') ? undefined : ((json['breakpoints'] as Array<any>).map(PositionFromJSON)),
        'domainTyped': !exists(json, 'domainTyped') ? undefined : json['domainTyped'],
        'rangeTyped': !exists(json, 'rangeTyped') ? undefined : json['rangeTyped'],
        'domainMandatory': !exists(json, 'domainMandatory') ? undefined : json['domainMandatory'],
        'rangeMandatory': !exists(json, 'rangeMandatory') ? undefined : json['rangeMandatory'],
    };
}

export function EdgeAllOfToJSON(value?: EdgeAllOf | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'sourceId': value.sourceId,
        'targetId': value.targetId,
        'breakpoints': value.breakpoints === undefined ? undefined : ((value.breakpoints as Array<any>).map(PositionToJSON)),
        'domainTyped': value.domainTyped,
        'rangeTyped': value.rangeTyped,
        'domainMandatory': value.domainMandatory,
        'rangeMandatory': value.rangeMandatory,
    };
}

