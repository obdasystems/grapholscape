/* tslint:disable */
/* eslint-disable */
/**
 * Grapholscape API model
 * This is the API for retaining a Grapholscape\'s loaded ontology (or graph) in order to restart navigation from a previous state.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: obdasystems@info.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Position } from './Position';
import {
    PositionFromJSON,
    PositionFromJSONTyped,
    PositionToJSON,
} from './Position';

/**
 * 
 * @export
 * @interface EdgeAllOf
 */
export interface EdgeAllOf {
    /**
     * 
     * @type {string}
     * @memberof EdgeAllOf
     */
    sourceId: string;
    /**
     * 
     * @type {string}
     * @memberof EdgeAllOf
     */
    targetId: string;
    /**
     * 
     * @type {Array<Position>}
     * @memberof EdgeAllOf
     */
    breakpoints?: Array<Position>;
}

/**
 * Check if a given object implements the EdgeAllOf interface.
 */
export function instanceOfEdgeAllOf(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "sourceId" in value;
    isInstance = isInstance && "targetId" in value;

    return isInstance;
}

export function EdgeAllOfFromJSON(json: any): EdgeAllOf {
    return EdgeAllOfFromJSONTyped(json, false);
}

export function EdgeAllOfFromJSONTyped(json: any, ignoreDiscriminator: boolean): EdgeAllOf {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'sourceId': json['sourceId'],
        'targetId': json['targetId'],
        'breakpoints': !exists(json, 'breakpoints') ? undefined : ((json['breakpoints'] as Array<any>).map(PositionFromJSON)),
    };
}

export function EdgeAllOfToJSON(value?: EdgeAllOf | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'sourceId': value.sourceId,
        'targetId': value.targetId,
        'breakpoints': value.breakpoints === undefined ? undefined : ((value.breakpoints as Array<any>).map(PositionToJSON)),
    };
}

