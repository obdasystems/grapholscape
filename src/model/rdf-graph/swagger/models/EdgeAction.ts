/* tslint:disable */
/* eslint-disable */
/**
 * Grapholscape API model
 * This is the API for retaining a Grapholscape\'s loaded ontology (or graph) in order to restart navigation from a previous state.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: obdasystems@info.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Action } from './Action';
import {
    ActionFromJSON,
    ActionFromJSONTyped,
    ActionToJSON,
} from './Action';
import type { ActionInvolvedElements } from './ActionInvolvedElements';
import {
    ActionInvolvedElementsFromJSON,
    ActionInvolvedElementsFromJSONTyped,
    ActionInvolvedElementsToJSON,
} from './ActionInvolvedElements';
import type { ActionUser } from './ActionUser';
import {
    ActionUserFromJSON,
    ActionUserFromJSONTyped,
    ActionUserToJSON,
} from './ActionUser';
import type { Edge } from './Edge';
import {
    EdgeFromJSON,
    EdgeFromJSONTyped,
    EdgeToJSON,
} from './Edge';

/**
 * 
 * @export
 * @interface EdgeAction
 */
export interface EdgeAction {
    /**
     * 
     * @type {Edge}
     * @memberof EdgeAction
     */
    subject: Edge;
    /**
     * 
     * @type {Edge}
     * @memberof EdgeAction
     */
    previousState?: Edge;
    /**
     * 
     * @type {string}
     * @memberof EdgeAction
     */
    operationType: EdgeActionOperationTypeEnum;
    /**
     * 
     * @type {ActionInvolvedElements}
     * @memberof EdgeAction
     */
    involvedElements?: ActionInvolvedElements;
    /**
     * 
     * @type {Array<Action>}
     * @memberof EdgeAction
     */
    subactions?: Array<Action>;
    /**
     * 
     * @type {ActionUser}
     * @memberof EdgeAction
     */
    user: ActionUser;
    /**
     * 
     * @type {number}
     * @memberof EdgeAction
     */
    timestamp: number;
}

/**
* @export
* @enum {string}
*/
export enum EdgeActionOperationTypeEnum {
    ADD = 'add',
    EDIT = 'edit',
    REMOVE = 'remove'
}


/**
 * Check if a given object implements the EdgeAction interface.
 */
export function instanceOfEdgeAction(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "subject" in value;
    isInstance = isInstance && "operationType" in value;
    isInstance = isInstance && "user" in value;
    isInstance = isInstance && "timestamp" in value;

    return isInstance;
}

export function EdgeActionFromJSON(json: any): EdgeAction {
    return EdgeActionFromJSONTyped(json, false);
}

export function EdgeActionFromJSONTyped(json: any, ignoreDiscriminator: boolean): EdgeAction {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'subject': EdgeFromJSON(json['subject']),
        'previousState': !exists(json, 'previousState') ? undefined : EdgeFromJSON(json['previousState']),
        'operationType': json['operationType'],
        'involvedElements': !exists(json, 'involvedElements') ? undefined : ActionInvolvedElementsFromJSON(json['involvedElements']),
        'subactions': !exists(json, 'subactions') ? undefined : ((json['subactions'] as Array<any>).map(ActionFromJSON)),
        'user': ActionUserFromJSON(json['user']),
        'timestamp': json['timestamp'],
    };
}

export function EdgeActionToJSON(value?: EdgeAction | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'subject': EdgeToJSON(value.subject),
        'previousState': EdgeToJSON(value.previousState),
        'operationType': value.operationType,
        'involvedElements': ActionInvolvedElementsToJSON(value.involvedElements),
        'subactions': value.subactions === undefined ? undefined : ((value.subactions as Array<any>).map(ActionToJSON)),
        'user': ActionUserToJSON(value.user),
        'timestamp': value.timestamp,
    };
}

