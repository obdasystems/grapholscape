/* tslint:disable */
/* eslint-disable */
/**
 * Grapholscape API model
 * This is the API for retaining a Grapholscape\'s loaded ontology (or graph) in order to restart navigation from a previous state.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: obdasystems@info.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface DataPropertyValue
 */
export interface DataPropertyValue {
    /**
     * 
     * @type {string}
     * @memberof DataPropertyValue
     */
    value: string;
    /**
     * 
     * @type {string}
     * @memberof DataPropertyValue
     */
    iri: string;
    /**
     * 
     * @type {string}
     * @memberof DataPropertyValue
     */
    language?: string;
    /**
     * 
     * @type {string}
     * @memberof DataPropertyValue
     */
    datatype?: string;
}

/**
 * Check if a given object implements the DataPropertyValue interface.
 */
export function instanceOfDataPropertyValue(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "value" in value;
    isInstance = isInstance && "iri" in value;

    return isInstance;
}

export function DataPropertyValueFromJSON(json: any): DataPropertyValue {
    return DataPropertyValueFromJSONTyped(json, false);
}

export function DataPropertyValueFromJSONTyped(json: any, ignoreDiscriminator: boolean): DataPropertyValue {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'value': json['value'],
        'iri': json['iri'],
        'language': !exists(json, 'language') ? undefined : json['language'],
        'datatype': !exists(json, 'datatype') ? undefined : json['datatype'],
    };
}

export function DataPropertyValueToJSON(value?: DataPropertyValue | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'value': value.value,
        'iri': value.iri,
        'language': value.language,
        'datatype': value.datatype,
    };
}

