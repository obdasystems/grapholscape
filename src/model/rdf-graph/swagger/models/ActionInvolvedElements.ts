/* tslint:disable */
/* eslint-disable */
/**
 * VKG API model
 * This is the API for managing virtual knowledge graphs VKGs. VKGs are  crwated by exploring the data through the interface and then saved through this API.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@obdasystems.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Edge } from './Edge';
import {
    EdgeFromJSON,
    EdgeFromJSONTyped,
    EdgeToJSON,
} from './Edge';
import type { Hierarchy } from './Hierarchy';
import {
    HierarchyFromJSON,
    HierarchyFromJSONTyped,
    HierarchyToJSON,
} from './Hierarchy';
import type { Node } from './Node';
import {
    NodeFromJSON,
    NodeFromJSONTyped,
    NodeToJSON,
} from './Node';

/**
 * Other elements involved in an action. Only for Remove actions. The remove action on an Entity might involve other elements. i.e. object properties on removed classes
 * @export
 * @interface ActionInvolvedElements
 */
export interface ActionInvolvedElements {
    /**
     * 
     * @type {Array<Node>}
     * @memberof ActionInvolvedElements
     */
    nodes?: Array<Node>;
    /**
     * 
     * @type {Array<Edge>}
     * @memberof ActionInvolvedElements
     */
    edges?: Array<Edge>;
    /**
     * 
     * @type {Array<Hierarchy>}
     * @memberof ActionInvolvedElements
     */
    hierarchies?: Array<Hierarchy>;
}

/**
 * Check if a given object implements the ActionInvolvedElements interface.
 */
export function instanceOfActionInvolvedElements(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ActionInvolvedElementsFromJSON(json: any): ActionInvolvedElements {
    return ActionInvolvedElementsFromJSONTyped(json, false);
}

export function ActionInvolvedElementsFromJSONTyped(json: any, ignoreDiscriminator: boolean): ActionInvolvedElements {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'nodes': !exists(json, 'nodes') ? undefined : ((json['nodes'] as Array<any>).map(NodeFromJSON)),
        'edges': !exists(json, 'edges') ? undefined : ((json['edges'] as Array<any>).map(EdgeFromJSON)),
        'hierarchies': !exists(json, 'Hierarchies') ? undefined : ((json['Hierarchies'] as Array<any>).map(HierarchyFromJSON)),
    };
}

export function ActionInvolvedElementsToJSON(value?: ActionInvolvedElements | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'nodes': value.nodes === undefined ? undefined : ((value.nodes as Array<any>).map(NodeToJSON)),
        'edges': value.edges === undefined ? undefined : ((value.edges as Array<any>).map(EdgeToJSON)),
        'Hierarchies': value.hierarchies === undefined ? undefined : ((value.hierarchies as Array<any>).map(HierarchyToJSON)),
    };
}

