/* tslint:disable */
/* eslint-disable */
/**
 * Grapholscape API model
 * This is the API for retaining a Grapholscape\'s loaded ontology (or graph) in order to restart navigation from a previous state.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: obdasystems@info.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ActionOperation } from './ActionOperation';
import {
    ActionOperationFromJSON,
    ActionOperationFromJSONTyped,
    ActionOperationToJSON,
} from './ActionOperation';
import type { ActionUser } from './ActionUser';
import {
    ActionUserFromJSON,
    ActionUserFromJSONTyped,
    ActionUserToJSON,
} from './ActionUser';

/**
 * Actions describes what user has done on a single element or element's metadata. The user can add, edit or remove something. The "something" is described by the operation involved in the action, it can be an operation over an entity, a diagram, a hierarchy and so on.
 * Reverting an action means reverting the operation that has been done and it depends on the type of the action. - Add => Remove - Remove => Add - Edit => restore the previous state of the subject of the operation made
 * @export
 * @interface Action
 */
export interface Action {
    /**
     * 
     * @type {string}
     * @memberof Action
     */
    operationType?: ActionOperationTypeEnum;
    /**
     * 
     * @type {ActionOperation}
     * @memberof Action
     */
    operation?: ActionOperation;
    /**
     * 
     * @type {Array<Action>}
     * @memberof Action
     */
    subactions?: Array<Action>;
    /**
     * 
     * @type {ActionUser}
     * @memberof Action
     */
    user?: ActionUser;
    /**
     * 
     * @type {number}
     * @memberof Action
     */
    timestamp?: number;
}

/**
* @export
* @enum {string}
*/
export enum ActionOperationTypeEnum {
    ADD = 'add',
    EDIT = 'edit',
    REMOVE = 'remove'
}


/**
 * Check if a given object implements the Action interface.
 */
export function instanceOfAction(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ActionFromJSON(json: any): Action {
    return ActionFromJSONTyped(json, false);
}

export function ActionFromJSONTyped(json: any, ignoreDiscriminator: boolean): Action {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'operationType': !exists(json, 'operationType') ? undefined : json['operationType'],
        'operation': !exists(json, 'operation') ? undefined : ActionOperationFromJSON(json['operation']),
        'subactions': !exists(json, 'subactions') ? undefined : ((json['subactions'] as Array<any>).map(ActionFromJSON)),
        'user': !exists(json, 'user') ? undefined : ActionUserFromJSON(json['user']),
        'timestamp': !exists(json, 'timestamp') ? undefined : json['timestamp'],
    };
}

export function ActionToJSON(value?: Action | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'operationType': value.operationType,
        'operation': ActionOperationToJSON(value.operation),
        'subactions': value.subactions === undefined ? undefined : ((value.subactions as Array<any>).map(ActionToJSON)),
        'user': ActionUserToJSON(value.user),
        'timestamp': value.timestamp,
    };
}

