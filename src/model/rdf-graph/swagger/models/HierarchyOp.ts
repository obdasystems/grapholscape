/* tslint:disable */
/* eslint-disable */
/**
 * Grapholscape API model
 * This is the API for retaining a Grapholscape\'s loaded ontology (or graph) in order to restart navigation from a previous state.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: obdasystems@info.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Hierarchy } from './Hierarchy';
import {
    HierarchyFromJSON,
    HierarchyFromJSONTyped,
    HierarchyToJSON,
} from './Hierarchy';

/**
 * 
 * @export
 * @interface HierarchyOp
 */
export interface HierarchyOp {
    /**
     * 
     * @type {Hierarchy}
     * @memberof HierarchyOp
     */
    subject: Hierarchy;
    /**
     * 
     * @type {string}
     * @memberof HierarchyOp
     */
    diagramId: string;
    /**
     * 
     * @type {Hierarchy}
     * @memberof HierarchyOp
     */
    previousState?: Hierarchy;
}

/**
 * Check if a given object implements the HierarchyOp interface.
 */
export function instanceOfHierarchyOp(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "subject" in value;
    isInstance = isInstance && "diagramId" in value;

    return isInstance;
}

export function HierarchyOpFromJSON(json: any): HierarchyOp {
    return HierarchyOpFromJSONTyped(json, false);
}

export function HierarchyOpFromJSONTyped(json: any, ignoreDiscriminator: boolean): HierarchyOp {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'subject': HierarchyFromJSON(json['subject']),
        'diagramId': json['diagramId'],
        'previousState': !exists(json, 'previousState') ? undefined : HierarchyFromJSON(json['previousState']),
    };
}

export function HierarchyOpToJSON(value?: HierarchyOp | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'subject': HierarchyToJSON(value.subject),
        'diagramId': value.diagramId,
        'previousState': HierarchyToJSON(value.previousState),
    };
}

