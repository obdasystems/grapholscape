/* tslint:disable */
/* eslint-disable */
/**
 * Grapholscape API model
 * This is the API for retaining a Grapholscape\'s loaded ontology (or graph) in order to restart navigation from a previous state.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: obdasystems@info.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import {
    AnnotationOp,
    instanceOfAnnotationOp,
    AnnotationOpFromJSON,
    AnnotationOpFromJSONTyped,
    AnnotationOpToJSON,
} from './AnnotationOp';
import {
    DiagramOp,
    instanceOfDiagramOp,
    DiagramOpFromJSON,
    DiagramOpFromJSONTyped,
    DiagramOpToJSON,
} from './DiagramOp';
import {
    ElementOp,
    instanceOfElementOp,
    ElementOpFromJSON,
    ElementOpFromJSONTyped,
    ElementOpToJSON,
} from './ElementOp';
import {
    EntityOp,
    instanceOfEntityOp,
    EntityOpFromJSON,
    EntityOpFromJSONTyped,
    EntityOpToJSON,
} from './EntityOp';
import {
    HierarchyOp,
    instanceOfHierarchyOp,
    HierarchyOpFromJSON,
    HierarchyOpFromJSONTyped,
    HierarchyOpToJSON,
} from './HierarchyOp';
import {
    NamespaceOp,
    instanceOfNamespaceOp,
    NamespaceOpFromJSON,
    NamespaceOpFromJSONTyped,
    NamespaceOpToJSON,
} from './NamespaceOp';
import {
    PropertyOp,
    instanceOfPropertyOp,
    PropertyOpFromJSON,
    PropertyOpFromJSONTyped,
    PropertyOpToJSON,
} from './PropertyOp';

/**
 * @type ActionOperation
 * Operations differ by their subject, that is the object on which the operation take place (if the user perform the action of adding a diagram, the subject of the operation will be the diagram). The previousState of a operation must be set in case of editing a single field of the subject, it is not needed in case of 'add' or 'remove' actions.
 * @export
 */
export type ActionOperation = AnnotationOp | DiagramOp | ElementOp | EntityOp | HierarchyOp | NamespaceOp | PropertyOp;

export function ActionOperationFromJSON(json: any): ActionOperation {
    return ActionOperationFromJSONTyped(json, false);
}

export function ActionOperationFromJSONTyped(json: any, ignoreDiscriminator: boolean): ActionOperation {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return { ...AnnotationOpFromJSONTyped(json, true), ...DiagramOpFromJSONTyped(json, true), ...ElementOpFromJSONTyped(json, true), ...EntityOpFromJSONTyped(json, true), ...HierarchyOpFromJSONTyped(json, true), ...NamespaceOpFromJSONTyped(json, true), ...PropertyOpFromJSONTyped(json, true) };
}

export function ActionOperationToJSON(value?: ActionOperation | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }

    if (instanceOfAnnotationOp(value)) {
        return AnnotationOpToJSON(value as AnnotationOp);
    }
    if (instanceOfDiagramOp(value)) {
        return DiagramOpToJSON(value as DiagramOp);
    }
    if (instanceOfElementOp(value)) {
        return ElementOpToJSON(value as ElementOp);
    }
    if (instanceOfEntityOp(value)) {
        return EntityOpToJSON(value as EntityOp);
    }
    if (instanceOfHierarchyOp(value)) {
        return HierarchyOpToJSON(value as HierarchyOp);
    }
    if (instanceOfNamespaceOp(value)) {
        return NamespaceOpToJSON(value as NamespaceOp);
    }
    if (instanceOfPropertyOp(value)) {
        return PropertyOpToJSON(value as PropertyOp);
    }

    return {};
}

