/* tslint:disable */
/* eslint-disable */
/**
 * VKG API model
 * This is the API for managing virtual knowledge graphs VKGs. VKGs are  crwated by exploring the data through the interface and then saved through this API.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@obdasystems.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Annotation } from './Annotation';
import {
    AnnotationFromJSON,
    AnnotationFromJSONTyped,
    AnnotationToJSON,
} from './Annotation';
import type { FunctionPropertiesEnum } from './FunctionPropertiesEnum';
import {
    FunctionPropertiesEnumFromJSON,
    FunctionPropertiesEnumFromJSONTyped,
    FunctionPropertiesEnumToJSON,
} from './FunctionPropertiesEnum';

/**
 * 
 * @export
 * @interface GrapholscapeEntity
 */
export interface GrapholscapeEntity {
    /**
     * 
     * @type {string}
     * @memberof GrapholscapeEntity
     */
    fullIri: string;
    /**
     * 
     * @type {Array<Annotation>}
     * @memberof GrapholscapeEntity
     */
    annotations?: Array<Annotation>;
    /**
     * 
     * @type {string}
     * @memberof GrapholscapeEntity
     */
    datatype?: string;
    /**
     * 
     * @type {boolean}
     * @memberof GrapholscapeEntity
     */
    isDataPropertyFunctional?: boolean;
    /**
     * 
     * @type {Array<FunctionPropertiesEnum>}
     * @memberof GrapholscapeEntity
     */
    functionProperties?: Array<FunctionPropertiesEnum>;
}

/**
 * Check if a given object implements the GrapholscapeEntity interface.
 */
export function instanceOfGrapholscapeEntity(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "fullIri" in value;

    return isInstance;
}

export function GrapholscapeEntityFromJSON(json: any): GrapholscapeEntity {
    return GrapholscapeEntityFromJSONTyped(json, false);
}

export function GrapholscapeEntityFromJSONTyped(json: any, ignoreDiscriminator: boolean): GrapholscapeEntity {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'fullIri': json['fullIri'],
        'annotations': !exists(json, 'annotations') ? undefined : ((json['annotations'] as Array<any>).map(AnnotationFromJSON)),
        'datatype': !exists(json, 'datatype') ? undefined : json['datatype'],
        'isDataPropertyFunctional': !exists(json, 'isDataPropertyFunctional') ? undefined : json['isDataPropertyFunctional'],
        'functionProperties': !exists(json, 'functionProperties') ? undefined : ((json['functionProperties'] as Array<any>).map(FunctionPropertiesEnumFromJSON)),
    };
}

export function GrapholscapeEntityToJSON(value?: GrapholscapeEntity | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'fullIri': value.fullIri,
        'annotations': value.annotations === undefined ? undefined : ((value.annotations as Array<any>).map(AnnotationToJSON)),
        'datatype': value.datatype,
        'isDataPropertyFunctional': value.isDataPropertyFunctional,
        'functionProperties': value.functionProperties === undefined ? undefined : ((value.functionProperties as Array<any>).map(FunctionPropertiesEnumToJSON)),
    };
}

