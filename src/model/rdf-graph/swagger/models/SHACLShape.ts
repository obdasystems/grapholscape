/* tslint:disable */
/* eslint-disable */
/**
 * Grapholscape API model
 * This is the API for retaining a Grapholscape\'s loaded ontology (or graph) in order to restart navigation from a previous state.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: obdasystems@info.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface SHACLShape
 */
export interface SHACLShape {
    /**
     * 
     * @type {string}
     * @memberof SHACLShape
     */
    type: SHACLShapeTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof SHACLShape
     */
    targetClass: string;
    /**
     * 
     * @type {string}
     * @memberof SHACLShape
     */
    path: string;
    /**
     * 
     * @type {string}
     * @memberof SHACLShape
     */
    property?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof SHACLShape
     */
    constraintValue?: Array<string>;
}

/**
* @export
* @enum {string}
*/
export enum SHACLShapeTypeEnum {
    MIN_COUNT = 'MinCount',
    MAX_COUNT = 'MaxCount',
    MIN_EXCLUSIVE = 'MinExclusive',
    MAX_EXCLUSIVE = 'MaxExclusive',
    MIN_INCLUSIVE = 'MinInclusive',
    MAX_INCLUSIVE = 'MaxInclusive',
    MIN_LENGTH = 'MinLength',
    MAX_LENGTH = 'MaxLength',
    PATTERN = 'Pattern',
    IN = 'In',
    EQUALS = 'Equals',
    DISJOINT = 'Disjoint',
    LESS_THAN = 'LessThan',
    LESS_THAN_OR_EQUALS = 'LessThanOrEquals',
    GREATER_THAN = 'GreaterThan',
    GREATER_THAN_OR_EQUALS = 'GreaterThanOrEquals'
}


/**
 * Check if a given object implements the SHACLShape interface.
 */
export function instanceOfSHACLShape(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "targetClass" in value;
    isInstance = isInstance && "path" in value;

    return isInstance;
}

export function SHACLShapeFromJSON(json: any): SHACLShape {
    return SHACLShapeFromJSONTyped(json, false);
}

export function SHACLShapeFromJSONTyped(json: any, ignoreDiscriminator: boolean): SHACLShape {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'type': json['type'],
        'targetClass': json['targetClass'],
        'path': json['path'],
        'property': !exists(json, 'property') ? undefined : json['property'],
        'constraintValue': !exists(json, 'constraintValue') ? undefined : json['constraintValue'],
    };
}

export function SHACLShapeToJSON(value?: SHACLShape | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'type': value.type,
        'targetClass': value.targetClass,
        'path': value.path,
        'property': value.property,
        'constraintValue': value.constraintValue,
    };
}

