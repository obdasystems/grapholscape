/* tslint:disable */
/* eslint-disable */
/**
 * Grapholscape API model
 * This is the API for retaining a Grapholscape\'s loaded ontology (or graph) in order to restart navigation from a previous state.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: obdasystems@info.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Annotation } from './Annotation';
import {
    AnnotationFromJSON,
    AnnotationFromJSONTyped,
    AnnotationToJSON,
} from './Annotation';
import type { Entity } from './Entity';
import {
    EntityFromJSON,
    EntityFromJSONTyped,
    EntityToJSON,
} from './Entity';

/**
 * 
 * @export
 * @interface AnnotationOp
 */
export interface AnnotationOp {
    /**
     * 
     * @type {Annotation}
     * @memberof AnnotationOp
     */
    subject: Annotation;
    /**
     * 
     * @type {Annotation}
     * @memberof AnnotationOp
     */
    previousState?: Annotation;
    /**
     * 
     * @type {Entity}
     * @memberof AnnotationOp
     */
    entity?: Entity;
}

/**
 * Check if a given object implements the AnnotationOp interface.
 */
export function instanceOfAnnotationOp(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "subject" in value;

    return isInstance;
}

export function AnnotationOpFromJSON(json: any): AnnotationOp {
    return AnnotationOpFromJSONTyped(json, false);
}

export function AnnotationOpFromJSONTyped(json: any, ignoreDiscriminator: boolean): AnnotationOp {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'subject': AnnotationFromJSON(json['subject']),
        'previousState': !exists(json, 'previousState') ? undefined : AnnotationFromJSON(json['previousState']),
        'entity': !exists(json, 'entity') ? undefined : EntityFromJSON(json['entity']),
    };
}

export function AnnotationOpToJSON(value?: AnnotationOp | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'subject': AnnotationToJSON(value.subject),
        'previousState': AnnotationToJSON(value.previousState),
        'entity': EntityToJSON(value.entity),
    };
}

