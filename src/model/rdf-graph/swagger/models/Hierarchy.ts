/* tslint:disable */
/* eslint-disable */
/**
 * Grapholscape API model
 * This is the API for retaining a Grapholscape\'s loaded ontology (or graph) in order to restart navigation from a previous state.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: obdasystems@info.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Entity } from './Entity';
import {
    EntityFromJSON,
    EntityFromJSONTyped,
    EntityToJSON,
} from './Entity';
import type { HierarchySuperclassesInner } from './HierarchySuperclassesInner';
import {
    HierarchySuperclassesInnerFromJSON,
    HierarchySuperclassesInnerFromJSONTyped,
    HierarchySuperclassesInnerToJSON,
} from './HierarchySuperclassesInner';
import type { TypesEnum } from './TypesEnum';
import {
    TypesEnumFromJSON,
    TypesEnumFromJSONTyped,
    TypesEnumToJSON,
} from './TypesEnum';

/**
 * 
 * @export
 * @interface Hierarchy
 */
export interface Hierarchy {
    /**
     * 
     * @type {string}
     * @memberof Hierarchy
     */
    id: string;
    /**
     * 
     * @type {TypesEnum}
     * @memberof Hierarchy
     */
    type: TypesEnum;
    /**
     * 
     * @type {Array<Entity>}
     * @memberof Hierarchy
     */
    inputs: Array<Entity>;
    /**
     * 
     * @type {Array<HierarchySuperclassesInner>}
     * @memberof Hierarchy
     */
    superclasses: Array<HierarchySuperclassesInner>;
}

/**
 * Check if a given object implements the Hierarchy interface.
 */
export function instanceOfHierarchy(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "inputs" in value;
    isInstance = isInstance && "superclasses" in value;

    return isInstance;
}

export function HierarchyFromJSON(json: any): Hierarchy {
    return HierarchyFromJSONTyped(json, false);
}

export function HierarchyFromJSONTyped(json: any, ignoreDiscriminator: boolean): Hierarchy {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'type': TypesEnumFromJSON(json['type']),
        'inputs': ((json['inputs'] as Array<any>).map(EntityFromJSON)),
        'superclasses': ((json['superclasses'] as Array<any>).map(HierarchySuperclassesInnerFromJSON)),
    };
}

export function HierarchyToJSON(value?: Hierarchy | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'type': TypesEnumToJSON(value.type),
        'inputs': ((value.inputs as Array<any>).map(EntityToJSON)),
        'superclasses': ((value.superclasses as Array<any>).map(HierarchySuperclassesInnerToJSON)),
    };
}

