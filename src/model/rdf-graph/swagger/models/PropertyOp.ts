/* tslint:disable */
/* eslint-disable */
/**
 * Grapholscape API model
 * This is the API for retaining a Grapholscape\'s loaded ontology (or graph) in order to restart navigation from a previous state.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: obdasystems@info.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Entity } from './Entity';
import {
    EntityFromJSON,
    EntityFromJSONTyped,
    EntityToJSON,
} from './Entity';

/**
 * 
 * @export
 * @interface PropertyOp
 */
export interface PropertyOp {
    /**
     * 
     * @type {Entity}
     * @memberof PropertyOp
     */
    subject: Entity;
    /**
     * 
     * @type {Entity}
     * @memberof PropertyOp
     */
    previousState?: Entity;
}

/**
 * Check if a given object implements the PropertyOp interface.
 */
export function instanceOfPropertyOp(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "subject" in value;

    return isInstance;
}

export function PropertyOpFromJSON(json: any): PropertyOp {
    return PropertyOpFromJSONTyped(json, false);
}

export function PropertyOpFromJSONTyped(json: any, ignoreDiscriminator: boolean): PropertyOp {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'subject': EntityFromJSON(json['subject']),
        'previousState': !exists(json, 'previousState') ? undefined : EntityFromJSON(json['previousState']),
    };
}

export function PropertyOpToJSON(value?: PropertyOp | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'subject': EntityToJSON(value.subject),
        'previousState': EntityToJSON(value.previousState),
    };
}

