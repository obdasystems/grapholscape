/* tslint:disable */
/* eslint-disable */
/**
 * VKG API model
 * This is the API for managing virtual knowledge graphs VKGs. VKGs are  crwated by exploring the data through the interface and then saved through this API.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@obdasystems.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CustomNodeRendering,
  FileInfo,
  VKGSnapshot,
} from '../models';
import {
    CustomNodeRenderingFromJSON,
    CustomNodeRenderingToJSON,
    FileInfoFromJSON,
    FileInfoToJSON,
    VKGSnapshotFromJSON,
    VKGSnapshotToJSON,
} from '../models';

export interface DeleteVkgNodeRenderingRequest {
    name: string;
    version: string;
}

export interface DeleteVkgSnapshotRequest {
    name: string;
    snapshotId: string;
    version: string;
}

export interface DeleteVkgSnapshotsRequest {
    name: string;
    version: string;
}

export interface ExportVkgSnapshotsRequest {
    name: string;
    version: string;
}

export interface GetDefaultNodeRenderingRequest {
    name: string;
    version: string;
}

export interface GetVkgSnapshotsRequest {
    name: string;
    version: string;
}

export interface ImportVkgSnapshotsRequest {
    name: string;
    version: string;
    additive: boolean;
    fileInfo: FileInfo;
}

export interface PostDefaultNodeRenderingRequest {
    name: string;
    version: string;
    requestBody: { [key: string]: CustomNodeRendering; };
}

export interface PostVkgSnapshotRequest {
    name: string;
    version: string;
    vKGSnapshot: VKGSnapshot;
}

export interface PutDefaultNodeRenderingRequest {
    name: string;
    version: string;
    requestBody: { [key: string]: CustomNodeRendering; };
}

export interface PutVkgSnapshotRequest {
    name: string;
    snapshotId: string;
    version: string;
    vKGSnapshot: VKGSnapshot;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * DELETE mwsx/owlOntology/{name}/version/vkg/node-rendering
     */
    async deleteVkgNodeRenderingRaw(requestParameters: DeleteVkgNodeRenderingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling deleteVkgNodeRendering.');
        }

        if (requestParameters.version === null || requestParameters.version === undefined) {
            throw new runtime.RequiredError('version','Required parameter requestParameters.version was null or undefined when calling deleteVkgNodeRendering.');
        }

        const queryParameters: any = {};

        if (requestParameters.version !== undefined) {
            queryParameters['version'] = requestParameters.version;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-MONOLITH-SESSION-ID"] = this.configuration.apiKey("X-MONOLITH-SESSION-ID"); // apiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwt", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/owlOntology/{name}/version/vkg/node-rendering`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * DELETE mwsx/owlOntology/{name}/version/vkg/node-rendering
     */
    async deleteVkgNodeRendering(requestParameters: DeleteVkgNodeRenderingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteVkgNodeRenderingRaw(requestParameters, initOverrides);
    }

    /**
     * Delete a given VKG Snapshot from catalog for a given ontology (name, version)
     */
    async deleteVkgSnapshotRaw(requestParameters: DeleteVkgSnapshotRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<VKGSnapshot>>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling deleteVkgSnapshot.');
        }

        if (requestParameters.snapshotId === null || requestParameters.snapshotId === undefined) {
            throw new runtime.RequiredError('snapshotId','Required parameter requestParameters.snapshotId was null or undefined when calling deleteVkgSnapshot.');
        }

        if (requestParameters.version === null || requestParameters.version === undefined) {
            throw new runtime.RequiredError('version','Required parameter requestParameters.version was null or undefined when calling deleteVkgSnapshot.');
        }

        const queryParameters: any = {};

        if (requestParameters.version !== undefined) {
            queryParameters['version'] = requestParameters.version;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-MONOLITH-SESSION-ID"] = this.configuration.apiKey("X-MONOLITH-SESSION-ID"); // apiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwt", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/owlOntology/{name}/version/vkg/catalog/{snapshotId}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"snapshotId"}}`, encodeURIComponent(String(requestParameters.snapshotId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(VKGSnapshotFromJSON));
    }

    /**
     * Delete a given VKG Snapshot from catalog for a given ontology (name, version)
     */
    async deleteVkgSnapshot(requestParameters: DeleteVkgSnapshotRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<VKGSnapshot>> {
        const response = await this.deleteVkgSnapshotRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * DELETE the entire VKG Snapshot catalog for a given ontology (name, version)
     */
    async deleteVkgSnapshotsRaw(requestParameters: DeleteVkgSnapshotsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<VKGSnapshot>>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling deleteVkgSnapshots.');
        }

        if (requestParameters.version === null || requestParameters.version === undefined) {
            throw new runtime.RequiredError('version','Required parameter requestParameters.version was null or undefined when calling deleteVkgSnapshots.');
        }

        const queryParameters: any = {};

        if (requestParameters.version !== undefined) {
            queryParameters['version'] = requestParameters.version;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-MONOLITH-SESSION-ID"] = this.configuration.apiKey("X-MONOLITH-SESSION-ID"); // apiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwt", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/owlOntology/{name}/version/vkg/catalog`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(VKGSnapshotFromJSON));
    }

    /**
     * DELETE the entire VKG Snapshot catalog for a given ontology (name, version)
     */
    async deleteVkgSnapshots(requestParameters: DeleteVkgSnapshotsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<VKGSnapshot>> {
        const response = await this.deleteVkgSnapshotsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the entire VKG Snapshot catalog for a given ontology (name, version) as a file
     */
    async exportVkgSnapshotsRaw(requestParameters: ExportVkgSnapshotsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FileInfo>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling exportVkgSnapshots.');
        }

        if (requestParameters.version === null || requestParameters.version === undefined) {
            throw new runtime.RequiredError('version','Required parameter requestParameters.version was null or undefined when calling exportVkgSnapshots.');
        }

        const queryParameters: any = {};

        if (requestParameters.version !== undefined) {
            queryParameters['version'] = requestParameters.version;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-MONOLITH-SESSION-ID"] = this.configuration.apiKey("X-MONOLITH-SESSION-ID"); // apiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwt", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/owlOntology/{name}/version/vkg/catalog/export`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FileInfoFromJSON(jsonValue));
    }

    /**
     * Get the entire VKG Snapshot catalog for a given ontology (name, version) as a file
     */
    async exportVkgSnapshots(requestParameters: ExportVkgSnapshotsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FileInfo> {
        const response = await this.exportVkgSnapshotsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns the default VKG node rendering for the ontology version
     */
    async getDefaultNodeRenderingRaw(requestParameters: GetDefaultNodeRenderingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: CustomNodeRendering; }>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling getDefaultNodeRendering.');
        }

        if (requestParameters.version === null || requestParameters.version === undefined) {
            throw new runtime.RequiredError('version','Required parameter requestParameters.version was null or undefined when calling getDefaultNodeRendering.');
        }

        const queryParameters: any = {};

        if (requestParameters.version !== undefined) {
            queryParameters['version'] = requestParameters.version;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-MONOLITH-SESSION-ID"] = this.configuration.apiKey("X-MONOLITH-SESSION-ID"); // apiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwt", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/owlOntology/{name}/version/vkg/node-rendering`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => runtime.mapValues(jsonValue, CustomNodeRenderingFromJSON));
    }

    /**
     * Returns the default VKG node rendering for the ontology version
     */
    async getDefaultNodeRendering(requestParameters: GetDefaultNodeRenderingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: CustomNodeRendering; }> {
        const response = await this.getDefaultNodeRenderingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the VKG Snaphot catalog for a given ontology (name, version)
     */
    async getVkgSnapshotsRaw(requestParameters: GetVkgSnapshotsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<VKGSnapshot>>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling getVkgSnapshots.');
        }

        if (requestParameters.version === null || requestParameters.version === undefined) {
            throw new runtime.RequiredError('version','Required parameter requestParameters.version was null or undefined when calling getVkgSnapshots.');
        }

        const queryParameters: any = {};

        if (requestParameters.version !== undefined) {
            queryParameters['version'] = requestParameters.version;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-MONOLITH-SESSION-ID"] = this.configuration.apiKey("X-MONOLITH-SESSION-ID"); // apiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwt", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/owlOntology/{name}/version/vkg/catalog`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(VKGSnapshotFromJSON));
    }

    /**
     * Get the VKG Snaphot catalog for a given ontology (name, version)
     */
    async getVkgSnapshots(requestParameters: GetVkgSnapshotsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<VKGSnapshot>> {
        const response = await this.getVkgSnapshotsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Upload the JSON file of a VKG Snapshot catalog for a given ontology (name, version)
     */
    async importVkgSnapshotsRaw(requestParameters: ImportVkgSnapshotsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FileInfo>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling importVkgSnapshots.');
        }

        if (requestParameters.version === null || requestParameters.version === undefined) {
            throw new runtime.RequiredError('version','Required parameter requestParameters.version was null or undefined when calling importVkgSnapshots.');
        }

        if (requestParameters.additive === null || requestParameters.additive === undefined) {
            throw new runtime.RequiredError('additive','Required parameter requestParameters.additive was null or undefined when calling importVkgSnapshots.');
        }

        if (requestParameters.fileInfo === null || requestParameters.fileInfo === undefined) {
            throw new runtime.RequiredError('fileInfo','Required parameter requestParameters.fileInfo was null or undefined when calling importVkgSnapshots.');
        }

        const queryParameters: any = {};

        if (requestParameters.version !== undefined) {
            queryParameters['version'] = requestParameters.version;
        }

        if (requestParameters.additive !== undefined) {
            queryParameters['additive'] = requestParameters.additive;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-MONOLITH-SESSION-ID"] = this.configuration.apiKey("X-MONOLITH-SESSION-ID"); // apiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwt", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/owlOntology/{name}/version/vkg/catalog/import`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: FileInfoToJSON(requestParameters.fileInfo),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FileInfoFromJSON(jsonValue));
    }

    /**
     * Upload the JSON file of a VKG Snapshot catalog for a given ontology (name, version)
     */
    async importVkgSnapshots(requestParameters: ImportVkgSnapshotsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FileInfo> {
        const response = await this.importVkgSnapshotsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Set a default VKG node rendering for the ontology version
     */
    async postDefaultNodeRenderingRaw(requestParameters: PostDefaultNodeRenderingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: CustomNodeRendering; }>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling postDefaultNodeRendering.');
        }

        if (requestParameters.version === null || requestParameters.version === undefined) {
            throw new runtime.RequiredError('version','Required parameter requestParameters.version was null or undefined when calling postDefaultNodeRendering.');
        }

        if (requestParameters.requestBody === null || requestParameters.requestBody === undefined) {
            throw new runtime.RequiredError('requestBody','Required parameter requestParameters.requestBody was null or undefined when calling postDefaultNodeRendering.');
        }

        const queryParameters: any = {};

        if (requestParameters.version !== undefined) {
            queryParameters['version'] = requestParameters.version;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-MONOLITH-SESSION-ID"] = this.configuration.apiKey("X-MONOLITH-SESSION-ID"); // apiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwt", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/owlOntology/{name}/version/vkg/node-rendering`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.requestBody,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => runtime.mapValues(jsonValue, CustomNodeRenderingFromJSON));
    }

    /**
     * Set a default VKG node rendering for the ontology version
     */
    async postDefaultNodeRendering(requestParameters: PostDefaultNodeRenderingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: CustomNodeRendering; }> {
        const response = await this.postDefaultNodeRenderingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Save a new VKG Snaphot in the catalog for a given ontology (name, version).
     */
    async postVkgSnapshotRaw(requestParameters: PostVkgSnapshotRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<VKGSnapshot>>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling postVkgSnapshot.');
        }

        if (requestParameters.version === null || requestParameters.version === undefined) {
            throw new runtime.RequiredError('version','Required parameter requestParameters.version was null or undefined when calling postVkgSnapshot.');
        }

        if (requestParameters.vKGSnapshot === null || requestParameters.vKGSnapshot === undefined) {
            throw new runtime.RequiredError('vKGSnapshot','Required parameter requestParameters.vKGSnapshot was null or undefined when calling postVkgSnapshot.');
        }

        const queryParameters: any = {};

        if (requestParameters.version !== undefined) {
            queryParameters['version'] = requestParameters.version;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-MONOLITH-SESSION-ID"] = this.configuration.apiKey("X-MONOLITH-SESSION-ID"); // apiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwt", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/owlOntology/{name}/version/vkg/catalog`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: VKGSnapshotToJSON(requestParameters.vKGSnapshot),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(VKGSnapshotFromJSON));
    }

    /**
     * Save a new VKG Snaphot in the catalog for a given ontology (name, version).
     */
    async postVkgSnapshot(requestParameters: PostVkgSnapshotRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<VKGSnapshot>> {
        const response = await this.postVkgSnapshotRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Modifies the default VKG node rendering for the ontology version
     */
    async putDefaultNodeRenderingRaw(requestParameters: PutDefaultNodeRenderingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: CustomNodeRendering; }>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling putDefaultNodeRendering.');
        }

        if (requestParameters.version === null || requestParameters.version === undefined) {
            throw new runtime.RequiredError('version','Required parameter requestParameters.version was null or undefined when calling putDefaultNodeRendering.');
        }

        if (requestParameters.requestBody === null || requestParameters.requestBody === undefined) {
            throw new runtime.RequiredError('requestBody','Required parameter requestParameters.requestBody was null or undefined when calling putDefaultNodeRendering.');
        }

        const queryParameters: any = {};

        if (requestParameters.version !== undefined) {
            queryParameters['version'] = requestParameters.version;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-MONOLITH-SESSION-ID"] = this.configuration.apiKey("X-MONOLITH-SESSION-ID"); // apiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwt", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/owlOntology/{name}/version/vkg/node-rendering`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.requestBody,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => runtime.mapValues(jsonValue, CustomNodeRenderingFromJSON));
    }

    /**
     * Modifies the default VKG node rendering for the ontology version
     */
    async putDefaultNodeRendering(requestParameters: PutDefaultNodeRenderingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: CustomNodeRendering; }> {
        const response = await this.putDefaultNodeRenderingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Overwrite a VKG Snapshot (given its snapshotId) in the catalog for a given ontology (name, version)
     */
    async putVkgSnapshotRaw(requestParameters: PutVkgSnapshotRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<VKGSnapshot>>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling putVkgSnapshot.');
        }

        if (requestParameters.snapshotId === null || requestParameters.snapshotId === undefined) {
            throw new runtime.RequiredError('snapshotId','Required parameter requestParameters.snapshotId was null or undefined when calling putVkgSnapshot.');
        }

        if (requestParameters.version === null || requestParameters.version === undefined) {
            throw new runtime.RequiredError('version','Required parameter requestParameters.version was null or undefined when calling putVkgSnapshot.');
        }

        if (requestParameters.vKGSnapshot === null || requestParameters.vKGSnapshot === undefined) {
            throw new runtime.RequiredError('vKGSnapshot','Required parameter requestParameters.vKGSnapshot was null or undefined when calling putVkgSnapshot.');
        }

        const queryParameters: any = {};

        if (requestParameters.version !== undefined) {
            queryParameters['version'] = requestParameters.version;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-MONOLITH-SESSION-ID"] = this.configuration.apiKey("X-MONOLITH-SESSION-ID"); // apiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwt", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/owlOntology/{name}/version/vkg/catalog/{snapshotId}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"snapshotId"}}`, encodeURIComponent(String(requestParameters.snapshotId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: VKGSnapshotToJSON(requestParameters.vKGSnapshot),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(VKGSnapshotFromJSON));
    }

    /**
     * Overwrite a VKG Snapshot (given its snapshotId) in the catalog for a given ontology (name, version)
     */
    async putVkgSnapshot(requestParameters: PutVkgSnapshotRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<VKGSnapshot>> {
        const response = await this.putVkgSnapshotRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
