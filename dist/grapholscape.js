/**
 * MIT License
 * 
 * Copyright (c) 2018-2019 OBDA Systems
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
	typeof define === 'function' && define.amd ? define(factory) :
	(global = global || self, global.GrapholScape = factory());
}(this, function () { 'use strict';

	var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

	function unwrapExports (x) {
		return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
	}

	function createCommonjsModule(fn, module) {
		return module = { exports: {} }, fn(module, module.exports), module.exports;
	}

	var check = function (it) {
	  return it && it.Math == Math && it;
	};

	// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
	var global_1 =
	  // eslint-disable-next-line no-undef
	  check(typeof globalThis == 'object' && globalThis) ||
	  check(typeof window == 'object' && window) ||
	  check(typeof self == 'object' && self) ||
	  check(typeof commonjsGlobal == 'object' && commonjsGlobal) ||
	  // eslint-disable-next-line no-new-func
	  Function('return this')();

	var fails = function (exec) {
	  try {
	    return !!exec();
	  } catch (error) {
	    return true;
	  }
	};

	// Thank's IE8 for his funny defineProperty
	var descriptors = !fails(function () {
	  return Object.defineProperty({}, 'a', { get: function () { return 7; } }).a != 7;
	});

	var nativePropertyIsEnumerable = {}.propertyIsEnumerable;
	var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;

	// Nashorn ~ JDK8 bug
	var NASHORN_BUG = getOwnPropertyDescriptor && !nativePropertyIsEnumerable.call({ 1: 2 }, 1);

	// `Object.prototype.propertyIsEnumerable` method implementation
	// https://tc39.github.io/ecma262/#sec-object.prototype.propertyisenumerable
	var f = NASHORN_BUG ? function propertyIsEnumerable(V) {
	  var descriptor = getOwnPropertyDescriptor(this, V);
	  return !!descriptor && descriptor.enumerable;
	} : nativePropertyIsEnumerable;

	var objectPropertyIsEnumerable = {
		f: f
	};

	var createPropertyDescriptor = function (bitmap, value) {
	  return {
	    enumerable: !(bitmap & 1),
	    configurable: !(bitmap & 2),
	    writable: !(bitmap & 4),
	    value: value
	  };
	};

	var toString = {}.toString;

	var classofRaw = function (it) {
	  return toString.call(it).slice(8, -1);
	};

	var split = ''.split;

	// fallback for non-array-like ES3 and non-enumerable old V8 strings
	var indexedObject = fails(function () {
	  // throws an error in rhino, see https://github.com/mozilla/rhino/issues/346
	  // eslint-disable-next-line no-prototype-builtins
	  return !Object('z').propertyIsEnumerable(0);
	}) ? function (it) {
	  return classofRaw(it) == 'String' ? split.call(it, '') : Object(it);
	} : Object;

	// `RequireObjectCoercible` abstract operation
	// https://tc39.github.io/ecma262/#sec-requireobjectcoercible
	var requireObjectCoercible = function (it) {
	  if (it == undefined) throw TypeError("Can't call method on " + it);
	  return it;
	};

	// toObject with fallback for non-array-like ES3 strings



	var toIndexedObject = function (it) {
	  return indexedObject(requireObjectCoercible(it));
	};

	var isObject = function (it) {
	  return typeof it === 'object' ? it !== null : typeof it === 'function';
	};

	// `ToPrimitive` abstract operation
	// https://tc39.github.io/ecma262/#sec-toprimitive
	// instead of the ES6 spec version, we didn't implement @@toPrimitive case
	// and the second argument - flag - preferred type is a string
	var toPrimitive = function (input, PREFERRED_STRING) {
	  if (!isObject(input)) return input;
	  var fn, val;
	  if (PREFERRED_STRING && typeof (fn = input.toString) == 'function' && !isObject(val = fn.call(input))) return val;
	  if (typeof (fn = input.valueOf) == 'function' && !isObject(val = fn.call(input))) return val;
	  if (!PREFERRED_STRING && typeof (fn = input.toString) == 'function' && !isObject(val = fn.call(input))) return val;
	  throw TypeError("Can't convert object to primitive value");
	};

	var hasOwnProperty = {}.hasOwnProperty;

	var has = function (it, key) {
	  return hasOwnProperty.call(it, key);
	};

	var document$1 = global_1.document;
	// typeof document.createElement is 'object' in old IE
	var EXISTS = isObject(document$1) && isObject(document$1.createElement);

	var documentCreateElement = function (it) {
	  return EXISTS ? document$1.createElement(it) : {};
	};

	// Thank's IE8 for his funny defineProperty
	var ie8DomDefine = !descriptors && !fails(function () {
	  return Object.defineProperty(documentCreateElement('div'), 'a', {
	    get: function () { return 7; }
	  }).a != 7;
	});

	var nativeGetOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;

	// `Object.getOwnPropertyDescriptor` method
	// https://tc39.github.io/ecma262/#sec-object.getownpropertydescriptor
	var f$1 = descriptors ? nativeGetOwnPropertyDescriptor : function getOwnPropertyDescriptor(O, P) {
	  O = toIndexedObject(O);
	  P = toPrimitive(P, true);
	  if (ie8DomDefine) try {
	    return nativeGetOwnPropertyDescriptor(O, P);
	  } catch (error) { /* empty */ }
	  if (has(O, P)) return createPropertyDescriptor(!objectPropertyIsEnumerable.f.call(O, P), O[P]);
	};

	var objectGetOwnPropertyDescriptor = {
		f: f$1
	};

	var anObject = function (it) {
	  if (!isObject(it)) {
	    throw TypeError(String(it) + ' is not an object');
	  } return it;
	};

	var nativeDefineProperty = Object.defineProperty;

	// `Object.defineProperty` method
	// https://tc39.github.io/ecma262/#sec-object.defineproperty
	var f$2 = descriptors ? nativeDefineProperty : function defineProperty(O, P, Attributes) {
	  anObject(O);
	  P = toPrimitive(P, true);
	  anObject(Attributes);
	  if (ie8DomDefine) try {
	    return nativeDefineProperty(O, P, Attributes);
	  } catch (error) { /* empty */ }
	  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported');
	  if ('value' in Attributes) O[P] = Attributes.value;
	  return O;
	};

	var objectDefineProperty = {
		f: f$2
	};

	var createNonEnumerableProperty = descriptors ? function (object, key, value) {
	  return objectDefineProperty.f(object, key, createPropertyDescriptor(1, value));
	} : function (object, key, value) {
	  object[key] = value;
	  return object;
	};

	var setGlobal = function (key, value) {
	  try {
	    createNonEnumerableProperty(global_1, key, value);
	  } catch (error) {
	    global_1[key] = value;
	  } return value;
	};

	var SHARED = '__core-js_shared__';
	var store = global_1[SHARED] || setGlobal(SHARED, {});

	var sharedStore = store;

	var functionToString = Function.toString;

	// this helper broken in `3.4.1-3.4.4`, so we can't use `shared` helper
	if (typeof sharedStore.inspectSource != 'function') {
	  sharedStore.inspectSource = function (it) {
	    return functionToString.call(it);
	  };
	}

	var inspectSource = sharedStore.inspectSource;

	var WeakMap$1 = global_1.WeakMap;

	var nativeWeakMap = typeof WeakMap$1 === 'function' && /native code/.test(inspectSource(WeakMap$1));

	var isPure = false;

	var shared = createCommonjsModule(function (module) {
	(module.exports = function (key, value) {
	  return sharedStore[key] || (sharedStore[key] = value !== undefined ? value : {});
	})('versions', []).push({
	  version: '3.6.0',
	  mode: 'global',
	  copyright: 'Â© 2019 Denis Pushkarev (zloirock.ru)'
	});
	});

	var id = 0;
	var postfix = Math.random();

	var uid = function (key) {
	  return 'Symbol(' + String(key === undefined ? '' : key) + ')_' + (++id + postfix).toString(36);
	};

	var keys = shared('keys');

	var sharedKey = function (key) {
	  return keys[key] || (keys[key] = uid(key));
	};

	var hiddenKeys = {};

	var WeakMap$2 = global_1.WeakMap;
	var set, get, has$1;

	var enforce = function (it) {
	  return has$1(it) ? get(it) : set(it, {});
	};

	var getterFor = function (TYPE) {
	  return function (it) {
	    var state;
	    if (!isObject(it) || (state = get(it)).type !== TYPE) {
	      throw TypeError('Incompatible receiver, ' + TYPE + ' required');
	    } return state;
	  };
	};

	if (nativeWeakMap) {
	  var store$1 = new WeakMap$2();
	  var wmget = store$1.get;
	  var wmhas = store$1.has;
	  var wmset = store$1.set;
	  set = function (it, metadata) {
	    wmset.call(store$1, it, metadata);
	    return metadata;
	  };
	  get = function (it) {
	    return wmget.call(store$1, it) || {};
	  };
	  has$1 = function (it) {
	    return wmhas.call(store$1, it);
	  };
	} else {
	  var STATE = sharedKey('state');
	  hiddenKeys[STATE] = true;
	  set = function (it, metadata) {
	    createNonEnumerableProperty(it, STATE, metadata);
	    return metadata;
	  };
	  get = function (it) {
	    return has(it, STATE) ? it[STATE] : {};
	  };
	  has$1 = function (it) {
	    return has(it, STATE);
	  };
	}

	var internalState = {
	  set: set,
	  get: get,
	  has: has$1,
	  enforce: enforce,
	  getterFor: getterFor
	};

	var redefine = createCommonjsModule(function (module) {
	var getInternalState = internalState.get;
	var enforceInternalState = internalState.enforce;
	var TEMPLATE = String(String).split('String');

	(module.exports = function (O, key, value, options) {
	  var unsafe = options ? !!options.unsafe : false;
	  var simple = options ? !!options.enumerable : false;
	  var noTargetGet = options ? !!options.noTargetGet : false;
	  if (typeof value == 'function') {
	    if (typeof key == 'string' && !has(value, 'name')) createNonEnumerableProperty(value, 'name', key);
	    enforceInternalState(value).source = TEMPLATE.join(typeof key == 'string' ? key : '');
	  }
	  if (O === global_1) {
	    if (simple) O[key] = value;
	    else setGlobal(key, value);
	    return;
	  } else if (!unsafe) {
	    delete O[key];
	  } else if (!noTargetGet && O[key]) {
	    simple = true;
	  }
	  if (simple) O[key] = value;
	  else createNonEnumerableProperty(O, key, value);
	// add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative
	})(Function.prototype, 'toString', function toString() {
	  return typeof this == 'function' && getInternalState(this).source || inspectSource(this);
	});
	});

	var path = global_1;

	var aFunction = function (variable) {
	  return typeof variable == 'function' ? variable : undefined;
	};

	var getBuiltIn = function (namespace, method) {
	  return arguments.length < 2 ? aFunction(path[namespace]) || aFunction(global_1[namespace])
	    : path[namespace] && path[namespace][method] || global_1[namespace] && global_1[namespace][method];
	};

	var ceil = Math.ceil;
	var floor = Math.floor;

	// `ToInteger` abstract operation
	// https://tc39.github.io/ecma262/#sec-tointeger
	var toInteger = function (argument) {
	  return isNaN(argument = +argument) ? 0 : (argument > 0 ? floor : ceil)(argument);
	};

	var min = Math.min;

	// `ToLength` abstract operation
	// https://tc39.github.io/ecma262/#sec-tolength
	var toLength = function (argument) {
	  return argument > 0 ? min(toInteger(argument), 0x1FFFFFFFFFFFFF) : 0; // 2 ** 53 - 1 == 9007199254740991
	};

	var max = Math.max;
	var min$1 = Math.min;

	// Helper for a popular repeating case of the spec:
	// Let integer be ? ToInteger(index).
	// If integer < 0, let result be max((length + integer), 0); else let result be min(integer, length).
	var toAbsoluteIndex = function (index, length) {
	  var integer = toInteger(index);
	  return integer < 0 ? max(integer + length, 0) : min$1(integer, length);
	};

	// `Array.prototype.{ indexOf, includes }` methods implementation
	var createMethod = function (IS_INCLUDES) {
	  return function ($this, el, fromIndex) {
	    var O = toIndexedObject($this);
	    var length = toLength(O.length);
	    var index = toAbsoluteIndex(fromIndex, length);
	    var value;
	    // Array#includes uses SameValueZero equality algorithm
	    // eslint-disable-next-line no-self-compare
	    if (IS_INCLUDES && el != el) while (length > index) {
	      value = O[index++];
	      // eslint-disable-next-line no-self-compare
	      if (value != value) return true;
	    // Array#indexOf ignores holes, Array#includes - not
	    } else for (;length > index; index++) {
	      if ((IS_INCLUDES || index in O) && O[index] === el) return IS_INCLUDES || index || 0;
	    } return !IS_INCLUDES && -1;
	  };
	};

	var arrayIncludes = {
	  // `Array.prototype.includes` method
	  // https://tc39.github.io/ecma262/#sec-array.prototype.includes
	  includes: createMethod(true),
	  // `Array.prototype.indexOf` method
	  // https://tc39.github.io/ecma262/#sec-array.prototype.indexof
	  indexOf: createMethod(false)
	};

	var indexOf = arrayIncludes.indexOf;


	var objectKeysInternal = function (object, names) {
	  var O = toIndexedObject(object);
	  var i = 0;
	  var result = [];
	  var key;
	  for (key in O) !has(hiddenKeys, key) && has(O, key) && result.push(key);
	  // Don't enum bug & hidden keys
	  while (names.length > i) if (has(O, key = names[i++])) {
	    ~indexOf(result, key) || result.push(key);
	  }
	  return result;
	};

	// IE8- don't enum bug keys
	var enumBugKeys = [
	  'constructor',
	  'hasOwnProperty',
	  'isPrototypeOf',
	  'propertyIsEnumerable',
	  'toLocaleString',
	  'toString',
	  'valueOf'
	];

	var hiddenKeys$1 = enumBugKeys.concat('length', 'prototype');

	// `Object.getOwnPropertyNames` method
	// https://tc39.github.io/ecma262/#sec-object.getownpropertynames
	var f$3 = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
	  return objectKeysInternal(O, hiddenKeys$1);
	};

	var objectGetOwnPropertyNames = {
		f: f$3
	};

	var f$4 = Object.getOwnPropertySymbols;

	var objectGetOwnPropertySymbols = {
		f: f$4
	};

	// all object keys, includes non-enumerable and symbols
	var ownKeys = getBuiltIn('Reflect', 'ownKeys') || function ownKeys(it) {
	  var keys = objectGetOwnPropertyNames.f(anObject(it));
	  var getOwnPropertySymbols = objectGetOwnPropertySymbols.f;
	  return getOwnPropertySymbols ? keys.concat(getOwnPropertySymbols(it)) : keys;
	};

	var copyConstructorProperties = function (target, source) {
	  var keys = ownKeys(source);
	  var defineProperty = objectDefineProperty.f;
	  var getOwnPropertyDescriptor = objectGetOwnPropertyDescriptor.f;
	  for (var i = 0; i < keys.length; i++) {
	    var key = keys[i];
	    if (!has(target, key)) defineProperty(target, key, getOwnPropertyDescriptor(source, key));
	  }
	};

	var replacement = /#|\.prototype\./;

	var isForced = function (feature, detection) {
	  var value = data[normalize(feature)];
	  return value == POLYFILL ? true
	    : value == NATIVE ? false
	    : typeof detection == 'function' ? fails(detection)
	    : !!detection;
	};

	var normalize = isForced.normalize = function (string) {
	  return String(string).replace(replacement, '.').toLowerCase();
	};

	var data = isForced.data = {};
	var NATIVE = isForced.NATIVE = 'N';
	var POLYFILL = isForced.POLYFILL = 'P';

	var isForced_1 = isForced;

	var getOwnPropertyDescriptor$1 = objectGetOwnPropertyDescriptor.f;






	/*
	  options.target      - name of the target object
	  options.global      - target is the global object
	  options.stat        - export as static methods of target
	  options.proto       - export as prototype methods of target
	  options.real        - real prototype method for the `pure` version
	  options.forced      - export even if the native feature is available
	  options.bind        - bind methods to the target, required for the `pure` version
	  options.wrap        - wrap constructors to preventing global pollution, required for the `pure` version
	  options.unsafe      - use the simple assignment of property instead of delete + defineProperty
	  options.sham        - add a flag to not completely full polyfills
	  options.enumerable  - export as enumerable property
	  options.noTargetGet - prevent calling a getter on target
	*/
	var _export = function (options, source) {
	  var TARGET = options.target;
	  var GLOBAL = options.global;
	  var STATIC = options.stat;
	  var FORCED, target, key, targetProperty, sourceProperty, descriptor;
	  if (GLOBAL) {
	    target = global_1;
	  } else if (STATIC) {
	    target = global_1[TARGET] || setGlobal(TARGET, {});
	  } else {
	    target = (global_1[TARGET] || {}).prototype;
	  }
	  if (target) for (key in source) {
	    sourceProperty = source[key];
	    if (options.noTargetGet) {
	      descriptor = getOwnPropertyDescriptor$1(target, key);
	      targetProperty = descriptor && descriptor.value;
	    } else targetProperty = target[key];
	    FORCED = isForced_1(GLOBAL ? key : TARGET + (STATIC ? '.' : '#') + key, options.forced);
	    // contained in target
	    if (!FORCED && targetProperty !== undefined) {
	      if (typeof sourceProperty === typeof targetProperty) continue;
	      copyConstructorProperties(sourceProperty, targetProperty);
	    }
	    // add a flag to not completely full polyfills
	    if (options.sham || (targetProperty && targetProperty.sham)) {
	      createNonEnumerableProperty(sourceProperty, 'sham', true);
	    }
	    // extend global
	    redefine(target, key, sourceProperty, options);
	  }
	};

	var nativeSymbol = !!Object.getOwnPropertySymbols && !fails(function () {
	  // Chrome 38 Symbol has incorrect toString conversion
	  // eslint-disable-next-line no-undef
	  return !String(Symbol());
	});

	var useSymbolAsUid = nativeSymbol
	  // eslint-disable-next-line no-undef
	  && !Symbol.sham
	  // eslint-disable-next-line no-undef
	  && typeof Symbol() == 'symbol';

	// `IsArray` abstract operation
	// https://tc39.github.io/ecma262/#sec-isarray
	var isArray = Array.isArray || function isArray(arg) {
	  return classofRaw(arg) == 'Array';
	};

	// `ToObject` abstract operation
	// https://tc39.github.io/ecma262/#sec-toobject
	var toObject = function (argument) {
	  return Object(requireObjectCoercible(argument));
	};

	// `Object.keys` method
	// https://tc39.github.io/ecma262/#sec-object.keys
	var objectKeys = Object.keys || function keys(O) {
	  return objectKeysInternal(O, enumBugKeys);
	};

	// `Object.defineProperties` method
	// https://tc39.github.io/ecma262/#sec-object.defineproperties
	var objectDefineProperties = descriptors ? Object.defineProperties : function defineProperties(O, Properties) {
	  anObject(O);
	  var keys = objectKeys(Properties);
	  var length = keys.length;
	  var index = 0;
	  var key;
	  while (length > index) objectDefineProperty.f(O, key = keys[index++], Properties[key]);
	  return O;
	};

	var html = getBuiltIn('document', 'documentElement');

	var GT = '>';
	var LT = '<';
	var PROTOTYPE = 'prototype';
	var SCRIPT = 'script';
	var IE_PROTO = sharedKey('IE_PROTO');

	var EmptyConstructor = function () { /* empty */ };

	var scriptTag = function (content) {
	  return LT + SCRIPT + GT + content + LT + '/' + SCRIPT + GT;
	};

	// Create object with fake `null` prototype: use ActiveX Object with cleared prototype
	var NullProtoObjectViaActiveX = function (activeXDocument) {
	  activeXDocument.write(scriptTag(''));
	  activeXDocument.close();
	  var temp = activeXDocument.parentWindow.Object;
	  activeXDocument = null; // avoid memory leak
	  return temp;
	};

	// Create object with fake `null` prototype: use iframe Object with cleared prototype
	var NullProtoObjectViaIFrame = function () {
	  // Thrash, waste and sodomy: IE GC bug
	  var iframe = documentCreateElement('iframe');
	  var JS = 'java' + SCRIPT + ':';
	  var iframeDocument;
	  iframe.style.display = 'none';
	  html.appendChild(iframe);
	  // https://github.com/zloirock/core-js/issues/475
	  iframe.src = String(JS);
	  iframeDocument = iframe.contentWindow.document;
	  iframeDocument.open();
	  iframeDocument.write(scriptTag('document.F=Object'));
	  iframeDocument.close();
	  return iframeDocument.F;
	};

	// Check for document.domain and active x support
	// No need to use active x approach when document.domain is not set
	// see https://github.com/es-shims/es5-shim/issues/150
	// variation of https://github.com/kitcambridge/es5-shim/commit/4f738ac066346
	// avoid IE GC bug
	var activeXDocument;
	var NullProtoObject = function () {
	  try {
	    /* global ActiveXObject */
	    activeXDocument = document.domain && new ActiveXObject('htmlfile');
	  } catch (error) { /* ignore */ }
	  NullProtoObject = activeXDocument ? NullProtoObjectViaActiveX(activeXDocument) : NullProtoObjectViaIFrame();
	  var length = enumBugKeys.length;
	  while (length--) delete NullProtoObject[PROTOTYPE][enumBugKeys[length]];
	  return NullProtoObject();
	};

	hiddenKeys[IE_PROTO] = true;

	// `Object.create` method
	// https://tc39.github.io/ecma262/#sec-object.create
	var objectCreate = Object.create || function create(O, Properties) {
	  var result;
	  if (O !== null) {
	    EmptyConstructor[PROTOTYPE] = anObject(O);
	    result = new EmptyConstructor();
	    EmptyConstructor[PROTOTYPE] = null;
	    // add "__proto__" for Object.getPrototypeOf polyfill
	    result[IE_PROTO] = O;
	  } else result = NullProtoObject();
	  return Properties === undefined ? result : objectDefineProperties(result, Properties);
	};

	var nativeGetOwnPropertyNames = objectGetOwnPropertyNames.f;

	var toString$1 = {}.toString;

	var windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames
	  ? Object.getOwnPropertyNames(window) : [];

	var getWindowNames = function (it) {
	  try {
	    return nativeGetOwnPropertyNames(it);
	  } catch (error) {
	    return windowNames.slice();
	  }
	};

	// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window
	var f$5 = function getOwnPropertyNames(it) {
	  return windowNames && toString$1.call(it) == '[object Window]'
	    ? getWindowNames(it)
	    : nativeGetOwnPropertyNames(toIndexedObject(it));
	};

	var objectGetOwnPropertyNamesExternal = {
		f: f$5
	};

	var WellKnownSymbolsStore = shared('wks');
	var Symbol$1 = global_1.Symbol;
	var createWellKnownSymbol = useSymbolAsUid ? Symbol$1 : uid;

	var wellKnownSymbol = function (name) {
	  if (!has(WellKnownSymbolsStore, name)) {
	    if (nativeSymbol && has(Symbol$1, name)) WellKnownSymbolsStore[name] = Symbol$1[name];
	    else WellKnownSymbolsStore[name] = createWellKnownSymbol('Symbol.' + name);
	  } return WellKnownSymbolsStore[name];
	};

	var f$6 = wellKnownSymbol;

	var wrappedWellKnownSymbol = {
		f: f$6
	};

	var defineProperty = objectDefineProperty.f;

	var defineWellKnownSymbol = function (NAME) {
	  var Symbol = path.Symbol || (path.Symbol = {});
	  if (!has(Symbol, NAME)) defineProperty(Symbol, NAME, {
	    value: wrappedWellKnownSymbol.f(NAME)
	  });
	};

	var defineProperty$1 = objectDefineProperty.f;



	var TO_STRING_TAG = wellKnownSymbol('toStringTag');

	var setToStringTag = function (it, TAG, STATIC) {
	  if (it && !has(it = STATIC ? it : it.prototype, TO_STRING_TAG)) {
	    defineProperty$1(it, TO_STRING_TAG, { configurable: true, value: TAG });
	  }
	};

	var aFunction$1 = function (it) {
	  if (typeof it != 'function') {
	    throw TypeError(String(it) + ' is not a function');
	  } return it;
	};

	// optional / simple context binding
	var bindContext = function (fn, that, length) {
	  aFunction$1(fn);
	  if (that === undefined) return fn;
	  switch (length) {
	    case 0: return function () {
	      return fn.call(that);
	    };
	    case 1: return function (a) {
	      return fn.call(that, a);
	    };
	    case 2: return function (a, b) {
	      return fn.call(that, a, b);
	    };
	    case 3: return function (a, b, c) {
	      return fn.call(that, a, b, c);
	    };
	  }
	  return function (/* ...args */) {
	    return fn.apply(that, arguments);
	  };
	};

	var SPECIES = wellKnownSymbol('species');

	// `ArraySpeciesCreate` abstract operation
	// https://tc39.github.io/ecma262/#sec-arrayspeciescreate
	var arraySpeciesCreate = function (originalArray, length) {
	  var C;
	  if (isArray(originalArray)) {
	    C = originalArray.constructor;
	    // cross-realm fallback
	    if (typeof C == 'function' && (C === Array || isArray(C.prototype))) C = undefined;
	    else if (isObject(C)) {
	      C = C[SPECIES];
	      if (C === null) C = undefined;
	    }
	  } return new (C === undefined ? Array : C)(length === 0 ? 0 : length);
	};

	var push = [].push;

	// `Array.prototype.{ forEach, map, filter, some, every, find, findIndex }` methods implementation
	var createMethod$1 = function (TYPE) {
	  var IS_MAP = TYPE == 1;
	  var IS_FILTER = TYPE == 2;
	  var IS_SOME = TYPE == 3;
	  var IS_EVERY = TYPE == 4;
	  var IS_FIND_INDEX = TYPE == 6;
	  var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;
	  return function ($this, callbackfn, that, specificCreate) {
	    var O = toObject($this);
	    var self = indexedObject(O);
	    var boundFunction = bindContext(callbackfn, that, 3);
	    var length = toLength(self.length);
	    var index = 0;
	    var create = specificCreate || arraySpeciesCreate;
	    var target = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : undefined;
	    var value, result;
	    for (;length > index; index++) if (NO_HOLES || index in self) {
	      value = self[index];
	      result = boundFunction(value, index, O);
	      if (TYPE) {
	        if (IS_MAP) target[index] = result; // map
	        else if (result) switch (TYPE) {
	          case 3: return true;              // some
	          case 5: return value;             // find
	          case 6: return index;             // findIndex
	          case 2: push.call(target, value); // filter
	        } else if (IS_EVERY) return false;  // every
	      }
	    }
	    return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : target;
	  };
	};

	var arrayIteration = {
	  // `Array.prototype.forEach` method
	  // https://tc39.github.io/ecma262/#sec-array.prototype.foreach
	  forEach: createMethod$1(0),
	  // `Array.prototype.map` method
	  // https://tc39.github.io/ecma262/#sec-array.prototype.map
	  map: createMethod$1(1),
	  // `Array.prototype.filter` method
	  // https://tc39.github.io/ecma262/#sec-array.prototype.filter
	  filter: createMethod$1(2),
	  // `Array.prototype.some` method
	  // https://tc39.github.io/ecma262/#sec-array.prototype.some
	  some: createMethod$1(3),
	  // `Array.prototype.every` method
	  // https://tc39.github.io/ecma262/#sec-array.prototype.every
	  every: createMethod$1(4),
	  // `Array.prototype.find` method
	  // https://tc39.github.io/ecma262/#sec-array.prototype.find
	  find: createMethod$1(5),
	  // `Array.prototype.findIndex` method
	  // https://tc39.github.io/ecma262/#sec-array.prototype.findIndex
	  findIndex: createMethod$1(6)
	};

	var $forEach = arrayIteration.forEach;

	var HIDDEN = sharedKey('hidden');
	var SYMBOL = 'Symbol';
	var PROTOTYPE$1 = 'prototype';
	var TO_PRIMITIVE = wellKnownSymbol('toPrimitive');
	var setInternalState = internalState.set;
	var getInternalState = internalState.getterFor(SYMBOL);
	var ObjectPrototype = Object[PROTOTYPE$1];
	var $Symbol = global_1.Symbol;
	var $stringify = getBuiltIn('JSON', 'stringify');
	var nativeGetOwnPropertyDescriptor$1 = objectGetOwnPropertyDescriptor.f;
	var nativeDefineProperty$1 = objectDefineProperty.f;
	var nativeGetOwnPropertyNames$1 = objectGetOwnPropertyNamesExternal.f;
	var nativePropertyIsEnumerable$1 = objectPropertyIsEnumerable.f;
	var AllSymbols = shared('symbols');
	var ObjectPrototypeSymbols = shared('op-symbols');
	var StringToSymbolRegistry = shared('string-to-symbol-registry');
	var SymbolToStringRegistry = shared('symbol-to-string-registry');
	var WellKnownSymbolsStore$1 = shared('wks');
	var QObject = global_1.QObject;
	// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173
	var USE_SETTER = !QObject || !QObject[PROTOTYPE$1] || !QObject[PROTOTYPE$1].findChild;

	// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687
	var setSymbolDescriptor = descriptors && fails(function () {
	  return objectCreate(nativeDefineProperty$1({}, 'a', {
	    get: function () { return nativeDefineProperty$1(this, 'a', { value: 7 }).a; }
	  })).a != 7;
	}) ? function (O, P, Attributes) {
	  var ObjectPrototypeDescriptor = nativeGetOwnPropertyDescriptor$1(ObjectPrototype, P);
	  if (ObjectPrototypeDescriptor) delete ObjectPrototype[P];
	  nativeDefineProperty$1(O, P, Attributes);
	  if (ObjectPrototypeDescriptor && O !== ObjectPrototype) {
	    nativeDefineProperty$1(ObjectPrototype, P, ObjectPrototypeDescriptor);
	  }
	} : nativeDefineProperty$1;

	var wrap = function (tag, description) {
	  var symbol = AllSymbols[tag] = objectCreate($Symbol[PROTOTYPE$1]);
	  setInternalState(symbol, {
	    type: SYMBOL,
	    tag: tag,
	    description: description
	  });
	  if (!descriptors) symbol.description = description;
	  return symbol;
	};

	var isSymbol = nativeSymbol && typeof $Symbol.iterator == 'symbol' ? function (it) {
	  return typeof it == 'symbol';
	} : function (it) {
	  return Object(it) instanceof $Symbol;
	};

	var $defineProperty = function defineProperty(O, P, Attributes) {
	  if (O === ObjectPrototype) $defineProperty(ObjectPrototypeSymbols, P, Attributes);
	  anObject(O);
	  var key = toPrimitive(P, true);
	  anObject(Attributes);
	  if (has(AllSymbols, key)) {
	    if (!Attributes.enumerable) {
	      if (!has(O, HIDDEN)) nativeDefineProperty$1(O, HIDDEN, createPropertyDescriptor(1, {}));
	      O[HIDDEN][key] = true;
	    } else {
	      if (has(O, HIDDEN) && O[HIDDEN][key]) O[HIDDEN][key] = false;
	      Attributes = objectCreate(Attributes, { enumerable: createPropertyDescriptor(0, false) });
	    } return setSymbolDescriptor(O, key, Attributes);
	  } return nativeDefineProperty$1(O, key, Attributes);
	};

	var $defineProperties = function defineProperties(O, Properties) {
	  anObject(O);
	  var properties = toIndexedObject(Properties);
	  var keys = objectKeys(properties).concat($getOwnPropertySymbols(properties));
	  $forEach(keys, function (key) {
	    if (!descriptors || $propertyIsEnumerable.call(properties, key)) $defineProperty(O, key, properties[key]);
	  });
	  return O;
	};

	var $create = function create(O, Properties) {
	  return Properties === undefined ? objectCreate(O) : $defineProperties(objectCreate(O), Properties);
	};

	var $propertyIsEnumerable = function propertyIsEnumerable(V) {
	  var P = toPrimitive(V, true);
	  var enumerable = nativePropertyIsEnumerable$1.call(this, P);
	  if (this === ObjectPrototype && has(AllSymbols, P) && !has(ObjectPrototypeSymbols, P)) return false;
	  return enumerable || !has(this, P) || !has(AllSymbols, P) || has(this, HIDDEN) && this[HIDDEN][P] ? enumerable : true;
	};

	var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(O, P) {
	  var it = toIndexedObject(O);
	  var key = toPrimitive(P, true);
	  if (it === ObjectPrototype && has(AllSymbols, key) && !has(ObjectPrototypeSymbols, key)) return;
	  var descriptor = nativeGetOwnPropertyDescriptor$1(it, key);
	  if (descriptor && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key])) {
	    descriptor.enumerable = true;
	  }
	  return descriptor;
	};

	var $getOwnPropertyNames = function getOwnPropertyNames(O) {
	  var names = nativeGetOwnPropertyNames$1(toIndexedObject(O));
	  var result = [];
	  $forEach(names, function (key) {
	    if (!has(AllSymbols, key) && !has(hiddenKeys, key)) result.push(key);
	  });
	  return result;
	};

	var $getOwnPropertySymbols = function getOwnPropertySymbols(O) {
	  var IS_OBJECT_PROTOTYPE = O === ObjectPrototype;
	  var names = nativeGetOwnPropertyNames$1(IS_OBJECT_PROTOTYPE ? ObjectPrototypeSymbols : toIndexedObject(O));
	  var result = [];
	  $forEach(names, function (key) {
	    if (has(AllSymbols, key) && (!IS_OBJECT_PROTOTYPE || has(ObjectPrototype, key))) {
	      result.push(AllSymbols[key]);
	    }
	  });
	  return result;
	};

	// `Symbol` constructor
	// https://tc39.github.io/ecma262/#sec-symbol-constructor
	if (!nativeSymbol) {
	  $Symbol = function Symbol() {
	    if (this instanceof $Symbol) throw TypeError('Symbol is not a constructor');
	    var description = !arguments.length || arguments[0] === undefined ? undefined : String(arguments[0]);
	    var tag = uid(description);
	    var setter = function (value) {
	      if (this === ObjectPrototype) setter.call(ObjectPrototypeSymbols, value);
	      if (has(this, HIDDEN) && has(this[HIDDEN], tag)) this[HIDDEN][tag] = false;
	      setSymbolDescriptor(this, tag, createPropertyDescriptor(1, value));
	    };
	    if (descriptors && USE_SETTER) setSymbolDescriptor(ObjectPrototype, tag, { configurable: true, set: setter });
	    return wrap(tag, description);
	  };

	  redefine($Symbol[PROTOTYPE$1], 'toString', function toString() {
	    return getInternalState(this).tag;
	  });

	  objectPropertyIsEnumerable.f = $propertyIsEnumerable;
	  objectDefineProperty.f = $defineProperty;
	  objectGetOwnPropertyDescriptor.f = $getOwnPropertyDescriptor;
	  objectGetOwnPropertyNames.f = objectGetOwnPropertyNamesExternal.f = $getOwnPropertyNames;
	  objectGetOwnPropertySymbols.f = $getOwnPropertySymbols;

	  if (descriptors) {
	    // https://github.com/tc39/proposal-Symbol-description
	    nativeDefineProperty$1($Symbol[PROTOTYPE$1], 'description', {
	      configurable: true,
	      get: function description() {
	        return getInternalState(this).description;
	      }
	    });
	    {
	      redefine(ObjectPrototype, 'propertyIsEnumerable', $propertyIsEnumerable, { unsafe: true });
	    }
	  }
	}

	if (!useSymbolAsUid) {
	  wrappedWellKnownSymbol.f = function (name) {
	    return wrap(wellKnownSymbol(name), name);
	  };
	}

	_export({ global: true, wrap: true, forced: !nativeSymbol, sham: !nativeSymbol }, {
	  Symbol: $Symbol
	});

	$forEach(objectKeys(WellKnownSymbolsStore$1), function (name) {
	  defineWellKnownSymbol(name);
	});

	_export({ target: SYMBOL, stat: true, forced: !nativeSymbol }, {
	  // `Symbol.for` method
	  // https://tc39.github.io/ecma262/#sec-symbol.for
	  'for': function (key) {
	    var string = String(key);
	    if (has(StringToSymbolRegistry, string)) return StringToSymbolRegistry[string];
	    var symbol = $Symbol(string);
	    StringToSymbolRegistry[string] = symbol;
	    SymbolToStringRegistry[symbol] = string;
	    return symbol;
	  },
	  // `Symbol.keyFor` method
	  // https://tc39.github.io/ecma262/#sec-symbol.keyfor
	  keyFor: function keyFor(sym) {
	    if (!isSymbol(sym)) throw TypeError(sym + ' is not a symbol');
	    if (has(SymbolToStringRegistry, sym)) return SymbolToStringRegistry[sym];
	  },
	  useSetter: function () { USE_SETTER = true; },
	  useSimple: function () { USE_SETTER = false; }
	});

	_export({ target: 'Object', stat: true, forced: !nativeSymbol, sham: !descriptors }, {
	  // `Object.create` method
	  // https://tc39.github.io/ecma262/#sec-object.create
	  create: $create,
	  // `Object.defineProperty` method
	  // https://tc39.github.io/ecma262/#sec-object.defineproperty
	  defineProperty: $defineProperty,
	  // `Object.defineProperties` method
	  // https://tc39.github.io/ecma262/#sec-object.defineproperties
	  defineProperties: $defineProperties,
	  // `Object.getOwnPropertyDescriptor` method
	  // https://tc39.github.io/ecma262/#sec-object.getownpropertydescriptors
	  getOwnPropertyDescriptor: $getOwnPropertyDescriptor
	});

	_export({ target: 'Object', stat: true, forced: !nativeSymbol }, {
	  // `Object.getOwnPropertyNames` method
	  // https://tc39.github.io/ecma262/#sec-object.getownpropertynames
	  getOwnPropertyNames: $getOwnPropertyNames,
	  // `Object.getOwnPropertySymbols` method
	  // https://tc39.github.io/ecma262/#sec-object.getownpropertysymbols
	  getOwnPropertySymbols: $getOwnPropertySymbols
	});

	// Chrome 38 and 39 `Object.getOwnPropertySymbols` fails on primitives
	// https://bugs.chromium.org/p/v8/issues/detail?id=3443
	_export({ target: 'Object', stat: true, forced: fails(function () { objectGetOwnPropertySymbols.f(1); }) }, {
	  getOwnPropertySymbols: function getOwnPropertySymbols(it) {
	    return objectGetOwnPropertySymbols.f(toObject(it));
	  }
	});

	// `JSON.stringify` method behavior with symbols
	// https://tc39.github.io/ecma262/#sec-json.stringify
	if ($stringify) {
	  var FORCED_JSON_STRINGIFY = !nativeSymbol || fails(function () {
	    var symbol = $Symbol();
	    // MS Edge converts symbol values to JSON as {}
	    return $stringify([symbol]) != '[null]'
	      // WebKit converts symbol values to JSON as null
	      || $stringify({ a: symbol }) != '{}'
	      // V8 throws on boxed symbols
	      || $stringify(Object(symbol)) != '{}';
	  });

	  _export({ target: 'JSON', stat: true, forced: FORCED_JSON_STRINGIFY }, {
	    // eslint-disable-next-line no-unused-vars
	    stringify: function stringify(it, replacer, space) {
	      var args = [it];
	      var index = 1;
	      var $replacer;
	      while (arguments.length > index) args.push(arguments[index++]);
	      $replacer = replacer;
	      if (!isObject(replacer) && it === undefined || isSymbol(it)) return; // IE8 returns string on undefined
	      if (!isArray(replacer)) replacer = function (key, value) {
	        if (typeof $replacer == 'function') value = $replacer.call(this, key, value);
	        if (!isSymbol(value)) return value;
	      };
	      args[1] = replacer;
	      return $stringify.apply(null, args);
	    }
	  });
	}

	// `Symbol.prototype[@@toPrimitive]` method
	// https://tc39.github.io/ecma262/#sec-symbol.prototype-@@toprimitive
	if (!$Symbol[PROTOTYPE$1][TO_PRIMITIVE]) {
	  createNonEnumerableProperty($Symbol[PROTOTYPE$1], TO_PRIMITIVE, $Symbol[PROTOTYPE$1].valueOf);
	}
	// `Symbol.prototype[@@toStringTag]` property
	// https://tc39.github.io/ecma262/#sec-symbol.prototype-@@tostringtag
	setToStringTag($Symbol, SYMBOL);

	hiddenKeys[HIDDEN] = true;

	var defineProperty$2 = objectDefineProperty.f;


	var NativeSymbol = global_1.Symbol;

	if (descriptors && typeof NativeSymbol == 'function' && (!('description' in NativeSymbol.prototype) ||
	  // Safari 12 bug
	  NativeSymbol().description !== undefined
	)) {
	  var EmptyStringDescriptionStore = {};
	  // wrap Symbol constructor for correct work with undefined description
	  var SymbolWrapper = function Symbol() {
	    var description = arguments.length < 1 || arguments[0] === undefined ? undefined : String(arguments[0]);
	    var result = this instanceof SymbolWrapper
	      ? new NativeSymbol(description)
	      // in Edge 13, String(Symbol(undefined)) === 'Symbol(undefined)'
	      : description === undefined ? NativeSymbol() : NativeSymbol(description);
	    if (description === '') EmptyStringDescriptionStore[result] = true;
	    return result;
	  };
	  copyConstructorProperties(SymbolWrapper, NativeSymbol);
	  var symbolPrototype = SymbolWrapper.prototype = NativeSymbol.prototype;
	  symbolPrototype.constructor = SymbolWrapper;

	  var symbolToString = symbolPrototype.toString;
	  var native = String(NativeSymbol('test')) == 'Symbol(test)';
	  var regexp = /^Symbol\((.*)\)[^)]+$/;
	  defineProperty$2(symbolPrototype, 'description', {
	    configurable: true,
	    get: function description() {
	      var symbol = isObject(this) ? this.valueOf() : this;
	      var string = symbolToString.call(symbol);
	      if (has(EmptyStringDescriptionStore, symbol)) return '';
	      var desc = native ? string.slice(7, -1) : string.replace(regexp, '$1');
	      return desc === '' ? undefined : desc;
	    }
	  });

	  _export({ global: true, forced: true }, {
	    Symbol: SymbolWrapper
	  });
	}

	// `Symbol.iterator` well-known symbol
	// https://tc39.github.io/ecma262/#sec-symbol.iterator
	defineWellKnownSymbol('iterator');

	var UNSCOPABLES = wellKnownSymbol('unscopables');
	var ArrayPrototype = Array.prototype;

	// Array.prototype[@@unscopables]
	// https://tc39.github.io/ecma262/#sec-array.prototype-@@unscopables
	if (ArrayPrototype[UNSCOPABLES] == undefined) {
	  objectDefineProperty.f(ArrayPrototype, UNSCOPABLES, {
	    configurable: true,
	    value: objectCreate(null)
	  });
	}

	// add a key to Array.prototype[@@unscopables]
	var addToUnscopables = function (key) {
	  ArrayPrototype[UNSCOPABLES][key] = true;
	};

	var iterators = {};

	var correctPrototypeGetter = !fails(function () {
	  function F() { /* empty */ }
	  F.prototype.constructor = null;
	  return Object.getPrototypeOf(new F()) !== F.prototype;
	});

	var IE_PROTO$1 = sharedKey('IE_PROTO');
	var ObjectPrototype$1 = Object.prototype;

	// `Object.getPrototypeOf` method
	// https://tc39.github.io/ecma262/#sec-object.getprototypeof
	var objectGetPrototypeOf = correctPrototypeGetter ? Object.getPrototypeOf : function (O) {
	  O = toObject(O);
	  if (has(O, IE_PROTO$1)) return O[IE_PROTO$1];
	  if (typeof O.constructor == 'function' && O instanceof O.constructor) {
	    return O.constructor.prototype;
	  } return O instanceof Object ? ObjectPrototype$1 : null;
	};

	var ITERATOR = wellKnownSymbol('iterator');
	var BUGGY_SAFARI_ITERATORS = false;

	var returnThis = function () { return this; };

	// `%IteratorPrototype%` object
	// https://tc39.github.io/ecma262/#sec-%iteratorprototype%-object
	var IteratorPrototype, PrototypeOfArrayIteratorPrototype, arrayIterator;

	if ([].keys) {
	  arrayIterator = [].keys();
	  // Safari 8 has buggy iterators w/o `next`
	  if (!('next' in arrayIterator)) BUGGY_SAFARI_ITERATORS = true;
	  else {
	    PrototypeOfArrayIteratorPrototype = objectGetPrototypeOf(objectGetPrototypeOf(arrayIterator));
	    if (PrototypeOfArrayIteratorPrototype !== Object.prototype) IteratorPrototype = PrototypeOfArrayIteratorPrototype;
	  }
	}

	if (IteratorPrototype == undefined) IteratorPrototype = {};

	// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
	if (!has(IteratorPrototype, ITERATOR)) {
	  createNonEnumerableProperty(IteratorPrototype, ITERATOR, returnThis);
	}

	var iteratorsCore = {
	  IteratorPrototype: IteratorPrototype,
	  BUGGY_SAFARI_ITERATORS: BUGGY_SAFARI_ITERATORS
	};

	var IteratorPrototype$1 = iteratorsCore.IteratorPrototype;





	var returnThis$1 = function () { return this; };

	var createIteratorConstructor = function (IteratorConstructor, NAME, next) {
	  var TO_STRING_TAG = NAME + ' Iterator';
	  IteratorConstructor.prototype = objectCreate(IteratorPrototype$1, { next: createPropertyDescriptor(1, next) });
	  setToStringTag(IteratorConstructor, TO_STRING_TAG, false, true);
	  iterators[TO_STRING_TAG] = returnThis$1;
	  return IteratorConstructor;
	};

	var aPossiblePrototype = function (it) {
	  if (!isObject(it) && it !== null) {
	    throw TypeError("Can't set " + String(it) + ' as a prototype');
	  } return it;
	};

	// `Object.setPrototypeOf` method
	// https://tc39.github.io/ecma262/#sec-object.setprototypeof
	// Works with __proto__ only. Old v8 can't work with null proto objects.
	/* eslint-disable no-proto */
	var objectSetPrototypeOf = Object.setPrototypeOf || ('__proto__' in {} ? function () {
	  var CORRECT_SETTER = false;
	  var test = {};
	  var setter;
	  try {
	    setter = Object.getOwnPropertyDescriptor(Object.prototype, '__proto__').set;
	    setter.call(test, []);
	    CORRECT_SETTER = test instanceof Array;
	  } catch (error) { /* empty */ }
	  return function setPrototypeOf(O, proto) {
	    anObject(O);
	    aPossiblePrototype(proto);
	    if (CORRECT_SETTER) setter.call(O, proto);
	    else O.__proto__ = proto;
	    return O;
	  };
	}() : undefined);

	var IteratorPrototype$2 = iteratorsCore.IteratorPrototype;
	var BUGGY_SAFARI_ITERATORS$1 = iteratorsCore.BUGGY_SAFARI_ITERATORS;
	var ITERATOR$1 = wellKnownSymbol('iterator');
	var KEYS = 'keys';
	var VALUES = 'values';
	var ENTRIES = 'entries';

	var returnThis$2 = function () { return this; };

	var defineIterator = function (Iterable, NAME, IteratorConstructor, next, DEFAULT, IS_SET, FORCED) {
	  createIteratorConstructor(IteratorConstructor, NAME, next);

	  var getIterationMethod = function (KIND) {
	    if (KIND === DEFAULT && defaultIterator) return defaultIterator;
	    if (!BUGGY_SAFARI_ITERATORS$1 && KIND in IterablePrototype) return IterablePrototype[KIND];
	    switch (KIND) {
	      case KEYS: return function keys() { return new IteratorConstructor(this, KIND); };
	      case VALUES: return function values() { return new IteratorConstructor(this, KIND); };
	      case ENTRIES: return function entries() { return new IteratorConstructor(this, KIND); };
	    } return function () { return new IteratorConstructor(this); };
	  };

	  var TO_STRING_TAG = NAME + ' Iterator';
	  var INCORRECT_VALUES_NAME = false;
	  var IterablePrototype = Iterable.prototype;
	  var nativeIterator = IterablePrototype[ITERATOR$1]
	    || IterablePrototype['@@iterator']
	    || DEFAULT && IterablePrototype[DEFAULT];
	  var defaultIterator = !BUGGY_SAFARI_ITERATORS$1 && nativeIterator || getIterationMethod(DEFAULT);
	  var anyNativeIterator = NAME == 'Array' ? IterablePrototype.entries || nativeIterator : nativeIterator;
	  var CurrentIteratorPrototype, methods, KEY;

	  // fix native
	  if (anyNativeIterator) {
	    CurrentIteratorPrototype = objectGetPrototypeOf(anyNativeIterator.call(new Iterable()));
	    if (IteratorPrototype$2 !== Object.prototype && CurrentIteratorPrototype.next) {
	      if (objectGetPrototypeOf(CurrentIteratorPrototype) !== IteratorPrototype$2) {
	        if (objectSetPrototypeOf) {
	          objectSetPrototypeOf(CurrentIteratorPrototype, IteratorPrototype$2);
	        } else if (typeof CurrentIteratorPrototype[ITERATOR$1] != 'function') {
	          createNonEnumerableProperty(CurrentIteratorPrototype, ITERATOR$1, returnThis$2);
	        }
	      }
	      // Set @@toStringTag to native iterators
	      setToStringTag(CurrentIteratorPrototype, TO_STRING_TAG, true, true);
	    }
	  }

	  // fix Array#{values, @@iterator}.name in V8 / FF
	  if (DEFAULT == VALUES && nativeIterator && nativeIterator.name !== VALUES) {
	    INCORRECT_VALUES_NAME = true;
	    defaultIterator = function values() { return nativeIterator.call(this); };
	  }

	  // define iterator
	  if (IterablePrototype[ITERATOR$1] !== defaultIterator) {
	    createNonEnumerableProperty(IterablePrototype, ITERATOR$1, defaultIterator);
	  }
	  iterators[NAME] = defaultIterator;

	  // export additional methods
	  if (DEFAULT) {
	    methods = {
	      values: getIterationMethod(VALUES),
	      keys: IS_SET ? defaultIterator : getIterationMethod(KEYS),
	      entries: getIterationMethod(ENTRIES)
	    };
	    if (FORCED) for (KEY in methods) {
	      if (BUGGY_SAFARI_ITERATORS$1 || INCORRECT_VALUES_NAME || !(KEY in IterablePrototype)) {
	        redefine(IterablePrototype, KEY, methods[KEY]);
	      }
	    } else _export({ target: NAME, proto: true, forced: BUGGY_SAFARI_ITERATORS$1 || INCORRECT_VALUES_NAME }, methods);
	  }

	  return methods;
	};

	var ARRAY_ITERATOR = 'Array Iterator';
	var setInternalState$1 = internalState.set;
	var getInternalState$1 = internalState.getterFor(ARRAY_ITERATOR);

	// `Array.prototype.entries` method
	// https://tc39.github.io/ecma262/#sec-array.prototype.entries
	// `Array.prototype.keys` method
	// https://tc39.github.io/ecma262/#sec-array.prototype.keys
	// `Array.prototype.values` method
	// https://tc39.github.io/ecma262/#sec-array.prototype.values
	// `Array.prototype[@@iterator]` method
	// https://tc39.github.io/ecma262/#sec-array.prototype-@@iterator
	// `CreateArrayIterator` internal method
	// https://tc39.github.io/ecma262/#sec-createarrayiterator
	var es_array_iterator = defineIterator(Array, 'Array', function (iterated, kind) {
	  setInternalState$1(this, {
	    type: ARRAY_ITERATOR,
	    target: toIndexedObject(iterated), // target
	    index: 0,                          // next index
	    kind: kind                         // kind
	  });
	// `%ArrayIteratorPrototype%.next` method
	// https://tc39.github.io/ecma262/#sec-%arrayiteratorprototype%.next
	}, function () {
	  var state = getInternalState$1(this);
	  var target = state.target;
	  var kind = state.kind;
	  var index = state.index++;
	  if (!target || index >= target.length) {
	    state.target = undefined;
	    return { value: undefined, done: true };
	  }
	  if (kind == 'keys') return { value: index, done: false };
	  if (kind == 'values') return { value: target[index], done: false };
	  return { value: [index, target[index]], done: false };
	}, 'values');

	// argumentsList[@@iterator] is %ArrayProto_values%
	// https://tc39.github.io/ecma262/#sec-createunmappedargumentsobject
	// https://tc39.github.io/ecma262/#sec-createmappedargumentsobject
	iterators.Arguments = iterators.Array;

	// https://tc39.github.io/ecma262/#sec-array.prototype-@@unscopables
	addToUnscopables('keys');
	addToUnscopables('values');
	addToUnscopables('entries');

	// `Object.defineProperty` method
	// https://tc39.github.io/ecma262/#sec-object.defineproperty
	_export({ target: 'Object', stat: true, forced: !descriptors, sham: !descriptors }, {
	  defineProperty: objectDefineProperty.f
	});

	var TO_STRING_TAG$1 = wellKnownSymbol('toStringTag');
	var test = {};

	test[TO_STRING_TAG$1] = 'z';

	var toStringTagSupport = String(test) === '[object z]';

	var TO_STRING_TAG$2 = wellKnownSymbol('toStringTag');
	// ES3 wrong here
	var CORRECT_ARGUMENTS = classofRaw(function () { return arguments; }()) == 'Arguments';

	// fallback for IE11 Script Access Denied error
	var tryGet = function (it, key) {
	  try {
	    return it[key];
	  } catch (error) { /* empty */ }
	};

	// getting tag from ES6+ `Object.prototype.toString`
	var classof = toStringTagSupport ? classofRaw : function (it) {
	  var O, tag, result;
	  return it === undefined ? 'Undefined' : it === null ? 'Null'
	    // @@toStringTag case
	    : typeof (tag = tryGet(O = Object(it), TO_STRING_TAG$2)) == 'string' ? tag
	    // builtinTag case
	    : CORRECT_ARGUMENTS ? classofRaw(O)
	    // ES3 arguments fallback
	    : (result = classofRaw(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : result;
	};

	// `Object.prototype.toString` method implementation
	// https://tc39.github.io/ecma262/#sec-object.prototype.tostring
	var objectToString = toStringTagSupport ? {}.toString : function toString() {
	  return '[object ' + classof(this) + ']';
	};

	// `Object.prototype.toString` method
	// https://tc39.github.io/ecma262/#sec-object.prototype.tostring
	if (!toStringTagSupport) {
	  redefine(Object.prototype, 'toString', objectToString, { unsafe: true });
	}

	var nativePromiseConstructor = global_1.Promise;

	var redefineAll = function (target, src, options) {
	  for (var key in src) redefine(target, key, src[key], options);
	  return target;
	};

	var SPECIES$1 = wellKnownSymbol('species');

	var setSpecies = function (CONSTRUCTOR_NAME) {
	  var Constructor = getBuiltIn(CONSTRUCTOR_NAME);
	  var defineProperty = objectDefineProperty.f;

	  if (descriptors && Constructor && !Constructor[SPECIES$1]) {
	    defineProperty(Constructor, SPECIES$1, {
	      configurable: true,
	      get: function () { return this; }
	    });
	  }
	};

	var anInstance = function (it, Constructor, name) {
	  if (!(it instanceof Constructor)) {
	    throw TypeError('Incorrect ' + (name ? name + ' ' : '') + 'invocation');
	  } return it;
	};

	var ITERATOR$2 = wellKnownSymbol('iterator');
	var ArrayPrototype$1 = Array.prototype;

	// check on default Array iterator
	var isArrayIteratorMethod = function (it) {
	  return it !== undefined && (iterators.Array === it || ArrayPrototype$1[ITERATOR$2] === it);
	};

	var ITERATOR$3 = wellKnownSymbol('iterator');

	var getIteratorMethod = function (it) {
	  if (it != undefined) return it[ITERATOR$3]
	    || it['@@iterator']
	    || iterators[classof(it)];
	};

	// call something on iterator step with safe closing on error
	var callWithSafeIterationClosing = function (iterator, fn, value, ENTRIES) {
	  try {
	    return ENTRIES ? fn(anObject(value)[0], value[1]) : fn(value);
	  // 7.4.6 IteratorClose(iterator, completion)
	  } catch (error) {
	    var returnMethod = iterator['return'];
	    if (returnMethod !== undefined) anObject(returnMethod.call(iterator));
	    throw error;
	  }
	};

	var iterate_1 = createCommonjsModule(function (module) {
	var Result = function (stopped, result) {
	  this.stopped = stopped;
	  this.result = result;
	};

	var iterate = module.exports = function (iterable, fn, that, AS_ENTRIES, IS_ITERATOR) {
	  var boundFunction = bindContext(fn, that, AS_ENTRIES ? 2 : 1);
	  var iterator, iterFn, index, length, result, next, step;

	  if (IS_ITERATOR) {
	    iterator = iterable;
	  } else {
	    iterFn = getIteratorMethod(iterable);
	    if (typeof iterFn != 'function') throw TypeError('Target is not iterable');
	    // optimisation for array iterators
	    if (isArrayIteratorMethod(iterFn)) {
	      for (index = 0, length = toLength(iterable.length); length > index; index++) {
	        result = AS_ENTRIES
	          ? boundFunction(anObject(step = iterable[index])[0], step[1])
	          : boundFunction(iterable[index]);
	        if (result && result instanceof Result) return result;
	      } return new Result(false);
	    }
	    iterator = iterFn.call(iterable);
	  }

	  next = iterator.next;
	  while (!(step = next.call(iterator)).done) {
	    result = callWithSafeIterationClosing(iterator, boundFunction, step.value, AS_ENTRIES);
	    if (typeof result == 'object' && result && result instanceof Result) return result;
	  } return new Result(false);
	};

	iterate.stop = function (result) {
	  return new Result(true, result);
	};
	});

	var ITERATOR$4 = wellKnownSymbol('iterator');
	var SAFE_CLOSING = false;

	try {
	  var called = 0;
	  var iteratorWithReturn = {
	    next: function () {
	      return { done: !!called++ };
	    },
	    'return': function () {
	      SAFE_CLOSING = true;
	    }
	  };
	  iteratorWithReturn[ITERATOR$4] = function () {
	    return this;
	  };
	} catch (error) { /* empty */ }

	var checkCorrectnessOfIteration = function (exec, SKIP_CLOSING) {
	  if (!SKIP_CLOSING && !SAFE_CLOSING) return false;
	  var ITERATION_SUPPORT = false;
	  try {
	    var object = {};
	    object[ITERATOR$4] = function () {
	      return {
	        next: function () {
	          return { done: ITERATION_SUPPORT = true };
	        }
	      };
	    };
	    exec(object);
	  } catch (error) { /* empty */ }
	  return ITERATION_SUPPORT;
	};

	var SPECIES$2 = wellKnownSymbol('species');

	// `SpeciesConstructor` abstract operation
	// https://tc39.github.io/ecma262/#sec-speciesconstructor
	var speciesConstructor = function (O, defaultConstructor) {
	  var C = anObject(O).constructor;
	  var S;
	  return C === undefined || (S = anObject(C)[SPECIES$2]) == undefined ? defaultConstructor : aFunction$1(S);
	};

	var userAgent = getBuiltIn('navigator', 'userAgent') || '';

	var isIos = /(iphone|ipod|ipad).*applewebkit/i.test(userAgent);

	var location$1 = global_1.location;
	var set$1 = global_1.setImmediate;
	var clear = global_1.clearImmediate;
	var process = global_1.process;
	var MessageChannel = global_1.MessageChannel;
	var Dispatch = global_1.Dispatch;
	var counter = 0;
	var queue = {};
	var ONREADYSTATECHANGE = 'onreadystatechange';
	var defer, channel, port;

	var run = function (id) {
	  // eslint-disable-next-line no-prototype-builtins
	  if (queue.hasOwnProperty(id)) {
	    var fn = queue[id];
	    delete queue[id];
	    fn();
	  }
	};

	var runner = function (id) {
	  return function () {
	    run(id);
	  };
	};

	var listener = function (event) {
	  run(event.data);
	};

	var post = function (id) {
	  // old engines have not location.origin
	  global_1.postMessage(id + '', location$1.protocol + '//' + location$1.host);
	};

	// Node.js 0.9+ & IE10+ has setImmediate, otherwise:
	if (!set$1 || !clear) {
	  set$1 = function setImmediate(fn) {
	    var args = [];
	    var i = 1;
	    while (arguments.length > i) args.push(arguments[i++]);
	    queue[++counter] = function () {
	      // eslint-disable-next-line no-new-func
	      (typeof fn == 'function' ? fn : Function(fn)).apply(undefined, args);
	    };
	    defer(counter);
	    return counter;
	  };
	  clear = function clearImmediate(id) {
	    delete queue[id];
	  };
	  // Node.js 0.8-
	  if (classofRaw(process) == 'process') {
	    defer = function (id) {
	      process.nextTick(runner(id));
	    };
	  // Sphere (JS game engine) Dispatch API
	  } else if (Dispatch && Dispatch.now) {
	    defer = function (id) {
	      Dispatch.now(runner(id));
	    };
	  // Browsers with MessageChannel, includes WebWorkers
	  // except iOS - https://github.com/zloirock/core-js/issues/624
	  } else if (MessageChannel && !isIos) {
	    channel = new MessageChannel();
	    port = channel.port2;
	    channel.port1.onmessage = listener;
	    defer = bindContext(port.postMessage, port, 1);
	  // Browsers with postMessage, skip WebWorkers
	  // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'
	  } else if (global_1.addEventListener && typeof postMessage == 'function' && !global_1.importScripts && !fails(post)) {
	    defer = post;
	    global_1.addEventListener('message', listener, false);
	  // IE8-
	  } else if (ONREADYSTATECHANGE in documentCreateElement('script')) {
	    defer = function (id) {
	      html.appendChild(documentCreateElement('script'))[ONREADYSTATECHANGE] = function () {
	        html.removeChild(this);
	        run(id);
	      };
	    };
	  // Rest old browsers
	  } else {
	    defer = function (id) {
	      setTimeout(runner(id), 0);
	    };
	  }
	}

	var task = {
	  set: set$1,
	  clear: clear
	};

	var getOwnPropertyDescriptor$2 = objectGetOwnPropertyDescriptor.f;

	var macrotask = task.set;


	var MutationObserver$1 = global_1.MutationObserver || global_1.WebKitMutationObserver;
	var process$1 = global_1.process;
	var Promise$1 = global_1.Promise;
	var IS_NODE = classofRaw(process$1) == 'process';
	// Node.js 11 shows ExperimentalWarning on getting `queueMicrotask`
	var queueMicrotaskDescriptor = getOwnPropertyDescriptor$2(global_1, 'queueMicrotask');
	var queueMicrotask = queueMicrotaskDescriptor && queueMicrotaskDescriptor.value;

	var flush, head, last, notify, toggle, node, promise, then;

	// modern engines have queueMicrotask method
	if (!queueMicrotask) {
	  flush = function () {
	    var parent, fn;
	    if (IS_NODE && (parent = process$1.domain)) parent.exit();
	    while (head) {
	      fn = head.fn;
	      head = head.next;
	      try {
	        fn();
	      } catch (error) {
	        if (head) notify();
	        else last = undefined;
	        throw error;
	      }
	    } last = undefined;
	    if (parent) parent.enter();
	  };

	  // Node.js
	  if (IS_NODE) {
	    notify = function () {
	      process$1.nextTick(flush);
	    };
	  // browsers with MutationObserver, except iOS - https://github.com/zloirock/core-js/issues/339
	  } else if (MutationObserver$1 && !isIos) {
	    toggle = true;
	    node = document.createTextNode('');
	    new MutationObserver$1(flush).observe(node, { characterData: true });
	    notify = function () {
	      node.data = toggle = !toggle;
	    };
	  // environments with maybe non-completely correct, but existent Promise
	  } else if (Promise$1 && Promise$1.resolve) {
	    // Promise.resolve without an argument throws an error in LG WebOS 2
	    promise = Promise$1.resolve(undefined);
	    then = promise.then;
	    notify = function () {
	      then.call(promise, flush);
	    };
	  // for other environments - macrotask based on:
	  // - setImmediate
	  // - MessageChannel
	  // - window.postMessag
	  // - onreadystatechange
	  // - setTimeout
	  } else {
	    notify = function () {
	      // strange IE + webpack dev server bug - use .call(global)
	      macrotask.call(global_1, flush);
	    };
	  }
	}

	var microtask = queueMicrotask || function (fn) {
	  var task = { fn: fn, next: undefined };
	  if (last) last.next = task;
	  if (!head) {
	    head = task;
	    notify();
	  } last = task;
	};

	var PromiseCapability = function (C) {
	  var resolve, reject;
	  this.promise = new C(function ($$resolve, $$reject) {
	    if (resolve !== undefined || reject !== undefined) throw TypeError('Bad Promise constructor');
	    resolve = $$resolve;
	    reject = $$reject;
	  });
	  this.resolve = aFunction$1(resolve);
	  this.reject = aFunction$1(reject);
	};

	// 25.4.1.5 NewPromiseCapability(C)
	var f$7 = function (C) {
	  return new PromiseCapability(C);
	};

	var newPromiseCapability = {
		f: f$7
	};

	var promiseResolve = function (C, x) {
	  anObject(C);
	  if (isObject(x) && x.constructor === C) return x;
	  var promiseCapability = newPromiseCapability.f(C);
	  var resolve = promiseCapability.resolve;
	  resolve(x);
	  return promiseCapability.promise;
	};

	var hostReportErrors = function (a, b) {
	  var console = global_1.console;
	  if (console && console.error) {
	    arguments.length === 1 ? console.error(a) : console.error(a, b);
	  }
	};

	var perform = function (exec) {
	  try {
	    return { error: false, value: exec() };
	  } catch (error) {
	    return { error: true, value: error };
	  }
	};

	var process$2 = global_1.process;
	var versions = process$2 && process$2.versions;
	var v8 = versions && versions.v8;
	var match, version;

	if (v8) {
	  match = v8.split('.');
	  version = match[0] + match[1];
	} else if (userAgent) {
	  match = userAgent.match(/Edge\/(\d+)/);
	  if (!match || match[1] >= 74) {
	    match = userAgent.match(/Chrome\/(\d+)/);
	    if (match) version = match[1];
	  }
	}

	var v8Version = version && +version;

	var task$1 = task.set;










	var SPECIES$3 = wellKnownSymbol('species');
	var PROMISE = 'Promise';
	var getInternalState$2 = internalState.get;
	var setInternalState$2 = internalState.set;
	var getInternalPromiseState = internalState.getterFor(PROMISE);
	var PromiseConstructor = nativePromiseConstructor;
	var TypeError$1 = global_1.TypeError;
	var document$2 = global_1.document;
	var process$3 = global_1.process;
	var $fetch = getBuiltIn('fetch');
	var newPromiseCapability$1 = newPromiseCapability.f;
	var newGenericPromiseCapability = newPromiseCapability$1;
	var IS_NODE$1 = classofRaw(process$3) == 'process';
	var DISPATCH_EVENT = !!(document$2 && document$2.createEvent && global_1.dispatchEvent);
	var UNHANDLED_REJECTION = 'unhandledrejection';
	var REJECTION_HANDLED = 'rejectionhandled';
	var PENDING = 0;
	var FULFILLED = 1;
	var REJECTED = 2;
	var HANDLED = 1;
	var UNHANDLED = 2;
	var Internal, OwnPromiseCapability, PromiseWrapper, nativeThen;

	var FORCED = isForced_1(PROMISE, function () {
	  var GLOBAL_CORE_JS_PROMISE = inspectSource(PromiseConstructor) !== String(PromiseConstructor);
	  if (!GLOBAL_CORE_JS_PROMISE) {
	    // V8 6.6 (Node 10 and Chrome 66) have a bug with resolving custom thenables
	    // https://bugs.chromium.org/p/chromium/issues/detail?id=830565
	    // We can't detect it synchronously, so just check versions
	    if (v8Version === 66) return true;
	    // Unhandled rejections tracking support, NodeJS Promise without it fails @@species test
	    if (!IS_NODE$1 && typeof PromiseRejectionEvent != 'function') return true;
	  }
	  // We can't use @@species feature detection in V8 since it causes
	  // deoptimization and performance degradation
	  // https://github.com/zloirock/core-js/issues/679
	  if (v8Version >= 51 && /native code/.test(PromiseConstructor)) return false;
	  // Detect correctness of subclassing with @@species support
	  var promise = PromiseConstructor.resolve(1);
	  var FakePromise = function (exec) {
	    exec(function () { /* empty */ }, function () { /* empty */ });
	  };
	  var constructor = promise.constructor = {};
	  constructor[SPECIES$3] = FakePromise;
	  return !(promise.then(function () { /* empty */ }) instanceof FakePromise);
	});

	var INCORRECT_ITERATION = FORCED || !checkCorrectnessOfIteration(function (iterable) {
	  PromiseConstructor.all(iterable)['catch'](function () { /* empty */ });
	});

	// helpers
	var isThenable = function (it) {
	  var then;
	  return isObject(it) && typeof (then = it.then) == 'function' ? then : false;
	};

	var notify$1 = function (promise, state, isReject) {
	  if (state.notified) return;
	  state.notified = true;
	  var chain = state.reactions;
	  microtask(function () {
	    var value = state.value;
	    var ok = state.state == FULFILLED;
	    var index = 0;
	    // variable length - can't use forEach
	    while (chain.length > index) {
	      var reaction = chain[index++];
	      var handler = ok ? reaction.ok : reaction.fail;
	      var resolve = reaction.resolve;
	      var reject = reaction.reject;
	      var domain = reaction.domain;
	      var result, then, exited;
	      try {
	        if (handler) {
	          if (!ok) {
	            if (state.rejection === UNHANDLED) onHandleUnhandled(promise, state);
	            state.rejection = HANDLED;
	          }
	          if (handler === true) result = value;
	          else {
	            if (domain) domain.enter();
	            result = handler(value); // can throw
	            if (domain) {
	              domain.exit();
	              exited = true;
	            }
	          }
	          if (result === reaction.promise) {
	            reject(TypeError$1('Promise-chain cycle'));
	          } else if (then = isThenable(result)) {
	            then.call(result, resolve, reject);
	          } else resolve(result);
	        } else reject(value);
	      } catch (error) {
	        if (domain && !exited) domain.exit();
	        reject(error);
	      }
	    }
	    state.reactions = [];
	    state.notified = false;
	    if (isReject && !state.rejection) onUnhandled(promise, state);
	  });
	};

	var dispatchEvent = function (name, promise, reason) {
	  var event, handler;
	  if (DISPATCH_EVENT) {
	    event = document$2.createEvent('Event');
	    event.promise = promise;
	    event.reason = reason;
	    event.initEvent(name, false, true);
	    global_1.dispatchEvent(event);
	  } else event = { promise: promise, reason: reason };
	  if (handler = global_1['on' + name]) handler(event);
	  else if (name === UNHANDLED_REJECTION) hostReportErrors('Unhandled promise rejection', reason);
	};

	var onUnhandled = function (promise, state) {
	  task$1.call(global_1, function () {
	    var value = state.value;
	    var IS_UNHANDLED = isUnhandled(state);
	    var result;
	    if (IS_UNHANDLED) {
	      result = perform(function () {
	        if (IS_NODE$1) {
	          process$3.emit('unhandledRejection', value, promise);
	        } else dispatchEvent(UNHANDLED_REJECTION, promise, value);
	      });
	      // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should
	      state.rejection = IS_NODE$1 || isUnhandled(state) ? UNHANDLED : HANDLED;
	      if (result.error) throw result.value;
	    }
	  });
	};

	var isUnhandled = function (state) {
	  return state.rejection !== HANDLED && !state.parent;
	};

	var onHandleUnhandled = function (promise, state) {
	  task$1.call(global_1, function () {
	    if (IS_NODE$1) {
	      process$3.emit('rejectionHandled', promise);
	    } else dispatchEvent(REJECTION_HANDLED, promise, state.value);
	  });
	};

	var bind = function (fn, promise, state, unwrap) {
	  return function (value) {
	    fn(promise, state, value, unwrap);
	  };
	};

	var internalReject = function (promise, state, value, unwrap) {
	  if (state.done) return;
	  state.done = true;
	  if (unwrap) state = unwrap;
	  state.value = value;
	  state.state = REJECTED;
	  notify$1(promise, state, true);
	};

	var internalResolve = function (promise, state, value, unwrap) {
	  if (state.done) return;
	  state.done = true;
	  if (unwrap) state = unwrap;
	  try {
	    if (promise === value) throw TypeError$1("Promise can't be resolved itself");
	    var then = isThenable(value);
	    if (then) {
	      microtask(function () {
	        var wrapper = { done: false };
	        try {
	          then.call(value,
	            bind(internalResolve, promise, wrapper, state),
	            bind(internalReject, promise, wrapper, state)
	          );
	        } catch (error) {
	          internalReject(promise, wrapper, error, state);
	        }
	      });
	    } else {
	      state.value = value;
	      state.state = FULFILLED;
	      notify$1(promise, state, false);
	    }
	  } catch (error) {
	    internalReject(promise, { done: false }, error, state);
	  }
	};

	// constructor polyfill
	if (FORCED) {
	  // 25.4.3.1 Promise(executor)
	  PromiseConstructor = function Promise(executor) {
	    anInstance(this, PromiseConstructor, PROMISE);
	    aFunction$1(executor);
	    Internal.call(this);
	    var state = getInternalState$2(this);
	    try {
	      executor(bind(internalResolve, this, state), bind(internalReject, this, state));
	    } catch (error) {
	      internalReject(this, state, error);
	    }
	  };
	  // eslint-disable-next-line no-unused-vars
	  Internal = function Promise(executor) {
	    setInternalState$2(this, {
	      type: PROMISE,
	      done: false,
	      notified: false,
	      parent: false,
	      reactions: [],
	      rejection: false,
	      state: PENDING,
	      value: undefined
	    });
	  };
	  Internal.prototype = redefineAll(PromiseConstructor.prototype, {
	    // `Promise.prototype.then` method
	    // https://tc39.github.io/ecma262/#sec-promise.prototype.then
	    then: function then(onFulfilled, onRejected) {
	      var state = getInternalPromiseState(this);
	      var reaction = newPromiseCapability$1(speciesConstructor(this, PromiseConstructor));
	      reaction.ok = typeof onFulfilled == 'function' ? onFulfilled : true;
	      reaction.fail = typeof onRejected == 'function' && onRejected;
	      reaction.domain = IS_NODE$1 ? process$3.domain : undefined;
	      state.parent = true;
	      state.reactions.push(reaction);
	      if (state.state != PENDING) notify$1(this, state, false);
	      return reaction.promise;
	    },
	    // `Promise.prototype.catch` method
	    // https://tc39.github.io/ecma262/#sec-promise.prototype.catch
	    'catch': function (onRejected) {
	      return this.then(undefined, onRejected);
	    }
	  });
	  OwnPromiseCapability = function () {
	    var promise = new Internal();
	    var state = getInternalState$2(promise);
	    this.promise = promise;
	    this.resolve = bind(internalResolve, promise, state);
	    this.reject = bind(internalReject, promise, state);
	  };
	  newPromiseCapability.f = newPromiseCapability$1 = function (C) {
	    return C === PromiseConstructor || C === PromiseWrapper
	      ? new OwnPromiseCapability(C)
	      : newGenericPromiseCapability(C);
	  };

	  if (typeof nativePromiseConstructor == 'function') {
	    nativeThen = nativePromiseConstructor.prototype.then;

	    // wrap native Promise#then for native async functions
	    redefine(nativePromiseConstructor.prototype, 'then', function then(onFulfilled, onRejected) {
	      var that = this;
	      return new PromiseConstructor(function (resolve, reject) {
	        nativeThen.call(that, resolve, reject);
	      }).then(onFulfilled, onRejected);
	    // https://github.com/zloirock/core-js/issues/640
	    }, { unsafe: true });

	    // wrap fetch result
	    if (typeof $fetch == 'function') _export({ global: true, enumerable: true, forced: true }, {
	      // eslint-disable-next-line no-unused-vars
	      fetch: function fetch(input /* , init */) {
	        return promiseResolve(PromiseConstructor, $fetch.apply(global_1, arguments));
	      }
	    });
	  }
	}

	_export({ global: true, wrap: true, forced: FORCED }, {
	  Promise: PromiseConstructor
	});

	setToStringTag(PromiseConstructor, PROMISE, false, true);
	setSpecies(PROMISE);

	PromiseWrapper = getBuiltIn(PROMISE);

	// statics
	_export({ target: PROMISE, stat: true, forced: FORCED }, {
	  // `Promise.reject` method
	  // https://tc39.github.io/ecma262/#sec-promise.reject
	  reject: function reject(r) {
	    var capability = newPromiseCapability$1(this);
	    capability.reject.call(undefined, r);
	    return capability.promise;
	  }
	});

	_export({ target: PROMISE, stat: true, forced: FORCED }, {
	  // `Promise.resolve` method
	  // https://tc39.github.io/ecma262/#sec-promise.resolve
	  resolve: function resolve(x) {
	    return promiseResolve(this, x);
	  }
	});

	_export({ target: PROMISE, stat: true, forced: INCORRECT_ITERATION }, {
	  // `Promise.all` method
	  // https://tc39.github.io/ecma262/#sec-promise.all
	  all: function all(iterable) {
	    var C = this;
	    var capability = newPromiseCapability$1(C);
	    var resolve = capability.resolve;
	    var reject = capability.reject;
	    var result = perform(function () {
	      var $promiseResolve = aFunction$1(C.resolve);
	      var values = [];
	      var counter = 0;
	      var remaining = 1;
	      iterate_1(iterable, function (promise) {
	        var index = counter++;
	        var alreadyCalled = false;
	        values.push(undefined);
	        remaining++;
	        $promiseResolve.call(C, promise).then(function (value) {
	          if (alreadyCalled) return;
	          alreadyCalled = true;
	          values[index] = value;
	          --remaining || resolve(values);
	        }, reject);
	      });
	      --remaining || resolve(values);
	    });
	    if (result.error) reject(result.value);
	    return capability.promise;
	  },
	  // `Promise.race` method
	  // https://tc39.github.io/ecma262/#sec-promise.race
	  race: function race(iterable) {
	    var C = this;
	    var capability = newPromiseCapability$1(C);
	    var reject = capability.reject;
	    var result = perform(function () {
	      var $promiseResolve = aFunction$1(C.resolve);
	      iterate_1(iterable, function (promise) {
	        $promiseResolve.call(C, promise).then(capability.resolve, reject);
	      });
	    });
	    if (result.error) reject(result.value);
	    return capability.promise;
	  }
	});

	// `String.prototype.{ codePointAt, at }` methods implementation
	var createMethod$2 = function (CONVERT_TO_STRING) {
	  return function ($this, pos) {
	    var S = String(requireObjectCoercible($this));
	    var position = toInteger(pos);
	    var size = S.length;
	    var first, second;
	    if (position < 0 || position >= size) return CONVERT_TO_STRING ? '' : undefined;
	    first = S.charCodeAt(position);
	    return first < 0xD800 || first > 0xDBFF || position + 1 === size
	      || (second = S.charCodeAt(position + 1)) < 0xDC00 || second > 0xDFFF
	        ? CONVERT_TO_STRING ? S.charAt(position) : first
	        : CONVERT_TO_STRING ? S.slice(position, position + 2) : (first - 0xD800 << 10) + (second - 0xDC00) + 0x10000;
	  };
	};

	var stringMultibyte = {
	  // `String.prototype.codePointAt` method
	  // https://tc39.github.io/ecma262/#sec-string.prototype.codepointat
	  codeAt: createMethod$2(false),
	  // `String.prototype.at` method
	  // https://github.com/mathiasbynens/String.prototype.at
	  charAt: createMethod$2(true)
	};

	var charAt = stringMultibyte.charAt;



	var STRING_ITERATOR = 'String Iterator';
	var setInternalState$3 = internalState.set;
	var getInternalState$3 = internalState.getterFor(STRING_ITERATOR);

	// `String.prototype[@@iterator]` method
	// https://tc39.github.io/ecma262/#sec-string.prototype-@@iterator
	defineIterator(String, 'String', function (iterated) {
	  setInternalState$3(this, {
	    type: STRING_ITERATOR,
	    string: String(iterated),
	    index: 0
	  });
	// `%StringIteratorPrototype%.next` method
	// https://tc39.github.io/ecma262/#sec-%stringiteratorprototype%.next
	}, function next() {
	  var state = getInternalState$3(this);
	  var string = state.string;
	  var index = state.index;
	  var point;
	  if (index >= string.length) return { value: undefined, done: true };
	  point = charAt(string, index);
	  state.index += point.length;
	  return { value: point, done: false };
	});

	// iterable DOM collections
	// flag - `iterable` interface - 'entries', 'keys', 'values', 'forEach' methods
	var domIterables = {
	  CSSRuleList: 0,
	  CSSStyleDeclaration: 0,
	  CSSValueList: 0,
	  ClientRectList: 0,
	  DOMRectList: 0,
	  DOMStringList: 0,
	  DOMTokenList: 1,
	  DataTransferItemList: 0,
	  FileList: 0,
	  HTMLAllCollection: 0,
	  HTMLCollection: 0,
	  HTMLFormElement: 0,
	  HTMLSelectElement: 0,
	  MediaList: 0,
	  MimeTypeArray: 0,
	  NamedNodeMap: 0,
	  NodeList: 1,
	  PaintRequestList: 0,
	  Plugin: 0,
	  PluginArray: 0,
	  SVGLengthList: 0,
	  SVGNumberList: 0,
	  SVGPathSegList: 0,
	  SVGPointList: 0,
	  SVGStringList: 0,
	  SVGTransformList: 0,
	  SourceBufferList: 0,
	  StyleSheetList: 0,
	  TextTrackCueList: 0,
	  TextTrackList: 0,
	  TouchList: 0
	};

	var ITERATOR$5 = wellKnownSymbol('iterator');
	var TO_STRING_TAG$3 = wellKnownSymbol('toStringTag');
	var ArrayValues = es_array_iterator.values;

	for (var COLLECTION_NAME in domIterables) {
	  var Collection = global_1[COLLECTION_NAME];
	  var CollectionPrototype = Collection && Collection.prototype;
	  if (CollectionPrototype) {
	    // some Chrome versions have non-configurable methods on DOMTokenList
	    if (CollectionPrototype[ITERATOR$5] !== ArrayValues) try {
	      createNonEnumerableProperty(CollectionPrototype, ITERATOR$5, ArrayValues);
	    } catch (error) {
	      CollectionPrototype[ITERATOR$5] = ArrayValues;
	    }
	    if (!CollectionPrototype[TO_STRING_TAG$3]) {
	      createNonEnumerableProperty(CollectionPrototype, TO_STRING_TAG$3, COLLECTION_NAME);
	    }
	    if (domIterables[COLLECTION_NAME]) for (var METHOD_NAME in es_array_iterator) {
	      // some Chrome versions have non-configurable methods on DOMTokenList
	      if (CollectionPrototype[METHOD_NAME] !== es_array_iterator[METHOD_NAME]) try {
	        createNonEnumerableProperty(CollectionPrototype, METHOD_NAME, es_array_iterator[METHOD_NAME]);
	      } catch (error) {
	        CollectionPrototype[METHOD_NAME] = es_array_iterator[METHOD_NAME];
	      }
	    }
	  }
	}

	var slice = [].slice;
	var MSIE = /MSIE .\./.test(userAgent); // <- dirty ie9- check

	var wrap$1 = function (scheduler) {
	  return function (handler, timeout /* , ...arguments */) {
	    var boundArgs = arguments.length > 2;
	    var args = boundArgs ? slice.call(arguments, 2) : undefined;
	    return scheduler(boundArgs ? function () {
	      // eslint-disable-next-line no-new-func
	      (typeof handler == 'function' ? handler : Function(handler)).apply(this, args);
	    } : handler, timeout);
	  };
	};

	// ie9- setTimeout & setInterval additional parameters fix
	// https://html.spec.whatwg.org/multipage/timers-and-user-prompts.html#timers
	_export({ global: true, bind: true, forced: MSIE }, {
	  // `setTimeout` method
	  // https://html.spec.whatwg.org/multipage/timers-and-user-prompts.html#dom-settimeout
	  setTimeout: wrap$1(global_1.setTimeout),
	  // `setInterval` method
	  // https://html.spec.whatwg.org/multipage/timers-and-user-prompts.html#dom-setinterval
	  setInterval: wrap$1(global_1.setInterval)
	});

	// `Symbol.asyncIterator` well-known symbol
	// https://tc39.github.io/ecma262/#sec-symbol.asynciterator
	defineWellKnownSymbol('asyncIterator');

	// `Symbol.hasInstance` well-known symbol
	// https://tc39.github.io/ecma262/#sec-symbol.hasinstance
	defineWellKnownSymbol('hasInstance');

	// `Symbol.isConcatSpreadable` well-known symbol
	// https://tc39.github.io/ecma262/#sec-symbol.isconcatspreadable
	defineWellKnownSymbol('isConcatSpreadable');

	// `Symbol.match` well-known symbol
	// https://tc39.github.io/ecma262/#sec-symbol.match
	defineWellKnownSymbol('match');

	// `Symbol.matchAll` well-known symbol
	defineWellKnownSymbol('matchAll');

	// `Symbol.replace` well-known symbol
	// https://tc39.github.io/ecma262/#sec-symbol.replace
	defineWellKnownSymbol('replace');

	// `Symbol.search` well-known symbol
	// https://tc39.github.io/ecma262/#sec-symbol.search
	defineWellKnownSymbol('search');

	// `Symbol.species` well-known symbol
	// https://tc39.github.io/ecma262/#sec-symbol.species
	defineWellKnownSymbol('species');

	// `Symbol.split` well-known symbol
	// https://tc39.github.io/ecma262/#sec-symbol.split
	defineWellKnownSymbol('split');

	// `Symbol.toPrimitive` well-known symbol
	// https://tc39.github.io/ecma262/#sec-symbol.toprimitive
	defineWellKnownSymbol('toPrimitive');

	// `Symbol.toStringTag` well-known symbol
	// https://tc39.github.io/ecma262/#sec-symbol.tostringtag
	defineWellKnownSymbol('toStringTag');

	// `Symbol.unscopables` well-known symbol
	// https://tc39.github.io/ecma262/#sec-symbol.unscopables
	defineWellKnownSymbol('unscopables');

	var nativeAssign = Object.assign;
	var defineProperty$3 = Object.defineProperty;

	// `Object.assign` method
	// https://tc39.github.io/ecma262/#sec-object.assign
	var objectAssign = !nativeAssign || fails(function () {
	  // should have correct order of operations (Edge bug)
	  if (descriptors && nativeAssign({ b: 1 }, nativeAssign(defineProperty$3({}, 'a', {
	    enumerable: true,
	    get: function () {
	      defineProperty$3(this, 'b', {
	        value: 3,
	        enumerable: false
	      });
	    }
	  }), { b: 2 })).b !== 1) return true;
	  // should work with symbols and should have deterministic property order (V8 bug)
	  var A = {};
	  var B = {};
	  // eslint-disable-next-line no-undef
	  var symbol = Symbol();
	  var alphabet = 'abcdefghijklmnopqrst';
	  A[symbol] = 7;
	  alphabet.split('').forEach(function (chr) { B[chr] = chr; });
	  return nativeAssign({}, A)[symbol] != 7 || objectKeys(nativeAssign({}, B)).join('') != alphabet;
	}) ? function assign(target, source) { // eslint-disable-line no-unused-vars
	  var T = toObject(target);
	  var argumentsLength = arguments.length;
	  var index = 1;
	  var getOwnPropertySymbols = objectGetOwnPropertySymbols.f;
	  var propertyIsEnumerable = objectPropertyIsEnumerable.f;
	  while (argumentsLength > index) {
	    var S = indexedObject(arguments[index++]);
	    var keys = getOwnPropertySymbols ? objectKeys(S).concat(getOwnPropertySymbols(S)) : objectKeys(S);
	    var length = keys.length;
	    var j = 0;
	    var key;
	    while (length > j) {
	      key = keys[j++];
	      if (!descriptors || propertyIsEnumerable.call(S, key)) T[key] = S[key];
	    }
	  } return T;
	} : nativeAssign;

	// `Object.assign` method
	// https://tc39.github.io/ecma262/#sec-object.assign
	_export({ target: 'Object', stat: true, forced: Object.assign !== objectAssign }, {
	  assign: objectAssign
	});

	// `Object.create` method
	// https://tc39.github.io/ecma262/#sec-object.create
	_export({ target: 'Object', stat: true, sham: !descriptors }, {
	  create: objectCreate
	});

	// `Object.defineProperties` method
	// https://tc39.github.io/ecma262/#sec-object.defineproperties
	_export({ target: 'Object', stat: true, forced: !descriptors, sham: !descriptors }, {
	  defineProperties: objectDefineProperties
	});

	var propertyIsEnumerable = objectPropertyIsEnumerable.f;

	// `Object.{ entries, values }` methods implementation
	var createMethod$3 = function (TO_ENTRIES) {
	  return function (it) {
	    var O = toIndexedObject(it);
	    var keys = objectKeys(O);
	    var length = keys.length;
	    var i = 0;
	    var result = [];
	    var key;
	    while (length > i) {
	      key = keys[i++];
	      if (!descriptors || propertyIsEnumerable.call(O, key)) {
	        result.push(TO_ENTRIES ? [key, O[key]] : O[key]);
	      }
	    }
	    return result;
	  };
	};

	var objectToArray = {
	  // `Object.entries` method
	  // https://tc39.github.io/ecma262/#sec-object.entries
	  entries: createMethod$3(true),
	  // `Object.values` method
	  // https://tc39.github.io/ecma262/#sec-object.values
	  values: createMethod$3(false)
	};

	var $entries = objectToArray.entries;

	// `Object.entries` method
	// https://tc39.github.io/ecma262/#sec-object.entries
	_export({ target: 'Object', stat: true }, {
	  entries: function entries(O) {
	    return $entries(O);
	  }
	});

	var freezing = !fails(function () {
	  return Object.isExtensible(Object.preventExtensions({}));
	});

	var internalMetadata = createCommonjsModule(function (module) {
	var defineProperty = objectDefineProperty.f;



	var METADATA = uid('meta');
	var id = 0;

	var isExtensible = Object.isExtensible || function () {
	  return true;
	};

	var setMetadata = function (it) {
	  defineProperty(it, METADATA, { value: {
	    objectID: 'O' + ++id, // object ID
	    weakData: {}          // weak collections IDs
	  } });
	};

	var fastKey = function (it, create) {
	  // return a primitive with prefix
	  if (!isObject(it)) return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;
	  if (!has(it, METADATA)) {
	    // can't set metadata to uncaught frozen object
	    if (!isExtensible(it)) return 'F';
	    // not necessary to add metadata
	    if (!create) return 'E';
	    // add missing metadata
	    setMetadata(it);
	  // return object ID
	  } return it[METADATA].objectID;
	};

	var getWeakData = function (it, create) {
	  if (!has(it, METADATA)) {
	    // can't set metadata to uncaught frozen object
	    if (!isExtensible(it)) return true;
	    // not necessary to add metadata
	    if (!create) return false;
	    // add missing metadata
	    setMetadata(it);
	  // return the store of weak collections IDs
	  } return it[METADATA].weakData;
	};

	// add metadata on freeze-family methods calling
	var onFreeze = function (it) {
	  if (freezing && meta.REQUIRED && isExtensible(it) && !has(it, METADATA)) setMetadata(it);
	  return it;
	};

	var meta = module.exports = {
	  REQUIRED: false,
	  fastKey: fastKey,
	  getWeakData: getWeakData,
	  onFreeze: onFreeze
	};

	hiddenKeys[METADATA] = true;
	});
	var internalMetadata_1 = internalMetadata.REQUIRED;
	var internalMetadata_2 = internalMetadata.fastKey;
	var internalMetadata_3 = internalMetadata.getWeakData;
	var internalMetadata_4 = internalMetadata.onFreeze;

	var onFreeze = internalMetadata.onFreeze;

	var nativeFreeze = Object.freeze;
	var FAILS_ON_PRIMITIVES = fails(function () { nativeFreeze(1); });

	// `Object.freeze` method
	// https://tc39.github.io/ecma262/#sec-object.freeze
	_export({ target: 'Object', stat: true, forced: FAILS_ON_PRIMITIVES, sham: !freezing }, {
	  freeze: function freeze(it) {
	    return nativeFreeze && isObject(it) ? nativeFreeze(onFreeze(it)) : it;
	  }
	});

	var createProperty = function (object, key, value) {
	  var propertyKey = toPrimitive(key);
	  if (propertyKey in object) objectDefineProperty.f(object, propertyKey, createPropertyDescriptor(0, value));
	  else object[propertyKey] = value;
	};

	// `Object.fromEntries` method
	// https://github.com/tc39/proposal-object-from-entries
	_export({ target: 'Object', stat: true }, {
	  fromEntries: function fromEntries(iterable) {
	    var obj = {};
	    iterate_1(iterable, function (k, v) {
	      createProperty(obj, k, v);
	    }, undefined, true);
	    return obj;
	  }
	});

	var nativeGetOwnPropertyDescriptor$2 = objectGetOwnPropertyDescriptor.f;


	var FAILS_ON_PRIMITIVES$1 = fails(function () { nativeGetOwnPropertyDescriptor$2(1); });
	var FORCED$1 = !descriptors || FAILS_ON_PRIMITIVES$1;

	// `Object.getOwnPropertyDescriptor` method
	// https://tc39.github.io/ecma262/#sec-object.getownpropertydescriptor
	_export({ target: 'Object', stat: true, forced: FORCED$1, sham: !descriptors }, {
	  getOwnPropertyDescriptor: function getOwnPropertyDescriptor(it, key) {
	    return nativeGetOwnPropertyDescriptor$2(toIndexedObject(it), key);
	  }
	});

	// `Object.getOwnPropertyDescriptors` method
	// https://tc39.github.io/ecma262/#sec-object.getownpropertydescriptors
	_export({ target: 'Object', stat: true, sham: !descriptors }, {
	  getOwnPropertyDescriptors: function getOwnPropertyDescriptors(object) {
	    var O = toIndexedObject(object);
	    var getOwnPropertyDescriptor = objectGetOwnPropertyDescriptor.f;
	    var keys = ownKeys(O);
	    var result = {};
	    var index = 0;
	    var key, descriptor;
	    while (keys.length > index) {
	      descriptor = getOwnPropertyDescriptor(O, key = keys[index++]);
	      if (descriptor !== undefined) createProperty(result, key, descriptor);
	    }
	    return result;
	  }
	});

	var nativeGetOwnPropertyNames$2 = objectGetOwnPropertyNamesExternal.f;

	var FAILS_ON_PRIMITIVES$2 = fails(function () { return !Object.getOwnPropertyNames(1); });

	// `Object.getOwnPropertyNames` method
	// https://tc39.github.io/ecma262/#sec-object.getownpropertynames
	_export({ target: 'Object', stat: true, forced: FAILS_ON_PRIMITIVES$2 }, {
	  getOwnPropertyNames: nativeGetOwnPropertyNames$2
	});

	var FAILS_ON_PRIMITIVES$3 = fails(function () { objectGetPrototypeOf(1); });

	// `Object.getPrototypeOf` method
	// https://tc39.github.io/ecma262/#sec-object.getprototypeof
	_export({ target: 'Object', stat: true, forced: FAILS_ON_PRIMITIVES$3, sham: !correctPrototypeGetter }, {
	  getPrototypeOf: function getPrototypeOf(it) {
	    return objectGetPrototypeOf(toObject(it));
	  }
	});

	// `SameValue` abstract operation
	// https://tc39.github.io/ecma262/#sec-samevalue
	var sameValue = Object.is || function is(x, y) {
	  // eslint-disable-next-line no-self-compare
	  return x === y ? x !== 0 || 1 / x === 1 / y : x != x && y != y;
	};

	// `Object.is` method
	// https://tc39.github.io/ecma262/#sec-object.is
	_export({ target: 'Object', stat: true }, {
	  is: sameValue
	});

	var nativeIsExtensible = Object.isExtensible;
	var FAILS_ON_PRIMITIVES$4 = fails(function () { });

	// `Object.isExtensible` method
	// https://tc39.github.io/ecma262/#sec-object.isextensible
	_export({ target: 'Object', stat: true, forced: FAILS_ON_PRIMITIVES$4 }, {
	  isExtensible: function isExtensible(it) {
	    return isObject(it) ? nativeIsExtensible ? nativeIsExtensible(it) : true : false;
	  }
	});

	var nativeIsFrozen = Object.isFrozen;
	var FAILS_ON_PRIMITIVES$5 = fails(function () { });

	// `Object.isFrozen` method
	// https://tc39.github.io/ecma262/#sec-object.isfrozen
	_export({ target: 'Object', stat: true, forced: FAILS_ON_PRIMITIVES$5 }, {
	  isFrozen: function isFrozen(it) {
	    return isObject(it) ? nativeIsFrozen ? nativeIsFrozen(it) : false : true;
	  }
	});

	var nativeIsSealed = Object.isSealed;
	var FAILS_ON_PRIMITIVES$6 = fails(function () { });

	// `Object.isSealed` method
	// https://tc39.github.io/ecma262/#sec-object.issealed
	_export({ target: 'Object', stat: true, forced: FAILS_ON_PRIMITIVES$6 }, {
	  isSealed: function isSealed(it) {
	    return isObject(it) ? nativeIsSealed ? nativeIsSealed(it) : false : true;
	  }
	});

	var FAILS_ON_PRIMITIVES$7 = fails(function () { objectKeys(1); });

	// `Object.keys` method
	// https://tc39.github.io/ecma262/#sec-object.keys
	_export({ target: 'Object', stat: true, forced: FAILS_ON_PRIMITIVES$7 }, {
	  keys: function keys(it) {
	    return objectKeys(toObject(it));
	  }
	});

	var onFreeze$1 = internalMetadata.onFreeze;



	var nativePreventExtensions = Object.preventExtensions;
	var FAILS_ON_PRIMITIVES$8 = fails(function () { nativePreventExtensions(1); });

	// `Object.preventExtensions` method
	// https://tc39.github.io/ecma262/#sec-object.preventextensions
	_export({ target: 'Object', stat: true, forced: FAILS_ON_PRIMITIVES$8, sham: !freezing }, {
	  preventExtensions: function preventExtensions(it) {
	    return nativePreventExtensions && isObject(it) ? nativePreventExtensions(onFreeze$1(it)) : it;
	  }
	});

	var onFreeze$2 = internalMetadata.onFreeze;



	var nativeSeal = Object.seal;
	var FAILS_ON_PRIMITIVES$9 = fails(function () { nativeSeal(1); });

	// `Object.seal` method
	// https://tc39.github.io/ecma262/#sec-object.seal
	_export({ target: 'Object', stat: true, forced: FAILS_ON_PRIMITIVES$9, sham: !freezing }, {
	  seal: function seal(it) {
	    return nativeSeal && isObject(it) ? nativeSeal(onFreeze$2(it)) : it;
	  }
	});

	// `Object.setPrototypeOf` method
	// https://tc39.github.io/ecma262/#sec-object.setprototypeof
	_export({ target: 'Object', stat: true }, {
	  setPrototypeOf: objectSetPrototypeOf
	});

	var $values = objectToArray.values;

	// `Object.values` method
	// https://tc39.github.io/ecma262/#sec-object.values
	_export({ target: 'Object', stat: true }, {
	  values: function values(O) {
	    return $values(O);
	  }
	});

	// Forced replacement object prototype accessors methods
	var forcedObjectPrototypeAccessorsMethods = !fails(function () {
	  var key = Math.random();
	  // In FF throws only define methods
	  // eslint-disable-next-line no-undef, no-useless-call
	  __defineSetter__.call(null, key, function () { /* empty */ });
	  delete global_1[key];
	});

	// `Object.prototype.__defineGetter__` method
	// https://tc39.github.io/ecma262/#sec-object.prototype.__defineGetter__
	if (descriptors) {
	  _export({ target: 'Object', proto: true, forced: forcedObjectPrototypeAccessorsMethods }, {
	    __defineGetter__: function __defineGetter__(P, getter) {
	      objectDefineProperty.f(toObject(this), P, { get: aFunction$1(getter), enumerable: true, configurable: true });
	    }
	  });
	}

	// `Object.prototype.__defineSetter__` method
	// https://tc39.github.io/ecma262/#sec-object.prototype.__defineSetter__
	if (descriptors) {
	  _export({ target: 'Object', proto: true, forced: forcedObjectPrototypeAccessorsMethods }, {
	    __defineSetter__: function __defineSetter__(P, setter) {
	      objectDefineProperty.f(toObject(this), P, { set: aFunction$1(setter), enumerable: true, configurable: true });
	    }
	  });
	}

	var getOwnPropertyDescriptor$3 = objectGetOwnPropertyDescriptor.f;

	// `Object.prototype.__lookupGetter__` method
	// https://tc39.github.io/ecma262/#sec-object.prototype.__lookupGetter__
	if (descriptors) {
	  _export({ target: 'Object', proto: true, forced: forcedObjectPrototypeAccessorsMethods }, {
	    __lookupGetter__: function __lookupGetter__(P) {
	      var O = toObject(this);
	      var key = toPrimitive(P, true);
	      var desc;
	      do {
	        if (desc = getOwnPropertyDescriptor$3(O, key)) return desc.get;
	      } while (O = objectGetPrototypeOf(O));
	    }
	  });
	}

	var getOwnPropertyDescriptor$4 = objectGetOwnPropertyDescriptor.f;

	// `Object.prototype.__lookupSetter__` method
	// https://tc39.github.io/ecma262/#sec-object.prototype.__lookupSetter__
	if (descriptors) {
	  _export({ target: 'Object', proto: true, forced: forcedObjectPrototypeAccessorsMethods }, {
	    __lookupSetter__: function __lookupSetter__(P) {
	      var O = toObject(this);
	      var key = toPrimitive(P, true);
	      var desc;
	      do {
	        if (desc = getOwnPropertyDescriptor$4(O, key)) return desc.set;
	      } while (O = objectGetPrototypeOf(O));
	    }
	  });
	}

	var slice$1 = [].slice;
	var factories = {};

	var construct = function (C, argsLength, args) {
	  if (!(argsLength in factories)) {
	    for (var list = [], i = 0; i < argsLength; i++) list[i] = 'a[' + i + ']';
	    // eslint-disable-next-line no-new-func
	    factories[argsLength] = Function('C,a', 'return new C(' + list.join(',') + ')');
	  } return factories[argsLength](C, args);
	};

	// `Function.prototype.bind` method implementation
	// https://tc39.github.io/ecma262/#sec-function.prototype.bind
	var functionBind = Function.bind || function bind(that /* , ...args */) {
	  var fn = aFunction$1(this);
	  var partArgs = slice$1.call(arguments, 1);
	  var boundFunction = function bound(/* args... */) {
	    var args = partArgs.concat(slice$1.call(arguments));
	    return this instanceof boundFunction ? construct(fn, args.length, args) : fn.apply(that, args);
	  };
	  if (isObject(fn.prototype)) boundFunction.prototype = fn.prototype;
	  return boundFunction;
	};

	// `Function.prototype.bind` method
	// https://tc39.github.io/ecma262/#sec-function.prototype.bind
	_export({ target: 'Function', proto: true }, {
	  bind: functionBind
	});

	var defineProperty$4 = objectDefineProperty.f;

	var FunctionPrototype = Function.prototype;
	var FunctionPrototypeToString = FunctionPrototype.toString;
	var nameRE = /^\s*function ([^ (]*)/;
	var NAME = 'name';

	// Function instances `.name` property
	// https://tc39.github.io/ecma262/#sec-function-instances-name
	if (descriptors && !(NAME in FunctionPrototype)) {
	  defineProperty$4(FunctionPrototype, NAME, {
	    configurable: true,
	    get: function () {
	      try {
	        return FunctionPrototypeToString.call(this).match(nameRE)[1];
	      } catch (error) {
	        return '';
	      }
	    }
	  });
	}

	var HAS_INSTANCE = wellKnownSymbol('hasInstance');
	var FunctionPrototype$1 = Function.prototype;

	// `Function.prototype[@@hasInstance]` method
	// https://tc39.github.io/ecma262/#sec-function.prototype-@@hasinstance
	if (!(HAS_INSTANCE in FunctionPrototype$1)) {
	  objectDefineProperty.f(FunctionPrototype$1, HAS_INSTANCE, { value: function (O) {
	    if (typeof this != 'function' || !isObject(O)) return false;
	    if (!isObject(this.prototype)) return O instanceof this;
	    // for environment w/o native `@@hasInstance` logic enough `instanceof`, but add this:
	    while (O = objectGetPrototypeOf(O)) if (this.prototype === O) return true;
	    return false;
	  } });
	}

	// `globalThis` object
	// https://github.com/tc39/proposal-global
	_export({ global: true }, {
	  globalThis: global_1
	});

	// `Array.from` method implementation
	// https://tc39.github.io/ecma262/#sec-array.from
	var arrayFrom = function from(arrayLike /* , mapfn = undefined, thisArg = undefined */) {
	  var O = toObject(arrayLike);
	  var C = typeof this == 'function' ? this : Array;
	  var argumentsLength = arguments.length;
	  var mapfn = argumentsLength > 1 ? arguments[1] : undefined;
	  var mapping = mapfn !== undefined;
	  var index = 0;
	  var iteratorMethod = getIteratorMethod(O);
	  var length, result, step, iterator, next;
	  if (mapping) mapfn = bindContext(mapfn, argumentsLength > 2 ? arguments[2] : undefined, 2);
	  // if the target is not iterable or it's an array with the default iterator - use a simple case
	  if (iteratorMethod != undefined && !(C == Array && isArrayIteratorMethod(iteratorMethod))) {
	    iterator = iteratorMethod.call(O);
	    next = iterator.next;
	    result = new C();
	    for (;!(step = next.call(iterator)).done; index++) {
	      createProperty(result, index, mapping
	        ? callWithSafeIterationClosing(iterator, mapfn, [step.value, index], true)
	        : step.value
	      );
	    }
	  } else {
	    length = toLength(O.length);
	    result = new C(length);
	    for (;length > index; index++) {
	      createProperty(result, index, mapping ? mapfn(O[index], index) : O[index]);
	    }
	  }
	  result.length = index;
	  return result;
	};

	var INCORRECT_ITERATION$1 = !checkCorrectnessOfIteration(function (iterable) {
	});

	// `Array.from` method
	// https://tc39.github.io/ecma262/#sec-array.from
	_export({ target: 'Array', stat: true, forced: INCORRECT_ITERATION$1 }, {
	  from: arrayFrom
	});

	// `Array.isArray` method
	// https://tc39.github.io/ecma262/#sec-array.isarray
	_export({ target: 'Array', stat: true }, {
	  isArray: isArray
	});

	var ISNT_GENERIC = fails(function () {
	  function F() { /* empty */ }
	  return !(Array.of.call(F) instanceof F);
	});

	// `Array.of` method
	// https://tc39.github.io/ecma262/#sec-array.of
	// WebKit Array.of isn't generic
	_export({ target: 'Array', stat: true, forced: ISNT_GENERIC }, {
	  of: function of(/* ...args */) {
	    var index = 0;
	    var argumentsLength = arguments.length;
	    var result = new (typeof this == 'function' ? this : Array)(argumentsLength);
	    while (argumentsLength > index) createProperty(result, index, arguments[index++]);
	    result.length = argumentsLength;
	    return result;
	  }
	});

	var SPECIES$4 = wellKnownSymbol('species');

	var arrayMethodHasSpeciesSupport = function (METHOD_NAME) {
	  // We can't use this feature detection in V8 since it causes
	  // deoptimization and serious performance degradation
	  // https://github.com/zloirock/core-js/issues/677
	  return v8Version >= 51 || !fails(function () {
	    var array = [];
	    var constructor = array.constructor = {};
	    constructor[SPECIES$4] = function () {
	      return { foo: 1 };
	    };
	    return array[METHOD_NAME](Boolean).foo !== 1;
	  });
	};

	var IS_CONCAT_SPREADABLE = wellKnownSymbol('isConcatSpreadable');
	var MAX_SAFE_INTEGER = 0x1FFFFFFFFFFFFF;
	var MAXIMUM_ALLOWED_INDEX_EXCEEDED = 'Maximum allowed index exceeded';

	// We can't use this feature detection in V8 since it causes
	// deoptimization and serious performance degradation
	// https://github.com/zloirock/core-js/issues/679
	var IS_CONCAT_SPREADABLE_SUPPORT = v8Version >= 51 || !fails(function () {
	  var array = [];
	  array[IS_CONCAT_SPREADABLE] = false;
	  return array.concat()[0] !== array;
	});

	var SPECIES_SUPPORT = arrayMethodHasSpeciesSupport('concat');

	var isConcatSpreadable = function (O) {
	  if (!isObject(O)) return false;
	  var spreadable = O[IS_CONCAT_SPREADABLE];
	  return spreadable !== undefined ? !!spreadable : isArray(O);
	};

	var FORCED$2 = !IS_CONCAT_SPREADABLE_SUPPORT || !SPECIES_SUPPORT;

	// `Array.prototype.concat` method
	// https://tc39.github.io/ecma262/#sec-array.prototype.concat
	// with adding support of @@isConcatSpreadable and @@species
	_export({ target: 'Array', proto: true, forced: FORCED$2 }, {
	  concat: function concat(arg) { // eslint-disable-line no-unused-vars
	    var O = toObject(this);
	    var A = arraySpeciesCreate(O, 0);
	    var n = 0;
	    var i, k, length, len, E;
	    for (i = -1, length = arguments.length; i < length; i++) {
	      E = i === -1 ? O : arguments[i];
	      if (isConcatSpreadable(E)) {
	        len = toLength(E.length);
	        if (n + len > MAX_SAFE_INTEGER) throw TypeError(MAXIMUM_ALLOWED_INDEX_EXCEEDED);
	        for (k = 0; k < len; k++, n++) if (k in E) createProperty(A, n, E[k]);
	      } else {
	        if (n >= MAX_SAFE_INTEGER) throw TypeError(MAXIMUM_ALLOWED_INDEX_EXCEEDED);
	        createProperty(A, n++, E);
	      }
	    }
	    A.length = n;
	    return A;
	  }
	});

	var min$2 = Math.min;

	// `Array.prototype.copyWithin` method implementation
	// https://tc39.github.io/ecma262/#sec-array.prototype.copywithin
	var arrayCopyWithin = [].copyWithin || function copyWithin(target /* = 0 */, start /* = 0, end = @length */) {
	  var O = toObject(this);
	  var len = toLength(O.length);
	  var to = toAbsoluteIndex(target, len);
	  var from = toAbsoluteIndex(start, len);
	  var end = arguments.length > 2 ? arguments[2] : undefined;
	  var count = min$2((end === undefined ? len : toAbsoluteIndex(end, len)) - from, len - to);
	  var inc = 1;
	  if (from < to && to < from + count) {
	    inc = -1;
	    from += count - 1;
	    to += count - 1;
	  }
	  while (count-- > 0) {
	    if (from in O) O[to] = O[from];
	    else delete O[to];
	    to += inc;
	    from += inc;
	  } return O;
	};

	// `Array.prototype.copyWithin` method
	// https://tc39.github.io/ecma262/#sec-array.prototype.copywithin
	_export({ target: 'Array', proto: true }, {
	  copyWithin: arrayCopyWithin
	});

	// https://tc39.github.io/ecma262/#sec-array.prototype-@@unscopables
	addToUnscopables('copyWithin');

	var sloppyArrayMethod = function (METHOD_NAME, argument) {
	  var method = [][METHOD_NAME];
	  return !method || !fails(function () {
	    // eslint-disable-next-line no-useless-call,no-throw-literal
	    method.call(null, argument || function () { throw 1; }, 1);
	  });
	};

	var $every = arrayIteration.every;


	// `Array.prototype.every` method
	// https://tc39.github.io/ecma262/#sec-array.prototype.every
	_export({ target: 'Array', proto: true, forced: sloppyArrayMethod('every') }, {
	  every: function every(callbackfn /* , thisArg */) {
	    return $every(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	  }
	});

	// `Array.prototype.fill` method implementation
	// https://tc39.github.io/ecma262/#sec-array.prototype.fill
	var arrayFill = function fill(value /* , start = 0, end = @length */) {
	  var O = toObject(this);
	  var length = toLength(O.length);
	  var argumentsLength = arguments.length;
	  var index = toAbsoluteIndex(argumentsLength > 1 ? arguments[1] : undefined, length);
	  var end = argumentsLength > 2 ? arguments[2] : undefined;
	  var endPos = end === undefined ? length : toAbsoluteIndex(end, length);
	  while (endPos > index) O[index++] = value;
	  return O;
	};

	// `Array.prototype.fill` method
	// https://tc39.github.io/ecma262/#sec-array.prototype.fill
	_export({ target: 'Array', proto: true }, {
	  fill: arrayFill
	});

	// https://tc39.github.io/ecma262/#sec-array.prototype-@@unscopables
	addToUnscopables('fill');

	var $filter = arrayIteration.filter;



	var HAS_SPECIES_SUPPORT = arrayMethodHasSpeciesSupport('filter');
	// Edge 14- issue
	var USES_TO_LENGTH = HAS_SPECIES_SUPPORT && !fails(function () {
	  [].filter.call({ length: -1, 0: 1 }, function (it) { throw it; });
	});

	// `Array.prototype.filter` method
	// https://tc39.github.io/ecma262/#sec-array.prototype.filter
	// with adding support of @@species
	_export({ target: 'Array', proto: true, forced: !HAS_SPECIES_SUPPORT || !USES_TO_LENGTH }, {
	  filter: function filter(callbackfn /* , thisArg */) {
	    return $filter(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	  }
	});

	var $find = arrayIteration.find;


	var FIND = 'find';
	var SKIPS_HOLES = true;

	// Shouldn't skip holes
	if (FIND in []) Array(1)[FIND](function () { SKIPS_HOLES = false; });

	// `Array.prototype.find` method
	// https://tc39.github.io/ecma262/#sec-array.prototype.find
	_export({ target: 'Array', proto: true, forced: SKIPS_HOLES }, {
	  find: function find(callbackfn /* , that = undefined */) {
	    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	  }
	});

	// https://tc39.github.io/ecma262/#sec-array.prototype-@@unscopables
	addToUnscopables(FIND);

	var $findIndex = arrayIteration.findIndex;


	var FIND_INDEX = 'findIndex';
	var SKIPS_HOLES$1 = true;

	// Shouldn't skip holes
	if (FIND_INDEX in []) Array(1)[FIND_INDEX](function () { SKIPS_HOLES$1 = false; });

	// `Array.prototype.findIndex` method
	// https://tc39.github.io/ecma262/#sec-array.prototype.findindex
	_export({ target: 'Array', proto: true, forced: SKIPS_HOLES$1 }, {
	  findIndex: function findIndex(callbackfn /* , that = undefined */) {
	    return $findIndex(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	  }
	});

	// https://tc39.github.io/ecma262/#sec-array.prototype-@@unscopables
	addToUnscopables(FIND_INDEX);

	// `FlattenIntoArray` abstract operation
	// https://tc39.github.io/proposal-flatMap/#sec-FlattenIntoArray
	var flattenIntoArray = function (target, original, source, sourceLen, start, depth, mapper, thisArg) {
	  var targetIndex = start;
	  var sourceIndex = 0;
	  var mapFn = mapper ? bindContext(mapper, thisArg, 3) : false;
	  var element;

	  while (sourceIndex < sourceLen) {
	    if (sourceIndex in source) {
	      element = mapFn ? mapFn(source[sourceIndex], sourceIndex, original) : source[sourceIndex];

	      if (depth > 0 && isArray(element)) {
	        targetIndex = flattenIntoArray(target, original, element, toLength(element.length), targetIndex, depth - 1) - 1;
	      } else {
	        if (targetIndex >= 0x1FFFFFFFFFFFFF) throw TypeError('Exceed the acceptable array length');
	        target[targetIndex] = element;
	      }

	      targetIndex++;
	    }
	    sourceIndex++;
	  }
	  return targetIndex;
	};

	var flattenIntoArray_1 = flattenIntoArray;

	// `Array.prototype.flat` method
	// https://github.com/tc39/proposal-flatMap
	_export({ target: 'Array', proto: true }, {
	  flat: function flat(/* depthArg = 1 */) {
	    var depthArg = arguments.length ? arguments[0] : undefined;
	    var O = toObject(this);
	    var sourceLen = toLength(O.length);
	    var A = arraySpeciesCreate(O, 0);
	    A.length = flattenIntoArray_1(A, O, O, sourceLen, 0, depthArg === undefined ? 1 : toInteger(depthArg));
	    return A;
	  }
	});

	// `Array.prototype.flatMap` method
	// https://github.com/tc39/proposal-flatMap
	_export({ target: 'Array', proto: true }, {
	  flatMap: function flatMap(callbackfn /* , thisArg */) {
	    var O = toObject(this);
	    var sourceLen = toLength(O.length);
	    var A;
	    aFunction$1(callbackfn);
	    A = arraySpeciesCreate(O, 0);
	    A.length = flattenIntoArray_1(A, O, O, sourceLen, 0, 1, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	    return A;
	  }
	});

	var $forEach$1 = arrayIteration.forEach;


	// `Array.prototype.forEach` method implementation
	// https://tc39.github.io/ecma262/#sec-array.prototype.foreach
	var arrayForEach = sloppyArrayMethod('forEach') ? function forEach(callbackfn /* , thisArg */) {
	  return $forEach$1(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	} : [].forEach;

	// `Array.prototype.forEach` method
	// https://tc39.github.io/ecma262/#sec-array.prototype.foreach
	_export({ target: 'Array', proto: true, forced: [].forEach != arrayForEach }, {
	  forEach: arrayForEach
	});

	var $includes = arrayIncludes.includes;


	// `Array.prototype.includes` method
	// https://tc39.github.io/ecma262/#sec-array.prototype.includes
	_export({ target: 'Array', proto: true }, {
	  includes: function includes(el /* , fromIndex = 0 */) {
	    return $includes(this, el, arguments.length > 1 ? arguments[1] : undefined);
	  }
	});

	// https://tc39.github.io/ecma262/#sec-array.prototype-@@unscopables
	addToUnscopables('includes');

	var $indexOf = arrayIncludes.indexOf;


	var nativeIndexOf = [].indexOf;

	var NEGATIVE_ZERO = !!nativeIndexOf && 1 / [1].indexOf(1, -0) < 0;
	var SLOPPY_METHOD = sloppyArrayMethod('indexOf');

	// `Array.prototype.indexOf` method
	// https://tc39.github.io/ecma262/#sec-array.prototype.indexof
	_export({ target: 'Array', proto: true, forced: NEGATIVE_ZERO || SLOPPY_METHOD }, {
	  indexOf: function indexOf(searchElement /* , fromIndex = 0 */) {
	    return NEGATIVE_ZERO
	      // convert -0 to +0
	      ? nativeIndexOf.apply(this, arguments) || 0
	      : $indexOf(this, searchElement, arguments.length > 1 ? arguments[1] : undefined);
	  }
	});

	var nativeJoin = [].join;

	var ES3_STRINGS = indexedObject != Object;
	var SLOPPY_METHOD$1 = sloppyArrayMethod('join', ',');

	// `Array.prototype.join` method
	// https://tc39.github.io/ecma262/#sec-array.prototype.join
	_export({ target: 'Array', proto: true, forced: ES3_STRINGS || SLOPPY_METHOD$1 }, {
	  join: function join(separator) {
	    return nativeJoin.call(toIndexedObject(this), separator === undefined ? ',' : separator);
	  }
	});

	var min$3 = Math.min;
	var nativeLastIndexOf = [].lastIndexOf;
	var NEGATIVE_ZERO$1 = !!nativeLastIndexOf && 1 / [1].lastIndexOf(1, -0) < 0;
	var SLOPPY_METHOD$2 = sloppyArrayMethod('lastIndexOf');

	// `Array.prototype.lastIndexOf` method implementation
	// https://tc39.github.io/ecma262/#sec-array.prototype.lastindexof
	var arrayLastIndexOf = (NEGATIVE_ZERO$1 || SLOPPY_METHOD$2) ? function lastIndexOf(searchElement /* , fromIndex = @[*-1] */) {
	  // convert -0 to +0
	  if (NEGATIVE_ZERO$1) return nativeLastIndexOf.apply(this, arguments) || 0;
	  var O = toIndexedObject(this);
	  var length = toLength(O.length);
	  var index = length - 1;
	  if (arguments.length > 1) index = min$3(index, toInteger(arguments[1]));
	  if (index < 0) index = length + index;
	  for (;index >= 0; index--) if (index in O && O[index] === searchElement) return index || 0;
	  return -1;
	} : nativeLastIndexOf;

	// `Array.prototype.lastIndexOf` method
	// https://tc39.github.io/ecma262/#sec-array.prototype.lastindexof
	_export({ target: 'Array', proto: true, forced: arrayLastIndexOf !== [].lastIndexOf }, {
	  lastIndexOf: arrayLastIndexOf
	});

	var $map = arrayIteration.map;



	var HAS_SPECIES_SUPPORT$1 = arrayMethodHasSpeciesSupport('map');
	// FF49- issue
	var USES_TO_LENGTH$1 = HAS_SPECIES_SUPPORT$1 && !fails(function () {
	  [].map.call({ length: -1, 0: 1 }, function (it) { throw it; });
	});

	// `Array.prototype.map` method
	// https://tc39.github.io/ecma262/#sec-array.prototype.map
	// with adding support of @@species
	_export({ target: 'Array', proto: true, forced: !HAS_SPECIES_SUPPORT$1 || !USES_TO_LENGTH$1 }, {
	  map: function map(callbackfn /* , thisArg */) {
	    return $map(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	  }
	});

	// `Array.prototype.{ reduce, reduceRight }` methods implementation
	var createMethod$4 = function (IS_RIGHT) {
	  return function (that, callbackfn, argumentsLength, memo) {
	    aFunction$1(callbackfn);
	    var O = toObject(that);
	    var self = indexedObject(O);
	    var length = toLength(O.length);
	    var index = IS_RIGHT ? length - 1 : 0;
	    var i = IS_RIGHT ? -1 : 1;
	    if (argumentsLength < 2) while (true) {
	      if (index in self) {
	        memo = self[index];
	        index += i;
	        break;
	      }
	      index += i;
	      if (IS_RIGHT ? index < 0 : length <= index) {
	        throw TypeError('Reduce of empty array with no initial value');
	      }
	    }
	    for (;IS_RIGHT ? index >= 0 : length > index; index += i) if (index in self) {
	      memo = callbackfn(memo, self[index], index, O);
	    }
	    return memo;
	  };
	};

	var arrayReduce = {
	  // `Array.prototype.reduce` method
	  // https://tc39.github.io/ecma262/#sec-array.prototype.reduce
	  left: createMethod$4(false),
	  // `Array.prototype.reduceRight` method
	  // https://tc39.github.io/ecma262/#sec-array.prototype.reduceright
	  right: createMethod$4(true)
	};

	var $reduce = arrayReduce.left;


	// `Array.prototype.reduce` method
	// https://tc39.github.io/ecma262/#sec-array.prototype.reduce
	_export({ target: 'Array', proto: true, forced: sloppyArrayMethod('reduce') }, {
	  reduce: function reduce(callbackfn /* , initialValue */) {
	    return $reduce(this, callbackfn, arguments.length, arguments.length > 1 ? arguments[1] : undefined);
	  }
	});

	var $reduceRight = arrayReduce.right;


	// `Array.prototype.reduceRight` method
	// https://tc39.github.io/ecma262/#sec-array.prototype.reduceright
	_export({ target: 'Array', proto: true, forced: sloppyArrayMethod('reduceRight') }, {
	  reduceRight: function reduceRight(callbackfn /* , initialValue */) {
	    return $reduceRight(this, callbackfn, arguments.length, arguments.length > 1 ? arguments[1] : undefined);
	  }
	});

	var nativeReverse = [].reverse;
	var test$1 = [1, 2];

	// `Array.prototype.reverse` method
	// https://tc39.github.io/ecma262/#sec-array.prototype.reverse
	// fix for Safari 12.0 bug
	// https://bugs.webkit.org/show_bug.cgi?id=188794
	_export({ target: 'Array', proto: true, forced: String(test$1) === String(test$1.reverse()) }, {
	  reverse: function reverse() {
	    // eslint-disable-next-line no-self-assign
	    if (isArray(this)) this.length = this.length;
	    return nativeReverse.call(this);
	  }
	});

	var SPECIES$5 = wellKnownSymbol('species');
	var nativeSlice = [].slice;
	var max$1 = Math.max;

	// `Array.prototype.slice` method
	// https://tc39.github.io/ecma262/#sec-array.prototype.slice
	// fallback for not array-like ES3 strings and DOM objects
	_export({ target: 'Array', proto: true, forced: !arrayMethodHasSpeciesSupport('slice') }, {
	  slice: function slice(start, end) {
	    var O = toIndexedObject(this);
	    var length = toLength(O.length);
	    var k = toAbsoluteIndex(start, length);
	    var fin = toAbsoluteIndex(end === undefined ? length : end, length);
	    // inline `ArraySpeciesCreate` for usage native `Array#slice` where it's possible
	    var Constructor, result, n;
	    if (isArray(O)) {
	      Constructor = O.constructor;
	      // cross-realm fallback
	      if (typeof Constructor == 'function' && (Constructor === Array || isArray(Constructor.prototype))) {
	        Constructor = undefined;
	      } else if (isObject(Constructor)) {
	        Constructor = Constructor[SPECIES$5];
	        if (Constructor === null) Constructor = undefined;
	      }
	      if (Constructor === Array || Constructor === undefined) {
	        return nativeSlice.call(O, k, fin);
	      }
	    }
	    result = new (Constructor === undefined ? Array : Constructor)(max$1(fin - k, 0));
	    for (n = 0; k < fin; k++, n++) if (k in O) createProperty(result, n, O[k]);
	    result.length = n;
	    return result;
	  }
	});

	var $some = arrayIteration.some;


	// `Array.prototype.some` method
	// https://tc39.github.io/ecma262/#sec-array.prototype.some
	_export({ target: 'Array', proto: true, forced: sloppyArrayMethod('some') }, {
	  some: function some(callbackfn /* , thisArg */) {
	    return $some(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	  }
	});

	var test$2 = [];
	var nativeSort = test$2.sort;

	// IE8-
	var FAILS_ON_UNDEFINED = fails(function () {
	  test$2.sort(undefined);
	});
	// V8 bug
	var FAILS_ON_NULL = fails(function () {
	  test$2.sort(null);
	});
	// Old WebKit
	var SLOPPY_METHOD$3 = sloppyArrayMethod('sort');

	var FORCED$3 = FAILS_ON_UNDEFINED || !FAILS_ON_NULL || SLOPPY_METHOD$3;

	// `Array.prototype.sort` method
	// https://tc39.github.io/ecma262/#sec-array.prototype.sort
	_export({ target: 'Array', proto: true, forced: FORCED$3 }, {
	  sort: function sort(comparefn) {
	    return comparefn === undefined
	      ? nativeSort.call(toObject(this))
	      : nativeSort.call(toObject(this), aFunction$1(comparefn));
	  }
	});

	var max$2 = Math.max;
	var min$4 = Math.min;
	var MAX_SAFE_INTEGER$1 = 0x1FFFFFFFFFFFFF;
	var MAXIMUM_ALLOWED_LENGTH_EXCEEDED = 'Maximum allowed length exceeded';

	// `Array.prototype.splice` method
	// https://tc39.github.io/ecma262/#sec-array.prototype.splice
	// with adding support of @@species
	_export({ target: 'Array', proto: true, forced: !arrayMethodHasSpeciesSupport('splice') }, {
	  splice: function splice(start, deleteCount /* , ...items */) {
	    var O = toObject(this);
	    var len = toLength(O.length);
	    var actualStart = toAbsoluteIndex(start, len);
	    var argumentsLength = arguments.length;
	    var insertCount, actualDeleteCount, A, k, from, to;
	    if (argumentsLength === 0) {
	      insertCount = actualDeleteCount = 0;
	    } else if (argumentsLength === 1) {
	      insertCount = 0;
	      actualDeleteCount = len - actualStart;
	    } else {
	      insertCount = argumentsLength - 2;
	      actualDeleteCount = min$4(max$2(toInteger(deleteCount), 0), len - actualStart);
	    }
	    if (len + insertCount - actualDeleteCount > MAX_SAFE_INTEGER$1) {
	      throw TypeError(MAXIMUM_ALLOWED_LENGTH_EXCEEDED);
	    }
	    A = arraySpeciesCreate(O, actualDeleteCount);
	    for (k = 0; k < actualDeleteCount; k++) {
	      from = actualStart + k;
	      if (from in O) createProperty(A, k, O[from]);
	    }
	    A.length = actualDeleteCount;
	    if (insertCount < actualDeleteCount) {
	      for (k = actualStart; k < len - actualDeleteCount; k++) {
	        from = k + actualDeleteCount;
	        to = k + insertCount;
	        if (from in O) O[to] = O[from];
	        else delete O[to];
	      }
	      for (k = len; k > len - actualDeleteCount + insertCount; k--) delete O[k - 1];
	    } else if (insertCount > actualDeleteCount) {
	      for (k = len - actualDeleteCount; k > actualStart; k--) {
	        from = k + actualDeleteCount - 1;
	        to = k + insertCount - 1;
	        if (from in O) O[to] = O[from];
	        else delete O[to];
	      }
	    }
	    for (k = 0; k < insertCount; k++) {
	      O[k + actualStart] = arguments[k + 2];
	    }
	    O.length = len - actualDeleteCount + insertCount;
	    return A;
	  }
	});

	// `Array[@@species]` getter
	// https://tc39.github.io/ecma262/#sec-get-array-@@species
	setSpecies('Array');

	// this method was added to unscopables after implementation
	// in popular engines, so it's moved to a separate module


	addToUnscopables('flat');

	// this method was added to unscopables after implementation
	// in popular engines, so it's moved to a separate module


	addToUnscopables('flatMap');

	var fromCharCode = String.fromCharCode;
	var nativeFromCodePoint = String.fromCodePoint;

	// length should be 1, old FF problem
	var INCORRECT_LENGTH = !!nativeFromCodePoint && nativeFromCodePoint.length != 1;

	// `String.fromCodePoint` method
	// https://tc39.github.io/ecma262/#sec-string.fromcodepoint
	_export({ target: 'String', stat: true, forced: INCORRECT_LENGTH }, {
	  fromCodePoint: function fromCodePoint(x) { // eslint-disable-line no-unused-vars
	    var elements = [];
	    var length = arguments.length;
	    var i = 0;
	    var code;
	    while (length > i) {
	      code = +arguments[i++];
	      if (toAbsoluteIndex(code, 0x10FFFF) !== code) throw RangeError(code + ' is not a valid code point');
	      elements.push(code < 0x10000
	        ? fromCharCode(code)
	        : fromCharCode(((code -= 0x10000) >> 10) + 0xD800, code % 0x400 + 0xDC00)
	      );
	    } return elements.join('');
	  }
	});

	// `String.raw` method
	// https://tc39.github.io/ecma262/#sec-string.raw
	_export({ target: 'String', stat: true }, {
	  raw: function raw(template) {
	    var rawTemplate = toIndexedObject(template.raw);
	    var literalSegments = toLength(rawTemplate.length);
	    var argumentsLength = arguments.length;
	    var elements = [];
	    var i = 0;
	    while (literalSegments > i) {
	      elements.push(String(rawTemplate[i++]));
	      if (i < argumentsLength) elements.push(String(arguments[i]));
	    } return elements.join('');
	  }
	});

	var codeAt = stringMultibyte.codeAt;

	// `String.prototype.codePointAt` method
	// https://tc39.github.io/ecma262/#sec-string.prototype.codepointat
	_export({ target: 'String', proto: true }, {
	  codePointAt: function codePointAt(pos) {
	    return codeAt(this, pos);
	  }
	});

	var MATCH = wellKnownSymbol('match');

	// `IsRegExp` abstract operation
	// https://tc39.github.io/ecma262/#sec-isregexp
	var isRegexp = function (it) {
	  var isRegExp;
	  return isObject(it) && ((isRegExp = it[MATCH]) !== undefined ? !!isRegExp : classofRaw(it) == 'RegExp');
	};

	var notARegexp = function (it) {
	  if (isRegexp(it)) {
	    throw TypeError("The method doesn't accept regular expressions");
	  } return it;
	};

	var MATCH$1 = wellKnownSymbol('match');

	var correctIsRegexpLogic = function (METHOD_NAME) {
	  var regexp = /./;
	  try {
	    '/./'[METHOD_NAME](regexp);
	  } catch (e) {
	    try {
	      regexp[MATCH$1] = false;
	      return '/./'[METHOD_NAME](regexp);
	    } catch (f) { /* empty */ }
	  } return false;
	};

	var getOwnPropertyDescriptor$5 = objectGetOwnPropertyDescriptor.f;






	var nativeEndsWith = ''.endsWith;
	var min$5 = Math.min;

	var CORRECT_IS_REGEXP_LOGIC = correctIsRegexpLogic('endsWith');
	// https://github.com/zloirock/core-js/pull/702
	var MDN_POLYFILL_BUG = !CORRECT_IS_REGEXP_LOGIC && !!function () {
	  var descriptor = getOwnPropertyDescriptor$5(String.prototype, 'endsWith');
	  return descriptor && !descriptor.writable;
	}();

	// `String.prototype.endsWith` method
	// https://tc39.github.io/ecma262/#sec-string.prototype.endswith
	_export({ target: 'String', proto: true, forced: !MDN_POLYFILL_BUG && !CORRECT_IS_REGEXP_LOGIC }, {
	  endsWith: function endsWith(searchString /* , endPosition = @length */) {
	    var that = String(requireObjectCoercible(this));
	    notARegexp(searchString);
	    var endPosition = arguments.length > 1 ? arguments[1] : undefined;
	    var len = toLength(that.length);
	    var end = endPosition === undefined ? len : min$5(toLength(endPosition), len);
	    var search = String(searchString);
	    return nativeEndsWith
	      ? nativeEndsWith.call(that, search, end)
	      : that.slice(end - search.length, end) === search;
	  }
	});

	// `String.prototype.includes` method
	// https://tc39.github.io/ecma262/#sec-string.prototype.includes
	_export({ target: 'String', proto: true, forced: !correctIsRegexpLogic('includes') }, {
	  includes: function includes(searchString /* , position = 0 */) {
	    return !!~String(requireObjectCoercible(this))
	      .indexOf(notARegexp(searchString), arguments.length > 1 ? arguments[1] : undefined);
	  }
	});

	// `RegExp.prototype.flags` getter implementation
	// https://tc39.github.io/ecma262/#sec-get-regexp.prototype.flags
	var regexpFlags = function () {
	  var that = anObject(this);
	  var result = '';
	  if (that.global) result += 'g';
	  if (that.ignoreCase) result += 'i';
	  if (that.multiline) result += 'm';
	  if (that.dotAll) result += 's';
	  if (that.unicode) result += 'u';
	  if (that.sticky) result += 'y';
	  return result;
	};

	// babel-minify transpiles RegExp('a', 'y') -> /a/y and it causes SyntaxError,
	// so we use an intermediate function.
	function RE(s, f) {
	  return RegExp(s, f);
	}

	var UNSUPPORTED_Y = fails(function () {
	  // babel-minify transpiles RegExp('a', 'y') -> /a/y and it causes SyntaxError
	  var re = RE('a', 'y');
	  re.lastIndex = 2;
	  return re.exec('abcd') != null;
	});

	var BROKEN_CARET = fails(function () {
	  // https://bugzilla.mozilla.org/show_bug.cgi?id=773687
	  var re = RE('^r', 'gy');
	  re.lastIndex = 2;
	  return re.exec('str') != null;
	});

	var regexpStickyHelpers = {
		UNSUPPORTED_Y: UNSUPPORTED_Y,
		BROKEN_CARET: BROKEN_CARET
	};

	var nativeExec = RegExp.prototype.exec;
	// This always refers to the native implementation, because the
	// String#replace polyfill uses ./fix-regexp-well-known-symbol-logic.js,
	// which loads this file before patching the method.
	var nativeReplace = String.prototype.replace;

	var patchedExec = nativeExec;

	var UPDATES_LAST_INDEX_WRONG = (function () {
	  var re1 = /a/;
	  var re2 = /b*/g;
	  nativeExec.call(re1, 'a');
	  nativeExec.call(re2, 'a');
	  return re1.lastIndex !== 0 || re2.lastIndex !== 0;
	})();

	var UNSUPPORTED_Y$1 = regexpStickyHelpers.UNSUPPORTED_Y || regexpStickyHelpers.BROKEN_CARET;

	// nonparticipating capturing group, copied from es5-shim's String#split patch.
	var NPCG_INCLUDED = /()??/.exec('')[1] !== undefined;

	var PATCH = UPDATES_LAST_INDEX_WRONG || NPCG_INCLUDED || UNSUPPORTED_Y$1;

	if (PATCH) {
	  patchedExec = function exec(str) {
	    var re = this;
	    var lastIndex, reCopy, match, i;
	    var sticky = UNSUPPORTED_Y$1 && re.sticky;
	    var flags = regexpFlags.call(re);
	    var source = re.source;
	    var charsAdded = 0;
	    var strCopy = str;

	    if (sticky) {
	      flags = flags.replace('y', '');
	      if (flags.indexOf('g') === -1) {
	        flags += 'g';
	      }

	      strCopy = String(str).slice(re.lastIndex);
	      // Support anchored sticky behavior.
	      if (re.lastIndex > 0 && (!re.multiline || re.multiline && str[re.lastIndex - 1] !== '\n')) {
	        source = '(?: ' + source + ')';
	        strCopy = ' ' + strCopy;
	        charsAdded++;
	      }
	      // ^(? + rx + ) is needed, in combination with some str slicing, to
	      // simulate the 'y' flag.
	      reCopy = new RegExp('^(?:' + source + ')', flags);
	    }

	    if (NPCG_INCLUDED) {
	      reCopy = new RegExp('^' + source + '$(?!\\s)', flags);
	    }
	    if (UPDATES_LAST_INDEX_WRONG) lastIndex = re.lastIndex;

	    match = nativeExec.call(sticky ? reCopy : re, strCopy);

	    if (sticky) {
	      if (match) {
	        match.input = match.input.slice(charsAdded);
	        match[0] = match[0].slice(charsAdded);
	        match.index = re.lastIndex;
	        re.lastIndex += match[0].length;
	      } else re.lastIndex = 0;
	    } else if (UPDATES_LAST_INDEX_WRONG && match) {
	      re.lastIndex = re.global ? match.index + match[0].length : lastIndex;
	    }
	    if (NPCG_INCLUDED && match && match.length > 1) {
	      // Fix browsers whose `exec` methods don't consistently return `undefined`
	      // for NPCG, like IE8. NOTE: This doesn' work for /(.?)?/
	      nativeReplace.call(match[0], reCopy, function () {
	        for (i = 1; i < arguments.length - 2; i++) {
	          if (arguments[i] === undefined) match[i] = undefined;
	        }
	      });
	    }

	    return match;
	  };
	}

	var regexpExec = patchedExec;

	var SPECIES$6 = wellKnownSymbol('species');

	var REPLACE_SUPPORTS_NAMED_GROUPS = !fails(function () {
	  // #replace needs built-in support for named groups.
	  // #match works fine because it just return the exec results, even if it has
	  // a "grops" property.
	  var re = /./;
	  re.exec = function () {
	    var result = [];
	    result.groups = { a: '7' };
	    return result;
	  };
	  return ''.replace(re, '$<a>') !== '7';
	});

	// IE <= 11 replaces $0 with the whole match, as if it was $&
	// https://stackoverflow.com/questions/6024666/getting-ie-to-replace-a-regex-with-the-literal-string-0
	var REPLACE_KEEPS_$0 = (function () {
	  return 'a'.replace(/./, '$0') === '$0';
	})();

	// Chrome 51 has a buggy "split" implementation when RegExp#exec !== nativeExec
	// Weex JS has frozen built-in prototypes, so use try / catch wrapper
	var SPLIT_WORKS_WITH_OVERWRITTEN_EXEC = !fails(function () {
	  var re = /(?:)/;
	  var originalExec = re.exec;
	  re.exec = function () { return originalExec.apply(this, arguments); };
	  var result = 'ab'.split(re);
	  return result.length !== 2 || result[0] !== 'a' || result[1] !== 'b';
	});

	var fixRegexpWellKnownSymbolLogic = function (KEY, length, exec, sham) {
	  var SYMBOL = wellKnownSymbol(KEY);

	  var DELEGATES_TO_SYMBOL = !fails(function () {
	    // String methods call symbol-named RegEp methods
	    var O = {};
	    O[SYMBOL] = function () { return 7; };
	    return ''[KEY](O) != 7;
	  });

	  var DELEGATES_TO_EXEC = DELEGATES_TO_SYMBOL && !fails(function () {
	    // Symbol-named RegExp methods call .exec
	    var execCalled = false;
	    var re = /a/;

	    if (KEY === 'split') {
	      // We can't use real regex here since it causes deoptimization
	      // and serious performance degradation in V8
	      // https://github.com/zloirock/core-js/issues/306
	      re = {};
	      // RegExp[@@split] doesn't call the regex's exec method, but first creates
	      // a new one. We need to return the patched regex when creating the new one.
	      re.constructor = {};
	      re.constructor[SPECIES$6] = function () { return re; };
	      re.flags = '';
	      re[SYMBOL] = /./[SYMBOL];
	    }

	    re.exec = function () { execCalled = true; return null; };

	    re[SYMBOL]('');
	    return !execCalled;
	  });

	  if (
	    !DELEGATES_TO_SYMBOL ||
	    !DELEGATES_TO_EXEC ||
	    (KEY === 'replace' && !(REPLACE_SUPPORTS_NAMED_GROUPS && REPLACE_KEEPS_$0)) ||
	    (KEY === 'split' && !SPLIT_WORKS_WITH_OVERWRITTEN_EXEC)
	  ) {
	    var nativeRegExpMethod = /./[SYMBOL];
	    var methods = exec(SYMBOL, ''[KEY], function (nativeMethod, regexp, str, arg2, forceStringMethod) {
	      if (regexp.exec === regexpExec) {
	        if (DELEGATES_TO_SYMBOL && !forceStringMethod) {
	          // The native String method already delegates to @@method (this
	          // polyfilled function), leasing to infinite recursion.
	          // We avoid it by directly calling the native @@method method.
	          return { done: true, value: nativeRegExpMethod.call(regexp, str, arg2) };
	        }
	        return { done: true, value: nativeMethod.call(str, regexp, arg2) };
	      }
	      return { done: false };
	    }, { REPLACE_KEEPS_$0: REPLACE_KEEPS_$0 });
	    var stringMethod = methods[0];
	    var regexMethod = methods[1];

	    redefine(String.prototype, KEY, stringMethod);
	    redefine(RegExp.prototype, SYMBOL, length == 2
	      // 21.2.5.8 RegExp.prototype[@@replace](string, replaceValue)
	      // 21.2.5.11 RegExp.prototype[@@split](string, limit)
	      ? function (string, arg) { return regexMethod.call(string, this, arg); }
	      // 21.2.5.6 RegExp.prototype[@@match](string)
	      // 21.2.5.9 RegExp.prototype[@@search](string)
	      : function (string) { return regexMethod.call(string, this); }
	    );
	  }

	  if (sham) createNonEnumerableProperty(RegExp.prototype[SYMBOL], 'sham', true);
	};

	var charAt$1 = stringMultibyte.charAt;

	// `AdvanceStringIndex` abstract operation
	// https://tc39.github.io/ecma262/#sec-advancestringindex
	var advanceStringIndex = function (S, index, unicode) {
	  return index + (unicode ? charAt$1(S, index).length : 1);
	};

	// `RegExpExec` abstract operation
	// https://tc39.github.io/ecma262/#sec-regexpexec
	var regexpExecAbstract = function (R, S) {
	  var exec = R.exec;
	  if (typeof exec === 'function') {
	    var result = exec.call(R, S);
	    if (typeof result !== 'object') {
	      throw TypeError('RegExp exec method returned something other than an Object or null');
	    }
	    return result;
	  }

	  if (classofRaw(R) !== 'RegExp') {
	    throw TypeError('RegExp#exec called on incompatible receiver');
	  }

	  return regexpExec.call(R, S);
	};

	// @@match logic
	fixRegexpWellKnownSymbolLogic('match', 1, function (MATCH, nativeMatch, maybeCallNative) {
	  return [
	    // `String.prototype.match` method
	    // https://tc39.github.io/ecma262/#sec-string.prototype.match
	    function match(regexp) {
	      var O = requireObjectCoercible(this);
	      var matcher = regexp == undefined ? undefined : regexp[MATCH];
	      return matcher !== undefined ? matcher.call(regexp, O) : new RegExp(regexp)[MATCH](String(O));
	    },
	    // `RegExp.prototype[@@match]` method
	    // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@match
	    function (regexp) {
	      var res = maybeCallNative(nativeMatch, regexp, this);
	      if (res.done) return res.value;

	      var rx = anObject(regexp);
	      var S = String(this);

	      if (!rx.global) return regexpExecAbstract(rx, S);

	      var fullUnicode = rx.unicode;
	      rx.lastIndex = 0;
	      var A = [];
	      var n = 0;
	      var result;
	      while ((result = regexpExecAbstract(rx, S)) !== null) {
	        var matchStr = String(result[0]);
	        A[n] = matchStr;
	        if (matchStr === '') rx.lastIndex = advanceStringIndex(S, toLength(rx.lastIndex), fullUnicode);
	        n++;
	      }
	      return n === 0 ? null : A;
	    }
	  ];
	});

	var MATCH_ALL = wellKnownSymbol('matchAll');
	var REGEXP_STRING = 'RegExp String';
	var REGEXP_STRING_ITERATOR = REGEXP_STRING + ' Iterator';
	var setInternalState$4 = internalState.set;
	var getInternalState$4 = internalState.getterFor(REGEXP_STRING_ITERATOR);
	var RegExpPrototype = RegExp.prototype;
	var regExpBuiltinExec = RegExpPrototype.exec;
	var nativeMatchAll = ''.matchAll;

	var WORKS_WITH_NON_GLOBAL_REGEX = !!nativeMatchAll && !fails(function () {
	  'a'.matchAll(/./);
	});

	var regExpExec = function (R, S) {
	  var exec = R.exec;
	  var result;
	  if (typeof exec == 'function') {
	    result = exec.call(R, S);
	    if (typeof result != 'object') throw TypeError('Incorrect exec result');
	    return result;
	  } return regExpBuiltinExec.call(R, S);
	};

	// eslint-disable-next-line max-len
	var $RegExpStringIterator = createIteratorConstructor(function RegExpStringIterator(regexp, string, global, fullUnicode) {
	  setInternalState$4(this, {
	    type: REGEXP_STRING_ITERATOR,
	    regexp: regexp,
	    string: string,
	    global: global,
	    unicode: fullUnicode,
	    done: false
	  });
	}, REGEXP_STRING, function next() {
	  var state = getInternalState$4(this);
	  if (state.done) return { value: undefined, done: true };
	  var R = state.regexp;
	  var S = state.string;
	  var match = regExpExec(R, S);
	  if (match === null) return { value: undefined, done: state.done = true };
	  if (state.global) {
	    if (String(match[0]) == '') R.lastIndex = advanceStringIndex(S, toLength(R.lastIndex), state.unicode);
	    return { value: match, done: false };
	  }
	  state.done = true;
	  return { value: match, done: false };
	});

	var $matchAll = function (string) {
	  var R = anObject(this);
	  var S = String(string);
	  var C, flagsValue, flags, matcher, global, fullUnicode;
	  C = speciesConstructor(R, RegExp);
	  flagsValue = R.flags;
	  if (flagsValue === undefined && R instanceof RegExp && !('flags' in RegExpPrototype)) {
	    flagsValue = regexpFlags.call(R);
	  }
	  flags = flagsValue === undefined ? '' : String(flagsValue);
	  matcher = new C(C === RegExp ? R.source : R, flags);
	  global = !!~flags.indexOf('g');
	  fullUnicode = !!~flags.indexOf('u');
	  matcher.lastIndex = toLength(R.lastIndex);
	  return new $RegExpStringIterator(matcher, S, global, fullUnicode);
	};

	// `String.prototype.matchAll` method
	// https://github.com/tc39/proposal-string-matchall
	_export({ target: 'String', proto: true, forced: WORKS_WITH_NON_GLOBAL_REGEX }, {
	  matchAll: function matchAll(regexp) {
	    var O = requireObjectCoercible(this);
	    var flags, S, matcher, rx;
	    if (regexp != null) {
	      if (isRegexp(regexp)) {
	        flags = String(requireObjectCoercible('flags' in RegExpPrototype
	          ? regexp.flags
	          : regexpFlags.call(regexp)
	        ));
	        if (!~flags.indexOf('g')) throw TypeError('`.matchAll` does not allow non-global regexes');
	      }
	      if (WORKS_WITH_NON_GLOBAL_REGEX) return nativeMatchAll.apply(O, arguments);
	      matcher = regexp[MATCH_ALL];
	      if (matcher === undefined && isPure && classofRaw(regexp) == 'RegExp') matcher = $matchAll;
	      if (matcher != null) return aFunction$1(matcher).call(regexp, O);
	    } else if (WORKS_WITH_NON_GLOBAL_REGEX) return nativeMatchAll.apply(O, arguments);
	    S = String(O);
	    rx = new RegExp(regexp, 'g');
	    return rx[MATCH_ALL](S);
	  }
	});

	MATCH_ALL in RegExpPrototype || createNonEnumerableProperty(RegExpPrototype, MATCH_ALL, $matchAll);

	// `String.prototype.repeat` method implementation
	// https://tc39.github.io/ecma262/#sec-string.prototype.repeat
	var stringRepeat = ''.repeat || function repeat(count) {
	  var str = String(requireObjectCoercible(this));
	  var result = '';
	  var n = toInteger(count);
	  if (n < 0 || n == Infinity) throw RangeError('Wrong number of repetitions');
	  for (;n > 0; (n >>>= 1) && (str += str)) if (n & 1) result += str;
	  return result;
	};

	// https://github.com/tc39/proposal-string-pad-start-end




	var ceil$1 = Math.ceil;

	// `String.prototype.{ padStart, padEnd }` methods implementation
	var createMethod$5 = function (IS_END) {
	  return function ($this, maxLength, fillString) {
	    var S = String(requireObjectCoercible($this));
	    var stringLength = S.length;
	    var fillStr = fillString === undefined ? ' ' : String(fillString);
	    var intMaxLength = toLength(maxLength);
	    var fillLen, stringFiller;
	    if (intMaxLength <= stringLength || fillStr == '') return S;
	    fillLen = intMaxLength - stringLength;
	    stringFiller = stringRepeat.call(fillStr, ceil$1(fillLen / fillStr.length));
	    if (stringFiller.length > fillLen) stringFiller = stringFiller.slice(0, fillLen);
	    return IS_END ? S + stringFiller : stringFiller + S;
	  };
	};

	var stringPad = {
	  // `String.prototype.padStart` method
	  // https://tc39.github.io/ecma262/#sec-string.prototype.padstart
	  start: createMethod$5(false),
	  // `String.prototype.padEnd` method
	  // https://tc39.github.io/ecma262/#sec-string.prototype.padend
	  end: createMethod$5(true)
	};

	// https://github.com/zloirock/core-js/issues/280


	// eslint-disable-next-line unicorn/no-unsafe-regex
	var webkitStringPadBug = /Version\/10\.\d+(\.\d+)?( Mobile\/\w+)? Safari\//.test(userAgent);

	var $padEnd = stringPad.end;


	// `String.prototype.padEnd` method
	// https://tc39.github.io/ecma262/#sec-string.prototype.padend
	_export({ target: 'String', proto: true, forced: webkitStringPadBug }, {
	  padEnd: function padEnd(maxLength /* , fillString = ' ' */) {
	    return $padEnd(this, maxLength, arguments.length > 1 ? arguments[1] : undefined);
	  }
	});

	var $padStart = stringPad.start;


	// `String.prototype.padStart` method
	// https://tc39.github.io/ecma262/#sec-string.prototype.padstart
	_export({ target: 'String', proto: true, forced: webkitStringPadBug }, {
	  padStart: function padStart(maxLength /* , fillString = ' ' */) {
	    return $padStart(this, maxLength, arguments.length > 1 ? arguments[1] : undefined);
	  }
	});

	// `String.prototype.repeat` method
	// https://tc39.github.io/ecma262/#sec-string.prototype.repeat
	_export({ target: 'String', proto: true }, {
	  repeat: stringRepeat
	});

	var max$3 = Math.max;
	var min$6 = Math.min;
	var floor$1 = Math.floor;
	var SUBSTITUTION_SYMBOLS = /\$([$&'`]|\d\d?|<[^>]*>)/g;
	var SUBSTITUTION_SYMBOLS_NO_NAMED = /\$([$&'`]|\d\d?)/g;

	var maybeToString = function (it) {
	  return it === undefined ? it : String(it);
	};

	// @@replace logic
	fixRegexpWellKnownSymbolLogic('replace', 2, function (REPLACE, nativeReplace, maybeCallNative, reason) {
	  return [
	    // `String.prototype.replace` method
	    // https://tc39.github.io/ecma262/#sec-string.prototype.replace
	    function replace(searchValue, replaceValue) {
	      var O = requireObjectCoercible(this);
	      var replacer = searchValue == undefined ? undefined : searchValue[REPLACE];
	      return replacer !== undefined
	        ? replacer.call(searchValue, O, replaceValue)
	        : nativeReplace.call(String(O), searchValue, replaceValue);
	    },
	    // `RegExp.prototype[@@replace]` method
	    // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@replace
	    function (regexp, replaceValue) {
	      if (reason.REPLACE_KEEPS_$0 || (typeof replaceValue === 'string' && replaceValue.indexOf('$0') === -1)) {
	        var res = maybeCallNative(nativeReplace, regexp, this, replaceValue);
	        if (res.done) return res.value;
	      }

	      var rx = anObject(regexp);
	      var S = String(this);

	      var functionalReplace = typeof replaceValue === 'function';
	      if (!functionalReplace) replaceValue = String(replaceValue);

	      var global = rx.global;
	      if (global) {
	        var fullUnicode = rx.unicode;
	        rx.lastIndex = 0;
	      }
	      var results = [];
	      while (true) {
	        var result = regexpExecAbstract(rx, S);
	        if (result === null) break;

	        results.push(result);
	        if (!global) break;

	        var matchStr = String(result[0]);
	        if (matchStr === '') rx.lastIndex = advanceStringIndex(S, toLength(rx.lastIndex), fullUnicode);
	      }

	      var accumulatedResult = '';
	      var nextSourcePosition = 0;
	      for (var i = 0; i < results.length; i++) {
	        result = results[i];

	        var matched = String(result[0]);
	        var position = max$3(min$6(toInteger(result.index), S.length), 0);
	        var captures = [];
	        // NOTE: This is equivalent to
	        //   captures = result.slice(1).map(maybeToString)
	        // but for some reason `nativeSlice.call(result, 1, result.length)` (called in
	        // the slice polyfill when slicing native arrays) "doesn't work" in safari 9 and
	        // causes a crash (https://pastebin.com/N21QzeQA) when trying to debug it.
	        for (var j = 1; j < result.length; j++) captures.push(maybeToString(result[j]));
	        var namedCaptures = result.groups;
	        if (functionalReplace) {
	          var replacerArgs = [matched].concat(captures, position, S);
	          if (namedCaptures !== undefined) replacerArgs.push(namedCaptures);
	          var replacement = String(replaceValue.apply(undefined, replacerArgs));
	        } else {
	          replacement = getSubstitution(matched, S, position, captures, namedCaptures, replaceValue);
	        }
	        if (position >= nextSourcePosition) {
	          accumulatedResult += S.slice(nextSourcePosition, position) + replacement;
	          nextSourcePosition = position + matched.length;
	        }
	      }
	      return accumulatedResult + S.slice(nextSourcePosition);
	    }
	  ];

	  // https://tc39.github.io/ecma262/#sec-getsubstitution
	  function getSubstitution(matched, str, position, captures, namedCaptures, replacement) {
	    var tailPos = position + matched.length;
	    var m = captures.length;
	    var symbols = SUBSTITUTION_SYMBOLS_NO_NAMED;
	    if (namedCaptures !== undefined) {
	      namedCaptures = toObject(namedCaptures);
	      symbols = SUBSTITUTION_SYMBOLS;
	    }
	    return nativeReplace.call(replacement, symbols, function (match, ch) {
	      var capture;
	      switch (ch.charAt(0)) {
	        case '$': return '$';
	        case '&': return matched;
	        case '`': return str.slice(0, position);
	        case "'": return str.slice(tailPos);
	        case '<':
	          capture = namedCaptures[ch.slice(1, -1)];
	          break;
	        default: // \d\d?
	          var n = +ch;
	          if (n === 0) return match;
	          if (n > m) {
	            var f = floor$1(n / 10);
	            if (f === 0) return match;
	            if (f <= m) return captures[f - 1] === undefined ? ch.charAt(1) : captures[f - 1] + ch.charAt(1);
	            return match;
	          }
	          capture = captures[n - 1];
	      }
	      return capture === undefined ? '' : capture;
	    });
	  }
	});

	// @@search logic
	fixRegexpWellKnownSymbolLogic('search', 1, function (SEARCH, nativeSearch, maybeCallNative) {
	  return [
	    // `String.prototype.search` method
	    // https://tc39.github.io/ecma262/#sec-string.prototype.search
	    function search(regexp) {
	      var O = requireObjectCoercible(this);
	      var searcher = regexp == undefined ? undefined : regexp[SEARCH];
	      return searcher !== undefined ? searcher.call(regexp, O) : new RegExp(regexp)[SEARCH](String(O));
	    },
	    // `RegExp.prototype[@@search]` method
	    // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@search
	    function (regexp) {
	      var res = maybeCallNative(nativeSearch, regexp, this);
	      if (res.done) return res.value;

	      var rx = anObject(regexp);
	      var S = String(this);

	      var previousLastIndex = rx.lastIndex;
	      if (!sameValue(previousLastIndex, 0)) rx.lastIndex = 0;
	      var result = regexpExecAbstract(rx, S);
	      if (!sameValue(rx.lastIndex, previousLastIndex)) rx.lastIndex = previousLastIndex;
	      return result === null ? -1 : result.index;
	    }
	  ];
	});

	var arrayPush = [].push;
	var min$7 = Math.min;
	var MAX_UINT32 = 0xFFFFFFFF;

	// babel-minify transpiles RegExp('x', 'y') -> /x/y and it causes SyntaxError
	var SUPPORTS_Y = !fails(function () { return !RegExp(MAX_UINT32, 'y'); });

	// @@split logic
	fixRegexpWellKnownSymbolLogic('split', 2, function (SPLIT, nativeSplit, maybeCallNative) {
	  var internalSplit;
	  if (
	    'abbc'.split(/(b)*/)[1] == 'c' ||
	    'test'.split(/(?:)/, -1).length != 4 ||
	    'ab'.split(/(?:ab)*/).length != 2 ||
	    '.'.split(/(.?)(.?)/).length != 4 ||
	    '.'.split(/()()/).length > 1 ||
	    ''.split(/.?/).length
	  ) {
	    // based on es5-shim implementation, need to rework it
	    internalSplit = function (separator, limit) {
	      var string = String(requireObjectCoercible(this));
	      var lim = limit === undefined ? MAX_UINT32 : limit >>> 0;
	      if (lim === 0) return [];
	      if (separator === undefined) return [string];
	      // If `separator` is not a regex, use native split
	      if (!isRegexp(separator)) {
	        return nativeSplit.call(string, separator, lim);
	      }
	      var output = [];
	      var flags = (separator.ignoreCase ? 'i' : '') +
	                  (separator.multiline ? 'm' : '') +
	                  (separator.unicode ? 'u' : '') +
	                  (separator.sticky ? 'y' : '');
	      var lastLastIndex = 0;
	      // Make `global` and avoid `lastIndex` issues by working with a copy
	      var separatorCopy = new RegExp(separator.source, flags + 'g');
	      var match, lastIndex, lastLength;
	      while (match = regexpExec.call(separatorCopy, string)) {
	        lastIndex = separatorCopy.lastIndex;
	        if (lastIndex > lastLastIndex) {
	          output.push(string.slice(lastLastIndex, match.index));
	          if (match.length > 1 && match.index < string.length) arrayPush.apply(output, match.slice(1));
	          lastLength = match[0].length;
	          lastLastIndex = lastIndex;
	          if (output.length >= lim) break;
	        }
	        if (separatorCopy.lastIndex === match.index) separatorCopy.lastIndex++; // Avoid an infinite loop
	      }
	      if (lastLastIndex === string.length) {
	        if (lastLength || !separatorCopy.test('')) output.push('');
	      } else output.push(string.slice(lastLastIndex));
	      return output.length > lim ? output.slice(0, lim) : output;
	    };
	  // Chakra, V8
	  } else if ('0'.split(undefined, 0).length) {
	    internalSplit = function (separator, limit) {
	      return separator === undefined && limit === 0 ? [] : nativeSplit.call(this, separator, limit);
	    };
	  } else internalSplit = nativeSplit;

	  return [
	    // `String.prototype.split` method
	    // https://tc39.github.io/ecma262/#sec-string.prototype.split
	    function split(separator, limit) {
	      var O = requireObjectCoercible(this);
	      var splitter = separator == undefined ? undefined : separator[SPLIT];
	      return splitter !== undefined
	        ? splitter.call(separator, O, limit)
	        : internalSplit.call(String(O), separator, limit);
	    },
	    // `RegExp.prototype[@@split]` method
	    // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@split
	    //
	    // NOTE: This cannot be properly polyfilled in engines that don't support
	    // the 'y' flag.
	    function (regexp, limit) {
	      var res = maybeCallNative(internalSplit, regexp, this, limit, internalSplit !== nativeSplit);
	      if (res.done) return res.value;

	      var rx = anObject(regexp);
	      var S = String(this);
	      var C = speciesConstructor(rx, RegExp);

	      var unicodeMatching = rx.unicode;
	      var flags = (rx.ignoreCase ? 'i' : '') +
	                  (rx.multiline ? 'm' : '') +
	                  (rx.unicode ? 'u' : '') +
	                  (SUPPORTS_Y ? 'y' : 'g');

	      // ^(? + rx + ) is needed, in combination with some S slicing, to
	      // simulate the 'y' flag.
	      var splitter = new C(SUPPORTS_Y ? rx : '^(?:' + rx.source + ')', flags);
	      var lim = limit === undefined ? MAX_UINT32 : limit >>> 0;
	      if (lim === 0) return [];
	      if (S.length === 0) return regexpExecAbstract(splitter, S) === null ? [S] : [];
	      var p = 0;
	      var q = 0;
	      var A = [];
	      while (q < S.length) {
	        splitter.lastIndex = SUPPORTS_Y ? q : 0;
	        var z = regexpExecAbstract(splitter, SUPPORTS_Y ? S : S.slice(q));
	        var e;
	        if (
	          z === null ||
	          (e = min$7(toLength(splitter.lastIndex + (SUPPORTS_Y ? 0 : q)), S.length)) === p
	        ) {
	          q = advanceStringIndex(S, q, unicodeMatching);
	        } else {
	          A.push(S.slice(p, q));
	          if (A.length === lim) return A;
	          for (var i = 1; i <= z.length - 1; i++) {
	            A.push(z[i]);
	            if (A.length === lim) return A;
	          }
	          q = p = e;
	        }
	      }
	      A.push(S.slice(p));
	      return A;
	    }
	  ];
	}, !SUPPORTS_Y);

	var getOwnPropertyDescriptor$6 = objectGetOwnPropertyDescriptor.f;






	var nativeStartsWith = ''.startsWith;
	var min$8 = Math.min;

	var CORRECT_IS_REGEXP_LOGIC$1 = correctIsRegexpLogic('startsWith');
	// https://github.com/zloirock/core-js/pull/702
	var MDN_POLYFILL_BUG$1 = !CORRECT_IS_REGEXP_LOGIC$1 && !!function () {
	  var descriptor = getOwnPropertyDescriptor$6(String.prototype, 'startsWith');
	  return descriptor && !descriptor.writable;
	}();

	// `String.prototype.startsWith` method
	// https://tc39.github.io/ecma262/#sec-string.prototype.startswith
	_export({ target: 'String', proto: true, forced: !MDN_POLYFILL_BUG$1 && !CORRECT_IS_REGEXP_LOGIC$1 }, {
	  startsWith: function startsWith(searchString /* , position = 0 */) {
	    var that = String(requireObjectCoercible(this));
	    notARegexp(searchString);
	    var index = toLength(min$8(arguments.length > 1 ? arguments[1] : undefined, that.length));
	    var search = String(searchString);
	    return nativeStartsWith
	      ? nativeStartsWith.call(that, search, index)
	      : that.slice(index, index + search.length) === search;
	  }
	});

	// a string of all valid unicode whitespaces
	// eslint-disable-next-line max-len
	var whitespaces = '\u0009\u000A\u000B\u000C\u000D\u0020\u00A0\u1680\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF';

	var whitespace = '[' + whitespaces + ']';
	var ltrim = RegExp('^' + whitespace + whitespace + '*');
	var rtrim = RegExp(whitespace + whitespace + '*$');

	// `String.prototype.{ trim, trimStart, trimEnd, trimLeft, trimRight }` methods implementation
	var createMethod$6 = function (TYPE) {
	  return function ($this) {
	    var string = String(requireObjectCoercible($this));
	    if (TYPE & 1) string = string.replace(ltrim, '');
	    if (TYPE & 2) string = string.replace(rtrim, '');
	    return string;
	  };
	};

	var stringTrim = {
	  // `String.prototype.{ trimLeft, trimStart }` methods
	  // https://tc39.github.io/ecma262/#sec-string.prototype.trimstart
	  start: createMethod$6(1),
	  // `String.prototype.{ trimRight, trimEnd }` methods
	  // https://tc39.github.io/ecma262/#sec-string.prototype.trimend
	  end: createMethod$6(2),
	  // `String.prototype.trim` method
	  // https://tc39.github.io/ecma262/#sec-string.prototype.trim
	  trim: createMethod$6(3)
	};

	var non = '\u200B\u0085\u180E';

	// check that a method works with the correct list
	// of whitespaces and has a correct name
	var forcedStringTrimMethod = function (METHOD_NAME) {
	  return fails(function () {
	    return !!whitespaces[METHOD_NAME]() || non[METHOD_NAME]() != non || whitespaces[METHOD_NAME].name !== METHOD_NAME;
	  });
	};

	var $trim = stringTrim.trim;


	// `String.prototype.trim` method
	// https://tc39.github.io/ecma262/#sec-string.prototype.trim
	_export({ target: 'String', proto: true, forced: forcedStringTrimMethod('trim') }, {
	  trim: function trim() {
	    return $trim(this);
	  }
	});

	var $trimStart = stringTrim.start;


	var FORCED$4 = forcedStringTrimMethod('trimStart');

	var trimStart = FORCED$4 ? function trimStart() {
	  return $trimStart(this);
	} : ''.trimStart;

	// `String.prototype.{ trimStart, trimLeft }` methods
	// https://github.com/tc39/ecmascript-string-left-right-trim
	_export({ target: 'String', proto: true, forced: FORCED$4 }, {
	  trimStart: trimStart,
	  trimLeft: trimStart
	});

	var $trimEnd = stringTrim.end;


	var FORCED$5 = forcedStringTrimMethod('trimEnd');

	var trimEnd = FORCED$5 ? function trimEnd() {
	  return $trimEnd(this);
	} : ''.trimEnd;

	// `String.prototype.{ trimEnd, trimRight }` methods
	// https://github.com/tc39/ecmascript-string-left-right-trim
	_export({ target: 'String', proto: true, forced: FORCED$5 }, {
	  trimEnd: trimEnd,
	  trimRight: trimEnd
	});

	var quot = /"/g;

	// B.2.3.2.1 CreateHTML(string, tag, attribute, value)
	// https://tc39.github.io/ecma262/#sec-createhtml
	var createHtml = function (string, tag, attribute, value) {
	  var S = String(requireObjectCoercible(string));
	  var p1 = '<' + tag;
	  if (attribute !== '') p1 += ' ' + attribute + '="' + String(value).replace(quot, '&quot;') + '"';
	  return p1 + '>' + S + '</' + tag + '>';
	};

	// check the existence of a method, lowercase
	// of a tag and escaping quotes in arguments
	var forcedStringHtmlMethod = function (METHOD_NAME) {
	  return fails(function () {
	    var test = ''[METHOD_NAME]('"');
	    return test !== test.toLowerCase() || test.split('"').length > 3;
	  });
	};

	// `String.prototype.anchor` method
	// https://tc39.github.io/ecma262/#sec-string.prototype.anchor
	_export({ target: 'String', proto: true, forced: forcedStringHtmlMethod('anchor') }, {
	  anchor: function anchor(name) {
	    return createHtml(this, 'a', 'name', name);
	  }
	});

	// `String.prototype.big` method
	// https://tc39.github.io/ecma262/#sec-string.prototype.big
	_export({ target: 'String', proto: true, forced: forcedStringHtmlMethod('big') }, {
	  big: function big() {
	    return createHtml(this, 'big', '', '');
	  }
	});

	// `String.prototype.blink` method
	// https://tc39.github.io/ecma262/#sec-string.prototype.blink
	_export({ target: 'String', proto: true, forced: forcedStringHtmlMethod('blink') }, {
	  blink: function blink() {
	    return createHtml(this, 'blink', '', '');
	  }
	});

	// `String.prototype.bold` method
	// https://tc39.github.io/ecma262/#sec-string.prototype.bold
	_export({ target: 'String', proto: true, forced: forcedStringHtmlMethod('bold') }, {
	  bold: function bold() {
	    return createHtml(this, 'b', '', '');
	  }
	});

	// `String.prototype.fixed` method
	// https://tc39.github.io/ecma262/#sec-string.prototype.fixed
	_export({ target: 'String', proto: true, forced: forcedStringHtmlMethod('fixed') }, {
	  fixed: function fixed() {
	    return createHtml(this, 'tt', '', '');
	  }
	});

	// `String.prototype.fontcolor` method
	// https://tc39.github.io/ecma262/#sec-string.prototype.fontcolor
	_export({ target: 'String', proto: true, forced: forcedStringHtmlMethod('fontcolor') }, {
	  fontcolor: function fontcolor(color) {
	    return createHtml(this, 'font', 'color', color);
	  }
	});

	// `String.prototype.fontsize` method
	// https://tc39.github.io/ecma262/#sec-string.prototype.fontsize
	_export({ target: 'String', proto: true, forced: forcedStringHtmlMethod('fontsize') }, {
	  fontsize: function fontsize(size) {
	    return createHtml(this, 'font', 'size', size);
	  }
	});

	// `String.prototype.italics` method
	// https://tc39.github.io/ecma262/#sec-string.prototype.italics
	_export({ target: 'String', proto: true, forced: forcedStringHtmlMethod('italics') }, {
	  italics: function italics() {
	    return createHtml(this, 'i', '', '');
	  }
	});

	// `String.prototype.link` method
	// https://tc39.github.io/ecma262/#sec-string.prototype.link
	_export({ target: 'String', proto: true, forced: forcedStringHtmlMethod('link') }, {
	  link: function link(url) {
	    return createHtml(this, 'a', 'href', url);
	  }
	});

	// `String.prototype.small` method
	// https://tc39.github.io/ecma262/#sec-string.prototype.small
	_export({ target: 'String', proto: true, forced: forcedStringHtmlMethod('small') }, {
	  small: function small() {
	    return createHtml(this, 'small', '', '');
	  }
	});

	// `String.prototype.strike` method
	// https://tc39.github.io/ecma262/#sec-string.prototype.strike
	_export({ target: 'String', proto: true, forced: forcedStringHtmlMethod('strike') }, {
	  strike: function strike() {
	    return createHtml(this, 'strike', '', '');
	  }
	});

	// `String.prototype.sub` method
	// https://tc39.github.io/ecma262/#sec-string.prototype.sub
	_export({ target: 'String', proto: true, forced: forcedStringHtmlMethod('sub') }, {
	  sub: function sub() {
	    return createHtml(this, 'sub', '', '');
	  }
	});

	// `String.prototype.sup` method
	// https://tc39.github.io/ecma262/#sec-string.prototype.sup
	_export({ target: 'String', proto: true, forced: forcedStringHtmlMethod('sup') }, {
	  sup: function sup() {
	    return createHtml(this, 'sup', '', '');
	  }
	});

	// makes subclassing work correct for wrapped built-ins
	var inheritIfRequired = function ($this, dummy, Wrapper) {
	  var NewTarget, NewTargetPrototype;
	  if (
	    // it can work only with native `setPrototypeOf`
	    objectSetPrototypeOf &&
	    // we haven't completely correct pre-ES6 way for getting `new.target`, so use this
	    typeof (NewTarget = dummy.constructor) == 'function' &&
	    NewTarget !== Wrapper &&
	    isObject(NewTargetPrototype = NewTarget.prototype) &&
	    NewTargetPrototype !== Wrapper.prototype
	  ) objectSetPrototypeOf($this, NewTargetPrototype);
	  return $this;
	};

	var defineProperty$5 = objectDefineProperty.f;
	var getOwnPropertyNames = objectGetOwnPropertyNames.f;





	var setInternalState$5 = internalState.set;



	var MATCH$2 = wellKnownSymbol('match');
	var NativeRegExp = global_1.RegExp;
	var RegExpPrototype$1 = NativeRegExp.prototype;
	var re1 = /a/g;
	var re2 = /a/g;

	// "new" should create a new object, old webkit bug
	var CORRECT_NEW = new NativeRegExp(re1) !== re1;

	var UNSUPPORTED_Y$2 = regexpStickyHelpers.UNSUPPORTED_Y;

	var FORCED$6 = descriptors && isForced_1('RegExp', (!CORRECT_NEW || UNSUPPORTED_Y$2 || fails(function () {
	  re2[MATCH$2] = false;
	  // RegExp constructor can alter flags and IsRegExp works correct with @@match
	  return NativeRegExp(re1) != re1 || NativeRegExp(re2) == re2 || NativeRegExp(re1, 'i') != '/a/i';
	})));

	// `RegExp` constructor
	// https://tc39.github.io/ecma262/#sec-regexp-constructor
	if (FORCED$6) {
	  var RegExpWrapper = function RegExp(pattern, flags) {
	    var thisIsRegExp = this instanceof RegExpWrapper;
	    var patternIsRegExp = isRegexp(pattern);
	    var flagsAreUndefined = flags === undefined;
	    var sticky;

	    if (!thisIsRegExp && patternIsRegExp && pattern.constructor === RegExpWrapper && flagsAreUndefined) {
	      return pattern;
	    }

	    if (CORRECT_NEW) {
	      if (patternIsRegExp && !flagsAreUndefined) pattern = pattern.source;
	    } else if (pattern instanceof RegExpWrapper) {
	      if (flagsAreUndefined) flags = regexpFlags.call(pattern);
	      pattern = pattern.source;
	    }

	    if (UNSUPPORTED_Y$2) {
	      sticky = !!flags && flags.indexOf('y') > -1;
	      if (sticky) flags = flags.replace(/y/g, '');
	    }

	    var result = inheritIfRequired(
	      CORRECT_NEW ? new NativeRegExp(pattern, flags) : NativeRegExp(pattern, flags),
	      thisIsRegExp ? this : RegExpPrototype$1,
	      RegExpWrapper
	    );

	    if (UNSUPPORTED_Y$2 && sticky) setInternalState$5(result, { sticky: sticky });

	    return result;
	  };
	  var proxy = function (key) {
	    key in RegExpWrapper || defineProperty$5(RegExpWrapper, key, {
	      configurable: true,
	      get: function () { return NativeRegExp[key]; },
	      set: function (it) { NativeRegExp[key] = it; }
	    });
	  };
	  var keys$1 = getOwnPropertyNames(NativeRegExp);
	  var index = 0;
	  while (keys$1.length > index) proxy(keys$1[index++]);
	  RegExpPrototype$1.constructor = RegExpWrapper;
	  RegExpWrapper.prototype = RegExpPrototype$1;
	  redefine(global_1, 'RegExp', RegExpWrapper);
	}

	// https://tc39.github.io/ecma262/#sec-get-regexp-@@species
	setSpecies('RegExp');

	_export({ target: 'RegExp', proto: true, forced: /./.exec !== regexpExec }, {
	  exec: regexpExec
	});

	var UNSUPPORTED_Y$3 = regexpStickyHelpers.UNSUPPORTED_Y;

	// `RegExp.prototype.flags` getter
	// https://tc39.github.io/ecma262/#sec-get-regexp.prototype.flags
	if (descriptors && (/./g.flags != 'g' || UNSUPPORTED_Y$3)) {
	  objectDefineProperty.f(RegExp.prototype, 'flags', {
	    configurable: true,
	    get: regexpFlags
	  });
	}

	var UNSUPPORTED_Y$4 = regexpStickyHelpers.UNSUPPORTED_Y;
	var defineProperty$6 = objectDefineProperty.f;
	var getInternalState$5 = internalState.get;
	var RegExpPrototype$2 = RegExp.prototype;

	// `RegExp.prototype.sticky` getter
	if (descriptors && UNSUPPORTED_Y$4) {
	  defineProperty$6(RegExp.prototype, 'sticky', {
	    configurable: true,
	    get: function () {
	      if (this === RegExpPrototype$2) return undefined;
	      // We can't use InternalStateModule.getterFor because
	      // we don't add metadata for regexps created by a literal.
	      if (this instanceof RegExp) {
	        return !!getInternalState$5(this).sticky;
	      }
	      throw TypeError('Incompatible receiver, RegExp required');
	    }
	  });
	}

	var DELEGATES_TO_EXEC = function () {
	  var execCalled = false;
	  var re = /[ac]/;
	  re.exec = function () {
	    execCalled = true;
	    return /./.exec.apply(this, arguments);
	  };
	  return re.test('abc') === true && execCalled;
	}();

	var nativeTest = /./.test;

	_export({ target: 'RegExp', proto: true, forced: !DELEGATES_TO_EXEC }, {
	  test: function (str) {
	    if (typeof this.exec !== 'function') {
	      return nativeTest.call(this, str);
	    }
	    var result = this.exec(str);
	    if (result !== null && !isObject(result)) {
	      throw new Error('RegExp exec method returned something other than an Object or null');
	    }
	    return !!result;
	  }
	});

	var TO_STRING = 'toString';
	var RegExpPrototype$3 = RegExp.prototype;
	var nativeToString = RegExpPrototype$3[TO_STRING];

	var NOT_GENERIC = fails(function () { return nativeToString.call({ source: 'a', flags: 'b' }) != '/a/b'; });
	// FF44- RegExp#toString has a wrong name
	var INCORRECT_NAME = nativeToString.name != TO_STRING;

	// `RegExp.prototype.toString` method
	// https://tc39.github.io/ecma262/#sec-regexp.prototype.tostring
	if (NOT_GENERIC || INCORRECT_NAME) {
	  redefine(RegExp.prototype, TO_STRING, function toString() {
	    var R = anObject(this);
	    var p = String(R.source);
	    var rf = R.flags;
	    var f = String(rf === undefined && R instanceof RegExp && !('flags' in RegExpPrototype$3) ? regexpFlags.call(R) : rf);
	    return '/' + p + '/' + f;
	  }, { unsafe: true });
	}

	var trim = stringTrim.trim;


	var nativeParseInt = global_1.parseInt;
	var hex = /^[+-]?0[Xx]/;
	var FORCED$7 = nativeParseInt(whitespaces + '08') !== 8 || nativeParseInt(whitespaces + '0x16') !== 22;

	// `parseInt` method
	// https://tc39.github.io/ecma262/#sec-parseint-string-radix
	var _parseInt = FORCED$7 ? function parseInt(string, radix) {
	  var S = trim(String(string));
	  return nativeParseInt(S, (radix >>> 0) || (hex.test(S) ? 16 : 10));
	} : nativeParseInt;

	// `parseInt` method
	// https://tc39.github.io/ecma262/#sec-parseint-string-radix
	_export({ global: true, forced: parseInt != _parseInt }, {
	  parseInt: _parseInt
	});

	var trim$1 = stringTrim.trim;


	var nativeParseFloat = global_1.parseFloat;
	var FORCED$8 = 1 / nativeParseFloat(whitespaces + '-0') !== -Infinity;

	// `parseFloat` method
	// https://tc39.github.io/ecma262/#sec-parsefloat-string
	var _parseFloat = FORCED$8 ? function parseFloat(string) {
	  var trimmedString = trim$1(String(string));
	  var result = nativeParseFloat(trimmedString);
	  return result === 0 && trimmedString.charAt(0) == '-' ? -0 : result;
	} : nativeParseFloat;

	// `parseFloat` method
	// https://tc39.github.io/ecma262/#sec-parsefloat-string
	_export({ global: true, forced: parseFloat != _parseFloat }, {
	  parseFloat: _parseFloat
	});

	var getOwnPropertyNames$1 = objectGetOwnPropertyNames.f;
	var getOwnPropertyDescriptor$7 = objectGetOwnPropertyDescriptor.f;
	var defineProperty$7 = objectDefineProperty.f;
	var trim$2 = stringTrim.trim;

	var NUMBER = 'Number';
	var NativeNumber = global_1[NUMBER];
	var NumberPrototype = NativeNumber.prototype;

	// Opera ~12 has broken Object#toString
	var BROKEN_CLASSOF = classofRaw(objectCreate(NumberPrototype)) == NUMBER;

	// `ToNumber` abstract operation
	// https://tc39.github.io/ecma262/#sec-tonumber
	var toNumber = function (argument) {
	  var it = toPrimitive(argument, false);
	  var first, third, radix, maxCode, digits, length, index, code;
	  if (typeof it == 'string' && it.length > 2) {
	    it = trim$2(it);
	    first = it.charCodeAt(0);
	    if (first === 43 || first === 45) {
	      third = it.charCodeAt(2);
	      if (third === 88 || third === 120) return NaN; // Number('+0x1') should be NaN, old V8 fix
	    } else if (first === 48) {
	      switch (it.charCodeAt(1)) {
	        case 66: case 98: radix = 2; maxCode = 49; break; // fast equal of /^0b[01]+$/i
	        case 79: case 111: radix = 8; maxCode = 55; break; // fast equal of /^0o[0-7]+$/i
	        default: return +it;
	      }
	      digits = it.slice(2);
	      length = digits.length;
	      for (index = 0; index < length; index++) {
	        code = digits.charCodeAt(index);
	        // parseInt parses a string to a first unavailable symbol
	        // but ToNumber should return NaN if a string contains unavailable symbols
	        if (code < 48 || code > maxCode) return NaN;
	      } return parseInt(digits, radix);
	    }
	  } return +it;
	};

	// `Number` constructor
	// https://tc39.github.io/ecma262/#sec-number-constructor
	if (isForced_1(NUMBER, !NativeNumber(' 0o1') || !NativeNumber('0b1') || NativeNumber('+0x1'))) {
	  var NumberWrapper = function Number(value) {
	    var it = arguments.length < 1 ? 0 : value;
	    var dummy = this;
	    return dummy instanceof NumberWrapper
	      // check on 1..constructor(foo) case
	      && (BROKEN_CLASSOF ? fails(function () { NumberPrototype.valueOf.call(dummy); }) : classofRaw(dummy) != NUMBER)
	        ? inheritIfRequired(new NativeNumber(toNumber(it)), dummy, NumberWrapper) : toNumber(it);
	  };
	  for (var keys$2 = descriptors ? getOwnPropertyNames$1(NativeNumber) : (
	    // ES3:
	    'MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,' +
	    // ES2015 (in case, if modules with ES2015 Number statics required before):
	    'EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,' +
	    'MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger'
	  ).split(','), j = 0, key; keys$2.length > j; j++) {
	    if (has(NativeNumber, key = keys$2[j]) && !has(NumberWrapper, key)) {
	      defineProperty$7(NumberWrapper, key, getOwnPropertyDescriptor$7(NativeNumber, key));
	    }
	  }
	  NumberWrapper.prototype = NumberPrototype;
	  NumberPrototype.constructor = NumberWrapper;
	  redefine(global_1, NUMBER, NumberWrapper);
	}

	// `Number.EPSILON` constant
	// https://tc39.github.io/ecma262/#sec-number.epsilon
	_export({ target: 'Number', stat: true }, {
	  EPSILON: Math.pow(2, -52)
	});

	var globalIsFinite = global_1.isFinite;

	// `Number.isFinite` method
	// https://tc39.github.io/ecma262/#sec-number.isfinite
	var numberIsFinite = Number.isFinite || function isFinite(it) {
	  return typeof it == 'number' && globalIsFinite(it);
	};

	// `Number.isFinite` method
	// https://tc39.github.io/ecma262/#sec-number.isfinite
	_export({ target: 'Number', stat: true }, { isFinite: numberIsFinite });

	var floor$2 = Math.floor;

	// `Number.isInteger` method implementation
	// https://tc39.github.io/ecma262/#sec-number.isinteger
	var isInteger = function isInteger(it) {
	  return !isObject(it) && isFinite(it) && floor$2(it) === it;
	};

	// `Number.isInteger` method
	// https://tc39.github.io/ecma262/#sec-number.isinteger
	_export({ target: 'Number', stat: true }, {
	  isInteger: isInteger
	});

	// `Number.isNaN` method
	// https://tc39.github.io/ecma262/#sec-number.isnan
	_export({ target: 'Number', stat: true }, {
	  isNaN: function isNaN(number) {
	    // eslint-disable-next-line no-self-compare
	    return number != number;
	  }
	});

	var abs = Math.abs;

	// `Number.isSafeInteger` method
	// https://tc39.github.io/ecma262/#sec-number.issafeinteger
	_export({ target: 'Number', stat: true }, {
	  isSafeInteger: function isSafeInteger(number) {
	    return isInteger(number) && abs(number) <= 0x1FFFFFFFFFFFFF;
	  }
	});

	// `Number.MAX_SAFE_INTEGER` constant
	// https://tc39.github.io/ecma262/#sec-number.max_safe_integer
	_export({ target: 'Number', stat: true }, {
	  MAX_SAFE_INTEGER: 0x1FFFFFFFFFFFFF
	});

	// `Number.MIN_SAFE_INTEGER` constant
	// https://tc39.github.io/ecma262/#sec-number.min_safe_integer
	_export({ target: 'Number', stat: true }, {
	  MIN_SAFE_INTEGER: -0x1FFFFFFFFFFFFF
	});

	// `Number.parseFloat` method
	// https://tc39.github.io/ecma262/#sec-number.parseFloat
	_export({ target: 'Number', stat: true, forced: Number.parseFloat != _parseFloat }, {
	  parseFloat: _parseFloat
	});

	// `Number.parseInt` method
	// https://tc39.github.io/ecma262/#sec-number.parseint
	_export({ target: 'Number', stat: true, forced: Number.parseInt != _parseInt }, {
	  parseInt: _parseInt
	});

	// `thisNumberValue` abstract operation
	// https://tc39.github.io/ecma262/#sec-thisnumbervalue
	var thisNumberValue = function (value) {
	  if (typeof value != 'number' && classofRaw(value) != 'Number') {
	    throw TypeError('Incorrect invocation');
	  }
	  return +value;
	};

	var nativeToFixed = 1.0.toFixed;
	var floor$3 = Math.floor;

	var pow = function (x, n, acc) {
	  return n === 0 ? acc : n % 2 === 1 ? pow(x, n - 1, acc * x) : pow(x * x, n / 2, acc);
	};

	var log = function (x) {
	  var n = 0;
	  var x2 = x;
	  while (x2 >= 4096) {
	    n += 12;
	    x2 /= 4096;
	  }
	  while (x2 >= 2) {
	    n += 1;
	    x2 /= 2;
	  } return n;
	};

	var FORCED$9 = nativeToFixed && (
	  0.00008.toFixed(3) !== '0.000' ||
	  0.9.toFixed(0) !== '1' ||
	  1.255.toFixed(2) !== '1.25' ||
	  1000000000000000128.0.toFixed(0) !== '1000000000000000128'
	) || !fails(function () {
	  // V8 ~ Android 4.3-
	  nativeToFixed.call({});
	});

	// `Number.prototype.toFixed` method
	// https://tc39.github.io/ecma262/#sec-number.prototype.tofixed
	_export({ target: 'Number', proto: true, forced: FORCED$9 }, {
	  // eslint-disable-next-line max-statements
	  toFixed: function toFixed(fractionDigits) {
	    var number = thisNumberValue(this);
	    var fractDigits = toInteger(fractionDigits);
	    var data = [0, 0, 0, 0, 0, 0];
	    var sign = '';
	    var result = '0';
	    var e, z, j, k;

	    var multiply = function (n, c) {
	      var index = -1;
	      var c2 = c;
	      while (++index < 6) {
	        c2 += n * data[index];
	        data[index] = c2 % 1e7;
	        c2 = floor$3(c2 / 1e7);
	      }
	    };

	    var divide = function (n) {
	      var index = 6;
	      var c = 0;
	      while (--index >= 0) {
	        c += data[index];
	        data[index] = floor$3(c / n);
	        c = (c % n) * 1e7;
	      }
	    };

	    var dataToString = function () {
	      var index = 6;
	      var s = '';
	      while (--index >= 0) {
	        if (s !== '' || index === 0 || data[index] !== 0) {
	          var t = String(data[index]);
	          s = s === '' ? t : s + stringRepeat.call('0', 7 - t.length) + t;
	        }
	      } return s;
	    };

	    if (fractDigits < 0 || fractDigits > 20) throw RangeError('Incorrect fraction digits');
	    // eslint-disable-next-line no-self-compare
	    if (number != number) return 'NaN';
	    if (number <= -1e21 || number >= 1e21) return String(number);
	    if (number < 0) {
	      sign = '-';
	      number = -number;
	    }
	    if (number > 1e-21) {
	      e = log(number * pow(2, 69, 1)) - 69;
	      z = e < 0 ? number * pow(2, -e, 1) : number / pow(2, e, 1);
	      z *= 0x10000000000000;
	      e = 52 - e;
	      if (e > 0) {
	        multiply(0, z);
	        j = fractDigits;
	        while (j >= 7) {
	          multiply(1e7, 0);
	          j -= 7;
	        }
	        multiply(pow(10, j, 1), 0);
	        j = e - 1;
	        while (j >= 23) {
	          divide(1 << 23);
	          j -= 23;
	        }
	        divide(1 << j);
	        multiply(1, 1);
	        divide(2);
	        result = dataToString();
	      } else {
	        multiply(0, z);
	        multiply(1 << -e, 0);
	        result = dataToString() + stringRepeat.call('0', fractDigits);
	      }
	    }
	    if (fractDigits > 0) {
	      k = result.length;
	      result = sign + (k <= fractDigits
	        ? '0.' + stringRepeat.call('0', fractDigits - k) + result
	        : result.slice(0, k - fractDigits) + '.' + result.slice(k - fractDigits));
	    } else {
	      result = sign + result;
	    } return result;
	  }
	});

	var nativeToPrecision = 1.0.toPrecision;

	var FORCED$a = fails(function () {
	  // IE7-
	  return nativeToPrecision.call(1, undefined) !== '1';
	}) || !fails(function () {
	  // V8 ~ Android 4.3-
	  nativeToPrecision.call({});
	});

	// `Number.prototype.toPrecision` method
	// https://tc39.github.io/ecma262/#sec-number.prototype.toprecision
	_export({ target: 'Number', proto: true, forced: FORCED$a }, {
	  toPrecision: function toPrecision(precision) {
	    return precision === undefined
	      ? nativeToPrecision.call(thisNumberValue(this))
	      : nativeToPrecision.call(thisNumberValue(this), precision);
	  }
	});

	var log$1 = Math.log;

	// `Math.log1p` method implementation
	// https://tc39.github.io/ecma262/#sec-math.log1p
	var mathLog1p = Math.log1p || function log1p(x) {
	  return (x = +x) > -1e-8 && x < 1e-8 ? x - x * x / 2 : log$1(1 + x);
	};

	var nativeAcosh = Math.acosh;
	var log$2 = Math.log;
	var sqrt = Math.sqrt;
	var LN2 = Math.LN2;

	var FORCED$b = !nativeAcosh
	  // V8 bug: https://code.google.com/p/v8/issues/detail?id=3509
	  || Math.floor(nativeAcosh(Number.MAX_VALUE)) != 710
	  // Tor Browser bug: Math.acosh(Infinity) -> NaN
	  || nativeAcosh(Infinity) != Infinity;

	// `Math.acosh` method
	// https://tc39.github.io/ecma262/#sec-math.acosh
	_export({ target: 'Math', stat: true, forced: FORCED$b }, {
	  acosh: function acosh(x) {
	    return (x = +x) < 1 ? NaN : x > 94906265.62425156
	      ? log$2(x) + LN2
	      : mathLog1p(x - 1 + sqrt(x - 1) * sqrt(x + 1));
	  }
	});

	var nativeAsinh = Math.asinh;
	var log$3 = Math.log;
	var sqrt$1 = Math.sqrt;

	function asinh(x) {
	  return !isFinite(x = +x) || x == 0 ? x : x < 0 ? -asinh(-x) : log$3(x + sqrt$1(x * x + 1));
	}

	// `Math.asinh` method
	// https://tc39.github.io/ecma262/#sec-math.asinh
	// Tor Browser bug: Math.asinh(0) -> -0
	_export({ target: 'Math', stat: true, forced: !(nativeAsinh && 1 / nativeAsinh(0) > 0) }, {
	  asinh: asinh
	});

	var nativeAtanh = Math.atanh;
	var log$4 = Math.log;

	// `Math.atanh` method
	// https://tc39.github.io/ecma262/#sec-math.atanh
	// Tor Browser bug: Math.atanh(-0) -> 0
	_export({ target: 'Math', stat: true, forced: !(nativeAtanh && 1 / nativeAtanh(-0) < 0) }, {
	  atanh: function atanh(x) {
	    return (x = +x) == 0 ? x : log$4((1 + x) / (1 - x)) / 2;
	  }
	});

	// `Math.sign` method implementation
	// https://tc39.github.io/ecma262/#sec-math.sign
	var mathSign = Math.sign || function sign(x) {
	  // eslint-disable-next-line no-self-compare
	  return (x = +x) == 0 || x != x ? x : x < 0 ? -1 : 1;
	};

	var abs$1 = Math.abs;
	var pow$1 = Math.pow;

	// `Math.cbrt` method
	// https://tc39.github.io/ecma262/#sec-math.cbrt
	_export({ target: 'Math', stat: true }, {
	  cbrt: function cbrt(x) {
	    return mathSign(x = +x) * pow$1(abs$1(x), 1 / 3);
	  }
	});

	var floor$4 = Math.floor;
	var log$5 = Math.log;
	var LOG2E = Math.LOG2E;

	// `Math.clz32` method
	// https://tc39.github.io/ecma262/#sec-math.clz32
	_export({ target: 'Math', stat: true }, {
	  clz32: function clz32(x) {
	    return (x >>>= 0) ? 31 - floor$4(log$5(x + 0.5) * LOG2E) : 32;
	  }
	});

	var nativeExpm1 = Math.expm1;
	var exp = Math.exp;

	// `Math.expm1` method implementation
	// https://tc39.github.io/ecma262/#sec-math.expm1
	var mathExpm1 = (!nativeExpm1
	  // Old FF bug
	  || nativeExpm1(10) > 22025.465794806719 || nativeExpm1(10) < 22025.4657948067165168
	  // Tor Browser bug
	  || nativeExpm1(-2e-17) != -2e-17
	) ? function expm1(x) {
	  return (x = +x) == 0 ? x : x > -1e-6 && x < 1e-6 ? x + x * x / 2 : exp(x) - 1;
	} : nativeExpm1;

	var nativeCosh = Math.cosh;
	var abs$2 = Math.abs;
	var E = Math.E;

	// `Math.cosh` method
	// https://tc39.github.io/ecma262/#sec-math.cosh
	_export({ target: 'Math', stat: true, forced: !nativeCosh || nativeCosh(710) === Infinity }, {
	  cosh: function cosh(x) {
	    var t = mathExpm1(abs$2(x) - 1) + 1;
	    return (t + 1 / (t * E * E)) * (E / 2);
	  }
	});

	// `Math.expm1` method
	// https://tc39.github.io/ecma262/#sec-math.expm1
	_export({ target: 'Math', stat: true, forced: mathExpm1 != Math.expm1 }, { expm1: mathExpm1 });

	var abs$3 = Math.abs;
	var pow$2 = Math.pow;
	var EPSILON = pow$2(2, -52);
	var EPSILON32 = pow$2(2, -23);
	var MAX32 = pow$2(2, 127) * (2 - EPSILON32);
	var MIN32 = pow$2(2, -126);

	var roundTiesToEven = function (n) {
	  return n + 1 / EPSILON - 1 / EPSILON;
	};

	// `Math.fround` method implementation
	// https://tc39.github.io/ecma262/#sec-math.fround
	var mathFround = Math.fround || function fround(x) {
	  var $abs = abs$3(x);
	  var $sign = mathSign(x);
	  var a, result;
	  if ($abs < MIN32) return $sign * roundTiesToEven($abs / MIN32 / EPSILON32) * MIN32 * EPSILON32;
	  a = (1 + EPSILON32 / EPSILON) * $abs;
	  result = a - (a - $abs);
	  // eslint-disable-next-line no-self-compare
	  if (result > MAX32 || result != result) return $sign * Infinity;
	  return $sign * result;
	};

	// `Math.fround` method
	// https://tc39.github.io/ecma262/#sec-math.fround
	_export({ target: 'Math', stat: true }, { fround: mathFround });

	var $hypot = Math.hypot;
	var abs$4 = Math.abs;
	var sqrt$2 = Math.sqrt;

	// Chrome 77 bug
	// https://bugs.chromium.org/p/v8/issues/detail?id=9546
	var BUGGY = !!$hypot && $hypot(Infinity, NaN) !== Infinity;

	// `Math.hypot` method
	// https://tc39.github.io/ecma262/#sec-math.hypot
	_export({ target: 'Math', stat: true, forced: BUGGY }, {
	  hypot: function hypot(value1, value2) { // eslint-disable-line no-unused-vars
	    var sum = 0;
	    var i = 0;
	    var aLen = arguments.length;
	    var larg = 0;
	    var arg, div;
	    while (i < aLen) {
	      arg = abs$4(arguments[i++]);
	      if (larg < arg) {
	        div = larg / arg;
	        sum = sum * div * div + 1;
	        larg = arg;
	      } else if (arg > 0) {
	        div = arg / larg;
	        sum += div * div;
	      } else sum += arg;
	    }
	    return larg === Infinity ? Infinity : larg * sqrt$2(sum);
	  }
	});

	var nativeImul = Math.imul;

	var FORCED$c = fails(function () {
	  return nativeImul(0xFFFFFFFF, 5) != -5 || nativeImul.length != 2;
	});

	// `Math.imul` method
	// https://tc39.github.io/ecma262/#sec-math.imul
	// some WebKit versions fails with big numbers, some has wrong arity
	_export({ target: 'Math', stat: true, forced: FORCED$c }, {
	  imul: function imul(x, y) {
	    var UINT16 = 0xFFFF;
	    var xn = +x;
	    var yn = +y;
	    var xl = UINT16 & xn;
	    var yl = UINT16 & yn;
	    return 0 | xl * yl + ((UINT16 & xn >>> 16) * yl + xl * (UINT16 & yn >>> 16) << 16 >>> 0);
	  }
	});

	var log$6 = Math.log;
	var LOG10E = Math.LOG10E;

	// `Math.log10` method
	// https://tc39.github.io/ecma262/#sec-math.log10
	_export({ target: 'Math', stat: true }, {
	  log10: function log10(x) {
	    return log$6(x) * LOG10E;
	  }
	});

	// `Math.log1p` method
	// https://tc39.github.io/ecma262/#sec-math.log1p
	_export({ target: 'Math', stat: true }, { log1p: mathLog1p });

	var log$7 = Math.log;
	var LN2$1 = Math.LN2;

	// `Math.log2` method
	// https://tc39.github.io/ecma262/#sec-math.log2
	_export({ target: 'Math', stat: true }, {
	  log2: function log2(x) {
	    return log$7(x) / LN2$1;
	  }
	});

	// `Math.sign` method
	// https://tc39.github.io/ecma262/#sec-math.sign
	_export({ target: 'Math', stat: true }, {
	  sign: mathSign
	});

	var abs$5 = Math.abs;
	var exp$1 = Math.exp;
	var E$1 = Math.E;

	var FORCED$d = fails(function () {
	  return Math.sinh(-2e-17) != -2e-17;
	});

	// `Math.sinh` method
	// https://tc39.github.io/ecma262/#sec-math.sinh
	// V8 near Chromium 38 has a problem with very small numbers
	_export({ target: 'Math', stat: true, forced: FORCED$d }, {
	  sinh: function sinh(x) {
	    return abs$5(x = +x) < 1 ? (mathExpm1(x) - mathExpm1(-x)) / 2 : (exp$1(x - 1) - exp$1(-x - 1)) * (E$1 / 2);
	  }
	});

	var exp$2 = Math.exp;

	// `Math.tanh` method
	// https://tc39.github.io/ecma262/#sec-math.tanh
	_export({ target: 'Math', stat: true }, {
	  tanh: function tanh(x) {
	    var a = mathExpm1(x = +x);
	    var b = mathExpm1(-x);
	    return a == Infinity ? 1 : b == Infinity ? -1 : (a - b) / (exp$2(x) + exp$2(-x));
	  }
	});

	// Math[@@toStringTag] property
	// https://tc39.github.io/ecma262/#sec-math-@@tostringtag
	setToStringTag(Math, 'Math', true);

	var ceil$2 = Math.ceil;
	var floor$5 = Math.floor;

	// `Math.trunc` method
	// https://tc39.github.io/ecma262/#sec-math.trunc
	_export({ target: 'Math', stat: true }, {
	  trunc: function trunc(it) {
	    return (it > 0 ? floor$5 : ceil$2)(it);
	  }
	});

	// `Date.now` method
	// https://tc39.github.io/ecma262/#sec-date.now
	_export({ target: 'Date', stat: true }, {
	  now: function now() {
	    return new Date().getTime();
	  }
	});

	var FORCED$e = fails(function () {
	  return new Date(NaN).toJSON() !== null
	    || Date.prototype.toJSON.call({ toISOString: function () { return 1; } }) !== 1;
	});

	// `Date.prototype.toJSON` method
	// https://tc39.github.io/ecma262/#sec-date.prototype.tojson
	_export({ target: 'Date', proto: true, forced: FORCED$e }, {
	  // eslint-disable-next-line no-unused-vars
	  toJSON: function toJSON(key) {
	    var O = toObject(this);
	    var pv = toPrimitive(O);
	    return typeof pv == 'number' && !isFinite(pv) ? null : O.toISOString();
	  }
	});

	var padStart = stringPad.start;

	var abs$6 = Math.abs;
	var DatePrototype = Date.prototype;
	var getTime = DatePrototype.getTime;
	var nativeDateToISOString = DatePrototype.toISOString;

	// `Date.prototype.toISOString` method implementation
	// https://tc39.github.io/ecma262/#sec-date.prototype.toisostring
	// PhantomJS / old WebKit fails here:
	var dateToIsoString = (fails(function () {
	  return nativeDateToISOString.call(new Date(-5e13 - 1)) != '0385-07-25T07:06:39.999Z';
	}) || !fails(function () {
	  nativeDateToISOString.call(new Date(NaN));
	})) ? function toISOString() {
	  if (!isFinite(getTime.call(this))) throw RangeError('Invalid time value');
	  var date = this;
	  var year = date.getUTCFullYear();
	  var milliseconds = date.getUTCMilliseconds();
	  var sign = year < 0 ? '-' : year > 9999 ? '+' : '';
	  return sign + padStart(abs$6(year), sign ? 6 : 4, 0) +
	    '-' + padStart(date.getUTCMonth() + 1, 2, 0) +
	    '-' + padStart(date.getUTCDate(), 2, 0) +
	    'T' + padStart(date.getUTCHours(), 2, 0) +
	    ':' + padStart(date.getUTCMinutes(), 2, 0) +
	    ':' + padStart(date.getUTCSeconds(), 2, 0) +
	    '.' + padStart(milliseconds, 3, 0) +
	    'Z';
	} : nativeDateToISOString;

	// `Date.prototype.toISOString` method
	// https://tc39.github.io/ecma262/#sec-date.prototype.toisostring
	// PhantomJS / old WebKit has a broken implementations
	_export({ target: 'Date', proto: true, forced: Date.prototype.toISOString !== dateToIsoString }, {
	  toISOString: dateToIsoString
	});

	var DatePrototype$1 = Date.prototype;
	var INVALID_DATE = 'Invalid Date';
	var TO_STRING$1 = 'toString';
	var nativeDateToString = DatePrototype$1[TO_STRING$1];
	var getTime$1 = DatePrototype$1.getTime;

	// `Date.prototype.toString` method
	// https://tc39.github.io/ecma262/#sec-date.prototype.tostring
	if (new Date(NaN) + '' != INVALID_DATE) {
	  redefine(DatePrototype$1, TO_STRING$1, function toString() {
	    var value = getTime$1.call(this);
	    // eslint-disable-next-line no-self-compare
	    return value === value ? nativeDateToString.call(this) : INVALID_DATE;
	  });
	}

	var dateToPrimitive = function (hint) {
	  if (hint !== 'string' && hint !== 'number' && hint !== 'default') {
	    throw TypeError('Incorrect hint');
	  } return toPrimitive(anObject(this), hint !== 'number');
	};

	var TO_PRIMITIVE$1 = wellKnownSymbol('toPrimitive');
	var DatePrototype$2 = Date.prototype;

	// `Date.prototype[@@toPrimitive]` method
	// https://tc39.github.io/ecma262/#sec-date.prototype-@@toprimitive
	if (!(TO_PRIMITIVE$1 in DatePrototype$2)) {
	  createNonEnumerableProperty(DatePrototype$2, TO_PRIMITIVE$1, dateToPrimitive);
	}

	var $stringify$1 = getBuiltIn('JSON', 'stringify');
	var re = /[\uD800-\uDFFF]/g;
	var low = /^[\uD800-\uDBFF]$/;
	var hi = /^[\uDC00-\uDFFF]$/;

	var fix = function (match, offset, string) {
	  var prev = string.charAt(offset - 1);
	  var next = string.charAt(offset + 1);
	  if ((low.test(match) && !hi.test(next)) || (hi.test(match) && !low.test(prev))) {
	    return '\\u' + match.charCodeAt(0).toString(16);
	  } return match;
	};

	var FORCED$f = fails(function () {
	  return $stringify$1('\uDF06\uD834') !== '"\\udf06\\ud834"'
	    || $stringify$1('\uDEAD') !== '"\\udead"';
	});

	if ($stringify$1) {
	  // https://github.com/tc39/proposal-well-formed-stringify
	  _export({ target: 'JSON', stat: true, forced: FORCED$f }, {
	    // eslint-disable-next-line no-unused-vars
	    stringify: function stringify(it, replacer, space) {
	      var result = $stringify$1.apply(null, arguments);
	      return typeof result == 'string' ? result.replace(re, fix) : result;
	    }
	  });
	}

	// JSON[@@toStringTag] property
	// https://tc39.github.io/ecma262/#sec-json-@@tostringtag
	setToStringTag(global_1.JSON, 'JSON', true);

	// `Promise.allSettled` method
	// https://github.com/tc39/proposal-promise-allSettled
	_export({ target: 'Promise', stat: true }, {
	  allSettled: function allSettled(iterable) {
	    var C = this;
	    var capability = newPromiseCapability.f(C);
	    var resolve = capability.resolve;
	    var reject = capability.reject;
	    var result = perform(function () {
	      var promiseResolve = aFunction$1(C.resolve);
	      var values = [];
	      var counter = 0;
	      var remaining = 1;
	      iterate_1(iterable, function (promise) {
	        var index = counter++;
	        var alreadyCalled = false;
	        values.push(undefined);
	        remaining++;
	        promiseResolve.call(C, promise).then(function (value) {
	          if (alreadyCalled) return;
	          alreadyCalled = true;
	          values[index] = { status: 'fulfilled', value: value };
	          --remaining || resolve(values);
	        }, function (e) {
	          if (alreadyCalled) return;
	          alreadyCalled = true;
	          values[index] = { status: 'rejected', reason: e };
	          --remaining || resolve(values);
	        });
	      });
	      --remaining || resolve(values);
	    });
	    if (result.error) reject(result.value);
	    return capability.promise;
	  }
	});

	// Safari bug https://bugs.webkit.org/show_bug.cgi?id=200829
	var NON_GENERIC = !!nativePromiseConstructor && fails(function () {
	  nativePromiseConstructor.prototype['finally'].call({ then: function () { /* empty */ } }, function () { /* empty */ });
	});

	// `Promise.prototype.finally` method
	// https://tc39.github.io/ecma262/#sec-promise.prototype.finally
	_export({ target: 'Promise', proto: true, real: true, forced: NON_GENERIC }, {
	  'finally': function (onFinally) {
	    var C = speciesConstructor(this, getBuiltIn('Promise'));
	    var isFunction = typeof onFinally == 'function';
	    return this.then(
	      isFunction ? function (x) {
	        return promiseResolve(C, onFinally()).then(function () { return x; });
	      } : onFinally,
	      isFunction ? function (e) {
	        return promiseResolve(C, onFinally()).then(function () { throw e; });
	      } : onFinally
	    );
	  }
	});

	// patch native Promise.prototype for native async functions
	if (typeof nativePromiseConstructor == 'function' && !nativePromiseConstructor.prototype['finally']) {
	  redefine(nativePromiseConstructor.prototype, 'finally', getBuiltIn('Promise').prototype['finally']);
	}

	var collection = function (CONSTRUCTOR_NAME, wrapper, common) {
	  var IS_MAP = CONSTRUCTOR_NAME.indexOf('Map') !== -1;
	  var IS_WEAK = CONSTRUCTOR_NAME.indexOf('Weak') !== -1;
	  var ADDER = IS_MAP ? 'set' : 'add';
	  var NativeConstructor = global_1[CONSTRUCTOR_NAME];
	  var NativePrototype = NativeConstructor && NativeConstructor.prototype;
	  var Constructor = NativeConstructor;
	  var exported = {};

	  var fixMethod = function (KEY) {
	    var nativeMethod = NativePrototype[KEY];
	    redefine(NativePrototype, KEY,
	      KEY == 'add' ? function add(value) {
	        nativeMethod.call(this, value === 0 ? 0 : value);
	        return this;
	      } : KEY == 'delete' ? function (key) {
	        return IS_WEAK && !isObject(key) ? false : nativeMethod.call(this, key === 0 ? 0 : key);
	      } : KEY == 'get' ? function get(key) {
	        return IS_WEAK && !isObject(key) ? undefined : nativeMethod.call(this, key === 0 ? 0 : key);
	      } : KEY == 'has' ? function has(key) {
	        return IS_WEAK && !isObject(key) ? false : nativeMethod.call(this, key === 0 ? 0 : key);
	      } : function set(key, value) {
	        nativeMethod.call(this, key === 0 ? 0 : key, value);
	        return this;
	      }
	    );
	  };

	  // eslint-disable-next-line max-len
	  if (isForced_1(CONSTRUCTOR_NAME, typeof NativeConstructor != 'function' || !(IS_WEAK || NativePrototype.forEach && !fails(function () {
	    new NativeConstructor().entries().next();
	  })))) {
	    // create collection constructor
	    Constructor = common.getConstructor(wrapper, CONSTRUCTOR_NAME, IS_MAP, ADDER);
	    internalMetadata.REQUIRED = true;
	  } else if (isForced_1(CONSTRUCTOR_NAME, true)) {
	    var instance = new Constructor();
	    // early implementations not supports chaining
	    var HASNT_CHAINING = instance[ADDER](IS_WEAK ? {} : -0, 1) != instance;
	    // V8 ~ Chromium 40- weak-collections throws on primitives, but should return false
	    var THROWS_ON_PRIMITIVES = fails(function () { instance.has(1); });
	    // most early implementations doesn't supports iterables, most modern - not close it correctly
	    // eslint-disable-next-line no-new
	    var ACCEPT_ITERABLES = checkCorrectnessOfIteration(function (iterable) { new NativeConstructor(iterable); });
	    // for early implementations -0 and +0 not the same
	    var BUGGY_ZERO = !IS_WEAK && fails(function () {
	      // V8 ~ Chromium 42- fails only with 5+ elements
	      var $instance = new NativeConstructor();
	      var index = 5;
	      while (index--) $instance[ADDER](index, index);
	      return !$instance.has(-0);
	    });

	    if (!ACCEPT_ITERABLES) {
	      Constructor = wrapper(function (dummy, iterable) {
	        anInstance(dummy, Constructor, CONSTRUCTOR_NAME);
	        var that = inheritIfRequired(new NativeConstructor(), dummy, Constructor);
	        if (iterable != undefined) iterate_1(iterable, that[ADDER], that, IS_MAP);
	        return that;
	      });
	      Constructor.prototype = NativePrototype;
	      NativePrototype.constructor = Constructor;
	    }

	    if (THROWS_ON_PRIMITIVES || BUGGY_ZERO) {
	      fixMethod('delete');
	      fixMethod('has');
	      IS_MAP && fixMethod('get');
	    }

	    if (BUGGY_ZERO || HASNT_CHAINING) fixMethod(ADDER);

	    // weak collections should not contains .clear method
	    if (IS_WEAK && NativePrototype.clear) delete NativePrototype.clear;
	  }

	  exported[CONSTRUCTOR_NAME] = Constructor;
	  _export({ global: true, forced: Constructor != NativeConstructor }, exported);

	  setToStringTag(Constructor, CONSTRUCTOR_NAME);

	  if (!IS_WEAK) common.setStrong(Constructor, CONSTRUCTOR_NAME, IS_MAP);

	  return Constructor;
	};

	var defineProperty$8 = objectDefineProperty.f;








	var fastKey = internalMetadata.fastKey;


	var setInternalState$6 = internalState.set;
	var internalStateGetterFor = internalState.getterFor;

	var collectionStrong = {
	  getConstructor: function (wrapper, CONSTRUCTOR_NAME, IS_MAP, ADDER) {
	    var C = wrapper(function (that, iterable) {
	      anInstance(that, C, CONSTRUCTOR_NAME);
	      setInternalState$6(that, {
	        type: CONSTRUCTOR_NAME,
	        index: objectCreate(null),
	        first: undefined,
	        last: undefined,
	        size: 0
	      });
	      if (!descriptors) that.size = 0;
	      if (iterable != undefined) iterate_1(iterable, that[ADDER], that, IS_MAP);
	    });

	    var getInternalState = internalStateGetterFor(CONSTRUCTOR_NAME);

	    var define = function (that, key, value) {
	      var state = getInternalState(that);
	      var entry = getEntry(that, key);
	      var previous, index;
	      // change existing entry
	      if (entry) {
	        entry.value = value;
	      // create new entry
	      } else {
	        state.last = entry = {
	          index: index = fastKey(key, true),
	          key: key,
	          value: value,
	          previous: previous = state.last,
	          next: undefined,
	          removed: false
	        };
	        if (!state.first) state.first = entry;
	        if (previous) previous.next = entry;
	        if (descriptors) state.size++;
	        else that.size++;
	        // add to index
	        if (index !== 'F') state.index[index] = entry;
	      } return that;
	    };

	    var getEntry = function (that, key) {
	      var state = getInternalState(that);
	      // fast case
	      var index = fastKey(key);
	      var entry;
	      if (index !== 'F') return state.index[index];
	      // frozen object case
	      for (entry = state.first; entry; entry = entry.next) {
	        if (entry.key == key) return entry;
	      }
	    };

	    redefineAll(C.prototype, {
	      // 23.1.3.1 Map.prototype.clear()
	      // 23.2.3.2 Set.prototype.clear()
	      clear: function clear() {
	        var that = this;
	        var state = getInternalState(that);
	        var data = state.index;
	        var entry = state.first;
	        while (entry) {
	          entry.removed = true;
	          if (entry.previous) entry.previous = entry.previous.next = undefined;
	          delete data[entry.index];
	          entry = entry.next;
	        }
	        state.first = state.last = undefined;
	        if (descriptors) state.size = 0;
	        else that.size = 0;
	      },
	      // 23.1.3.3 Map.prototype.delete(key)
	      // 23.2.3.4 Set.prototype.delete(value)
	      'delete': function (key) {
	        var that = this;
	        var state = getInternalState(that);
	        var entry = getEntry(that, key);
	        if (entry) {
	          var next = entry.next;
	          var prev = entry.previous;
	          delete state.index[entry.index];
	          entry.removed = true;
	          if (prev) prev.next = next;
	          if (next) next.previous = prev;
	          if (state.first == entry) state.first = next;
	          if (state.last == entry) state.last = prev;
	          if (descriptors) state.size--;
	          else that.size--;
	        } return !!entry;
	      },
	      // 23.2.3.6 Set.prototype.forEach(callbackfn, thisArg = undefined)
	      // 23.1.3.5 Map.prototype.forEach(callbackfn, thisArg = undefined)
	      forEach: function forEach(callbackfn /* , that = undefined */) {
	        var state = getInternalState(this);
	        var boundFunction = bindContext(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3);
	        var entry;
	        while (entry = entry ? entry.next : state.first) {
	          boundFunction(entry.value, entry.key, this);
	          // revert to the last existing entry
	          while (entry && entry.removed) entry = entry.previous;
	        }
	      },
	      // 23.1.3.7 Map.prototype.has(key)
	      // 23.2.3.7 Set.prototype.has(value)
	      has: function has(key) {
	        return !!getEntry(this, key);
	      }
	    });

	    redefineAll(C.prototype, IS_MAP ? {
	      // 23.1.3.6 Map.prototype.get(key)
	      get: function get(key) {
	        var entry = getEntry(this, key);
	        return entry && entry.value;
	      },
	      // 23.1.3.9 Map.prototype.set(key, value)
	      set: function set(key, value) {
	        return define(this, key === 0 ? 0 : key, value);
	      }
	    } : {
	      // 23.2.3.1 Set.prototype.add(value)
	      add: function add(value) {
	        return define(this, value = value === 0 ? 0 : value, value);
	      }
	    });
	    if (descriptors) defineProperty$8(C.prototype, 'size', {
	      get: function () {
	        return getInternalState(this).size;
	      }
	    });
	    return C;
	  },
	  setStrong: function (C, CONSTRUCTOR_NAME, IS_MAP) {
	    var ITERATOR_NAME = CONSTRUCTOR_NAME + ' Iterator';
	    var getInternalCollectionState = internalStateGetterFor(CONSTRUCTOR_NAME);
	    var getInternalIteratorState = internalStateGetterFor(ITERATOR_NAME);
	    // add .keys, .values, .entries, [@@iterator]
	    // 23.1.3.4, 23.1.3.8, 23.1.3.11, 23.1.3.12, 23.2.3.5, 23.2.3.8, 23.2.3.10, 23.2.3.11
	    defineIterator(C, CONSTRUCTOR_NAME, function (iterated, kind) {
	      setInternalState$6(this, {
	        type: ITERATOR_NAME,
	        target: iterated,
	        state: getInternalCollectionState(iterated),
	        kind: kind,
	        last: undefined
	      });
	    }, function () {
	      var state = getInternalIteratorState(this);
	      var kind = state.kind;
	      var entry = state.last;
	      // revert to the last existing entry
	      while (entry && entry.removed) entry = entry.previous;
	      // get next entry
	      if (!state.target || !(state.last = entry = entry ? entry.next : state.state.first)) {
	        // or finish the iteration
	        state.target = undefined;
	        return { value: undefined, done: true };
	      }
	      // return step by kind
	      if (kind == 'keys') return { value: entry.key, done: false };
	      if (kind == 'values') return { value: entry.value, done: false };
	      return { value: [entry.key, entry.value], done: false };
	    }, IS_MAP ? 'entries' : 'values', !IS_MAP, true);

	    // add [@@species], 23.1.2.2, 23.2.2.2
	    setSpecies(CONSTRUCTOR_NAME);
	  }
	};

	// `Map` constructor
	// https://tc39.github.io/ecma262/#sec-map-objects
	var es_map = collection('Map', function (init) {
	  return function Map() { return init(this, arguments.length ? arguments[0] : undefined); };
	}, collectionStrong);

	// `Set` constructor
	// https://tc39.github.io/ecma262/#sec-set-objects
	var es_set = collection('Set', function (init) {
	  return function Set() { return init(this, arguments.length ? arguments[0] : undefined); };
	}, collectionStrong);

	var getWeakData = internalMetadata.getWeakData;








	var setInternalState$7 = internalState.set;
	var internalStateGetterFor$1 = internalState.getterFor;
	var find = arrayIteration.find;
	var findIndex = arrayIteration.findIndex;
	var id$1 = 0;

	// fallback for uncaught frozen keys
	var uncaughtFrozenStore = function (store) {
	  return store.frozen || (store.frozen = new UncaughtFrozenStore());
	};

	var UncaughtFrozenStore = function () {
	  this.entries = [];
	};

	var findUncaughtFrozen = function (store, key) {
	  return find(store.entries, function (it) {
	    return it[0] === key;
	  });
	};

	UncaughtFrozenStore.prototype = {
	  get: function (key) {
	    var entry = findUncaughtFrozen(this, key);
	    if (entry) return entry[1];
	  },
	  has: function (key) {
	    return !!findUncaughtFrozen(this, key);
	  },
	  set: function (key, value) {
	    var entry = findUncaughtFrozen(this, key);
	    if (entry) entry[1] = value;
	    else this.entries.push([key, value]);
	  },
	  'delete': function (key) {
	    var index = findIndex(this.entries, function (it) {
	      return it[0] === key;
	    });
	    if (~index) this.entries.splice(index, 1);
	    return !!~index;
	  }
	};

	var collectionWeak = {
	  getConstructor: function (wrapper, CONSTRUCTOR_NAME, IS_MAP, ADDER) {
	    var C = wrapper(function (that, iterable) {
	      anInstance(that, C, CONSTRUCTOR_NAME);
	      setInternalState$7(that, {
	        type: CONSTRUCTOR_NAME,
	        id: id$1++,
	        frozen: undefined
	      });
	      if (iterable != undefined) iterate_1(iterable, that[ADDER], that, IS_MAP);
	    });

	    var getInternalState = internalStateGetterFor$1(CONSTRUCTOR_NAME);

	    var define = function (that, key, value) {
	      var state = getInternalState(that);
	      var data = getWeakData(anObject(key), true);
	      if (data === true) uncaughtFrozenStore(state).set(key, value);
	      else data[state.id] = value;
	      return that;
	    };

	    redefineAll(C.prototype, {
	      // 23.3.3.2 WeakMap.prototype.delete(key)
	      // 23.4.3.3 WeakSet.prototype.delete(value)
	      'delete': function (key) {
	        var state = getInternalState(this);
	        if (!isObject(key)) return false;
	        var data = getWeakData(key);
	        if (data === true) return uncaughtFrozenStore(state)['delete'](key);
	        return data && has(data, state.id) && delete data[state.id];
	      },
	      // 23.3.3.4 WeakMap.prototype.has(key)
	      // 23.4.3.4 WeakSet.prototype.has(value)
	      has: function has$1(key) {
	        var state = getInternalState(this);
	        if (!isObject(key)) return false;
	        var data = getWeakData(key);
	        if (data === true) return uncaughtFrozenStore(state).has(key);
	        return data && has(data, state.id);
	      }
	    });

	    redefineAll(C.prototype, IS_MAP ? {
	      // 23.3.3.3 WeakMap.prototype.get(key)
	      get: function get(key) {
	        var state = getInternalState(this);
	        if (isObject(key)) {
	          var data = getWeakData(key);
	          if (data === true) return uncaughtFrozenStore(state).get(key);
	          return data ? data[state.id] : undefined;
	        }
	      },
	      // 23.3.3.5 WeakMap.prototype.set(key, value)
	      set: function set(key, value) {
	        return define(this, key, value);
	      }
	    } : {
	      // 23.4.3.1 WeakSet.prototype.add(value)
	      add: function add(value) {
	        return define(this, value, true);
	      }
	    });

	    return C;
	  }
	};

	var es_weakMap = createCommonjsModule(function (module) {






	var enforceIternalState = internalState.enforce;


	var IS_IE11 = !global_1.ActiveXObject && 'ActiveXObject' in global_1;
	var isExtensible = Object.isExtensible;
	var InternalWeakMap;

	var wrapper = function (init) {
	  return function WeakMap() {
	    return init(this, arguments.length ? arguments[0] : undefined);
	  };
	};

	// `WeakMap` constructor
	// https://tc39.github.io/ecma262/#sec-weakmap-constructor
	var $WeakMap = module.exports = collection('WeakMap', wrapper, collectionWeak);

	// IE11 WeakMap frozen keys fix
	// We can't use feature detection because it crash some old IE builds
	// https://github.com/zloirock/core-js/issues/485
	if (nativeWeakMap && IS_IE11) {
	  InternalWeakMap = collectionWeak.getConstructor(wrapper, 'WeakMap', true);
	  internalMetadata.REQUIRED = true;
	  var WeakMapPrototype = $WeakMap.prototype;
	  var nativeDelete = WeakMapPrototype['delete'];
	  var nativeHas = WeakMapPrototype.has;
	  var nativeGet = WeakMapPrototype.get;
	  var nativeSet = WeakMapPrototype.set;
	  redefineAll(WeakMapPrototype, {
	    'delete': function (key) {
	      if (isObject(key) && !isExtensible(key)) {
	        var state = enforceIternalState(this);
	        if (!state.frozen) state.frozen = new InternalWeakMap();
	        return nativeDelete.call(this, key) || state.frozen['delete'](key);
	      } return nativeDelete.call(this, key);
	    },
	    has: function has(key) {
	      if (isObject(key) && !isExtensible(key)) {
	        var state = enforceIternalState(this);
	        if (!state.frozen) state.frozen = new InternalWeakMap();
	        return nativeHas.call(this, key) || state.frozen.has(key);
	      } return nativeHas.call(this, key);
	    },
	    get: function get(key) {
	      if (isObject(key) && !isExtensible(key)) {
	        var state = enforceIternalState(this);
	        if (!state.frozen) state.frozen = new InternalWeakMap();
	        return nativeHas.call(this, key) ? nativeGet.call(this, key) : state.frozen.get(key);
	      } return nativeGet.call(this, key);
	    },
	    set: function set(key, value) {
	      if (isObject(key) && !isExtensible(key)) {
	        var state = enforceIternalState(this);
	        if (!state.frozen) state.frozen = new InternalWeakMap();
	        nativeHas.call(this, key) ? nativeSet.call(this, key, value) : state.frozen.set(key, value);
	      } else nativeSet.call(this, key, value);
	      return this;
	    }
	  });
	}
	});

	// `WeakSet` constructor
	// https://tc39.github.io/ecma262/#sec-weakset-constructor
	collection('WeakSet', function (init) {
	  return function WeakSet() { return init(this, arguments.length ? arguments[0] : undefined); };
	}, collectionWeak);

	var defineProperty$9 = objectDefineProperty.f;





	var DataView = global_1.DataView;
	var DataViewPrototype = DataView && DataView.prototype;
	var Int8Array$1 = global_1.Int8Array;
	var Int8ArrayPrototype = Int8Array$1 && Int8Array$1.prototype;
	var Uint8ClampedArray = global_1.Uint8ClampedArray;
	var Uint8ClampedArrayPrototype = Uint8ClampedArray && Uint8ClampedArray.prototype;
	var TypedArray = Int8Array$1 && objectGetPrototypeOf(Int8Array$1);
	var TypedArrayPrototype = Int8ArrayPrototype && objectGetPrototypeOf(Int8ArrayPrototype);
	var ObjectPrototype$2 = Object.prototype;
	var isPrototypeOf = ObjectPrototype$2.isPrototypeOf;

	var TO_STRING_TAG$4 = wellKnownSymbol('toStringTag');
	var TYPED_ARRAY_TAG = uid('TYPED_ARRAY_TAG');
	var NATIVE_ARRAY_BUFFER = !!(global_1.ArrayBuffer && DataView);
	// Fixing native typed arrays in Opera Presto crashes the browser, see #595
	var NATIVE_ARRAY_BUFFER_VIEWS = NATIVE_ARRAY_BUFFER && !!objectSetPrototypeOf && classof(global_1.opera) !== 'Opera';
	var TYPED_ARRAY_TAG_REQIRED = false;
	var NAME$1;

	var TypedArrayConstructorsList = {
	  Int8Array: 1,
	  Uint8Array: 1,
	  Uint8ClampedArray: 1,
	  Int16Array: 2,
	  Uint16Array: 2,
	  Int32Array: 4,
	  Uint32Array: 4,
	  Float32Array: 4,
	  Float64Array: 8
	};

	var isView = function isView(it) {
	  var klass = classof(it);
	  return klass === 'DataView' || has(TypedArrayConstructorsList, klass);
	};

	var isTypedArray = function (it) {
	  return isObject(it) && has(TypedArrayConstructorsList, classof(it));
	};

	var aTypedArray = function (it) {
	  if (isTypedArray(it)) return it;
	  throw TypeError('Target is not a typed array');
	};

	var aTypedArrayConstructor = function (C) {
	  if (objectSetPrototypeOf) {
	    if (isPrototypeOf.call(TypedArray, C)) return C;
	  } else for (var ARRAY in TypedArrayConstructorsList) if (has(TypedArrayConstructorsList, NAME$1)) {
	    var TypedArrayConstructor = global_1[ARRAY];
	    if (TypedArrayConstructor && (C === TypedArrayConstructor || isPrototypeOf.call(TypedArrayConstructor, C))) {
	      return C;
	    }
	  } throw TypeError('Target is not a typed array constructor');
	};

	var exportTypedArrayMethod = function (KEY, property, forced) {
	  if (!descriptors) return;
	  if (forced) for (var ARRAY in TypedArrayConstructorsList) {
	    var TypedArrayConstructor = global_1[ARRAY];
	    if (TypedArrayConstructor && has(TypedArrayConstructor.prototype, KEY)) {
	      delete TypedArrayConstructor.prototype[KEY];
	    }
	  }
	  if (!TypedArrayPrototype[KEY] || forced) {
	    redefine(TypedArrayPrototype, KEY, forced ? property
	      : NATIVE_ARRAY_BUFFER_VIEWS && Int8ArrayPrototype[KEY] || property);
	  }
	};

	var exportTypedArrayStaticMethod = function (KEY, property, forced) {
	  var ARRAY, TypedArrayConstructor;
	  if (!descriptors) return;
	  if (objectSetPrototypeOf) {
	    if (forced) for (ARRAY in TypedArrayConstructorsList) {
	      TypedArrayConstructor = global_1[ARRAY];
	      if (TypedArrayConstructor && has(TypedArrayConstructor, KEY)) {
	        delete TypedArrayConstructor[KEY];
	      }
	    }
	    if (!TypedArray[KEY] || forced) {
	      // V8 ~ Chrome 49-50 `%TypedArray%` methods are non-writable non-configurable
	      try {
	        return redefine(TypedArray, KEY, forced ? property : NATIVE_ARRAY_BUFFER_VIEWS && Int8Array$1[KEY] || property);
	      } catch (error) { /* empty */ }
	    } else return;
	  }
	  for (ARRAY in TypedArrayConstructorsList) {
	    TypedArrayConstructor = global_1[ARRAY];
	    if (TypedArrayConstructor && (!TypedArrayConstructor[KEY] || forced)) {
	      redefine(TypedArrayConstructor, KEY, property);
	    }
	  }
	};

	for (NAME$1 in TypedArrayConstructorsList) {
	  if (!global_1[NAME$1]) NATIVE_ARRAY_BUFFER_VIEWS = false;
	}

	// WebKit bug - typed arrays constructors prototype is Object.prototype
	if (!NATIVE_ARRAY_BUFFER_VIEWS || typeof TypedArray != 'function' || TypedArray === Function.prototype) {
	  // eslint-disable-next-line no-shadow
	  TypedArray = function TypedArray() {
	    throw TypeError('Incorrect invocation');
	  };
	  if (NATIVE_ARRAY_BUFFER_VIEWS) for (NAME$1 in TypedArrayConstructorsList) {
	    if (global_1[NAME$1]) objectSetPrototypeOf(global_1[NAME$1], TypedArray);
	  }
	}

	if (!NATIVE_ARRAY_BUFFER_VIEWS || !TypedArrayPrototype || TypedArrayPrototype === ObjectPrototype$2) {
	  TypedArrayPrototype = TypedArray.prototype;
	  if (NATIVE_ARRAY_BUFFER_VIEWS) for (NAME$1 in TypedArrayConstructorsList) {
	    if (global_1[NAME$1]) objectSetPrototypeOf(global_1[NAME$1].prototype, TypedArrayPrototype);
	  }
	}

	// WebKit bug - one more object in Uint8ClampedArray prototype chain
	if (NATIVE_ARRAY_BUFFER_VIEWS && objectGetPrototypeOf(Uint8ClampedArrayPrototype) !== TypedArrayPrototype) {
	  objectSetPrototypeOf(Uint8ClampedArrayPrototype, TypedArrayPrototype);
	}

	if (descriptors && !has(TypedArrayPrototype, TO_STRING_TAG$4)) {
	  TYPED_ARRAY_TAG_REQIRED = true;
	  defineProperty$9(TypedArrayPrototype, TO_STRING_TAG$4, { get: function () {
	    return isObject(this) ? this[TYPED_ARRAY_TAG] : undefined;
	  } });
	  for (NAME$1 in TypedArrayConstructorsList) if (global_1[NAME$1]) {
	    createNonEnumerableProperty(global_1[NAME$1], TYPED_ARRAY_TAG, NAME$1);
	  }
	}

	// WebKit bug - the same parent prototype for typed arrays and data view
	if (NATIVE_ARRAY_BUFFER && objectSetPrototypeOf && objectGetPrototypeOf(DataViewPrototype) !== ObjectPrototype$2) {
	  objectSetPrototypeOf(DataViewPrototype, ObjectPrototype$2);
	}

	var arrayBufferViewCore = {
	  NATIVE_ARRAY_BUFFER: NATIVE_ARRAY_BUFFER,
	  NATIVE_ARRAY_BUFFER_VIEWS: NATIVE_ARRAY_BUFFER_VIEWS,
	  TYPED_ARRAY_TAG: TYPED_ARRAY_TAG_REQIRED && TYPED_ARRAY_TAG,
	  aTypedArray: aTypedArray,
	  aTypedArrayConstructor: aTypedArrayConstructor,
	  exportTypedArrayMethod: exportTypedArrayMethod,
	  exportTypedArrayStaticMethod: exportTypedArrayStaticMethod,
	  isView: isView,
	  isTypedArray: isTypedArray,
	  TypedArray: TypedArray,
	  TypedArrayPrototype: TypedArrayPrototype
	};

	// `ToIndex` abstract operation
	// https://tc39.github.io/ecma262/#sec-toindex
	var toIndex = function (it) {
	  if (it === undefined) return 0;
	  var number = toInteger(it);
	  var length = toLength(number);
	  if (number !== length) throw RangeError('Wrong length or index');
	  return length;
	};

	// IEEE754 conversions based on https://github.com/feross/ieee754
	// eslint-disable-next-line no-shadow-restricted-names
	var Infinity$1 = 1 / 0;
	var abs$7 = Math.abs;
	var pow$3 = Math.pow;
	var floor$6 = Math.floor;
	var log$8 = Math.log;
	var LN2$2 = Math.LN2;

	var pack = function (number, mantissaLength, bytes) {
	  var buffer = new Array(bytes);
	  var exponentLength = bytes * 8 - mantissaLength - 1;
	  var eMax = (1 << exponentLength) - 1;
	  var eBias = eMax >> 1;
	  var rt = mantissaLength === 23 ? pow$3(2, -24) - pow$3(2, -77) : 0;
	  var sign = number < 0 || number === 0 && 1 / number < 0 ? 1 : 0;
	  var index = 0;
	  var exponent, mantissa, c;
	  number = abs$7(number);
	  // eslint-disable-next-line no-self-compare
	  if (number != number || number === Infinity$1) {
	    // eslint-disable-next-line no-self-compare
	    mantissa = number != number ? 1 : 0;
	    exponent = eMax;
	  } else {
	    exponent = floor$6(log$8(number) / LN2$2);
	    if (number * (c = pow$3(2, -exponent)) < 1) {
	      exponent--;
	      c *= 2;
	    }
	    if (exponent + eBias >= 1) {
	      number += rt / c;
	    } else {
	      number += rt * pow$3(2, 1 - eBias);
	    }
	    if (number * c >= 2) {
	      exponent++;
	      c /= 2;
	    }
	    if (exponent + eBias >= eMax) {
	      mantissa = 0;
	      exponent = eMax;
	    } else if (exponent + eBias >= 1) {
	      mantissa = (number * c - 1) * pow$3(2, mantissaLength);
	      exponent = exponent + eBias;
	    } else {
	      mantissa = number * pow$3(2, eBias - 1) * pow$3(2, mantissaLength);
	      exponent = 0;
	    }
	  }
	  for (; mantissaLength >= 8; buffer[index++] = mantissa & 255, mantissa /= 256, mantissaLength -= 8);
	  exponent = exponent << mantissaLength | mantissa;
	  exponentLength += mantissaLength;
	  for (; exponentLength > 0; buffer[index++] = exponent & 255, exponent /= 256, exponentLength -= 8);
	  buffer[--index] |= sign * 128;
	  return buffer;
	};

	var unpack = function (buffer, mantissaLength) {
	  var bytes = buffer.length;
	  var exponentLength = bytes * 8 - mantissaLength - 1;
	  var eMax = (1 << exponentLength) - 1;
	  var eBias = eMax >> 1;
	  var nBits = exponentLength - 7;
	  var index = bytes - 1;
	  var sign = buffer[index--];
	  var exponent = sign & 127;
	  var mantissa;
	  sign >>= 7;
	  for (; nBits > 0; exponent = exponent * 256 + buffer[index], index--, nBits -= 8);
	  mantissa = exponent & (1 << -nBits) - 1;
	  exponent >>= -nBits;
	  nBits += mantissaLength;
	  for (; nBits > 0; mantissa = mantissa * 256 + buffer[index], index--, nBits -= 8);
	  if (exponent === 0) {
	    exponent = 1 - eBias;
	  } else if (exponent === eMax) {
	    return mantissa ? NaN : sign ? -Infinity$1 : Infinity$1;
	  } else {
	    mantissa = mantissa + pow$3(2, mantissaLength);
	    exponent = exponent - eBias;
	  } return (sign ? -1 : 1) * mantissa * pow$3(2, exponent - mantissaLength);
	};

	var ieee754 = {
	  pack: pack,
	  unpack: unpack
	};

	var NATIVE_ARRAY_BUFFER$1 = arrayBufferViewCore.NATIVE_ARRAY_BUFFER;








	var getOwnPropertyNames$2 = objectGetOwnPropertyNames.f;
	var defineProperty$a = objectDefineProperty.f;




	var getInternalState$6 = internalState.get;
	var setInternalState$8 = internalState.set;
	var ARRAY_BUFFER = 'ArrayBuffer';
	var DATA_VIEW = 'DataView';
	var PROTOTYPE$2 = 'prototype';
	var WRONG_LENGTH = 'Wrong length';
	var WRONG_INDEX = 'Wrong index';
	var NativeArrayBuffer = global_1[ARRAY_BUFFER];
	var $ArrayBuffer = NativeArrayBuffer;
	var $DataView = global_1[DATA_VIEW];
	var RangeError$1 = global_1.RangeError;

	var packIEEE754 = ieee754.pack;
	var unpackIEEE754 = ieee754.unpack;

	var packInt8 = function (number) {
	  return [number & 0xFF];
	};

	var packInt16 = function (number) {
	  return [number & 0xFF, number >> 8 & 0xFF];
	};

	var packInt32 = function (number) {
	  return [number & 0xFF, number >> 8 & 0xFF, number >> 16 & 0xFF, number >> 24 & 0xFF];
	};

	var unpackInt32 = function (buffer) {
	  return buffer[3] << 24 | buffer[2] << 16 | buffer[1] << 8 | buffer[0];
	};

	var packFloat32 = function (number) {
	  return packIEEE754(number, 23, 4);
	};

	var packFloat64 = function (number) {
	  return packIEEE754(number, 52, 8);
	};

	var addGetter = function (Constructor, key) {
	  defineProperty$a(Constructor[PROTOTYPE$2], key, { get: function () { return getInternalState$6(this)[key]; } });
	};

	var get$1 = function (view, count, index, isLittleEndian) {
	  var intIndex = toIndex(index);
	  var store = getInternalState$6(view);
	  if (intIndex + count > store.byteLength) throw RangeError$1(WRONG_INDEX);
	  var bytes = getInternalState$6(store.buffer).bytes;
	  var start = intIndex + store.byteOffset;
	  var pack = bytes.slice(start, start + count);
	  return isLittleEndian ? pack : pack.reverse();
	};

	var set$2 = function (view, count, index, conversion, value, isLittleEndian) {
	  var intIndex = toIndex(index);
	  var store = getInternalState$6(view);
	  if (intIndex + count > store.byteLength) throw RangeError$1(WRONG_INDEX);
	  var bytes = getInternalState$6(store.buffer).bytes;
	  var start = intIndex + store.byteOffset;
	  var pack = conversion(+value);
	  for (var i = 0; i < count; i++) bytes[start + i] = pack[isLittleEndian ? i : count - i - 1];
	};

	if (!NATIVE_ARRAY_BUFFER$1) {
	  $ArrayBuffer = function ArrayBuffer(length) {
	    anInstance(this, $ArrayBuffer, ARRAY_BUFFER);
	    var byteLength = toIndex(length);
	    setInternalState$8(this, {
	      bytes: arrayFill.call(new Array(byteLength), 0),
	      byteLength: byteLength
	    });
	    if (!descriptors) this.byteLength = byteLength;
	  };

	  $DataView = function DataView(buffer, byteOffset, byteLength) {
	    anInstance(this, $DataView, DATA_VIEW);
	    anInstance(buffer, $ArrayBuffer, DATA_VIEW);
	    var bufferLength = getInternalState$6(buffer).byteLength;
	    var offset = toInteger(byteOffset);
	    if (offset < 0 || offset > bufferLength) throw RangeError$1('Wrong offset');
	    byteLength = byteLength === undefined ? bufferLength - offset : toLength(byteLength);
	    if (offset + byteLength > bufferLength) throw RangeError$1(WRONG_LENGTH);
	    setInternalState$8(this, {
	      buffer: buffer,
	      byteLength: byteLength,
	      byteOffset: offset
	    });
	    if (!descriptors) {
	      this.buffer = buffer;
	      this.byteLength = byteLength;
	      this.byteOffset = offset;
	    }
	  };

	  if (descriptors) {
	    addGetter($ArrayBuffer, 'byteLength');
	    addGetter($DataView, 'buffer');
	    addGetter($DataView, 'byteLength');
	    addGetter($DataView, 'byteOffset');
	  }

	  redefineAll($DataView[PROTOTYPE$2], {
	    getInt8: function getInt8(byteOffset) {
	      return get$1(this, 1, byteOffset)[0] << 24 >> 24;
	    },
	    getUint8: function getUint8(byteOffset) {
	      return get$1(this, 1, byteOffset)[0];
	    },
	    getInt16: function getInt16(byteOffset /* , littleEndian */) {
	      var bytes = get$1(this, 2, byteOffset, arguments.length > 1 ? arguments[1] : undefined);
	      return (bytes[1] << 8 | bytes[0]) << 16 >> 16;
	    },
	    getUint16: function getUint16(byteOffset /* , littleEndian */) {
	      var bytes = get$1(this, 2, byteOffset, arguments.length > 1 ? arguments[1] : undefined);
	      return bytes[1] << 8 | bytes[0];
	    },
	    getInt32: function getInt32(byteOffset /* , littleEndian */) {
	      return unpackInt32(get$1(this, 4, byteOffset, arguments.length > 1 ? arguments[1] : undefined));
	    },
	    getUint32: function getUint32(byteOffset /* , littleEndian */) {
	      return unpackInt32(get$1(this, 4, byteOffset, arguments.length > 1 ? arguments[1] : undefined)) >>> 0;
	    },
	    getFloat32: function getFloat32(byteOffset /* , littleEndian */) {
	      return unpackIEEE754(get$1(this, 4, byteOffset, arguments.length > 1 ? arguments[1] : undefined), 23);
	    },
	    getFloat64: function getFloat64(byteOffset /* , littleEndian */) {
	      return unpackIEEE754(get$1(this, 8, byteOffset, arguments.length > 1 ? arguments[1] : undefined), 52);
	    },
	    setInt8: function setInt8(byteOffset, value) {
	      set$2(this, 1, byteOffset, packInt8, value);
	    },
	    setUint8: function setUint8(byteOffset, value) {
	      set$2(this, 1, byteOffset, packInt8, value);
	    },
	    setInt16: function setInt16(byteOffset, value /* , littleEndian */) {
	      set$2(this, 2, byteOffset, packInt16, value, arguments.length > 2 ? arguments[2] : undefined);
	    },
	    setUint16: function setUint16(byteOffset, value /* , littleEndian */) {
	      set$2(this, 2, byteOffset, packInt16, value, arguments.length > 2 ? arguments[2] : undefined);
	    },
	    setInt32: function setInt32(byteOffset, value /* , littleEndian */) {
	      set$2(this, 4, byteOffset, packInt32, value, arguments.length > 2 ? arguments[2] : undefined);
	    },
	    setUint32: function setUint32(byteOffset, value /* , littleEndian */) {
	      set$2(this, 4, byteOffset, packInt32, value, arguments.length > 2 ? arguments[2] : undefined);
	    },
	    setFloat32: function setFloat32(byteOffset, value /* , littleEndian */) {
	      set$2(this, 4, byteOffset, packFloat32, value, arguments.length > 2 ? arguments[2] : undefined);
	    },
	    setFloat64: function setFloat64(byteOffset, value /* , littleEndian */) {
	      set$2(this, 8, byteOffset, packFloat64, value, arguments.length > 2 ? arguments[2] : undefined);
	    }
	  });
	} else {
	  if (!fails(function () {
	    NativeArrayBuffer(1);
	  }) || !fails(function () {
	    new NativeArrayBuffer(-1); // eslint-disable-line no-new
	  }) || fails(function () {
	    new NativeArrayBuffer(); // eslint-disable-line no-new
	    new NativeArrayBuffer(1.5); // eslint-disable-line no-new
	    new NativeArrayBuffer(NaN); // eslint-disable-line no-new
	    return NativeArrayBuffer.name != ARRAY_BUFFER;
	  })) {
	    $ArrayBuffer = function ArrayBuffer(length) {
	      anInstance(this, $ArrayBuffer);
	      return new NativeArrayBuffer(toIndex(length));
	    };
	    var ArrayBufferPrototype = $ArrayBuffer[PROTOTYPE$2] = NativeArrayBuffer[PROTOTYPE$2];
	    for (var keys$3 = getOwnPropertyNames$2(NativeArrayBuffer), j$1 = 0, key$1; keys$3.length > j$1;) {
	      if (!((key$1 = keys$3[j$1++]) in $ArrayBuffer)) {
	        createNonEnumerableProperty($ArrayBuffer, key$1, NativeArrayBuffer[key$1]);
	      }
	    }
	    ArrayBufferPrototype.constructor = $ArrayBuffer;
	  }
	  // iOS Safari 7.x bug
	  var testView = new $DataView(new $ArrayBuffer(2));
	  var nativeSetInt8 = $DataView[PROTOTYPE$2].setInt8;
	  testView.setInt8(0, 2147483648);
	  testView.setInt8(1, 2147483649);
	  if (testView.getInt8(0) || !testView.getInt8(1)) redefineAll($DataView[PROTOTYPE$2], {
	    setInt8: function setInt8(byteOffset, value) {
	      nativeSetInt8.call(this, byteOffset, value << 24 >> 24);
	    },
	    setUint8: function setUint8(byteOffset, value) {
	      nativeSetInt8.call(this, byteOffset, value << 24 >> 24);
	    }
	  }, { unsafe: true });
	}

	setToStringTag($ArrayBuffer, ARRAY_BUFFER);
	setToStringTag($DataView, DATA_VIEW);

	var arrayBuffer = {
	  ArrayBuffer: $ArrayBuffer,
	  DataView: $DataView
	};

	var ARRAY_BUFFER$1 = 'ArrayBuffer';
	var ArrayBuffer$1 = arrayBuffer[ARRAY_BUFFER$1];
	var NativeArrayBuffer$1 = global_1[ARRAY_BUFFER$1];

	// `ArrayBuffer` constructor
	// https://tc39.github.io/ecma262/#sec-arraybuffer-constructor
	_export({ global: true, forced: NativeArrayBuffer$1 !== ArrayBuffer$1 }, {
	  ArrayBuffer: ArrayBuffer$1
	});

	setSpecies(ARRAY_BUFFER$1);

	var NATIVE_ARRAY_BUFFER_VIEWS$1 = arrayBufferViewCore.NATIVE_ARRAY_BUFFER_VIEWS;

	// `ArrayBuffer.isView` method
	// https://tc39.github.io/ecma262/#sec-arraybuffer.isview
	_export({ target: 'ArrayBuffer', stat: true, forced: !NATIVE_ARRAY_BUFFER_VIEWS$1 }, {
	  isView: arrayBufferViewCore.isView
	});

	var ArrayBuffer$2 = arrayBuffer.ArrayBuffer;
	var DataView$1 = arrayBuffer.DataView;
	var nativeArrayBufferSlice = ArrayBuffer$2.prototype.slice;

	var INCORRECT_SLICE = fails(function () {
	  return !new ArrayBuffer$2(2).slice(1, undefined).byteLength;
	});

	// `ArrayBuffer.prototype.slice` method
	// https://tc39.github.io/ecma262/#sec-arraybuffer.prototype.slice
	_export({ target: 'ArrayBuffer', proto: true, unsafe: true, forced: INCORRECT_SLICE }, {
	  slice: function slice(start, end) {
	    if (nativeArrayBufferSlice !== undefined && end === undefined) {
	      return nativeArrayBufferSlice.call(anObject(this), start); // FF fix
	    }
	    var length = anObject(this).byteLength;
	    var first = toAbsoluteIndex(start, length);
	    var fin = toAbsoluteIndex(end === undefined ? length : end, length);
	    var result = new (speciesConstructor(this, ArrayBuffer$2))(toLength(fin - first));
	    var viewSource = new DataView$1(this);
	    var viewTarget = new DataView$1(result);
	    var index = 0;
	    while (first < fin) {
	      viewTarget.setUint8(index++, viewSource.getUint8(first++));
	    } return result;
	  }
	});

	var NATIVE_ARRAY_BUFFER$2 = arrayBufferViewCore.NATIVE_ARRAY_BUFFER;

	// `DataView` constructor
	// https://tc39.github.io/ecma262/#sec-dataview-constructor
	_export({ global: true, forced: !NATIVE_ARRAY_BUFFER$2 }, {
	  DataView: arrayBuffer.DataView
	});

	/* eslint-disable no-new */



	var NATIVE_ARRAY_BUFFER_VIEWS$2 = arrayBufferViewCore.NATIVE_ARRAY_BUFFER_VIEWS;

	var ArrayBuffer$3 = global_1.ArrayBuffer;
	var Int8Array$2 = global_1.Int8Array;

	var typedArraysConstructorsRequiresWrappers = !NATIVE_ARRAY_BUFFER_VIEWS$2 || !fails(function () {
	  Int8Array$2(1);
	}) || !fails(function () {
	  new Int8Array$2(-1);
	}) || !checkCorrectnessOfIteration(function (iterable) {
	  new Int8Array$2();
	  new Int8Array$2(null);
	  new Int8Array$2(1.5);
	  new Int8Array$2(iterable);
	}, true) || fails(function () {
	  // Safari (11+) bug - a reason why even Safari 13 should load a typed array polyfill
	  return new Int8Array$2(new ArrayBuffer$3(2), 1, undefined).length !== 1;
	});

	var toPositiveInteger = function (it) {
	  var result = toInteger(it);
	  if (result < 0) throw RangeError("The argument can't be less than 0");
	  return result;
	};

	var toOffset = function (it, BYTES) {
	  var offset = toPositiveInteger(it);
	  if (offset % BYTES) throw RangeError('Wrong offset');
	  return offset;
	};

	var aTypedArrayConstructor$1 = arrayBufferViewCore.aTypedArrayConstructor;

	var typedArrayFrom = function from(source /* , mapfn, thisArg */) {
	  var O = toObject(source);
	  var argumentsLength = arguments.length;
	  var mapfn = argumentsLength > 1 ? arguments[1] : undefined;
	  var mapping = mapfn !== undefined;
	  var iteratorMethod = getIteratorMethod(O);
	  var i, length, result, step, iterator, next;
	  if (iteratorMethod != undefined && !isArrayIteratorMethod(iteratorMethod)) {
	    iterator = iteratorMethod.call(O);
	    next = iterator.next;
	    O = [];
	    while (!(step = next.call(iterator)).done) {
	      O.push(step.value);
	    }
	  }
	  if (mapping && argumentsLength > 2) {
	    mapfn = bindContext(mapfn, arguments[2], 2);
	  }
	  length = toLength(O.length);
	  result = new (aTypedArrayConstructor$1(this))(length);
	  for (i = 0; length > i; i++) {
	    result[i] = mapping ? mapfn(O[i], i) : O[i];
	  }
	  return result;
	};

	var typedArrayConstructor = createCommonjsModule(function (module) {


















	var getOwnPropertyNames = objectGetOwnPropertyNames.f;

	var forEach = arrayIteration.forEach;






	var getInternalState = internalState.get;
	var setInternalState = internalState.set;
	var nativeDefineProperty = objectDefineProperty.f;
	var nativeGetOwnPropertyDescriptor = objectGetOwnPropertyDescriptor.f;
	var round = Math.round;
	var RangeError = global_1.RangeError;
	var ArrayBuffer = arrayBuffer.ArrayBuffer;
	var DataView = arrayBuffer.DataView;
	var NATIVE_ARRAY_BUFFER_VIEWS = arrayBufferViewCore.NATIVE_ARRAY_BUFFER_VIEWS;
	var TYPED_ARRAY_TAG = arrayBufferViewCore.TYPED_ARRAY_TAG;
	var TypedArray = arrayBufferViewCore.TypedArray;
	var TypedArrayPrototype = arrayBufferViewCore.TypedArrayPrototype;
	var aTypedArrayConstructor = arrayBufferViewCore.aTypedArrayConstructor;
	var isTypedArray = arrayBufferViewCore.isTypedArray;
	var BYTES_PER_ELEMENT = 'BYTES_PER_ELEMENT';
	var WRONG_LENGTH = 'Wrong length';

	var fromList = function (C, list) {
	  var index = 0;
	  var length = list.length;
	  var result = new (aTypedArrayConstructor(C))(length);
	  while (length > index) result[index] = list[index++];
	  return result;
	};

	var addGetter = function (it, key) {
	  nativeDefineProperty(it, key, { get: function () {
	    return getInternalState(this)[key];
	  } });
	};

	var isArrayBuffer = function (it) {
	  var klass;
	  return it instanceof ArrayBuffer || (klass = classof(it)) == 'ArrayBuffer' || klass == 'SharedArrayBuffer';
	};

	var isTypedArrayIndex = function (target, key) {
	  return isTypedArray(target)
	    && typeof key != 'symbol'
	    && key in target
	    && String(+key) == String(key);
	};

	var wrappedGetOwnPropertyDescriptor = function getOwnPropertyDescriptor(target, key) {
	  return isTypedArrayIndex(target, key = toPrimitive(key, true))
	    ? createPropertyDescriptor(2, target[key])
	    : nativeGetOwnPropertyDescriptor(target, key);
	};

	var wrappedDefineProperty = function defineProperty(target, key, descriptor) {
	  if (isTypedArrayIndex(target, key = toPrimitive(key, true))
	    && isObject(descriptor)
	    && has(descriptor, 'value')
	    && !has(descriptor, 'get')
	    && !has(descriptor, 'set')
	    // TODO: add validation descriptor w/o calling accessors
	    && !descriptor.configurable
	    && (!has(descriptor, 'writable') || descriptor.writable)
	    && (!has(descriptor, 'enumerable') || descriptor.enumerable)
	  ) {
	    target[key] = descriptor.value;
	    return target;
	  } return nativeDefineProperty(target, key, descriptor);
	};

	if (descriptors) {
	  if (!NATIVE_ARRAY_BUFFER_VIEWS) {
	    objectGetOwnPropertyDescriptor.f = wrappedGetOwnPropertyDescriptor;
	    objectDefineProperty.f = wrappedDefineProperty;
	    addGetter(TypedArrayPrototype, 'buffer');
	    addGetter(TypedArrayPrototype, 'byteOffset');
	    addGetter(TypedArrayPrototype, 'byteLength');
	    addGetter(TypedArrayPrototype, 'length');
	  }

	  _export({ target: 'Object', stat: true, forced: !NATIVE_ARRAY_BUFFER_VIEWS }, {
	    getOwnPropertyDescriptor: wrappedGetOwnPropertyDescriptor,
	    defineProperty: wrappedDefineProperty
	  });

	  module.exports = function (TYPE, wrapper, CLAMPED) {
	    var BYTES = TYPE.match(/\d+$/)[0] / 8;
	    var CONSTRUCTOR_NAME = TYPE + (CLAMPED ? 'Clamped' : '') + 'Array';
	    var GETTER = 'get' + TYPE;
	    var SETTER = 'set' + TYPE;
	    var NativeTypedArrayConstructor = global_1[CONSTRUCTOR_NAME];
	    var TypedArrayConstructor = NativeTypedArrayConstructor;
	    var TypedArrayConstructorPrototype = TypedArrayConstructor && TypedArrayConstructor.prototype;
	    var exported = {};

	    var getter = function (that, index) {
	      var data = getInternalState(that);
	      return data.view[GETTER](index * BYTES + data.byteOffset, true);
	    };

	    var setter = function (that, index, value) {
	      var data = getInternalState(that);
	      if (CLAMPED) value = (value = round(value)) < 0 ? 0 : value > 0xFF ? 0xFF : value & 0xFF;
	      data.view[SETTER](index * BYTES + data.byteOffset, value, true);
	    };

	    var addElement = function (that, index) {
	      nativeDefineProperty(that, index, {
	        get: function () {
	          return getter(this, index);
	        },
	        set: function (value) {
	          return setter(this, index, value);
	        },
	        enumerable: true
	      });
	    };

	    if (!NATIVE_ARRAY_BUFFER_VIEWS) {
	      TypedArrayConstructor = wrapper(function (that, data, offset, $length) {
	        anInstance(that, TypedArrayConstructor, CONSTRUCTOR_NAME);
	        var index = 0;
	        var byteOffset = 0;
	        var buffer, byteLength, length;
	        if (!isObject(data)) {
	          length = toIndex(data);
	          byteLength = length * BYTES;
	          buffer = new ArrayBuffer(byteLength);
	        } else if (isArrayBuffer(data)) {
	          buffer = data;
	          byteOffset = toOffset(offset, BYTES);
	          var $len = data.byteLength;
	          if ($length === undefined) {
	            if ($len % BYTES) throw RangeError(WRONG_LENGTH);
	            byteLength = $len - byteOffset;
	            if (byteLength < 0) throw RangeError(WRONG_LENGTH);
	          } else {
	            byteLength = toLength($length) * BYTES;
	            if (byteLength + byteOffset > $len) throw RangeError(WRONG_LENGTH);
	          }
	          length = byteLength / BYTES;
	        } else if (isTypedArray(data)) {
	          return fromList(TypedArrayConstructor, data);
	        } else {
	          return typedArrayFrom.call(TypedArrayConstructor, data);
	        }
	        setInternalState(that, {
	          buffer: buffer,
	          byteOffset: byteOffset,
	          byteLength: byteLength,
	          length: length,
	          view: new DataView(buffer)
	        });
	        while (index < length) addElement(that, index++);
	      });

	      if (objectSetPrototypeOf) objectSetPrototypeOf(TypedArrayConstructor, TypedArray);
	      TypedArrayConstructorPrototype = TypedArrayConstructor.prototype = objectCreate(TypedArrayPrototype);
	    } else if (typedArraysConstructorsRequiresWrappers) {
	      TypedArrayConstructor = wrapper(function (dummy, data, typedArrayOffset, $length) {
	        anInstance(dummy, TypedArrayConstructor, CONSTRUCTOR_NAME);
	        return inheritIfRequired(function () {
	          if (!isObject(data)) return new NativeTypedArrayConstructor(toIndex(data));
	          if (isArrayBuffer(data)) return $length !== undefined
	            ? new NativeTypedArrayConstructor(data, toOffset(typedArrayOffset, BYTES), $length)
	            : typedArrayOffset !== undefined
	              ? new NativeTypedArrayConstructor(data, toOffset(typedArrayOffset, BYTES))
	              : new NativeTypedArrayConstructor(data);
	          if (isTypedArray(data)) return fromList(TypedArrayConstructor, data);
	          return typedArrayFrom.call(TypedArrayConstructor, data);
	        }(), dummy, TypedArrayConstructor);
	      });

	      if (objectSetPrototypeOf) objectSetPrototypeOf(TypedArrayConstructor, TypedArray);
	      forEach(getOwnPropertyNames(NativeTypedArrayConstructor), function (key) {
	        if (!(key in TypedArrayConstructor)) {
	          createNonEnumerableProperty(TypedArrayConstructor, key, NativeTypedArrayConstructor[key]);
	        }
	      });
	      TypedArrayConstructor.prototype = TypedArrayConstructorPrototype;
	    }

	    if (TypedArrayConstructorPrototype.constructor !== TypedArrayConstructor) {
	      createNonEnumerableProperty(TypedArrayConstructorPrototype, 'constructor', TypedArrayConstructor);
	    }

	    if (TYPED_ARRAY_TAG) {
	      createNonEnumerableProperty(TypedArrayConstructorPrototype, TYPED_ARRAY_TAG, CONSTRUCTOR_NAME);
	    }

	    exported[CONSTRUCTOR_NAME] = TypedArrayConstructor;

	    _export({
	      global: true, forced: TypedArrayConstructor != NativeTypedArrayConstructor, sham: !NATIVE_ARRAY_BUFFER_VIEWS
	    }, exported);

	    if (!(BYTES_PER_ELEMENT in TypedArrayConstructor)) {
	      createNonEnumerableProperty(TypedArrayConstructor, BYTES_PER_ELEMENT, BYTES);
	    }

	    if (!(BYTES_PER_ELEMENT in TypedArrayConstructorPrototype)) {
	      createNonEnumerableProperty(TypedArrayConstructorPrototype, BYTES_PER_ELEMENT, BYTES);
	    }

	    setSpecies(CONSTRUCTOR_NAME);
	  };
	} else module.exports = function () { /* empty */ };
	});

	// `Int8Array` constructor
	// https://tc39.github.io/ecma262/#sec-typedarray-objects
	typedArrayConstructor('Int8', function (init) {
	  return function Int8Array(data, byteOffset, length) {
	    return init(this, data, byteOffset, length);
	  };
	});

	// `Uint8Array` constructor
	// https://tc39.github.io/ecma262/#sec-typedarray-objects
	typedArrayConstructor('Uint8', function (init) {
	  return function Uint8Array(data, byteOffset, length) {
	    return init(this, data, byteOffset, length);
	  };
	});

	// `Uint8ClampedArray` constructor
	// https://tc39.github.io/ecma262/#sec-typedarray-objects
	typedArrayConstructor('Uint8', function (init) {
	  return function Uint8ClampedArray(data, byteOffset, length) {
	    return init(this, data, byteOffset, length);
	  };
	}, true);

	// `Int16Array` constructor
	// https://tc39.github.io/ecma262/#sec-typedarray-objects
	typedArrayConstructor('Int16', function (init) {
	  return function Int16Array(data, byteOffset, length) {
	    return init(this, data, byteOffset, length);
	  };
	});

	// `Uint16Array` constructor
	// https://tc39.github.io/ecma262/#sec-typedarray-objects
	typedArrayConstructor('Uint16', function (init) {
	  return function Uint16Array(data, byteOffset, length) {
	    return init(this, data, byteOffset, length);
	  };
	});

	// `Int32Array` constructor
	// https://tc39.github.io/ecma262/#sec-typedarray-objects
	typedArrayConstructor('Int32', function (init) {
	  return function Int32Array(data, byteOffset, length) {
	    return init(this, data, byteOffset, length);
	  };
	});

	// `Uint32Array` constructor
	// https://tc39.github.io/ecma262/#sec-typedarray-objects
	typedArrayConstructor('Uint32', function (init) {
	  return function Uint32Array(data, byteOffset, length) {
	    return init(this, data, byteOffset, length);
	  };
	});

	// `Float32Array` constructor
	// https://tc39.github.io/ecma262/#sec-typedarray-objects
	typedArrayConstructor('Float32', function (init) {
	  return function Float32Array(data, byteOffset, length) {
	    return init(this, data, byteOffset, length);
	  };
	});

	// `Float64Array` constructor
	// https://tc39.github.io/ecma262/#sec-typedarray-objects
	typedArrayConstructor('Float64', function (init) {
	  return function Float64Array(data, byteOffset, length) {
	    return init(this, data, byteOffset, length);
	  };
	});

	var exportTypedArrayStaticMethod$1 = arrayBufferViewCore.exportTypedArrayStaticMethod;


	// `%TypedArray%.from` method
	// https://tc39.github.io/ecma262/#sec-%typedarray%.from
	exportTypedArrayStaticMethod$1('from', typedArrayFrom, typedArraysConstructorsRequiresWrappers);

	var aTypedArrayConstructor$2 = arrayBufferViewCore.aTypedArrayConstructor;
	var exportTypedArrayStaticMethod$2 = arrayBufferViewCore.exportTypedArrayStaticMethod;

	// `%TypedArray%.of` method
	// https://tc39.github.io/ecma262/#sec-%typedarray%.of
	exportTypedArrayStaticMethod$2('of', function of(/* ...items */) {
	  var index = 0;
	  var length = arguments.length;
	  var result = new (aTypedArrayConstructor$2(this))(length);
	  while (length > index) result[index] = arguments[index++];
	  return result;
	}, typedArraysConstructorsRequiresWrappers);

	var aTypedArray$1 = arrayBufferViewCore.aTypedArray;
	var exportTypedArrayMethod$1 = arrayBufferViewCore.exportTypedArrayMethod;

	// `%TypedArray%.prototype.copyWithin` method
	// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.copywithin
	exportTypedArrayMethod$1('copyWithin', function copyWithin(target, start /* , end */) {
	  return arrayCopyWithin.call(aTypedArray$1(this), target, start, arguments.length > 2 ? arguments[2] : undefined);
	});

	var $every$1 = arrayIteration.every;

	var aTypedArray$2 = arrayBufferViewCore.aTypedArray;
	var exportTypedArrayMethod$2 = arrayBufferViewCore.exportTypedArrayMethod;

	// `%TypedArray%.prototype.every` method
	// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.every
	exportTypedArrayMethod$2('every', function every(callbackfn /* , thisArg */) {
	  return $every$1(aTypedArray$2(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	});

	var aTypedArray$3 = arrayBufferViewCore.aTypedArray;
	var exportTypedArrayMethod$3 = arrayBufferViewCore.exportTypedArrayMethod;

	// `%TypedArray%.prototype.fill` method
	// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.fill
	// eslint-disable-next-line no-unused-vars
	exportTypedArrayMethod$3('fill', function fill(value /* , start, end */) {
	  return arrayFill.apply(aTypedArray$3(this), arguments);
	});

	var $filter$1 = arrayIteration.filter;


	var aTypedArray$4 = arrayBufferViewCore.aTypedArray;
	var aTypedArrayConstructor$3 = arrayBufferViewCore.aTypedArrayConstructor;
	var exportTypedArrayMethod$4 = arrayBufferViewCore.exportTypedArrayMethod;

	// `%TypedArray%.prototype.filter` method
	// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.filter
	exportTypedArrayMethod$4('filter', function filter(callbackfn /* , thisArg */) {
	  var list = $filter$1(aTypedArray$4(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	  var C = speciesConstructor(this, this.constructor);
	  var index = 0;
	  var length = list.length;
	  var result = new (aTypedArrayConstructor$3(C))(length);
	  while (length > index) result[index] = list[index++];
	  return result;
	});

	var $find$1 = arrayIteration.find;

	var aTypedArray$5 = arrayBufferViewCore.aTypedArray;
	var exportTypedArrayMethod$5 = arrayBufferViewCore.exportTypedArrayMethod;

	// `%TypedArray%.prototype.find` method
	// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.find
	exportTypedArrayMethod$5('find', function find(predicate /* , thisArg */) {
	  return $find$1(aTypedArray$5(this), predicate, arguments.length > 1 ? arguments[1] : undefined);
	});

	var $findIndex$1 = arrayIteration.findIndex;

	var aTypedArray$6 = arrayBufferViewCore.aTypedArray;
	var exportTypedArrayMethod$6 = arrayBufferViewCore.exportTypedArrayMethod;

	// `%TypedArray%.prototype.findIndex` method
	// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.findindex
	exportTypedArrayMethod$6('findIndex', function findIndex(predicate /* , thisArg */) {
	  return $findIndex$1(aTypedArray$6(this), predicate, arguments.length > 1 ? arguments[1] : undefined);
	});

	var $forEach$2 = arrayIteration.forEach;

	var aTypedArray$7 = arrayBufferViewCore.aTypedArray;
	var exportTypedArrayMethod$7 = arrayBufferViewCore.exportTypedArrayMethod;

	// `%TypedArray%.prototype.forEach` method
	// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.foreach
	exportTypedArrayMethod$7('forEach', function forEach(callbackfn /* , thisArg */) {
	  $forEach$2(aTypedArray$7(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	});

	var $includes$1 = arrayIncludes.includes;

	var aTypedArray$8 = arrayBufferViewCore.aTypedArray;
	var exportTypedArrayMethod$8 = arrayBufferViewCore.exportTypedArrayMethod;

	// `%TypedArray%.prototype.includes` method
	// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.includes
	exportTypedArrayMethod$8('includes', function includes(searchElement /* , fromIndex */) {
	  return $includes$1(aTypedArray$8(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);
	});

	var $indexOf$1 = arrayIncludes.indexOf;

	var aTypedArray$9 = arrayBufferViewCore.aTypedArray;
	var exportTypedArrayMethod$9 = arrayBufferViewCore.exportTypedArrayMethod;

	// `%TypedArray%.prototype.indexOf` method
	// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.indexof
	exportTypedArrayMethod$9('indexOf', function indexOf(searchElement /* , fromIndex */) {
	  return $indexOf$1(aTypedArray$9(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);
	});

	var ITERATOR$6 = wellKnownSymbol('iterator');
	var Uint8Array$1 = global_1.Uint8Array;
	var arrayValues = es_array_iterator.values;
	var arrayKeys = es_array_iterator.keys;
	var arrayEntries = es_array_iterator.entries;
	var aTypedArray$a = arrayBufferViewCore.aTypedArray;
	var exportTypedArrayMethod$a = arrayBufferViewCore.exportTypedArrayMethod;
	var nativeTypedArrayIterator = Uint8Array$1 && Uint8Array$1.prototype[ITERATOR$6];

	var CORRECT_ITER_NAME = !!nativeTypedArrayIterator
	  && (nativeTypedArrayIterator.name == 'values' || nativeTypedArrayIterator.name == undefined);

	var typedArrayValues = function values() {
	  return arrayValues.call(aTypedArray$a(this));
	};

	// `%TypedArray%.prototype.entries` method
	// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.entries
	exportTypedArrayMethod$a('entries', function entries() {
	  return arrayEntries.call(aTypedArray$a(this));
	});
	// `%TypedArray%.prototype.keys` method
	// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.keys
	exportTypedArrayMethod$a('keys', function keys() {
	  return arrayKeys.call(aTypedArray$a(this));
	});
	// `%TypedArray%.prototype.values` method
	// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.values
	exportTypedArrayMethod$a('values', typedArrayValues, !CORRECT_ITER_NAME);
	// `%TypedArray%.prototype[@@iterator]` method
	// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype-@@iterator
	exportTypedArrayMethod$a(ITERATOR$6, typedArrayValues, !CORRECT_ITER_NAME);

	var aTypedArray$b = arrayBufferViewCore.aTypedArray;
	var exportTypedArrayMethod$b = arrayBufferViewCore.exportTypedArrayMethod;
	var $join = [].join;

	// `%TypedArray%.prototype.join` method
	// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.join
	// eslint-disable-next-line no-unused-vars
	exportTypedArrayMethod$b('join', function join(separator) {
	  return $join.apply(aTypedArray$b(this), arguments);
	});

	var aTypedArray$c = arrayBufferViewCore.aTypedArray;
	var exportTypedArrayMethod$c = arrayBufferViewCore.exportTypedArrayMethod;

	// `%TypedArray%.prototype.lastIndexOf` method
	// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.lastindexof
	// eslint-disable-next-line no-unused-vars
	exportTypedArrayMethod$c('lastIndexOf', function lastIndexOf(searchElement /* , fromIndex */) {
	  return arrayLastIndexOf.apply(aTypedArray$c(this), arguments);
	});

	var $map$1 = arrayIteration.map;


	var aTypedArray$d = arrayBufferViewCore.aTypedArray;
	var aTypedArrayConstructor$4 = arrayBufferViewCore.aTypedArrayConstructor;
	var exportTypedArrayMethod$d = arrayBufferViewCore.exportTypedArrayMethod;

	// `%TypedArray%.prototype.map` method
	// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.map
	exportTypedArrayMethod$d('map', function map(mapfn /* , thisArg */) {
	  return $map$1(aTypedArray$d(this), mapfn, arguments.length > 1 ? arguments[1] : undefined, function (O, length) {
	    return new (aTypedArrayConstructor$4(speciesConstructor(O, O.constructor)))(length);
	  });
	});

	var $reduce$1 = arrayReduce.left;

	var aTypedArray$e = arrayBufferViewCore.aTypedArray;
	var exportTypedArrayMethod$e = arrayBufferViewCore.exportTypedArrayMethod;

	// `%TypedArray%.prototype.reduce` method
	// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.reduce
	exportTypedArrayMethod$e('reduce', function reduce(callbackfn /* , initialValue */) {
	  return $reduce$1(aTypedArray$e(this), callbackfn, arguments.length, arguments.length > 1 ? arguments[1] : undefined);
	});

	var $reduceRight$1 = arrayReduce.right;

	var aTypedArray$f = arrayBufferViewCore.aTypedArray;
	var exportTypedArrayMethod$f = arrayBufferViewCore.exportTypedArrayMethod;

	// `%TypedArray%.prototype.reduceRicht` method
	// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.reduceright
	exportTypedArrayMethod$f('reduceRight', function reduceRight(callbackfn /* , initialValue */) {
	  return $reduceRight$1(aTypedArray$f(this), callbackfn, arguments.length, arguments.length > 1 ? arguments[1] : undefined);
	});

	var aTypedArray$g = arrayBufferViewCore.aTypedArray;
	var exportTypedArrayMethod$g = arrayBufferViewCore.exportTypedArrayMethod;
	var floor$7 = Math.floor;

	// `%TypedArray%.prototype.reverse` method
	// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.reverse
	exportTypedArrayMethod$g('reverse', function reverse() {
	  var that = this;
	  var length = aTypedArray$g(that).length;
	  var middle = floor$7(length / 2);
	  var index = 0;
	  var value;
	  while (index < middle) {
	    value = that[index];
	    that[index++] = that[--length];
	    that[length] = value;
	  } return that;
	});

	var aTypedArray$h = arrayBufferViewCore.aTypedArray;
	var exportTypedArrayMethod$h = arrayBufferViewCore.exportTypedArrayMethod;

	var FORCED$g = fails(function () {
	  // eslint-disable-next-line no-undef
	  new Int8Array(1).set({});
	});

	// `%TypedArray%.prototype.set` method
	// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.set
	exportTypedArrayMethod$h('set', function set(arrayLike /* , offset */) {
	  aTypedArray$h(this);
	  var offset = toOffset(arguments.length > 1 ? arguments[1] : undefined, 1);
	  var length = this.length;
	  var src = toObject(arrayLike);
	  var len = toLength(src.length);
	  var index = 0;
	  if (len + offset > length) throw RangeError('Wrong length');
	  while (index < len) this[offset + index] = src[index++];
	}, FORCED$g);

	var aTypedArray$i = arrayBufferViewCore.aTypedArray;
	var aTypedArrayConstructor$5 = arrayBufferViewCore.aTypedArrayConstructor;
	var exportTypedArrayMethod$i = arrayBufferViewCore.exportTypedArrayMethod;
	var $slice = [].slice;

	var FORCED$h = fails(function () {
	  // eslint-disable-next-line no-undef
	  new Int8Array(1).slice();
	});

	// `%TypedArray%.prototype.slice` method
	// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.slice
	exportTypedArrayMethod$i('slice', function slice(start, end) {
	  var list = $slice.call(aTypedArray$i(this), start, end);
	  var C = speciesConstructor(this, this.constructor);
	  var index = 0;
	  var length = list.length;
	  var result = new (aTypedArrayConstructor$5(C))(length);
	  while (length > index) result[index] = list[index++];
	  return result;
	}, FORCED$h);

	var $some$1 = arrayIteration.some;

	var aTypedArray$j = arrayBufferViewCore.aTypedArray;
	var exportTypedArrayMethod$j = arrayBufferViewCore.exportTypedArrayMethod;

	// `%TypedArray%.prototype.some` method
	// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.some
	exportTypedArrayMethod$j('some', function some(callbackfn /* , thisArg */) {
	  return $some$1(aTypedArray$j(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	});

	var aTypedArray$k = arrayBufferViewCore.aTypedArray;
	var exportTypedArrayMethod$k = arrayBufferViewCore.exportTypedArrayMethod;
	var $sort = [].sort;

	// `%TypedArray%.prototype.sort` method
	// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.sort
	exportTypedArrayMethod$k('sort', function sort(comparefn) {
	  return $sort.call(aTypedArray$k(this), comparefn);
	});

	var aTypedArray$l = arrayBufferViewCore.aTypedArray;
	var exportTypedArrayMethod$l = arrayBufferViewCore.exportTypedArrayMethod;

	// `%TypedArray%.prototype.subarray` method
	// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.subarray
	exportTypedArrayMethod$l('subarray', function subarray(begin, end) {
	  var O = aTypedArray$l(this);
	  var length = O.length;
	  var beginIndex = toAbsoluteIndex(begin, length);
	  return new (speciesConstructor(O, O.constructor))(
	    O.buffer,
	    O.byteOffset + beginIndex * O.BYTES_PER_ELEMENT,
	    toLength((end === undefined ? length : toAbsoluteIndex(end, length)) - beginIndex)
	  );
	});

	var Int8Array$3 = global_1.Int8Array;
	var aTypedArray$m = arrayBufferViewCore.aTypedArray;
	var exportTypedArrayMethod$m = arrayBufferViewCore.exportTypedArrayMethod;
	var $toLocaleString = [].toLocaleString;
	var $slice$1 = [].slice;

	// iOS Safari 6.x fails here
	var TO_LOCALE_STRING_BUG = !!Int8Array$3 && fails(function () {
	  $toLocaleString.call(new Int8Array$3(1));
	});

	var FORCED$i = fails(function () {
	  return [1, 2].toLocaleString() != new Int8Array$3([1, 2]).toLocaleString();
	}) || !fails(function () {
	  Int8Array$3.prototype.toLocaleString.call([1, 2]);
	});

	// `%TypedArray%.prototype.toLocaleString` method
	// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.tolocalestring
	exportTypedArrayMethod$m('toLocaleString', function toLocaleString() {
	  return $toLocaleString.apply(TO_LOCALE_STRING_BUG ? $slice$1.call(aTypedArray$m(this)) : aTypedArray$m(this), arguments);
	}, FORCED$i);

	var exportTypedArrayMethod$n = arrayBufferViewCore.exportTypedArrayMethod;



	var Uint8Array$2 = global_1.Uint8Array;
	var Uint8ArrayPrototype = Uint8Array$2 && Uint8Array$2.prototype || {};
	var arrayToString = [].toString;
	var arrayJoin = [].join;

	if (fails(function () { arrayToString.call({}); })) {
	  arrayToString = function toString() {
	    return arrayJoin.call(this);
	  };
	}

	var IS_NOT_ARRAY_METHOD = Uint8ArrayPrototype.toString != arrayToString;

	// `%TypedArray%.prototype.toString` method
	// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.tostring
	exportTypedArrayMethod$n('toString', arrayToString, IS_NOT_ARRAY_METHOD);

	var nativeApply = getBuiltIn('Reflect', 'apply');
	var functionApply = Function.apply;

	// MS Edge argumentsList argument is optional
	var OPTIONAL_ARGUMENTS_LIST = !fails(function () {
	  nativeApply(function () { /* empty */ });
	});

	// `Reflect.apply` method
	// https://tc39.github.io/ecma262/#sec-reflect.apply
	_export({ target: 'Reflect', stat: true, forced: OPTIONAL_ARGUMENTS_LIST }, {
	  apply: function apply(target, thisArgument, argumentsList) {
	    aFunction$1(target);
	    anObject(argumentsList);
	    return nativeApply
	      ? nativeApply(target, thisArgument, argumentsList)
	      : functionApply.call(target, thisArgument, argumentsList);
	  }
	});

	var nativeConstruct = getBuiltIn('Reflect', 'construct');

	// `Reflect.construct` method
	// https://tc39.github.io/ecma262/#sec-reflect.construct
	// MS Edge supports only 2 arguments and argumentsList argument is optional
	// FF Nightly sets third argument as `new.target`, but does not create `this` from it
	var NEW_TARGET_BUG = fails(function () {
	  function F() { /* empty */ }
	  return !(nativeConstruct(function () { /* empty */ }, [], F) instanceof F);
	});
	var ARGS_BUG = !fails(function () {
	  nativeConstruct(function () { /* empty */ });
	});
	var FORCED$j = NEW_TARGET_BUG || ARGS_BUG;

	_export({ target: 'Reflect', stat: true, forced: FORCED$j, sham: FORCED$j }, {
	  construct: function construct(Target, args /* , newTarget */) {
	    aFunction$1(Target);
	    anObject(args);
	    var newTarget = arguments.length < 3 ? Target : aFunction$1(arguments[2]);
	    if (ARGS_BUG && !NEW_TARGET_BUG) return nativeConstruct(Target, args, newTarget);
	    if (Target == newTarget) {
	      // w/o altered newTarget, optimization for 0-4 arguments
	      switch (args.length) {
	        case 0: return new Target();
	        case 1: return new Target(args[0]);
	        case 2: return new Target(args[0], args[1]);
	        case 3: return new Target(args[0], args[1], args[2]);
	        case 4: return new Target(args[0], args[1], args[2], args[3]);
	      }
	      // w/o altered newTarget, lot of arguments case
	      var $args = [null];
	      $args.push.apply($args, args);
	      return new (functionBind.apply(Target, $args))();
	    }
	    // with altered newTarget, not support built-in constructors
	    var proto = newTarget.prototype;
	    var instance = objectCreate(isObject(proto) ? proto : Object.prototype);
	    var result = Function.apply.call(Target, instance, args);
	    return isObject(result) ? result : instance;
	  }
	});

	// MS Edge has broken Reflect.defineProperty - throwing instead of returning false
	var ERROR_INSTEAD_OF_FALSE = fails(function () {
	  // eslint-disable-next-line no-undef
	  Reflect.defineProperty(objectDefineProperty.f({}, 1, { value: 1 }), 1, { value: 2 });
	});

	// `Reflect.defineProperty` method
	// https://tc39.github.io/ecma262/#sec-reflect.defineproperty
	_export({ target: 'Reflect', stat: true, forced: ERROR_INSTEAD_OF_FALSE, sham: !descriptors }, {
	  defineProperty: function defineProperty(target, propertyKey, attributes) {
	    anObject(target);
	    var key = toPrimitive(propertyKey, true);
	    anObject(attributes);
	    try {
	      objectDefineProperty.f(target, key, attributes);
	      return true;
	    } catch (error) {
	      return false;
	    }
	  }
	});

	var getOwnPropertyDescriptor$8 = objectGetOwnPropertyDescriptor.f;

	// `Reflect.deleteProperty` method
	// https://tc39.github.io/ecma262/#sec-reflect.deleteproperty
	_export({ target: 'Reflect', stat: true }, {
	  deleteProperty: function deleteProperty(target, propertyKey) {
	    var descriptor = getOwnPropertyDescriptor$8(anObject(target), propertyKey);
	    return descriptor && !descriptor.configurable ? false : delete target[propertyKey];
	  }
	});

	// `Reflect.get` method
	// https://tc39.github.io/ecma262/#sec-reflect.get
	function get$2(target, propertyKey /* , receiver */) {
	  var receiver = arguments.length < 3 ? target : arguments[2];
	  var descriptor, prototype;
	  if (anObject(target) === receiver) return target[propertyKey];
	  if (descriptor = objectGetOwnPropertyDescriptor.f(target, propertyKey)) return has(descriptor, 'value')
	    ? descriptor.value
	    : descriptor.get === undefined
	      ? undefined
	      : descriptor.get.call(receiver);
	  if (isObject(prototype = objectGetPrototypeOf(target))) return get$2(prototype, propertyKey, receiver);
	}

	_export({ target: 'Reflect', stat: true }, {
	  get: get$2
	});

	// `Reflect.getOwnPropertyDescriptor` method
	// https://tc39.github.io/ecma262/#sec-reflect.getownpropertydescriptor
	_export({ target: 'Reflect', stat: true, sham: !descriptors }, {
	  getOwnPropertyDescriptor: function getOwnPropertyDescriptor(target, propertyKey) {
	    return objectGetOwnPropertyDescriptor.f(anObject(target), propertyKey);
	  }
	});

	// `Reflect.getPrototypeOf` method
	// https://tc39.github.io/ecma262/#sec-reflect.getprototypeof
	_export({ target: 'Reflect', stat: true, sham: !correctPrototypeGetter }, {
	  getPrototypeOf: function getPrototypeOf(target) {
	    return objectGetPrototypeOf(anObject(target));
	  }
	});

	// `Reflect.has` method
	// https://tc39.github.io/ecma262/#sec-reflect.has
	_export({ target: 'Reflect', stat: true }, {
	  has: function has(target, propertyKey) {
	    return propertyKey in target;
	  }
	});

	var objectIsExtensible = Object.isExtensible;

	// `Reflect.isExtensible` method
	// https://tc39.github.io/ecma262/#sec-reflect.isextensible
	_export({ target: 'Reflect', stat: true }, {
	  isExtensible: function isExtensible(target) {
	    anObject(target);
	    return objectIsExtensible ? objectIsExtensible(target) : true;
	  }
	});

	// `Reflect.ownKeys` method
	// https://tc39.github.io/ecma262/#sec-reflect.ownkeys
	_export({ target: 'Reflect', stat: true }, {
	  ownKeys: ownKeys
	});

	// `Reflect.preventExtensions` method
	// https://tc39.github.io/ecma262/#sec-reflect.preventextensions
	_export({ target: 'Reflect', stat: true, sham: !freezing }, {
	  preventExtensions: function preventExtensions(target) {
	    anObject(target);
	    try {
	      var objectPreventExtensions = getBuiltIn('Object', 'preventExtensions');
	      if (objectPreventExtensions) objectPreventExtensions(target);
	      return true;
	    } catch (error) {
	      return false;
	    }
	  }
	});

	// `Reflect.set` method
	// https://tc39.github.io/ecma262/#sec-reflect.set
	function set$3(target, propertyKey, V /* , receiver */) {
	  var receiver = arguments.length < 4 ? target : arguments[3];
	  var ownDescriptor = objectGetOwnPropertyDescriptor.f(anObject(target), propertyKey);
	  var existingDescriptor, prototype;
	  if (!ownDescriptor) {
	    if (isObject(prototype = objectGetPrototypeOf(target))) {
	      return set$3(prototype, propertyKey, V, receiver);
	    }
	    ownDescriptor = createPropertyDescriptor(0);
	  }
	  if (has(ownDescriptor, 'value')) {
	    if (ownDescriptor.writable === false || !isObject(receiver)) return false;
	    if (existingDescriptor = objectGetOwnPropertyDescriptor.f(receiver, propertyKey)) {
	      if (existingDescriptor.get || existingDescriptor.set || existingDescriptor.writable === false) return false;
	      existingDescriptor.value = V;
	      objectDefineProperty.f(receiver, propertyKey, existingDescriptor);
	    } else objectDefineProperty.f(receiver, propertyKey, createPropertyDescriptor(0, V));
	    return true;
	  }
	  return ownDescriptor.set === undefined ? false : (ownDescriptor.set.call(receiver, V), true);
	}

	// MS Edge 17-18 Reflect.set allows setting the property to object
	// with non-writable property on the prototype
	var MS_EDGE_BUG = fails(function () {
	  var object = objectDefineProperty.f({}, 'a', { configurable: true });
	  // eslint-disable-next-line no-undef
	  return Reflect.set(objectGetPrototypeOf(object), 'a', 1, object) !== false;
	});

	_export({ target: 'Reflect', stat: true, forced: MS_EDGE_BUG }, {
	  set: set$3
	});

	// `Reflect.setPrototypeOf` method
	// https://tc39.github.io/ecma262/#sec-reflect.setprototypeof
	if (objectSetPrototypeOf) _export({ target: 'Reflect', stat: true }, {
	  setPrototypeOf: function setPrototypeOf(target, proto) {
	    anObject(target);
	    aPossiblePrototype(proto);
	    try {
	      objectSetPrototypeOf(target, proto);
	      return true;
	    } catch (error) {
	      return false;
	    }
	  }
	});

	for (var COLLECTION_NAME$1 in domIterables) {
	  var Collection$1 = global_1[COLLECTION_NAME$1];
	  var CollectionPrototype$1 = Collection$1 && Collection$1.prototype;
	  // some Chrome versions have non-configurable methods on DOMTokenList
	  if (CollectionPrototype$1 && CollectionPrototype$1.forEach !== arrayForEach) try {
	    createNonEnumerableProperty(CollectionPrototype$1, 'forEach', arrayForEach);
	  } catch (error) {
	    CollectionPrototype$1.forEach = arrayForEach;
	  }
	}

	var FORCED$k = !global_1.setImmediate || !global_1.clearImmediate;

	// http://w3c.github.io/setImmediate/
	_export({ global: true, bind: true, enumerable: true, forced: FORCED$k }, {
	  // `setImmediate` method
	  // http://w3c.github.io/setImmediate/#si-setImmediate
	  setImmediate: task.set,
	  // `clearImmediate` method
	  // http://w3c.github.io/setImmediate/#si-clearImmediate
	  clearImmediate: task.clear
	});

	var process$4 = global_1.process;
	var isNode = classofRaw(process$4) == 'process';

	// `queueMicrotask` method
	// https://html.spec.whatwg.org/multipage/timers-and-user-prompts.html#dom-queuemicrotask
	_export({ global: true, enumerable: true, noTargetGet: true }, {
	  queueMicrotask: function queueMicrotask(fn) {
	    var domain = isNode && process$4.domain;
	    microtask(domain ? domain.bind(fn) : fn);
	  }
	});

	var ITERATOR$7 = wellKnownSymbol('iterator');

	var nativeUrl = !fails(function () {
	  var url = new URL('b?a=1&b=2&c=3', 'http://a');
	  var searchParams = url.searchParams;
	  var result = '';
	  url.pathname = 'c%20d';
	  searchParams.forEach(function (value, key) {
	    searchParams['delete']('b');
	    result += key + value;
	  });
	  return !searchParams.sort
	    || url.href !== 'http://a/c%20d?a=1&c=3'
	    || searchParams.get('c') !== '3'
	    || String(new URLSearchParams('?a=1')) !== 'a=1'
	    || !searchParams[ITERATOR$7]
	    // throws in Edge
	    || new URL('https://a@b').username !== 'a'
	    || new URLSearchParams(new URLSearchParams('a=b')).get('a') !== 'b'
	    // not punycoded in Edge
	    || new URL('http://ÑÐµÑÑ').host !== 'xn--e1aybc'
	    // not escaped in Chrome 62-
	    || new URL('http://a#Ð±').hash !== '#%D0%B1'
	    // fails in Chrome 66-
	    || result !== 'a1c3'
	    // throws in Safari
	    || new URL('http://x', undefined).host !== 'x';
	});

	// based on https://github.com/bestiejs/punycode.js/blob/master/punycode.js
	var maxInt = 2147483647; // aka. 0x7FFFFFFF or 2^31-1
	var base = 36;
	var tMin = 1;
	var tMax = 26;
	var skew = 38;
	var damp = 700;
	var initialBias = 72;
	var initialN = 128; // 0x80
	var delimiter = '-'; // '\x2D'
	var regexNonASCII = /[^\0-\u007E]/; // non-ASCII chars
	var regexSeparators = /[.\u3002\uFF0E\uFF61]/g; // RFC 3490 separators
	var OVERFLOW_ERROR = 'Overflow: input needs wider integers to process';
	var baseMinusTMin = base - tMin;
	var floor$8 = Math.floor;
	var stringFromCharCode = String.fromCharCode;

	/**
	 * Creates an array containing the numeric code points of each Unicode
	 * character in the string. While JavaScript uses UCS-2 internally,
	 * this function will convert a pair of surrogate halves (each of which
	 * UCS-2 exposes as separate characters) into a single code point,
	 * matching UTF-16.
	 */
	var ucs2decode = function (string) {
	  var output = [];
	  var counter = 0;
	  var length = string.length;
	  while (counter < length) {
	    var value = string.charCodeAt(counter++);
	    if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
	      // It's a high surrogate, and there is a next character.
	      var extra = string.charCodeAt(counter++);
	      if ((extra & 0xFC00) == 0xDC00) { // Low surrogate.
	        output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
	      } else {
	        // It's an unmatched surrogate; only append this code unit, in case the
	        // next code unit is the high surrogate of a surrogate pair.
	        output.push(value);
	        counter--;
	      }
	    } else {
	      output.push(value);
	    }
	  }
	  return output;
	};

	/**
	 * Converts a digit/integer into a basic code point.
	 */
	var digitToBasic = function (digit) {
	  //  0..25 map to ASCII a..z or A..Z
	  // 26..35 map to ASCII 0..9
	  return digit + 22 + 75 * (digit < 26);
	};

	/**
	 * Bias adaptation function as per section 3.4 of RFC 3492.
	 * https://tools.ietf.org/html/rfc3492#section-3.4
	 */
	var adapt = function (delta, numPoints, firstTime) {
	  var k = 0;
	  delta = firstTime ? floor$8(delta / damp) : delta >> 1;
	  delta += floor$8(delta / numPoints);
	  for (; delta > baseMinusTMin * tMax >> 1; k += base) {
	    delta = floor$8(delta / baseMinusTMin);
	  }
	  return floor$8(k + (baseMinusTMin + 1) * delta / (delta + skew));
	};

	/**
	 * Converts a string of Unicode symbols (e.g. a domain name label) to a
	 * Punycode string of ASCII-only symbols.
	 */
	// eslint-disable-next-line  max-statements
	var encode = function (input) {
	  var output = [];

	  // Convert the input in UCS-2 to an array of Unicode code points.
	  input = ucs2decode(input);

	  // Cache the length.
	  var inputLength = input.length;

	  // Initialize the state.
	  var n = initialN;
	  var delta = 0;
	  var bias = initialBias;
	  var i, currentValue;

	  // Handle the basic code points.
	  for (i = 0; i < input.length; i++) {
	    currentValue = input[i];
	    if (currentValue < 0x80) {
	      output.push(stringFromCharCode(currentValue));
	    }
	  }

	  var basicLength = output.length; // number of basic code points.
	  var handledCPCount = basicLength; // number of code points that have been handled;

	  // Finish the basic string with a delimiter unless it's empty.
	  if (basicLength) {
	    output.push(delimiter);
	  }

	  // Main encoding loop:
	  while (handledCPCount < inputLength) {
	    // All non-basic code points < n have been handled already. Find the next larger one:
	    var m = maxInt;
	    for (i = 0; i < input.length; i++) {
	      currentValue = input[i];
	      if (currentValue >= n && currentValue < m) {
	        m = currentValue;
	      }
	    }

	    // Increase `delta` enough to advance the decoder's <n,i> state to <m,0>, but guard against overflow.
	    var handledCPCountPlusOne = handledCPCount + 1;
	    if (m - n > floor$8((maxInt - delta) / handledCPCountPlusOne)) {
	      throw RangeError(OVERFLOW_ERROR);
	    }

	    delta += (m - n) * handledCPCountPlusOne;
	    n = m;

	    for (i = 0; i < input.length; i++) {
	      currentValue = input[i];
	      if (currentValue < n && ++delta > maxInt) {
	        throw RangeError(OVERFLOW_ERROR);
	      }
	      if (currentValue == n) {
	        // Represent delta as a generalized variable-length integer.
	        var q = delta;
	        for (var k = base; /* no condition */; k += base) {
	          var t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);
	          if (q < t) break;
	          var qMinusT = q - t;
	          var baseMinusT = base - t;
	          output.push(stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT)));
	          q = floor$8(qMinusT / baseMinusT);
	        }

	        output.push(stringFromCharCode(digitToBasic(q)));
	        bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
	        delta = 0;
	        ++handledCPCount;
	      }
	    }

	    ++delta;
	    ++n;
	  }
	  return output.join('');
	};

	var punycodeToAscii = function (input) {
	  var encoded = [];
	  var labels = input.toLowerCase().replace(regexSeparators, '\u002E').split('.');
	  var i, label;
	  for (i = 0; i < labels.length; i++) {
	    label = labels[i];
	    encoded.push(regexNonASCII.test(label) ? 'xn--' + encode(label) : label);
	  }
	  return encoded.join('.');
	};

	var getIterator = function (it) {
	  var iteratorMethod = getIteratorMethod(it);
	  if (typeof iteratorMethod != 'function') {
	    throw TypeError(String(it) + ' is not iterable');
	  } return anObject(iteratorMethod.call(it));
	};

	// TODO: in core-js@4, move /modules/ dependencies to public entries for better optimization by tools like `preset-env`





















	var $fetch$1 = getBuiltIn('fetch');
	var Headers = getBuiltIn('Headers');
	var ITERATOR$8 = wellKnownSymbol('iterator');
	var URL_SEARCH_PARAMS = 'URLSearchParams';
	var URL_SEARCH_PARAMS_ITERATOR = URL_SEARCH_PARAMS + 'Iterator';
	var setInternalState$9 = internalState.set;
	var getInternalParamsState = internalState.getterFor(URL_SEARCH_PARAMS);
	var getInternalIteratorState = internalState.getterFor(URL_SEARCH_PARAMS_ITERATOR);

	var plus = /\+/g;
	var sequences = Array(4);

	var percentSequence = function (bytes) {
	  return sequences[bytes - 1] || (sequences[bytes - 1] = RegExp('((?:%[\\da-f]{2}){' + bytes + '})', 'gi'));
	};

	var percentDecode = function (sequence) {
	  try {
	    return decodeURIComponent(sequence);
	  } catch (error) {
	    return sequence;
	  }
	};

	var deserialize = function (it) {
	  var result = it.replace(plus, ' ');
	  var bytes = 4;
	  try {
	    return decodeURIComponent(result);
	  } catch (error) {
	    while (bytes) {
	      result = result.replace(percentSequence(bytes--), percentDecode);
	    }
	    return result;
	  }
	};

	var find$1 = /[!'()~]|%20/g;

	var replace = {
	  '!': '%21',
	  "'": '%27',
	  '(': '%28',
	  ')': '%29',
	  '~': '%7E',
	  '%20': '+'
	};

	var replacer = function (match) {
	  return replace[match];
	};

	var serialize = function (it) {
	  return encodeURIComponent(it).replace(find$1, replacer);
	};

	var parseSearchParams = function (result, query) {
	  if (query) {
	    var attributes = query.split('&');
	    var index = 0;
	    var attribute, entry;
	    while (index < attributes.length) {
	      attribute = attributes[index++];
	      if (attribute.length) {
	        entry = attribute.split('=');
	        result.push({
	          key: deserialize(entry.shift()),
	          value: deserialize(entry.join('='))
	        });
	      }
	    }
	  }
	};

	var updateSearchParams = function (query) {
	  this.entries.length = 0;
	  parseSearchParams(this.entries, query);
	};

	var validateArgumentsLength = function (passed, required) {
	  if (passed < required) throw TypeError('Not enough arguments');
	};

	var URLSearchParamsIterator = createIteratorConstructor(function Iterator(params, kind) {
	  setInternalState$9(this, {
	    type: URL_SEARCH_PARAMS_ITERATOR,
	    iterator: getIterator(getInternalParamsState(params).entries),
	    kind: kind
	  });
	}, 'Iterator', function next() {
	  var state = getInternalIteratorState(this);
	  var kind = state.kind;
	  var step = state.iterator.next();
	  var entry = step.value;
	  if (!step.done) {
	    step.value = kind === 'keys' ? entry.key : kind === 'values' ? entry.value : [entry.key, entry.value];
	  } return step;
	});

	// `URLSearchParams` constructor
	// https://url.spec.whatwg.org/#interface-urlsearchparams
	var URLSearchParamsConstructor = function URLSearchParams(/* init */) {
	  anInstance(this, URLSearchParamsConstructor, URL_SEARCH_PARAMS);
	  var init = arguments.length > 0 ? arguments[0] : undefined;
	  var that = this;
	  var entries = [];
	  var iteratorMethod, iterator, next, step, entryIterator, entryNext, first, second, key;

	  setInternalState$9(that, {
	    type: URL_SEARCH_PARAMS,
	    entries: entries,
	    updateURL: function () { /* empty */ },
	    updateSearchParams: updateSearchParams
	  });

	  if (init !== undefined) {
	    if (isObject(init)) {
	      iteratorMethod = getIteratorMethod(init);
	      if (typeof iteratorMethod === 'function') {
	        iterator = iteratorMethod.call(init);
	        next = iterator.next;
	        while (!(step = next.call(iterator)).done) {
	          entryIterator = getIterator(anObject(step.value));
	          entryNext = entryIterator.next;
	          if (
	            (first = entryNext.call(entryIterator)).done ||
	            (second = entryNext.call(entryIterator)).done ||
	            !entryNext.call(entryIterator).done
	          ) throw TypeError('Expected sequence with length 2');
	          entries.push({ key: first.value + '', value: second.value + '' });
	        }
	      } else for (key in init) if (has(init, key)) entries.push({ key: key, value: init[key] + '' });
	    } else {
	      parseSearchParams(entries, typeof init === 'string' ? init.charAt(0) === '?' ? init.slice(1) : init : init + '');
	    }
	  }
	};

	var URLSearchParamsPrototype = URLSearchParamsConstructor.prototype;

	redefineAll(URLSearchParamsPrototype, {
	  // `URLSearchParams.prototype.appent` method
	  // https://url.spec.whatwg.org/#dom-urlsearchparams-append
	  append: function append(name, value) {
	    validateArgumentsLength(arguments.length, 2);
	    var state = getInternalParamsState(this);
	    state.entries.push({ key: name + '', value: value + '' });
	    state.updateURL();
	  },
	  // `URLSearchParams.prototype.delete` method
	  // https://url.spec.whatwg.org/#dom-urlsearchparams-delete
	  'delete': function (name) {
	    validateArgumentsLength(arguments.length, 1);
	    var state = getInternalParamsState(this);
	    var entries = state.entries;
	    var key = name + '';
	    var index = 0;
	    while (index < entries.length) {
	      if (entries[index].key === key) entries.splice(index, 1);
	      else index++;
	    }
	    state.updateURL();
	  },
	  // `URLSearchParams.prototype.get` method
	  // https://url.spec.whatwg.org/#dom-urlsearchparams-get
	  get: function get(name) {
	    validateArgumentsLength(arguments.length, 1);
	    var entries = getInternalParamsState(this).entries;
	    var key = name + '';
	    var index = 0;
	    for (; index < entries.length; index++) {
	      if (entries[index].key === key) return entries[index].value;
	    }
	    return null;
	  },
	  // `URLSearchParams.prototype.getAll` method
	  // https://url.spec.whatwg.org/#dom-urlsearchparams-getall
	  getAll: function getAll(name) {
	    validateArgumentsLength(arguments.length, 1);
	    var entries = getInternalParamsState(this).entries;
	    var key = name + '';
	    var result = [];
	    var index = 0;
	    for (; index < entries.length; index++) {
	      if (entries[index].key === key) result.push(entries[index].value);
	    }
	    return result;
	  },
	  // `URLSearchParams.prototype.has` method
	  // https://url.spec.whatwg.org/#dom-urlsearchparams-has
	  has: function has(name) {
	    validateArgumentsLength(arguments.length, 1);
	    var entries = getInternalParamsState(this).entries;
	    var key = name + '';
	    var index = 0;
	    while (index < entries.length) {
	      if (entries[index++].key === key) return true;
	    }
	    return false;
	  },
	  // `URLSearchParams.prototype.set` method
	  // https://url.spec.whatwg.org/#dom-urlsearchparams-set
	  set: function set(name, value) {
	    validateArgumentsLength(arguments.length, 1);
	    var state = getInternalParamsState(this);
	    var entries = state.entries;
	    var found = false;
	    var key = name + '';
	    var val = value + '';
	    var index = 0;
	    var entry;
	    for (; index < entries.length; index++) {
	      entry = entries[index];
	      if (entry.key === key) {
	        if (found) entries.splice(index--, 1);
	        else {
	          found = true;
	          entry.value = val;
	        }
	      }
	    }
	    if (!found) entries.push({ key: key, value: val });
	    state.updateURL();
	  },
	  // `URLSearchParams.prototype.sort` method
	  // https://url.spec.whatwg.org/#dom-urlsearchparams-sort
	  sort: function sort() {
	    var state = getInternalParamsState(this);
	    var entries = state.entries;
	    // Array#sort is not stable in some engines
	    var slice = entries.slice();
	    var entry, entriesIndex, sliceIndex;
	    entries.length = 0;
	    for (sliceIndex = 0; sliceIndex < slice.length; sliceIndex++) {
	      entry = slice[sliceIndex];
	      for (entriesIndex = 0; entriesIndex < sliceIndex; entriesIndex++) {
	        if (entries[entriesIndex].key > entry.key) {
	          entries.splice(entriesIndex, 0, entry);
	          break;
	        }
	      }
	      if (entriesIndex === sliceIndex) entries.push(entry);
	    }
	    state.updateURL();
	  },
	  // `URLSearchParams.prototype.forEach` method
	  forEach: function forEach(callback /* , thisArg */) {
	    var entries = getInternalParamsState(this).entries;
	    var boundFunction = bindContext(callback, arguments.length > 1 ? arguments[1] : undefined, 3);
	    var index = 0;
	    var entry;
	    while (index < entries.length) {
	      entry = entries[index++];
	      boundFunction(entry.value, entry.key, this);
	    }
	  },
	  // `URLSearchParams.prototype.keys` method
	  keys: function keys() {
	    return new URLSearchParamsIterator(this, 'keys');
	  },
	  // `URLSearchParams.prototype.values` method
	  values: function values() {
	    return new URLSearchParamsIterator(this, 'values');
	  },
	  // `URLSearchParams.prototype.entries` method
	  entries: function entries() {
	    return new URLSearchParamsIterator(this, 'entries');
	  }
	}, { enumerable: true });

	// `URLSearchParams.prototype[@@iterator]` method
	redefine(URLSearchParamsPrototype, ITERATOR$8, URLSearchParamsPrototype.entries);

	// `URLSearchParams.prototype.toString` method
	// https://url.spec.whatwg.org/#urlsearchparams-stringification-behavior
	redefine(URLSearchParamsPrototype, 'toString', function toString() {
	  var entries = getInternalParamsState(this).entries;
	  var result = [];
	  var index = 0;
	  var entry;
	  while (index < entries.length) {
	    entry = entries[index++];
	    result.push(serialize(entry.key) + '=' + serialize(entry.value));
	  } return result.join('&');
	}, { enumerable: true });

	setToStringTag(URLSearchParamsConstructor, URL_SEARCH_PARAMS);

	_export({ global: true, forced: !nativeUrl }, {
	  URLSearchParams: URLSearchParamsConstructor
	});

	// Wrap `fetch` for correct work with polyfilled `URLSearchParams`
	// https://github.com/zloirock/core-js/issues/674
	if (!nativeUrl && typeof $fetch$1 == 'function' && typeof Headers == 'function') {
	  _export({ global: true, enumerable: true, forced: true }, {
	    fetch: function fetch(input /* , init */) {
	      var args = [input];
	      var init, body, headers;
	      if (arguments.length > 1) {
	        init = arguments[1];
	        if (isObject(init)) {
	          body = init.body;
	          if (classof(body) === URL_SEARCH_PARAMS) {
	            headers = init.headers ? new Headers(init.headers) : new Headers();
	            if (!headers.has('content-type')) {
	              headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');
	            }
	            init = objectCreate(init, {
	              body: createPropertyDescriptor(0, String(body)),
	              headers: createPropertyDescriptor(0, headers)
	            });
	          }
	        }
	        args.push(init);
	      } return $fetch$1.apply(this, args);
	    }
	  });
	}

	var web_urlSearchParams = {
	  URLSearchParams: URLSearchParamsConstructor,
	  getState: getInternalParamsState
	};

	// TODO: in core-js@4, move /modules/ dependencies to public entries for better optimization by tools like `preset-env`











	var codeAt$1 = stringMultibyte.codeAt;





	var NativeURL = global_1.URL;
	var URLSearchParams$1 = web_urlSearchParams.URLSearchParams;
	var getInternalSearchParamsState = web_urlSearchParams.getState;
	var setInternalState$a = internalState.set;
	var getInternalURLState = internalState.getterFor('URL');
	var floor$9 = Math.floor;
	var pow$4 = Math.pow;

	var INVALID_AUTHORITY = 'Invalid authority';
	var INVALID_SCHEME = 'Invalid scheme';
	var INVALID_HOST = 'Invalid host';
	var INVALID_PORT = 'Invalid port';

	var ALPHA = /[A-Za-z]/;
	var ALPHANUMERIC = /[\d+\-.A-Za-z]/;
	var DIGIT = /\d/;
	var HEX_START = /^(0x|0X)/;
	var OCT = /^[0-7]+$/;
	var DEC = /^\d+$/;
	var HEX = /^[\dA-Fa-f]+$/;
	// eslint-disable-next-line no-control-regex
	var FORBIDDEN_HOST_CODE_POINT = /[\u0000\u0009\u000A\u000D #%/:?@[\\]]/;
	// eslint-disable-next-line no-control-regex
	var FORBIDDEN_HOST_CODE_POINT_EXCLUDING_PERCENT = /[\u0000\u0009\u000A\u000D #/:?@[\\]]/;
	// eslint-disable-next-line no-control-regex
	var LEADING_AND_TRAILING_C0_CONTROL_OR_SPACE = /^[\u0000-\u001F ]+|[\u0000-\u001F ]+$/g;
	// eslint-disable-next-line no-control-regex
	var TAB_AND_NEW_LINE = /[\u0009\u000A\u000D]/g;
	var EOF;

	var parseHost = function (url, input) {
	  var result, codePoints, index;
	  if (input.charAt(0) == '[') {
	    if (input.charAt(input.length - 1) != ']') return INVALID_HOST;
	    result = parseIPv6(input.slice(1, -1));
	    if (!result) return INVALID_HOST;
	    url.host = result;
	  // opaque host
	  } else if (!isSpecial(url)) {
	    if (FORBIDDEN_HOST_CODE_POINT_EXCLUDING_PERCENT.test(input)) return INVALID_HOST;
	    result = '';
	    codePoints = arrayFrom(input);
	    for (index = 0; index < codePoints.length; index++) {
	      result += percentEncode(codePoints[index], C0ControlPercentEncodeSet);
	    }
	    url.host = result;
	  } else {
	    input = punycodeToAscii(input);
	    if (FORBIDDEN_HOST_CODE_POINT.test(input)) return INVALID_HOST;
	    result = parseIPv4(input);
	    if (result === null) return INVALID_HOST;
	    url.host = result;
	  }
	};

	var parseIPv4 = function (input) {
	  var parts = input.split('.');
	  var partsLength, numbers, index, part, radix, number, ipv4;
	  if (parts.length && parts[parts.length - 1] == '') {
	    parts.pop();
	  }
	  partsLength = parts.length;
	  if (partsLength > 4) return input;
	  numbers = [];
	  for (index = 0; index < partsLength; index++) {
	    part = parts[index];
	    if (part == '') return input;
	    radix = 10;
	    if (part.length > 1 && part.charAt(0) == '0') {
	      radix = HEX_START.test(part) ? 16 : 8;
	      part = part.slice(radix == 8 ? 1 : 2);
	    }
	    if (part === '') {
	      number = 0;
	    } else {
	      if (!(radix == 10 ? DEC : radix == 8 ? OCT : HEX).test(part)) return input;
	      number = parseInt(part, radix);
	    }
	    numbers.push(number);
	  }
	  for (index = 0; index < partsLength; index++) {
	    number = numbers[index];
	    if (index == partsLength - 1) {
	      if (number >= pow$4(256, 5 - partsLength)) return null;
	    } else if (number > 255) return null;
	  }
	  ipv4 = numbers.pop();
	  for (index = 0; index < numbers.length; index++) {
	    ipv4 += numbers[index] * pow$4(256, 3 - index);
	  }
	  return ipv4;
	};

	// eslint-disable-next-line max-statements
	var parseIPv6 = function (input) {
	  var address = [0, 0, 0, 0, 0, 0, 0, 0];
	  var pieceIndex = 0;
	  var compress = null;
	  var pointer = 0;
	  var value, length, numbersSeen, ipv4Piece, number, swaps, swap;

	  var char = function () {
	    return input.charAt(pointer);
	  };

	  if (char() == ':') {
	    if (input.charAt(1) != ':') return;
	    pointer += 2;
	    pieceIndex++;
	    compress = pieceIndex;
	  }
	  while (char()) {
	    if (pieceIndex == 8) return;
	    if (char() == ':') {
	      if (compress !== null) return;
	      pointer++;
	      pieceIndex++;
	      compress = pieceIndex;
	      continue;
	    }
	    value = length = 0;
	    while (length < 4 && HEX.test(char())) {
	      value = value * 16 + parseInt(char(), 16);
	      pointer++;
	      length++;
	    }
	    if (char() == '.') {
	      if (length == 0) return;
	      pointer -= length;
	      if (pieceIndex > 6) return;
	      numbersSeen = 0;
	      while (char()) {
	        ipv4Piece = null;
	        if (numbersSeen > 0) {
	          if (char() == '.' && numbersSeen < 4) pointer++;
	          else return;
	        }
	        if (!DIGIT.test(char())) return;
	        while (DIGIT.test(char())) {
	          number = parseInt(char(), 10);
	          if (ipv4Piece === null) ipv4Piece = number;
	          else if (ipv4Piece == 0) return;
	          else ipv4Piece = ipv4Piece * 10 + number;
	          if (ipv4Piece > 255) return;
	          pointer++;
	        }
	        address[pieceIndex] = address[pieceIndex] * 256 + ipv4Piece;
	        numbersSeen++;
	        if (numbersSeen == 2 || numbersSeen == 4) pieceIndex++;
	      }
	      if (numbersSeen != 4) return;
	      break;
	    } else if (char() == ':') {
	      pointer++;
	      if (!char()) return;
	    } else if (char()) return;
	    address[pieceIndex++] = value;
	  }
	  if (compress !== null) {
	    swaps = pieceIndex - compress;
	    pieceIndex = 7;
	    while (pieceIndex != 0 && swaps > 0) {
	      swap = address[pieceIndex];
	      address[pieceIndex--] = address[compress + swaps - 1];
	      address[compress + --swaps] = swap;
	    }
	  } else if (pieceIndex != 8) return;
	  return address;
	};

	var findLongestZeroSequence = function (ipv6) {
	  var maxIndex = null;
	  var maxLength = 1;
	  var currStart = null;
	  var currLength = 0;
	  var index = 0;
	  for (; index < 8; index++) {
	    if (ipv6[index] !== 0) {
	      if (currLength > maxLength) {
	        maxIndex = currStart;
	        maxLength = currLength;
	      }
	      currStart = null;
	      currLength = 0;
	    } else {
	      if (currStart === null) currStart = index;
	      ++currLength;
	    }
	  }
	  if (currLength > maxLength) {
	    maxIndex = currStart;
	    maxLength = currLength;
	  }
	  return maxIndex;
	};

	var serializeHost = function (host) {
	  var result, index, compress, ignore0;
	  // ipv4
	  if (typeof host == 'number') {
	    result = [];
	    for (index = 0; index < 4; index++) {
	      result.unshift(host % 256);
	      host = floor$9(host / 256);
	    } return result.join('.');
	  // ipv6
	  } else if (typeof host == 'object') {
	    result = '';
	    compress = findLongestZeroSequence(host);
	    for (index = 0; index < 8; index++) {
	      if (ignore0 && host[index] === 0) continue;
	      if (ignore0) ignore0 = false;
	      if (compress === index) {
	        result += index ? ':' : '::';
	        ignore0 = true;
	      } else {
	        result += host[index].toString(16);
	        if (index < 7) result += ':';
	      }
	    }
	    return '[' + result + ']';
	  } return host;
	};

	var C0ControlPercentEncodeSet = {};
	var fragmentPercentEncodeSet = objectAssign({}, C0ControlPercentEncodeSet, {
	  ' ': 1, '"': 1, '<': 1, '>': 1, '`': 1
	});
	var pathPercentEncodeSet = objectAssign({}, fragmentPercentEncodeSet, {
	  '#': 1, '?': 1, '{': 1, '}': 1
	});
	var userinfoPercentEncodeSet = objectAssign({}, pathPercentEncodeSet, {
	  '/': 1, ':': 1, ';': 1, '=': 1, '@': 1, '[': 1, '\\': 1, ']': 1, '^': 1, '|': 1
	});

	var percentEncode = function (char, set) {
	  var code = codeAt$1(char, 0);
	  return code > 0x20 && code < 0x7F && !has(set, char) ? char : encodeURIComponent(char);
	};

	var specialSchemes = {
	  ftp: 21,
	  file: null,
	  http: 80,
	  https: 443,
	  ws: 80,
	  wss: 443
	};

	var isSpecial = function (url) {
	  return has(specialSchemes, url.scheme);
	};

	var includesCredentials = function (url) {
	  return url.username != '' || url.password != '';
	};

	var cannotHaveUsernamePasswordPort = function (url) {
	  return !url.host || url.cannotBeABaseURL || url.scheme == 'file';
	};

	var isWindowsDriveLetter = function (string, normalized) {
	  var second;
	  return string.length == 2 && ALPHA.test(string.charAt(0))
	    && ((second = string.charAt(1)) == ':' || (!normalized && second == '|'));
	};

	var startsWithWindowsDriveLetter = function (string) {
	  var third;
	  return string.length > 1 && isWindowsDriveLetter(string.slice(0, 2)) && (
	    string.length == 2 ||
	    ((third = string.charAt(2)) === '/' || third === '\\' || third === '?' || third === '#')
	  );
	};

	var shortenURLsPath = function (url) {
	  var path = url.path;
	  var pathSize = path.length;
	  if (pathSize && (url.scheme != 'file' || pathSize != 1 || !isWindowsDriveLetter(path[0], true))) {
	    path.pop();
	  }
	};

	var isSingleDot = function (segment) {
	  return segment === '.' || segment.toLowerCase() === '%2e';
	};

	var isDoubleDot = function (segment) {
	  segment = segment.toLowerCase();
	  return segment === '..' || segment === '%2e.' || segment === '.%2e' || segment === '%2e%2e';
	};

	// States:
	var SCHEME_START = {};
	var SCHEME = {};
	var NO_SCHEME = {};
	var SPECIAL_RELATIVE_OR_AUTHORITY = {};
	var PATH_OR_AUTHORITY = {};
	var RELATIVE = {};
	var RELATIVE_SLASH = {};
	var SPECIAL_AUTHORITY_SLASHES = {};
	var SPECIAL_AUTHORITY_IGNORE_SLASHES = {};
	var AUTHORITY = {};
	var HOST = {};
	var HOSTNAME = {};
	var PORT = {};
	var FILE = {};
	var FILE_SLASH = {};
	var FILE_HOST = {};
	var PATH_START = {};
	var PATH = {};
	var CANNOT_BE_A_BASE_URL_PATH = {};
	var QUERY = {};
	var FRAGMENT = {};

	// eslint-disable-next-line max-statements
	var parseURL = function (url, input, stateOverride, base) {
	  var state = stateOverride || SCHEME_START;
	  var pointer = 0;
	  var buffer = '';
	  var seenAt = false;
	  var seenBracket = false;
	  var seenPasswordToken = false;
	  var codePoints, char, bufferCodePoints, failure;

	  if (!stateOverride) {
	    url.scheme = '';
	    url.username = '';
	    url.password = '';
	    url.host = null;
	    url.port = null;
	    url.path = [];
	    url.query = null;
	    url.fragment = null;
	    url.cannotBeABaseURL = false;
	    input = input.replace(LEADING_AND_TRAILING_C0_CONTROL_OR_SPACE, '');
	  }

	  input = input.replace(TAB_AND_NEW_LINE, '');

	  codePoints = arrayFrom(input);

	  while (pointer <= codePoints.length) {
	    char = codePoints[pointer];
	    switch (state) {
	      case SCHEME_START:
	        if (char && ALPHA.test(char)) {
	          buffer += char.toLowerCase();
	          state = SCHEME;
	        } else if (!stateOverride) {
	          state = NO_SCHEME;
	          continue;
	        } else return INVALID_SCHEME;
	        break;

	      case SCHEME:
	        if (char && (ALPHANUMERIC.test(char) || char == '+' || char == '-' || char == '.')) {
	          buffer += char.toLowerCase();
	        } else if (char == ':') {
	          if (stateOverride && (
	            (isSpecial(url) != has(specialSchemes, buffer)) ||
	            (buffer == 'file' && (includesCredentials(url) || url.port !== null)) ||
	            (url.scheme == 'file' && !url.host)
	          )) return;
	          url.scheme = buffer;
	          if (stateOverride) {
	            if (isSpecial(url) && specialSchemes[url.scheme] == url.port) url.port = null;
	            return;
	          }
	          buffer = '';
	          if (url.scheme == 'file') {
	            state = FILE;
	          } else if (isSpecial(url) && base && base.scheme == url.scheme) {
	            state = SPECIAL_RELATIVE_OR_AUTHORITY;
	          } else if (isSpecial(url)) {
	            state = SPECIAL_AUTHORITY_SLASHES;
	          } else if (codePoints[pointer + 1] == '/') {
	            state = PATH_OR_AUTHORITY;
	            pointer++;
	          } else {
	            url.cannotBeABaseURL = true;
	            url.path.push('');
	            state = CANNOT_BE_A_BASE_URL_PATH;
	          }
	        } else if (!stateOverride) {
	          buffer = '';
	          state = NO_SCHEME;
	          pointer = 0;
	          continue;
	        } else return INVALID_SCHEME;
	        break;

	      case NO_SCHEME:
	        if (!base || (base.cannotBeABaseURL && char != '#')) return INVALID_SCHEME;
	        if (base.cannotBeABaseURL && char == '#') {
	          url.scheme = base.scheme;
	          url.path = base.path.slice();
	          url.query = base.query;
	          url.fragment = '';
	          url.cannotBeABaseURL = true;
	          state = FRAGMENT;
	          break;
	        }
	        state = base.scheme == 'file' ? FILE : RELATIVE;
	        continue;

	      case SPECIAL_RELATIVE_OR_AUTHORITY:
	        if (char == '/' && codePoints[pointer + 1] == '/') {
	          state = SPECIAL_AUTHORITY_IGNORE_SLASHES;
	          pointer++;
	        } else {
	          state = RELATIVE;
	          continue;
	        } break;

	      case PATH_OR_AUTHORITY:
	        if (char == '/') {
	          state = AUTHORITY;
	          break;
	        } else {
	          state = PATH;
	          continue;
	        }

	      case RELATIVE:
	        url.scheme = base.scheme;
	        if (char == EOF) {
	          url.username = base.username;
	          url.password = base.password;
	          url.host = base.host;
	          url.port = base.port;
	          url.path = base.path.slice();
	          url.query = base.query;
	        } else if (char == '/' || (char == '\\' && isSpecial(url))) {
	          state = RELATIVE_SLASH;
	        } else if (char == '?') {
	          url.username = base.username;
	          url.password = base.password;
	          url.host = base.host;
	          url.port = base.port;
	          url.path = base.path.slice();
	          url.query = '';
	          state = QUERY;
	        } else if (char == '#') {
	          url.username = base.username;
	          url.password = base.password;
	          url.host = base.host;
	          url.port = base.port;
	          url.path = base.path.slice();
	          url.query = base.query;
	          url.fragment = '';
	          state = FRAGMENT;
	        } else {
	          url.username = base.username;
	          url.password = base.password;
	          url.host = base.host;
	          url.port = base.port;
	          url.path = base.path.slice();
	          url.path.pop();
	          state = PATH;
	          continue;
	        } break;

	      case RELATIVE_SLASH:
	        if (isSpecial(url) && (char == '/' || char == '\\')) {
	          state = SPECIAL_AUTHORITY_IGNORE_SLASHES;
	        } else if (char == '/') {
	          state = AUTHORITY;
	        } else {
	          url.username = base.username;
	          url.password = base.password;
	          url.host = base.host;
	          url.port = base.port;
	          state = PATH;
	          continue;
	        } break;

	      case SPECIAL_AUTHORITY_SLASHES:
	        state = SPECIAL_AUTHORITY_IGNORE_SLASHES;
	        if (char != '/' || buffer.charAt(pointer + 1) != '/') continue;
	        pointer++;
	        break;

	      case SPECIAL_AUTHORITY_IGNORE_SLASHES:
	        if (char != '/' && char != '\\') {
	          state = AUTHORITY;
	          continue;
	        } break;

	      case AUTHORITY:
	        if (char == '@') {
	          if (seenAt) buffer = '%40' + buffer;
	          seenAt = true;
	          bufferCodePoints = arrayFrom(buffer);
	          for (var i = 0; i < bufferCodePoints.length; i++) {
	            var codePoint = bufferCodePoints[i];
	            if (codePoint == ':' && !seenPasswordToken) {
	              seenPasswordToken = true;
	              continue;
	            }
	            var encodedCodePoints = percentEncode(codePoint, userinfoPercentEncodeSet);
	            if (seenPasswordToken) url.password += encodedCodePoints;
	            else url.username += encodedCodePoints;
	          }
	          buffer = '';
	        } else if (
	          char == EOF || char == '/' || char == '?' || char == '#' ||
	          (char == '\\' && isSpecial(url))
	        ) {
	          if (seenAt && buffer == '') return INVALID_AUTHORITY;
	          pointer -= arrayFrom(buffer).length + 1;
	          buffer = '';
	          state = HOST;
	        } else buffer += char;
	        break;

	      case HOST:
	      case HOSTNAME:
	        if (stateOverride && url.scheme == 'file') {
	          state = FILE_HOST;
	          continue;
	        } else if (char == ':' && !seenBracket) {
	          if (buffer == '') return INVALID_HOST;
	          failure = parseHost(url, buffer);
	          if (failure) return failure;
	          buffer = '';
	          state = PORT;
	          if (stateOverride == HOSTNAME) return;
	        } else if (
	          char == EOF || char == '/' || char == '?' || char == '#' ||
	          (char == '\\' && isSpecial(url))
	        ) {
	          if (isSpecial(url) && buffer == '') return INVALID_HOST;
	          if (stateOverride && buffer == '' && (includesCredentials(url) || url.port !== null)) return;
	          failure = parseHost(url, buffer);
	          if (failure) return failure;
	          buffer = '';
	          state = PATH_START;
	          if (stateOverride) return;
	          continue;
	        } else {
	          if (char == '[') seenBracket = true;
	          else if (char == ']') seenBracket = false;
	          buffer += char;
	        } break;

	      case PORT:
	        if (DIGIT.test(char)) {
	          buffer += char;
	        } else if (
	          char == EOF || char == '/' || char == '?' || char == '#' ||
	          (char == '\\' && isSpecial(url)) ||
	          stateOverride
	        ) {
	          if (buffer != '') {
	            var port = parseInt(buffer, 10);
	            if (port > 0xFFFF) return INVALID_PORT;
	            url.port = (isSpecial(url) && port === specialSchemes[url.scheme]) ? null : port;
	            buffer = '';
	          }
	          if (stateOverride) return;
	          state = PATH_START;
	          continue;
	        } else return INVALID_PORT;
	        break;

	      case FILE:
	        url.scheme = 'file';
	        if (char == '/' || char == '\\') state = FILE_SLASH;
	        else if (base && base.scheme == 'file') {
	          if (char == EOF) {
	            url.host = base.host;
	            url.path = base.path.slice();
	            url.query = base.query;
	          } else if (char == '?') {
	            url.host = base.host;
	            url.path = base.path.slice();
	            url.query = '';
	            state = QUERY;
	          } else if (char == '#') {
	            url.host = base.host;
	            url.path = base.path.slice();
	            url.query = base.query;
	            url.fragment = '';
	            state = FRAGMENT;
	          } else {
	            if (!startsWithWindowsDriveLetter(codePoints.slice(pointer).join(''))) {
	              url.host = base.host;
	              url.path = base.path.slice();
	              shortenURLsPath(url);
	            }
	            state = PATH;
	            continue;
	          }
	        } else {
	          state = PATH;
	          continue;
	        } break;

	      case FILE_SLASH:
	        if (char == '/' || char == '\\') {
	          state = FILE_HOST;
	          break;
	        }
	        if (base && base.scheme == 'file' && !startsWithWindowsDriveLetter(codePoints.slice(pointer).join(''))) {
	          if (isWindowsDriveLetter(base.path[0], true)) url.path.push(base.path[0]);
	          else url.host = base.host;
	        }
	        state = PATH;
	        continue;

	      case FILE_HOST:
	        if (char == EOF || char == '/' || char == '\\' || char == '?' || char == '#') {
	          if (!stateOverride && isWindowsDriveLetter(buffer)) {
	            state = PATH;
	          } else if (buffer == '') {
	            url.host = '';
	            if (stateOverride) return;
	            state = PATH_START;
	          } else {
	            failure = parseHost(url, buffer);
	            if (failure) return failure;
	            if (url.host == 'localhost') url.host = '';
	            if (stateOverride) return;
	            buffer = '';
	            state = PATH_START;
	          } continue;
	        } else buffer += char;
	        break;

	      case PATH_START:
	        if (isSpecial(url)) {
	          state = PATH;
	          if (char != '/' && char != '\\') continue;
	        } else if (!stateOverride && char == '?') {
	          url.query = '';
	          state = QUERY;
	        } else if (!stateOverride && char == '#') {
	          url.fragment = '';
	          state = FRAGMENT;
	        } else if (char != EOF) {
	          state = PATH;
	          if (char != '/') continue;
	        } break;

	      case PATH:
	        if (
	          char == EOF || char == '/' ||
	          (char == '\\' && isSpecial(url)) ||
	          (!stateOverride && (char == '?' || char == '#'))
	        ) {
	          if (isDoubleDot(buffer)) {
	            shortenURLsPath(url);
	            if (char != '/' && !(char == '\\' && isSpecial(url))) {
	              url.path.push('');
	            }
	          } else if (isSingleDot(buffer)) {
	            if (char != '/' && !(char == '\\' && isSpecial(url))) {
	              url.path.push('');
	            }
	          } else {
	            if (url.scheme == 'file' && !url.path.length && isWindowsDriveLetter(buffer)) {
	              if (url.host) url.host = '';
	              buffer = buffer.charAt(0) + ':'; // normalize windows drive letter
	            }
	            url.path.push(buffer);
	          }
	          buffer = '';
	          if (url.scheme == 'file' && (char == EOF || char == '?' || char == '#')) {
	            while (url.path.length > 1 && url.path[0] === '') {
	              url.path.shift();
	            }
	          }
	          if (char == '?') {
	            url.query = '';
	            state = QUERY;
	          } else if (char == '#') {
	            url.fragment = '';
	            state = FRAGMENT;
	          }
	        } else {
	          buffer += percentEncode(char, pathPercentEncodeSet);
	        } break;

	      case CANNOT_BE_A_BASE_URL_PATH:
	        if (char == '?') {
	          url.query = '';
	          state = QUERY;
	        } else if (char == '#') {
	          url.fragment = '';
	          state = FRAGMENT;
	        } else if (char != EOF) {
	          url.path[0] += percentEncode(char, C0ControlPercentEncodeSet);
	        } break;

	      case QUERY:
	        if (!stateOverride && char == '#') {
	          url.fragment = '';
	          state = FRAGMENT;
	        } else if (char != EOF) {
	          if (char == "'" && isSpecial(url)) url.query += '%27';
	          else if (char == '#') url.query += '%23';
	          else url.query += percentEncode(char, C0ControlPercentEncodeSet);
	        } break;

	      case FRAGMENT:
	        if (char != EOF) url.fragment += percentEncode(char, fragmentPercentEncodeSet);
	        break;
	    }

	    pointer++;
	  }
	};

	// `URL` constructor
	// https://url.spec.whatwg.org/#url-class
	var URLConstructor = function URL(url /* , base */) {
	  var that = anInstance(this, URLConstructor, 'URL');
	  var base = arguments.length > 1 ? arguments[1] : undefined;
	  var urlString = String(url);
	  var state = setInternalState$a(that, { type: 'URL' });
	  var baseState, failure;
	  if (base !== undefined) {
	    if (base instanceof URLConstructor) baseState = getInternalURLState(base);
	    else {
	      failure = parseURL(baseState = {}, String(base));
	      if (failure) throw TypeError(failure);
	    }
	  }
	  failure = parseURL(state, urlString, null, baseState);
	  if (failure) throw TypeError(failure);
	  var searchParams = state.searchParams = new URLSearchParams$1();
	  var searchParamsState = getInternalSearchParamsState(searchParams);
	  searchParamsState.updateSearchParams(state.query);
	  searchParamsState.updateURL = function () {
	    state.query = String(searchParams) || null;
	  };
	  if (!descriptors) {
	    that.href = serializeURL.call(that);
	    that.origin = getOrigin.call(that);
	    that.protocol = getProtocol.call(that);
	    that.username = getUsername.call(that);
	    that.password = getPassword.call(that);
	    that.host = getHost.call(that);
	    that.hostname = getHostname.call(that);
	    that.port = getPort.call(that);
	    that.pathname = getPathname.call(that);
	    that.search = getSearch.call(that);
	    that.searchParams = getSearchParams.call(that);
	    that.hash = getHash.call(that);
	  }
	};

	var URLPrototype = URLConstructor.prototype;

	var serializeURL = function () {
	  var url = getInternalURLState(this);
	  var scheme = url.scheme;
	  var username = url.username;
	  var password = url.password;
	  var host = url.host;
	  var port = url.port;
	  var path = url.path;
	  var query = url.query;
	  var fragment = url.fragment;
	  var output = scheme + ':';
	  if (host !== null) {
	    output += '//';
	    if (includesCredentials(url)) {
	      output += username + (password ? ':' + password : '') + '@';
	    }
	    output += serializeHost(host);
	    if (port !== null) output += ':' + port;
	  } else if (scheme == 'file') output += '//';
	  output += url.cannotBeABaseURL ? path[0] : path.length ? '/' + path.join('/') : '';
	  if (query !== null) output += '?' + query;
	  if (fragment !== null) output += '#' + fragment;
	  return output;
	};

	var getOrigin = function () {
	  var url = getInternalURLState(this);
	  var scheme = url.scheme;
	  var port = url.port;
	  if (scheme == 'blob') try {
	    return new URL(scheme.path[0]).origin;
	  } catch (error) {
	    return 'null';
	  }
	  if (scheme == 'file' || !isSpecial(url)) return 'null';
	  return scheme + '://' + serializeHost(url.host) + (port !== null ? ':' + port : '');
	};

	var getProtocol = function () {
	  return getInternalURLState(this).scheme + ':';
	};

	var getUsername = function () {
	  return getInternalURLState(this).username;
	};

	var getPassword = function () {
	  return getInternalURLState(this).password;
	};

	var getHost = function () {
	  var url = getInternalURLState(this);
	  var host = url.host;
	  var port = url.port;
	  return host === null ? ''
	    : port === null ? serializeHost(host)
	    : serializeHost(host) + ':' + port;
	};

	var getHostname = function () {
	  var host = getInternalURLState(this).host;
	  return host === null ? '' : serializeHost(host);
	};

	var getPort = function () {
	  var port = getInternalURLState(this).port;
	  return port === null ? '' : String(port);
	};

	var getPathname = function () {
	  var url = getInternalURLState(this);
	  var path = url.path;
	  return url.cannotBeABaseURL ? path[0] : path.length ? '/' + path.join('/') : '';
	};

	var getSearch = function () {
	  var query = getInternalURLState(this).query;
	  return query ? '?' + query : '';
	};

	var getSearchParams = function () {
	  return getInternalURLState(this).searchParams;
	};

	var getHash = function () {
	  var fragment = getInternalURLState(this).fragment;
	  return fragment ? '#' + fragment : '';
	};

	var accessorDescriptor = function (getter, setter) {
	  return { get: getter, set: setter, configurable: true, enumerable: true };
	};

	if (descriptors) {
	  objectDefineProperties(URLPrototype, {
	    // `URL.prototype.href` accessors pair
	    // https://url.spec.whatwg.org/#dom-url-href
	    href: accessorDescriptor(serializeURL, function (href) {
	      var url = getInternalURLState(this);
	      var urlString = String(href);
	      var failure = parseURL(url, urlString);
	      if (failure) throw TypeError(failure);
	      getInternalSearchParamsState(url.searchParams).updateSearchParams(url.query);
	    }),
	    // `URL.prototype.origin` getter
	    // https://url.spec.whatwg.org/#dom-url-origin
	    origin: accessorDescriptor(getOrigin),
	    // `URL.prototype.protocol` accessors pair
	    // https://url.spec.whatwg.org/#dom-url-protocol
	    protocol: accessorDescriptor(getProtocol, function (protocol) {
	      var url = getInternalURLState(this);
	      parseURL(url, String(protocol) + ':', SCHEME_START);
	    }),
	    // `URL.prototype.username` accessors pair
	    // https://url.spec.whatwg.org/#dom-url-username
	    username: accessorDescriptor(getUsername, function (username) {
	      var url = getInternalURLState(this);
	      var codePoints = arrayFrom(String(username));
	      if (cannotHaveUsernamePasswordPort(url)) return;
	      url.username = '';
	      for (var i = 0; i < codePoints.length; i++) {
	        url.username += percentEncode(codePoints[i], userinfoPercentEncodeSet);
	      }
	    }),
	    // `URL.prototype.password` accessors pair
	    // https://url.spec.whatwg.org/#dom-url-password
	    password: accessorDescriptor(getPassword, function (password) {
	      var url = getInternalURLState(this);
	      var codePoints = arrayFrom(String(password));
	      if (cannotHaveUsernamePasswordPort(url)) return;
	      url.password = '';
	      for (var i = 0; i < codePoints.length; i++) {
	        url.password += percentEncode(codePoints[i], userinfoPercentEncodeSet);
	      }
	    }),
	    // `URL.prototype.host` accessors pair
	    // https://url.spec.whatwg.org/#dom-url-host
	    host: accessorDescriptor(getHost, function (host) {
	      var url = getInternalURLState(this);
	      if (url.cannotBeABaseURL) return;
	      parseURL(url, String(host), HOST);
	    }),
	    // `URL.prototype.hostname` accessors pair
	    // https://url.spec.whatwg.org/#dom-url-hostname
	    hostname: accessorDescriptor(getHostname, function (hostname) {
	      var url = getInternalURLState(this);
	      if (url.cannotBeABaseURL) return;
	      parseURL(url, String(hostname), HOSTNAME);
	    }),
	    // `URL.prototype.port` accessors pair
	    // https://url.spec.whatwg.org/#dom-url-port
	    port: accessorDescriptor(getPort, function (port) {
	      var url = getInternalURLState(this);
	      if (cannotHaveUsernamePasswordPort(url)) return;
	      port = String(port);
	      if (port == '') url.port = null;
	      else parseURL(url, port, PORT);
	    }),
	    // `URL.prototype.pathname` accessors pair
	    // https://url.spec.whatwg.org/#dom-url-pathname
	    pathname: accessorDescriptor(getPathname, function (pathname) {
	      var url = getInternalURLState(this);
	      if (url.cannotBeABaseURL) return;
	      url.path = [];
	      parseURL(url, pathname + '', PATH_START);
	    }),
	    // `URL.prototype.search` accessors pair
	    // https://url.spec.whatwg.org/#dom-url-search
	    search: accessorDescriptor(getSearch, function (search) {
	      var url = getInternalURLState(this);
	      search = String(search);
	      if (search == '') {
	        url.query = null;
	      } else {
	        if ('?' == search.charAt(0)) search = search.slice(1);
	        url.query = '';
	        parseURL(url, search, QUERY);
	      }
	      getInternalSearchParamsState(url.searchParams).updateSearchParams(url.query);
	    }),
	    // `URL.prototype.searchParams` getter
	    // https://url.spec.whatwg.org/#dom-url-searchparams
	    searchParams: accessorDescriptor(getSearchParams),
	    // `URL.prototype.hash` accessors pair
	    // https://url.spec.whatwg.org/#dom-url-hash
	    hash: accessorDescriptor(getHash, function (hash) {
	      var url = getInternalURLState(this);
	      hash = String(hash);
	      if (hash == '') {
	        url.fragment = null;
	        return;
	      }
	      if ('#' == hash.charAt(0)) hash = hash.slice(1);
	      url.fragment = '';
	      parseURL(url, hash, FRAGMENT);
	    })
	  });
	}

	// `URL.prototype.toJSON` method
	// https://url.spec.whatwg.org/#dom-url-tojson
	redefine(URLPrototype, 'toJSON', function toJSON() {
	  return serializeURL.call(this);
	}, { enumerable: true });

	// `URL.prototype.toString` method
	// https://url.spec.whatwg.org/#URL-stringification-behavior
	redefine(URLPrototype, 'toString', function toString() {
	  return serializeURL.call(this);
	}, { enumerable: true });

	if (NativeURL) {
	  var nativeCreateObjectURL = NativeURL.createObjectURL;
	  var nativeRevokeObjectURL = NativeURL.revokeObjectURL;
	  // `URL.createObjectURL` method
	  // https://developer.mozilla.org/en-US/docs/Web/API/URL/createObjectURL
	  // eslint-disable-next-line no-unused-vars
	  if (nativeCreateObjectURL) redefine(URLConstructor, 'createObjectURL', function createObjectURL(blob) {
	    return nativeCreateObjectURL.apply(NativeURL, arguments);
	  });
	  // `URL.revokeObjectURL` method
	  // https://developer.mozilla.org/en-US/docs/Web/API/URL/revokeObjectURL
	  // eslint-disable-next-line no-unused-vars
	  if (nativeRevokeObjectURL) redefine(URLConstructor, 'revokeObjectURL', function revokeObjectURL(url) {
	    return nativeRevokeObjectURL.apply(NativeURL, arguments);
	  });
	}

	setToStringTag(URLConstructor, 'URL');

	_export({ global: true, forced: !nativeUrl, sham: !descriptors }, {
	  URL: URLConstructor
	});

	// `URL.prototype.toJSON` method
	// https://url.spec.whatwg.org/#dom-url-tojson
	_export({ target: 'URL', proto: true, enumerable: true }, {
	  toJSON: function toJSON() {
	    return URL.prototype.toString.call(this);
	  }
	});

	var runtime_1 = createCommonjsModule(function (module) {
	/**
	 * Copyright (c) 2014-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	var runtime = (function (exports) {

	  var Op = Object.prototype;
	  var hasOwn = Op.hasOwnProperty;
	  var undefined$1; // More compressible than void 0.
	  var $Symbol = typeof Symbol === "function" ? Symbol : {};
	  var iteratorSymbol = $Symbol.iterator || "@@iterator";
	  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
	  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

	  function wrap(innerFn, outerFn, self, tryLocsList) {
	    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
	    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
	    var generator = Object.create(protoGenerator.prototype);
	    var context = new Context(tryLocsList || []);

	    // The ._invoke method unifies the implementations of the .next,
	    // .throw, and .return methods.
	    generator._invoke = makeInvokeMethod(innerFn, self, context);

	    return generator;
	  }
	  exports.wrap = wrap;

	  // Try/catch helper to minimize deoptimizations. Returns a completion
	  // record like context.tryEntries[i].completion. This interface could
	  // have been (and was previously) designed to take a closure to be
	  // invoked without arguments, but in all the cases we care about we
	  // already have an existing method we want to call, so there's no need
	  // to create a new function object. We can even get away with assuming
	  // the method takes exactly one argument, since that happens to be true
	  // in every case, so we don't have to touch the arguments object. The
	  // only additional allocation required is the completion record, which
	  // has a stable shape and so hopefully should be cheap to allocate.
	  function tryCatch(fn, obj, arg) {
	    try {
	      return { type: "normal", arg: fn.call(obj, arg) };
	    } catch (err) {
	      return { type: "throw", arg: err };
	    }
	  }

	  var GenStateSuspendedStart = "suspendedStart";
	  var GenStateSuspendedYield = "suspendedYield";
	  var GenStateExecuting = "executing";
	  var GenStateCompleted = "completed";

	  // Returning this object from the innerFn has the same effect as
	  // breaking out of the dispatch switch statement.
	  var ContinueSentinel = {};

	  // Dummy constructor functions that we use as the .constructor and
	  // .constructor.prototype properties for functions that return Generator
	  // objects. For full spec compliance, you may wish to configure your
	  // minifier not to mangle the names of these two functions.
	  function Generator() {}
	  function GeneratorFunction() {}
	  function GeneratorFunctionPrototype() {}

	  // This is a polyfill for %IteratorPrototype% for environments that
	  // don't natively support it.
	  var IteratorPrototype = {};
	  IteratorPrototype[iteratorSymbol] = function () {
	    return this;
	  };

	  var getProto = Object.getPrototypeOf;
	  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
	  if (NativeIteratorPrototype &&
	      NativeIteratorPrototype !== Op &&
	      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
	    // This environment has a native %IteratorPrototype%; use it instead
	    // of the polyfill.
	    IteratorPrototype = NativeIteratorPrototype;
	  }

	  var Gp = GeneratorFunctionPrototype.prototype =
	    Generator.prototype = Object.create(IteratorPrototype);
	  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
	  GeneratorFunctionPrototype.constructor = GeneratorFunction;
	  GeneratorFunctionPrototype[toStringTagSymbol] =
	    GeneratorFunction.displayName = "GeneratorFunction";

	  // Helper for defining the .next, .throw, and .return methods of the
	  // Iterator interface in terms of a single ._invoke method.
	  function defineIteratorMethods(prototype) {
	    ["next", "throw", "return"].forEach(function(method) {
	      prototype[method] = function(arg) {
	        return this._invoke(method, arg);
	      };
	    });
	  }

	  exports.isGeneratorFunction = function(genFun) {
	    var ctor = typeof genFun === "function" && genFun.constructor;
	    return ctor
	      ? ctor === GeneratorFunction ||
	        // For the native GeneratorFunction constructor, the best we can
	        // do is to check its .name property.
	        (ctor.displayName || ctor.name) === "GeneratorFunction"
	      : false;
	  };

	  exports.mark = function(genFun) {
	    if (Object.setPrototypeOf) {
	      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
	    } else {
	      genFun.__proto__ = GeneratorFunctionPrototype;
	      if (!(toStringTagSymbol in genFun)) {
	        genFun[toStringTagSymbol] = "GeneratorFunction";
	      }
	    }
	    genFun.prototype = Object.create(Gp);
	    return genFun;
	  };

	  // Within the body of any async function, `await x` is transformed to
	  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
	  // `hasOwn.call(value, "__await")` to determine if the yielded value is
	  // meant to be awaited.
	  exports.awrap = function(arg) {
	    return { __await: arg };
	  };

	  function AsyncIterator(generator) {
	    function invoke(method, arg, resolve, reject) {
	      var record = tryCatch(generator[method], generator, arg);
	      if (record.type === "throw") {
	        reject(record.arg);
	      } else {
	        var result = record.arg;
	        var value = result.value;
	        if (value &&
	            typeof value === "object" &&
	            hasOwn.call(value, "__await")) {
	          return Promise.resolve(value.__await).then(function(value) {
	            invoke("next", value, resolve, reject);
	          }, function(err) {
	            invoke("throw", err, resolve, reject);
	          });
	        }

	        return Promise.resolve(value).then(function(unwrapped) {
	          // When a yielded Promise is resolved, its final value becomes
	          // the .value of the Promise<{value,done}> result for the
	          // current iteration.
	          result.value = unwrapped;
	          resolve(result);
	        }, function(error) {
	          // If a rejected Promise was yielded, throw the rejection back
	          // into the async generator function so it can be handled there.
	          return invoke("throw", error, resolve, reject);
	        });
	      }
	    }

	    var previousPromise;

	    function enqueue(method, arg) {
	      function callInvokeWithMethodAndArg() {
	        return new Promise(function(resolve, reject) {
	          invoke(method, arg, resolve, reject);
	        });
	      }

	      return previousPromise =
	        // If enqueue has been called before, then we want to wait until
	        // all previous Promises have been resolved before calling invoke,
	        // so that results are always delivered in the correct order. If
	        // enqueue has not been called before, then it is important to
	        // call invoke immediately, without waiting on a callback to fire,
	        // so that the async generator function has the opportunity to do
	        // any necessary setup in a predictable way. This predictability
	        // is why the Promise constructor synchronously invokes its
	        // executor callback, and why async functions synchronously
	        // execute code before the first await. Since we implement simple
	        // async functions in terms of async generators, it is especially
	        // important to get this right, even though it requires care.
	        previousPromise ? previousPromise.then(
	          callInvokeWithMethodAndArg,
	          // Avoid propagating failures to Promises returned by later
	          // invocations of the iterator.
	          callInvokeWithMethodAndArg
	        ) : callInvokeWithMethodAndArg();
	    }

	    // Define the unified helper method that is used to implement .next,
	    // .throw, and .return (see defineIteratorMethods).
	    this._invoke = enqueue;
	  }

	  defineIteratorMethods(AsyncIterator.prototype);
	  AsyncIterator.prototype[asyncIteratorSymbol] = function () {
	    return this;
	  };
	  exports.AsyncIterator = AsyncIterator;

	  // Note that simple async functions are implemented on top of
	  // AsyncIterator objects; they just return a Promise for the value of
	  // the final result produced by the iterator.
	  exports.async = function(innerFn, outerFn, self, tryLocsList) {
	    var iter = new AsyncIterator(
	      wrap(innerFn, outerFn, self, tryLocsList)
	    );

	    return exports.isGeneratorFunction(outerFn)
	      ? iter // If outerFn is a generator, return the full iterator.
	      : iter.next().then(function(result) {
	          return result.done ? result.value : iter.next();
	        });
	  };

	  function makeInvokeMethod(innerFn, self, context) {
	    var state = GenStateSuspendedStart;

	    return function invoke(method, arg) {
	      if (state === GenStateExecuting) {
	        throw new Error("Generator is already running");
	      }

	      if (state === GenStateCompleted) {
	        if (method === "throw") {
	          throw arg;
	        }

	        // Be forgiving, per 25.3.3.3.3 of the spec:
	        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
	        return doneResult();
	      }

	      context.method = method;
	      context.arg = arg;

	      while (true) {
	        var delegate = context.delegate;
	        if (delegate) {
	          var delegateResult = maybeInvokeDelegate(delegate, context);
	          if (delegateResult) {
	            if (delegateResult === ContinueSentinel) continue;
	            return delegateResult;
	          }
	        }

	        if (context.method === "next") {
	          // Setting context._sent for legacy support of Babel's
	          // function.sent implementation.
	          context.sent = context._sent = context.arg;

	        } else if (context.method === "throw") {
	          if (state === GenStateSuspendedStart) {
	            state = GenStateCompleted;
	            throw context.arg;
	          }

	          context.dispatchException(context.arg);

	        } else if (context.method === "return") {
	          context.abrupt("return", context.arg);
	        }

	        state = GenStateExecuting;

	        var record = tryCatch(innerFn, self, context);
	        if (record.type === "normal") {
	          // If an exception is thrown from innerFn, we leave state ===
	          // GenStateExecuting and loop back for another invocation.
	          state = context.done
	            ? GenStateCompleted
	            : GenStateSuspendedYield;

	          if (record.arg === ContinueSentinel) {
	            continue;
	          }

	          return {
	            value: record.arg,
	            done: context.done
	          };

	        } else if (record.type === "throw") {
	          state = GenStateCompleted;
	          // Dispatch the exception by looping back around to the
	          // context.dispatchException(context.arg) call above.
	          context.method = "throw";
	          context.arg = record.arg;
	        }
	      }
	    };
	  }

	  // Call delegate.iterator[context.method](context.arg) and handle the
	  // result, either by returning a { value, done } result from the
	  // delegate iterator, or by modifying context.method and context.arg,
	  // setting context.delegate to null, and returning the ContinueSentinel.
	  function maybeInvokeDelegate(delegate, context) {
	    var method = delegate.iterator[context.method];
	    if (method === undefined$1) {
	      // A .throw or .return when the delegate iterator has no .throw
	      // method always terminates the yield* loop.
	      context.delegate = null;

	      if (context.method === "throw") {
	        // Note: ["return"] must be used for ES3 parsing compatibility.
	        if (delegate.iterator["return"]) {
	          // If the delegate iterator has a return method, give it a
	          // chance to clean up.
	          context.method = "return";
	          context.arg = undefined$1;
	          maybeInvokeDelegate(delegate, context);

	          if (context.method === "throw") {
	            // If maybeInvokeDelegate(context) changed context.method from
	            // "return" to "throw", let that override the TypeError below.
	            return ContinueSentinel;
	          }
	        }

	        context.method = "throw";
	        context.arg = new TypeError(
	          "The iterator does not provide a 'throw' method");
	      }

	      return ContinueSentinel;
	    }

	    var record = tryCatch(method, delegate.iterator, context.arg);

	    if (record.type === "throw") {
	      context.method = "throw";
	      context.arg = record.arg;
	      context.delegate = null;
	      return ContinueSentinel;
	    }

	    var info = record.arg;

	    if (! info) {
	      context.method = "throw";
	      context.arg = new TypeError("iterator result is not an object");
	      context.delegate = null;
	      return ContinueSentinel;
	    }

	    if (info.done) {
	      // Assign the result of the finished delegate to the temporary
	      // variable specified by delegate.resultName (see delegateYield).
	      context[delegate.resultName] = info.value;

	      // Resume execution at the desired location (see delegateYield).
	      context.next = delegate.nextLoc;

	      // If context.method was "throw" but the delegate handled the
	      // exception, let the outer generator proceed normally. If
	      // context.method was "next", forget context.arg since it has been
	      // "consumed" by the delegate iterator. If context.method was
	      // "return", allow the original .return call to continue in the
	      // outer generator.
	      if (context.method !== "return") {
	        context.method = "next";
	        context.arg = undefined$1;
	      }

	    } else {
	      // Re-yield the result returned by the delegate method.
	      return info;
	    }

	    // The delegate iterator is finished, so forget it and continue with
	    // the outer generator.
	    context.delegate = null;
	    return ContinueSentinel;
	  }

	  // Define Generator.prototype.{next,throw,return} in terms of the
	  // unified ._invoke helper method.
	  defineIteratorMethods(Gp);

	  Gp[toStringTagSymbol] = "Generator";

	  // A Generator should always return itself as the iterator object when the
	  // @@iterator function is called on it. Some browsers' implementations of the
	  // iterator prototype chain incorrectly implement this, causing the Generator
	  // object to not be returned from this call. This ensures that doesn't happen.
	  // See https://github.com/facebook/regenerator/issues/274 for more details.
	  Gp[iteratorSymbol] = function() {
	    return this;
	  };

	  Gp.toString = function() {
	    return "[object Generator]";
	  };

	  function pushTryEntry(locs) {
	    var entry = { tryLoc: locs[0] };

	    if (1 in locs) {
	      entry.catchLoc = locs[1];
	    }

	    if (2 in locs) {
	      entry.finallyLoc = locs[2];
	      entry.afterLoc = locs[3];
	    }

	    this.tryEntries.push(entry);
	  }

	  function resetTryEntry(entry) {
	    var record = entry.completion || {};
	    record.type = "normal";
	    delete record.arg;
	    entry.completion = record;
	  }

	  function Context(tryLocsList) {
	    // The root entry object (effectively a try statement without a catch
	    // or a finally block) gives us a place to store values thrown from
	    // locations where there is no enclosing try statement.
	    this.tryEntries = [{ tryLoc: "root" }];
	    tryLocsList.forEach(pushTryEntry, this);
	    this.reset(true);
	  }

	  exports.keys = function(object) {
	    var keys = [];
	    for (var key in object) {
	      keys.push(key);
	    }
	    keys.reverse();

	    // Rather than returning an object with a next method, we keep
	    // things simple and return the next function itself.
	    return function next() {
	      while (keys.length) {
	        var key = keys.pop();
	        if (key in object) {
	          next.value = key;
	          next.done = false;
	          return next;
	        }
	      }

	      // To avoid creating an additional object, we just hang the .value
	      // and .done properties off the next function object itself. This
	      // also ensures that the minifier will not anonymize the function.
	      next.done = true;
	      return next;
	    };
	  };

	  function values(iterable) {
	    if (iterable) {
	      var iteratorMethod = iterable[iteratorSymbol];
	      if (iteratorMethod) {
	        return iteratorMethod.call(iterable);
	      }

	      if (typeof iterable.next === "function") {
	        return iterable;
	      }

	      if (!isNaN(iterable.length)) {
	        var i = -1, next = function next() {
	          while (++i < iterable.length) {
	            if (hasOwn.call(iterable, i)) {
	              next.value = iterable[i];
	              next.done = false;
	              return next;
	            }
	          }

	          next.value = undefined$1;
	          next.done = true;

	          return next;
	        };

	        return next.next = next;
	      }
	    }

	    // Return an iterator with no values.
	    return { next: doneResult };
	  }
	  exports.values = values;

	  function doneResult() {
	    return { value: undefined$1, done: true };
	  }

	  Context.prototype = {
	    constructor: Context,

	    reset: function(skipTempReset) {
	      this.prev = 0;
	      this.next = 0;
	      // Resetting context._sent for legacy support of Babel's
	      // function.sent implementation.
	      this.sent = this._sent = undefined$1;
	      this.done = false;
	      this.delegate = null;

	      this.method = "next";
	      this.arg = undefined$1;

	      this.tryEntries.forEach(resetTryEntry);

	      if (!skipTempReset) {
	        for (var name in this) {
	          // Not sure about the optimal order of these conditions:
	          if (name.charAt(0) === "t" &&
	              hasOwn.call(this, name) &&
	              !isNaN(+name.slice(1))) {
	            this[name] = undefined$1;
	          }
	        }
	      }
	    },

	    stop: function() {
	      this.done = true;

	      var rootEntry = this.tryEntries[0];
	      var rootRecord = rootEntry.completion;
	      if (rootRecord.type === "throw") {
	        throw rootRecord.arg;
	      }

	      return this.rval;
	    },

	    dispatchException: function(exception) {
	      if (this.done) {
	        throw exception;
	      }

	      var context = this;
	      function handle(loc, caught) {
	        record.type = "throw";
	        record.arg = exception;
	        context.next = loc;

	        if (caught) {
	          // If the dispatched exception was caught by a catch block,
	          // then let that catch block handle the exception normally.
	          context.method = "next";
	          context.arg = undefined$1;
	        }

	        return !! caught;
	      }

	      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	        var entry = this.tryEntries[i];
	        var record = entry.completion;

	        if (entry.tryLoc === "root") {
	          // Exception thrown outside of any try block that could handle
	          // it, so set the completion value of the entire function to
	          // throw the exception.
	          return handle("end");
	        }

	        if (entry.tryLoc <= this.prev) {
	          var hasCatch = hasOwn.call(entry, "catchLoc");
	          var hasFinally = hasOwn.call(entry, "finallyLoc");

	          if (hasCatch && hasFinally) {
	            if (this.prev < entry.catchLoc) {
	              return handle(entry.catchLoc, true);
	            } else if (this.prev < entry.finallyLoc) {
	              return handle(entry.finallyLoc);
	            }

	          } else if (hasCatch) {
	            if (this.prev < entry.catchLoc) {
	              return handle(entry.catchLoc, true);
	            }

	          } else if (hasFinally) {
	            if (this.prev < entry.finallyLoc) {
	              return handle(entry.finallyLoc);
	            }

	          } else {
	            throw new Error("try statement without catch or finally");
	          }
	        }
	      }
	    },

	    abrupt: function(type, arg) {
	      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	        var entry = this.tryEntries[i];
	        if (entry.tryLoc <= this.prev &&
	            hasOwn.call(entry, "finallyLoc") &&
	            this.prev < entry.finallyLoc) {
	          var finallyEntry = entry;
	          break;
	        }
	      }

	      if (finallyEntry &&
	          (type === "break" ||
	           type === "continue") &&
	          finallyEntry.tryLoc <= arg &&
	          arg <= finallyEntry.finallyLoc) {
	        // Ignore the finally entry if control is not jumping to a
	        // location outside the try/catch block.
	        finallyEntry = null;
	      }

	      var record = finallyEntry ? finallyEntry.completion : {};
	      record.type = type;
	      record.arg = arg;

	      if (finallyEntry) {
	        this.method = "next";
	        this.next = finallyEntry.finallyLoc;
	        return ContinueSentinel;
	      }

	      return this.complete(record);
	    },

	    complete: function(record, afterLoc) {
	      if (record.type === "throw") {
	        throw record.arg;
	      }

	      if (record.type === "break" ||
	          record.type === "continue") {
	        this.next = record.arg;
	      } else if (record.type === "return") {
	        this.rval = this.arg = record.arg;
	        this.method = "return";
	        this.next = "end";
	      } else if (record.type === "normal" && afterLoc) {
	        this.next = afterLoc;
	      }

	      return ContinueSentinel;
	    },

	    finish: function(finallyLoc) {
	      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	        var entry = this.tryEntries[i];
	        if (entry.finallyLoc === finallyLoc) {
	          this.complete(entry.completion, entry.afterLoc);
	          resetTryEntry(entry);
	          return ContinueSentinel;
	        }
	      }
	    },

	    "catch": function(tryLoc) {
	      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	        var entry = this.tryEntries[i];
	        if (entry.tryLoc === tryLoc) {
	          var record = entry.completion;
	          if (record.type === "throw") {
	            var thrown = record.arg;
	            resetTryEntry(entry);
	          }
	          return thrown;
	        }
	      }

	      // The context.catch method must only be called with a location
	      // argument that corresponds to a known catch block.
	      throw new Error("illegal catch attempt");
	    },

	    delegateYield: function(iterable, resultName, nextLoc) {
	      this.delegate = {
	        iterator: values(iterable),
	        resultName: resultName,
	        nextLoc: nextLoc
	      };

	      if (this.method === "next") {
	        // Deliberately forget the last sent value so that we don't
	        // accidentally pass it on to the delegate.
	        this.arg = undefined$1;
	      }

	      return ContinueSentinel;
	    }
	  };

	  // Regardless of whether this script is executing as a CommonJS module
	  // or not, return the runtime object so that we can declare the variable
	  // regeneratorRuntime in the outer scope, which allows this module to be
	  // injected easily by `bin/regenerator --include-runtime script.js`.
	  return exports;

	}(
	  // If this script is executing as a CommonJS module, use module.exports
	  // as the regeneratorRuntime namespace. Otherwise create a new empty
	  // object. Either way, the resulting object will be used to initialize
	  // the regeneratorRuntime variable at the top of this file.
	  module.exports
	));

	try {
	  regeneratorRuntime = runtime;
	} catch (accidentalStrictMode) {
	  // This module should not be running in strict mode, so the above
	  // assignment should always work unless something is misconfigured. Just
	  // in case runtime.js accidentally runs in strict mode, we can escape
	  // strict mode using a global Function call. This could conceivably fail
	  // if a Content Security Policy forbids using Function, but in that case
	  // the proper solution is to fix the accidental strict mode problem. If
	  // you've misconfigured your bundler to force strict mode and applied a
	  // CSP to forbid Function, and you're not willing to fix either of those
	  // problems, please detail your unique predicament in a GitHub issue.
	  Function("r", "regeneratorRuntime = r")(runtime);
	}
	});

	/**
	@license @nocompile
	Copyright (c) 2018 The Polymer Project Authors. All rights reserved.
	This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
	The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
	The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
	Code distributed by Google as part of the polymer project is also
	subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
	*/
	(function(){/*

	 Copyright (c) 2016 The Polymer Project Authors. All rights reserved.
	 This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
	 The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
	 The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
	 Code distributed by Google as part of the polymer project is also
	 subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
	*/
	var w;function aa(a){var b=0;return function(){return b<a.length?{done:!1,value:a[b++]}:{done:!0}}}function ca(a){var b="undefined"!=typeof Symbol&&Symbol.iterator&&a[Symbol.iterator];return b?b.call(a):{next:aa(a)}}function da(a){for(var b,c=[];!(b=a.next()).done;)c.push(b.value);return c}
	var ea="undefined"!=typeof window&&window===this?this:"undefined"!=typeof commonjsGlobal&&null!=commonjsGlobal?commonjsGlobal:this,ha="function"==typeof Object.defineProperties?Object.defineProperty:function(a,b,c){a!=Array.prototype&&a!=Object.prototype&&(a[b]=c.value);};function ia(){ia=function(){};ea.Symbol||(ea.Symbol=ja);}function ma(a,b){this.a=a;ha(this,"description",{configurable:!0,writable:!0,value:b});}ma.prototype.toString=function(){return this.a};
	var ja=function(){function a(c){if(this instanceof a)throw new TypeError("Symbol is not a constructor");return new ma("jscomp_symbol_"+(c||"")+"_"+b++,c)}var b=0;return a}();function na(){ia();var a=ea.Symbol.iterator;a||(a=ea.Symbol.iterator=ea.Symbol("Symbol.iterator"));"function"!=typeof Array.prototype[a]&&ha(Array.prototype,a,{configurable:!0,writable:!0,value:function(){return oa(aa(this))}});na=function(){};}
	function oa(a){na();a={next:a};a[ea.Symbol.iterator]=function(){return this};return a}var pa;if("function"==typeof Object.setPrototypeOf)pa=Object.setPrototypeOf;else{var ta;a:{var ua={Fa:!0},wa={};try{wa.__proto__=ua;ta=wa.Fa;break a}catch(a){}ta=!1;}pa=ta?function(a,b){a.__proto__=b;if(a.__proto__!==b)throw new TypeError(a+" is not extensible");return a}:null;}var xa=pa;function ya(){this.f=!1;this.b=null;this.U=void 0;this.a=1;this.F=0;this.c=null;}
	function za(a){if(a.f)throw new TypeError("Generator is already running");a.f=!0;}ya.prototype.u=function(a){this.U=a;};function Aa(a,b){a.c={Ia:b,Ma:!0};a.a=a.F;}ya.prototype.return=function(a){this.c={return:a};this.a=this.F;};function Ba(a,b){a.a=3;return {value:b}}function Ca(a){this.a=new ya;this.b=a;}function Da(a,b){za(a.a);var c=a.a.b;if(c)return Ea(a,"return"in c?c["return"]:function(d){return {value:d,done:!0}},b,a.a.return);a.a.return(b);return Fa(a)}
	function Ea(a,b,c,d){try{var e=b.call(a.a.b,c);if(!(e instanceof Object))throw new TypeError("Iterator result "+e+" is not an object");if(!e.done)return a.a.f=!1,e;var f=e.value;}catch(g){return a.a.b=null,Aa(a.a,g),Fa(a)}a.a.b=null;d.call(a.a,f);return Fa(a)}function Fa(a){for(;a.a.a;)try{var b=a.b(a.a);if(b)return a.a.f=!1,{value:b.value,done:!1}}catch(c){a.a.U=void 0,Aa(a.a,c);}a.a.f=!1;if(a.a.c){b=a.a.c;a.a.c=null;if(b.Ma)throw b.Ia;return {value:b.return,done:!0}}return {value:void 0,done:!0}}
	function Ga(a){this.next=function(b){za(a.a);a.a.b?b=Ea(a,a.a.b.next,b,a.a.u):(a.a.u(b),b=Fa(a));return b};this.throw=function(b){za(a.a);a.a.b?b=Ea(a,a.a.b["throw"],b,a.a.u):(Aa(a.a,b),b=Fa(a));return b};this.return=function(b){return Da(a,b)};na();this[Symbol.iterator]=function(){return this};}function Ha(a,b){b=new Ga(new Ca(b));xa&&xa(b,a.prototype);return b}Array.from||(Array.from=function(a){return [].slice.call(a)});
	Object.assign||(Object.assign=function(a){for(var b=[].slice.call(arguments,1),c=0,d;c<b.length;c++)if(d=b[c])for(var e=a,f=d,g=Object.getOwnPropertyNames(f),h=0;h<g.length;h++)d=g[h],e[d]=f[d];return a});(function(){if(!function(){var f=document.createEvent("Event");f.initEvent("foo",!0,!0);f.preventDefault();return f.defaultPrevented}()){var a=Event.prototype.preventDefault;Event.prototype.preventDefault=function(){this.cancelable&&(a.call(this),Object.defineProperty(this,"defaultPrevented",{get:function(){return !0},configurable:!0}));};}var b=/Trident/.test(navigator.userAgent);if(!window.Event||b&&"function"!==typeof window.Event){var c=window.Event;window.Event=function(f,g){g=g||{};var h=document.createEvent("Event");
	h.initEvent(f,!!g.bubbles,!!g.cancelable);return h};if(c){for(var d in c)window.Event[d]=c[d];window.Event.prototype=c.prototype;}}if(!window.CustomEvent||b&&"function"!==typeof window.CustomEvent)window.CustomEvent=function(f,g){g=g||{};var h=document.createEvent("CustomEvent");h.initCustomEvent(f,!!g.bubbles,!!g.cancelable,g.detail);return h},window.CustomEvent.prototype=window.Event.prototype;if(!window.MouseEvent||b&&"function"!==typeof window.MouseEvent){b=window.MouseEvent;window.MouseEvent=
	function(f,g){g=g||{};var h=document.createEvent("MouseEvent");h.initMouseEvent(f,!!g.bubbles,!!g.cancelable,g.view||window,g.detail,g.screenX,g.screenY,g.clientX,g.clientY,g.ctrlKey,g.altKey,g.shiftKey,g.metaKey,g.button,g.relatedTarget);return h};if(b)for(var e in b)window.MouseEvent[e]=b[e];window.MouseEvent.prototype=b.prototype;}})();(function(){function a(){}function b(p,t){if(!p.childNodes.length)return [];switch(p.nodeType){case Node.DOCUMENT_NODE:return F.call(p,t);case Node.DOCUMENT_FRAGMENT_NODE:return C.call(p,t);default:return r.call(p,t)}}var c="undefined"===typeof HTMLTemplateElement,d=!(document.createDocumentFragment().cloneNode()instanceof DocumentFragment),e=!1;/Trident/.test(navigator.userAgent)&&function(){function p(z,S){if(z instanceof DocumentFragment)for(var cb;cb=z.firstChild;)D.call(this,cb,S);else D.call(this,
	z,S);return z}e=!0;var t=Node.prototype.cloneNode;Node.prototype.cloneNode=function(z){z=t.call(this,z);this instanceof DocumentFragment&&(z.__proto__=DocumentFragment.prototype);return z};DocumentFragment.prototype.querySelectorAll=HTMLElement.prototype.querySelectorAll;DocumentFragment.prototype.querySelector=HTMLElement.prototype.querySelector;Object.defineProperties(DocumentFragment.prototype,{nodeType:{get:function(){return Node.DOCUMENT_FRAGMENT_NODE},configurable:!0},localName:{get:function(){},
	configurable:!0},nodeName:{get:function(){return "#document-fragment"},configurable:!0}});var D=Node.prototype.insertBefore;Node.prototype.insertBefore=p;var K=Node.prototype.appendChild;Node.prototype.appendChild=function(z){z instanceof DocumentFragment?p.call(this,z,null):K.call(this,z);return z};var ba=Node.prototype.removeChild,ka=Node.prototype.replaceChild;Node.prototype.replaceChild=function(z,S){z instanceof DocumentFragment?(p.call(this,z,S),ba.call(this,S)):ka.call(this,z,S);return S};Document.prototype.createDocumentFragment=
	function(){var z=this.createElement("df");z.__proto__=DocumentFragment.prototype;return z};var qa=Document.prototype.importNode;Document.prototype.importNode=function(z,S){S=qa.call(this,z,S||!1);z instanceof DocumentFragment&&(S.__proto__=DocumentFragment.prototype);return S};}();var f=Node.prototype.cloneNode,g=Document.prototype.createElement,h=Document.prototype.importNode,k=Node.prototype.removeChild,l=Node.prototype.appendChild,m=Node.prototype.replaceChild,q=DOMParser.prototype.parseFromString,
	H=Object.getOwnPropertyDescriptor(window.HTMLElement.prototype,"innerHTML")||{get:function(){return this.innerHTML},set:function(p){this.innerHTML=p;}},E=Object.getOwnPropertyDescriptor(window.Node.prototype,"childNodes")||{get:function(){return this.childNodes}},r=Element.prototype.querySelectorAll,F=Document.prototype.querySelectorAll,C=DocumentFragment.prototype.querySelectorAll,N=function(){if(!c){var p=document.createElement("template"),t=document.createElement("template");t.content.appendChild(document.createElement("div"));
	p.content.appendChild(t);p=p.cloneNode(!0);return 0===p.content.childNodes.length||0===p.content.firstChild.content.childNodes.length||d}}();if(c){var y=document.implementation.createHTMLDocument("template"),X=!0,v=document.createElement("style");v.textContent="template{display:none;}";var ra=document.head;ra.insertBefore(v,ra.firstElementChild);a.prototype=Object.create(HTMLElement.prototype);var fa=!document.createElement("div").hasOwnProperty("innerHTML");a.S=function(p){if(!p.content&&p.namespaceURI===
	document.documentElement.namespaceURI){p.content=y.createDocumentFragment();for(var t;t=p.firstChild;)l.call(p.content,t);if(fa)p.__proto__=a.prototype;else if(p.cloneNode=function(D){return a.b(this,D)},X)try{n(p),I(p);}catch(D){X=!1;}a.a(p.content);}};var sa={option:["select"],thead:["table"],col:["colgroup","table"],tr:["tbody","table"],th:["tr","tbody","table"],td:["tr","tbody","table"]},n=function(p){Object.defineProperty(p,"innerHTML",{get:function(){return va(this)},set:function(t){var D=sa[(/<([a-z][^/\0>\x20\t\r\n\f]+)/i.exec(t)||
	["",""])[1].toLowerCase()];if(D)for(var K=0;K<D.length;K++)t="<"+D[K]+">"+t+"</"+D[K]+">";y.body.innerHTML=t;for(a.a(y);this.content.firstChild;)k.call(this.content,this.content.firstChild);t=y.body;if(D)for(K=0;K<D.length;K++)t=t.lastChild;for(;t.firstChild;)l.call(this.content,t.firstChild);},configurable:!0});},I=function(p){Object.defineProperty(p,"outerHTML",{get:function(){return "<template>"+this.innerHTML+"</template>"},set:function(t){if(this.parentNode){y.body.innerHTML=t;for(t=this.ownerDocument.createDocumentFragment();y.body.firstChild;)l.call(t,
	y.body.firstChild);m.call(this.parentNode,t,this);}else throw Error("Failed to set the 'outerHTML' property on 'Element': This element has no parent node.");},configurable:!0});};n(a.prototype);I(a.prototype);a.a=function(p){p=b(p,"template");for(var t=0,D=p.length,K;t<D&&(K=p[t]);t++)a.S(K);};document.addEventListener("DOMContentLoaded",function(){a.a(document);});Document.prototype.createElement=function(){var p=g.apply(this,arguments);"template"===p.localName&&a.S(p);return p};DOMParser.prototype.parseFromString=
	function(){var p=q.apply(this,arguments);a.a(p);return p};Object.defineProperty(HTMLElement.prototype,"innerHTML",{get:function(){return va(this)},set:function(p){H.set.call(this,p);a.a(this);},configurable:!0,enumerable:!0});var la=/[&\u00A0"]/g,Xb=/[&\u00A0<>]/g,db=function(p){switch(p){case "&":return "&amp;";case "<":return "&lt;";case ">":return "&gt;";case '"':return "&quot;";case "\u00a0":return "&nbsp;"}};v=function(p){for(var t={},D=0;D<p.length;D++)t[p[D]]=!0;return t};var Ra=v("area base br col command embed hr img input keygen link meta param source track wbr".split(" ")),
	eb=v("style script xmp iframe noembed noframes plaintext noscript".split(" ")),va=function(p,t){"template"===p.localName&&(p=p.content);for(var D="",K=t?t(p):E.get.call(p),ba=0,ka=K.length,qa;ba<ka&&(qa=K[ba]);ba++){a:{var z=qa;var S=p;var cb=t;switch(z.nodeType){case Node.ELEMENT_NODE:for(var Yb=z.localName,fb="<"+Yb,cg=z.attributes,ud=0;S=cg[ud];ud++)fb+=" "+S.name+'="'+S.value.replace(la,db)+'"';fb+=">";z=Ra[Yb]?fb:fb+va(z,cb)+"</"+Yb+">";break a;case Node.TEXT_NODE:z=z.data;z=S&&eb[S.localName]?
	z:z.replace(Xb,db);break a;case Node.COMMENT_NODE:z="\x3c!--"+z.data+"--\x3e";break a;default:throw window.console.error(z),Error("not implemented");}}D+=z;}return D};}if(c||N){a.b=function(p,t){var D=f.call(p,!1);this.S&&this.S(D);t&&(l.call(D.content,f.call(p.content,!0)),u(D.content,p.content));return D};var u=function(p,t){if(t.querySelectorAll&&(t=b(t,"template"),0!==t.length)){p=b(p,"template");for(var D=0,K=p.length,ba,ka;D<K;D++)ka=t[D],ba=p[D],a&&a.S&&a.S(ka),m.call(ba.parentNode,G.call(ka,
	!0),ba);}},G=Node.prototype.cloneNode=function(p){if(!e&&d&&this instanceof DocumentFragment)if(p)var t=J.call(this.ownerDocument,this,!0);else return this.ownerDocument.createDocumentFragment();else this.nodeType===Node.ELEMENT_NODE&&"template"===this.localName&&this.namespaceURI==document.documentElement.namespaceURI?t=a.b(this,p):t=f.call(this,p);p&&u(t,this);return t},J=Document.prototype.importNode=function(p,t){t=t||!1;if("template"===p.localName)return a.b(p,t);var D=h.call(this,p,t);if(t){u(D,
	p);p=b(D,'script:not([type]),script[type="application/javascript"],script[type="text/javascript"]');for(var K,ba=0;ba<p.length;ba++){K=p[ba];t=g.call(document,"script");t.textContent=K.textContent;for(var ka=K.attributes,qa=0,z;qa<ka.length;qa++)z=ka[qa],t.setAttribute(z.name,z.value);m.call(K.parentNode,t,K);}}return D};}c&&(window.HTMLTemplateElement=a);})();var Ia=setTimeout;function Ja(){}function Ka(a,b){return function(){a.apply(b,arguments);}}function x(a){if(!(this instanceof x))throw new TypeError("Promises must be constructed via new");if("function"!==typeof a)throw new TypeError("not a function");this.K=0;this.pa=!1;this.w=void 0;this.V=[];La(a,this);}
	function Ma(a,b){for(;3===a.K;)a=a.w;0===a.K?a.V.push(b):(a.pa=!0,Na(function(){var c=1===a.K?b.Oa:b.Pa;if(null===c)(1===a.K?Oa:Pa)(b.na,a.w);else{try{var d=c(a.w);}catch(e){Pa(b.na,e);return}Oa(b.na,d);}}));}function Oa(a,b){try{if(b===a)throw new TypeError("A promise cannot be resolved with itself.");if(b&&("object"===typeof b||"function"===typeof b)){var c=b.then;if(b instanceof x){a.K=3;a.w=b;Qa(a);return}if("function"===typeof c){La(Ka(c,b),a);return}}a.K=1;a.w=b;Qa(a);}catch(d){Pa(a,d);}}
	function Pa(a,b){a.K=2;a.w=b;Qa(a);}function Qa(a){2===a.K&&0===a.V.length&&Na(function(){a.pa||"undefined"!==typeof console&&console&&console.warn("Possible Unhandled Promise Rejection:",a.w);});for(var b=0,c=a.V.length;b<c;b++)Ma(a,a.V[b]);a.V=null;}function Sa(a,b,c){this.Oa="function"===typeof a?a:null;this.Pa="function"===typeof b?b:null;this.na=c;}function La(a,b){var c=!1;try{a(function(d){c||(c=!0,Oa(b,d));},function(d){c||(c=!0,Pa(b,d));});}catch(d){c||(c=!0,Pa(b,d));}}
	x.prototype["catch"]=function(a){return this.then(null,a)};x.prototype.then=function(a,b){var c=new this.constructor(Ja);Ma(this,new Sa(a,b,c));return c};x.prototype["finally"]=function(a){var b=this.constructor;return this.then(function(c){return b.resolve(a()).then(function(){return c})},function(c){return b.resolve(a()).then(function(){return b.reject(c)})})};
	function Ta(a){return new x(function(b,c){function d(h,k){try{if(k&&("object"===typeof k||"function"===typeof k)){var l=k.then;if("function"===typeof l){l.call(k,function(m){d(h,m);},c);return}}e[h]=k;0===--f&&b(e);}catch(m){c(m);}}if(!a||"undefined"===typeof a.length)throw new TypeError("Promise.all accepts an array");var e=Array.prototype.slice.call(a);if(0===e.length)return b([]);for(var f=e.length,g=0;g<e.length;g++)d(g,e[g]);})}
	function Ua(a){return a&&"object"===typeof a&&a.constructor===x?a:new x(function(b){b(a);})}function Va(a){return new x(function(b,c){c(a);})}function Wa(a){return new x(function(b,c){for(var d=0,e=a.length;d<e;d++)a[d].then(b,c);})}var Na="function"===typeof setImmediate&&function(a){setImmediate(a);}||function(a){Ia(a,0);};/*

	Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
	This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
	The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
	The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
	Code distributed by Google as part of the polymer project is also
	subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
	*/
	if(!window.Promise){window.Promise=x;x.prototype.then=x.prototype.then;x.all=Ta;x.race=Wa;x.resolve=Ua;x.reject=Va;var Xa=document.createTextNode(""),Ya=[];(new MutationObserver(function(){for(var a=Ya.length,b=0;b<a;b++)Ya[b]();Ya.splice(0,a);})).observe(Xa,{characterData:!0});Na=function(a){Ya.push(a);Xa.textContent=0<Xa.textContent.length?"":"a";};}(function(a,b){if(!(b in a)){var c=typeof commonjsGlobal===typeof c?window:commonjsGlobal,d=0,e=""+Math.random(),f="__\u0001symbol@@"+e,g=a.getOwnPropertyNames,h=a.getOwnPropertyDescriptor,k=a.create,l=a.keys,m=a.freeze||a,q=a.defineProperty,H=a.defineProperties,E=h(a,"getOwnPropertyNames"),r=a.prototype,F=r.hasOwnProperty,C=r.propertyIsEnumerable,N=r.toString,y=function(u,G,J){F.call(u,f)||q(u,f,{enumerable:!1,configurable:!1,writable:!1,value:{}});u[f]["@@"+G]=J;},X=function(u,G){var J=k(u);g(G).forEach(function(p){sa.call(G,
	p)&&Ra(J,p,G[p]);});return J},v=function(){},ra=function(u){return u!=f&&!F.call(la,u)},fa=function(u){return u!=f&&F.call(la,u)},sa=function(u){var G=""+u;return fa(G)?F.call(this,G)&&this[f]["@@"+G]:C.call(this,u)},n=function(u){q(r,u,{enumerable:!1,configurable:!0,get:v,set:function(G){va(this,u,{enumerable:!1,configurable:!0,writable:!0,value:G});y(this,u,!0);}});return m(la[u]=q(a(u),"constructor",Xb))},I=function(u){if(this&&this!==c)throw new TypeError("Symbol is not a constructor");return n("__\u0001symbol:".concat(u||
	"",e,++d))},la=k(null),Xb={value:I},db=function(u){return la[u]},Ra=function(u,G,J){var p=""+G;if(fa(p)){G=va;if(J.enumerable){var t=k(J);t.enumerable=!1;}else t=J;G(u,p,t);y(u,p,!!J.enumerable);}else q(u,G,J);return u},eb=function(u){return g(u).filter(fa).map(db)};E.value=Ra;q(a,"defineProperty",E);E.value=eb;q(a,b,E);E.value=function(u){return g(u).filter(ra)};q(a,"getOwnPropertyNames",E);E.value=function(u,G){var J=eb(G);J.length?l(G).concat(J).forEach(function(p){sa.call(G,p)&&Ra(u,p,G[p]);}):H(u,
	G);return u};q(a,"defineProperties",E);E.value=sa;q(r,"propertyIsEnumerable",E);E.value=I;q(c,"Symbol",E);E.value=function(u){u="__\u0001symbol:".concat("__\u0001symbol:",u,e);return u in r?la[u]:n(u)};q(I,"for",E);E.value=function(u){if(ra(u))throw new TypeError(u+" is not a symbol");return F.call(la,u)?u.slice(20,-e.length):void 0};q(I,"keyFor",E);E.value=function(u,G){var J=h(u,G);J&&fa(G)&&(J.enumerable=sa.call(u,G));return J};q(a,"getOwnPropertyDescriptor",E);E.value=function(u,G){return 1===
	arguments.length?k(u):X(u,G)};q(a,"create",E);E.value=function(){var u=N.call(this);return "[object String]"===u&&fa(this)?"[object Symbol]":u};q(r,"toString",E);try{var va=k(q({},"__\u0001symbol:",{get:function(){return q(this,"__\u0001symbol:",{value:!1})["__\u0001symbol:"]}}))["__\u0001symbol:"]||q;}catch(u){va=function(G,J,p){var t=h(r,J);delete r[J];q(G,J,p);q(r,J,t);};}}})(Object,"getOwnPropertySymbols");
	(function(a){var b=a.defineProperty,c=a.prototype,d=c.toString,e;"iterator match replace search split hasInstance isConcatSpreadable unscopables species toPrimitive toStringTag".split(" ").forEach(function(f){if(!(f in Symbol))switch(b(Symbol,f,{value:Symbol(f)}),f){case "toStringTag":e=a.getOwnPropertyDescriptor(c,"toString"),e.value=function(){var g=d.call(this),h=this[Symbol.toStringTag];return "undefined"===typeof h?g:"[object "+h+"]"},b(c,"toString",e);}});})(Object,Symbol);
	(function(a,b,c){function d(){return this}b[a]||(b[a]=function(){var e=0,f=this,g={next:function(){var h=f.length<=e;return h?{done:h}:{done:h,value:f[e++]}}};g[a]=d;return g});c[a]||(c[a]=function(){var e=String.fromCodePoint,f=this,g=0,h=f.length,k={next:function(){var l=h<=g,m=l?"":e(f.codePointAt(g));g+=m.length;return l?{done:l}:{done:l,value:m}}};k[a]=d;return k});})(Symbol.iterator,Array.prototype,String.prototype);/*

	Copyright (c) 2018 The Polymer Project Authors. All rights reserved.
	This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
	The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
	The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
	Code distributed by Google as part of the polymer project is also
	subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
	*/
	var Za=Object.prototype.toString;Object.prototype.toString=function(){return void 0===this?"[object Undefined]":null===this?"[object Null]":Za.call(this)};Object.keys=function(a){return Object.getOwnPropertyNames(a).filter(function(b){return (b=Object.getOwnPropertyDescriptor(a,b))&&b.enumerable})};var $a=window.Symbol.iterator;
	String.prototype[$a]&&String.prototype.codePointAt||(String.prototype[$a]=function ab(){var b,c=this;return Ha(ab,function(d){1==d.a&&(b=0);if(3!=d.a)return b<c.length?d=Ba(d,c[b]):(d.a=0,d=void 0),d;b++;d.a=2;})});Set.prototype[$a]||(Set.prototype[$a]=function bb(){var b,c=this,d;return Ha(bb,function(e){1==e.a&&(b=[],c.forEach(function(f){b.push(f);}),d=0);if(3!=e.a)return d<b.length?e=Ba(e,b[d]):(e.a=0,e=void 0),e;d++;e.a=2;})});
	Map.prototype[$a]||(Map.prototype[$a]=function gb(){var b,c=this,d;return Ha(gb,function(e){1==e.a&&(b=[],c.forEach(function(f,g){b.push([g,f]);}),d=0);if(3!=e.a)return d<b.length?e=Ba(e,b[d]):(e.a=0,e=void 0),e;d++;e.a=2;})});/*

	 Copyright (c) 2014 The Polymer Project Authors. All rights reserved.
	 This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
	 The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
	 The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
	 Code distributed by Google as part of the polymer project is also
	 subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
	*/
	window.WebComponents=window.WebComponents||{flags:{}};var hb=document.querySelector('script[src*="webcomponents-bundle"]'),ib=/wc-(.+)/,A={};if(!A.noOpts){location.search.slice(1).split("&").forEach(function(a){a=a.split("=");var b;a[0]&&(b=a[0].match(ib))&&(A[b[1]]=a[1]||!0);});if(hb)for(var jb=0,kb=void 0;kb=hb.attributes[jb];jb++)"src"!==kb.name&&(A[kb.name]=kb.value||!0);if(A.log&&A.log.split){var lb=A.log.split(",");A.log={};lb.forEach(function(a){A.log[a]=!0;});}else A.log={};}
	window.WebComponents.flags=A;var mb=A.shadydom;if(mb){window.ShadyDOM=window.ShadyDOM||{};window.ShadyDOM.force=mb;var nb=A.noPatch;window.ShadyDOM.noPatch="true"===nb?!0:nb;}var ob=A.register||A.ce;ob&&window.customElements&&(window.customElements.forcePolyfill=ob);/*

	Copyright (c) 2016 The Polymer Project Authors. All rights reserved.
	This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
	The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
	The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
	Code distributed by Google as part of the polymer project is also
	subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
	*/
	function pb(){}pb.prototype.toJSON=function(){return {}};function B(a){a.__shady||(a.__shady=new pb);return a.__shady}function L(a){return a&&a.__shady}var M=window.ShadyDOM||{};M.Ka=!(!Element.prototype.attachShadow||!Node.prototype.getRootNode);var qb=Object.getOwnPropertyDescriptor(Node.prototype,"firstChild");M.D=!!(qb&&qb.configurable&&qb.get);M.ia=M.force||!M.Ka;M.G=M.noPatch||!1;M.ma=M.preferPerformance;M.la="on-demand"===M.G;M.ya=navigator.userAgent.match("Trident");function rb(a){return (a=L(a))&&void 0!==a.firstChild}function O(a){return a instanceof ShadowRoot}function sb(a){return (a=(a=L(a))&&a.root)&&tb(a)}
	var ub=Element.prototype,vb=ub.matches||ub.matchesSelector||ub.mozMatchesSelector||ub.msMatchesSelector||ub.oMatchesSelector||ub.webkitMatchesSelector,wb=document.createTextNode(""),xb=0,yb=[];(new MutationObserver(function(){for(;yb.length;)try{yb.shift()();}catch(a){throw wb.textContent=xb++,a;}})).observe(wb,{characterData:!0});function zb(a){yb.push(a);wb.textContent=xb++;}var Ab=!!document.contains;function Bb(a,b){for(;b;){if(b==a)return !0;b=b.__shady_parentNode;}return !1}
	function Cb(a){for(var b=a.length-1;0<=b;b--){var c=a[b],d=c.getAttribute("id")||c.getAttribute("name");d&&"length"!==d&&isNaN(d)&&(a[d]=c);}a.item=function(e){return a[e]};a.namedItem=function(e){if("length"!==e&&isNaN(e)&&a[e])return a[e];for(var f=ca(a),g=f.next();!g.done;g=f.next())if(g=g.value,(g.getAttribute("id")||g.getAttribute("name"))==e)return g;return null};return a}function Db(a){var b=[];for(a=a.__shady_native_firstChild;a;a=a.__shady_native_nextSibling)b.push(a);return b}
	function Eb(a){var b=[];for(a=a.__shady_firstChild;a;a=a.__shady_nextSibling)b.push(a);return b}function Fb(a,b,c){c.configurable=!0;if(c.value)a[b]=c.value;else try{Object.defineProperty(a,b,c);}catch(d){}}function P(a,b,c,d){c=void 0===c?"":c;for(var e in b)d&&0<=d.indexOf(e)||Fb(a,c+e,b[e]);}function Gb(a,b){for(var c in b)c in a&&Fb(a,c,b[c]);}function Q(a){var b={};Object.getOwnPropertyNames(a).forEach(function(c){b[c]=Object.getOwnPropertyDescriptor(a,c);});return b}var Hb=[],Ib;function Jb(a){Ib||(Ib=!0,zb(Kb));Hb.push(a);}function Kb(){Ib=!1;for(var a=!!Hb.length;Hb.length;)Hb.shift()();return a}Kb.list=Hb;function Lb(){this.a=!1;this.addedNodes=[];this.removedNodes=[];this.ba=new Set;}function Mb(a){a.a||(a.a=!0,zb(function(){a.flush();}));}Lb.prototype.flush=function(){if(this.a){this.a=!1;var a=this.takeRecords();a.length&&this.ba.forEach(function(b){b(a);});}};Lb.prototype.takeRecords=function(){if(this.addedNodes.length||this.removedNodes.length){var a=[{addedNodes:this.addedNodes,removedNodes:this.removedNodes}];this.addedNodes=[];this.removedNodes=[];return a}return []};
	function Nb(a,b){var c=B(a);c.W||(c.W=new Lb);c.W.ba.add(b);var d=c.W;return {Ca:b,P:d,Da:a,takeRecords:function(){return d.takeRecords()}}}function Ob(a){var b=a&&a.P;b&&(b.ba.delete(a.Ca),b.ba.size||(B(a.Da).W=null));}
	function Pb(a,b){var c=b.getRootNode();return a.map(function(d){var e=c===d.target.getRootNode();if(e&&d.addedNodes){if(e=Array.from(d.addedNodes).filter(function(f){return c===f.getRootNode()}),e.length)return d=Object.create(d),Object.defineProperty(d,"addedNodes",{value:e,configurable:!0}),d}else if(e)return d}).filter(function(d){return d})}var Qb=/[&\u00A0"]/g,Rb=/[&\u00A0<>]/g;function Sb(a){switch(a){case "&":return "&amp;";case "<":return "&lt;";case ">":return "&gt;";case '"':return "&quot;";case "\u00a0":return "&nbsp;"}}function Tb(a){for(var b={},c=0;c<a.length;c++)b[a[c]]=!0;return b}var Ub=Tb("area base br col command embed hr img input keygen link meta param source track wbr".split(" ")),Vb=Tb("style script xmp iframe noembed noframes plaintext noscript".split(" "));
	function Wb(a,b){"template"===a.localName&&(a=a.content);for(var c="",d=b?b(a):a.childNodes,e=0,f=d.length,g=void 0;e<f&&(g=d[e]);e++){a:{var h=g;var k=a,l=b;switch(h.nodeType){case Node.ELEMENT_NODE:k=h.localName;for(var m="<"+k,q=h.attributes,H=0,E;E=q[H];H++)m+=" "+E.name+'="'+E.value.replace(Qb,Sb)+'"';m+=">";h=Ub[k]?m:m+Wb(h,l)+"</"+k+">";break a;case Node.TEXT_NODE:h=h.data;h=k&&Vb[k.localName]?h:h.replace(Rb,Sb);break a;case Node.COMMENT_NODE:h="\x3c!--"+h.data+"--\x3e";break a;default:throw window.console.error(h),
	Error("not implemented");}}c+=h;}return c}var Zb=M.D,$b={querySelector:function(a){return this.__shady_native_querySelector(a)},querySelectorAll:function(a){return this.__shady_native_querySelectorAll(a)}},ac={};function bc(a){ac[a]=function(b){return b["__shady_native_"+a]};}function cc(a,b){P(a,b,"__shady_native_");for(var c in b)bc(c);}function R(a,b){b=void 0===b?[]:b;for(var c=0;c<b.length;c++){var d=b[c],e=Object.getOwnPropertyDescriptor(a,d);e&&(Object.defineProperty(a,"__shady_native_"+d,e),e.value?$b[d]||($b[d]=e.value):bc(d));}}
	var dc=document.createTreeWalker(document,NodeFilter.SHOW_ALL,null,!1),ec=document.createTreeWalker(document,NodeFilter.SHOW_ELEMENT,null,!1),fc=document.implementation.createHTMLDocument("inert");function gc(a){for(var b;b=a.__shady_native_firstChild;)a.__shady_native_removeChild(b);}var hc=["firstElementChild","lastElementChild","children","childElementCount"],ic=["querySelector","querySelectorAll"];
	function jc(){var a=["dispatchEvent","addEventListener","removeEventListener"];window.EventTarget?R(window.EventTarget.prototype,a):(R(Node.prototype,a),R(Window.prototype,a));Zb?R(Node.prototype,"parentNode firstChild lastChild previousSibling nextSibling childNodes parentElement textContent".split(" ")):cc(Node.prototype,{parentNode:{get:function(){dc.currentNode=this;return dc.parentNode()}},firstChild:{get:function(){dc.currentNode=this;return dc.firstChild()}},lastChild:{get:function(){dc.currentNode=
	this;return dc.lastChild()}},previousSibling:{get:function(){dc.currentNode=this;return dc.previousSibling()}},nextSibling:{get:function(){dc.currentNode=this;return dc.nextSibling()}},childNodes:{get:function(){var b=[];dc.currentNode=this;for(var c=dc.firstChild();c;)b.push(c),c=dc.nextSibling();return b}},parentElement:{get:function(){ec.currentNode=this;return ec.parentNode()}},textContent:{get:function(){switch(this.nodeType){case Node.ELEMENT_NODE:case Node.DOCUMENT_FRAGMENT_NODE:for(var b=
	document.createTreeWalker(this,NodeFilter.SHOW_TEXT,null,!1),c="",d;d=b.nextNode();)c+=d.nodeValue;return c;default:return this.nodeValue}},set:function(b){if("undefined"===typeof b||null===b)b="";switch(this.nodeType){case Node.ELEMENT_NODE:case Node.DOCUMENT_FRAGMENT_NODE:gc(this);(0<b.length||this.nodeType===Node.ELEMENT_NODE)&&this.__shady_native_insertBefore(document.createTextNode(b),void 0);break;default:this.nodeValue=b;}}}});R(Node.prototype,"appendChild insertBefore removeChild replaceChild cloneNode contains".split(" "));
	R(HTMLElement.prototype,["parentElement","contains"]);a={firstElementChild:{get:function(){ec.currentNode=this;return ec.firstChild()}},lastElementChild:{get:function(){ec.currentNode=this;return ec.lastChild()}},children:{get:function(){var b=[];ec.currentNode=this;for(var c=ec.firstChild();c;)b.push(c),c=ec.nextSibling();return Cb(b)}},childElementCount:{get:function(){return this.children?this.children.length:0}}};Zb?(R(Element.prototype,hc),R(Element.prototype,["previousElementSibling","nextElementSibling",
	"innerHTML","className"]),R(HTMLElement.prototype,["children","innerHTML","className"])):(cc(Element.prototype,a),cc(Element.prototype,{previousElementSibling:{get:function(){ec.currentNode=this;return ec.previousSibling()}},nextElementSibling:{get:function(){ec.currentNode=this;return ec.nextSibling()}},innerHTML:{get:function(){return Wb(this,Db)},set:function(b){var c="template"===this.localName?this.content:this;gc(c);var d=this.localName||"div";d=this.namespaceURI&&this.namespaceURI!==fc.namespaceURI?
	fc.createElementNS(this.namespaceURI,d):fc.createElement(d);d.innerHTML=b;for(b="template"===this.localName?d.content:d;d=b.__shady_native_firstChild;)c.__shady_native_insertBefore(d,void 0);}},className:{get:function(){return this.getAttribute("class")||""},set:function(b){this.setAttribute("class",b);}}}));R(Element.prototype,"setAttribute getAttribute hasAttribute removeAttribute focus blur".split(" "));R(Element.prototype,ic);R(HTMLElement.prototype,["focus","blur"]);window.HTMLTemplateElement&&
	R(window.HTMLTemplateElement.prototype,["innerHTML"]);Zb?R(DocumentFragment.prototype,hc):cc(DocumentFragment.prototype,a);R(DocumentFragment.prototype,ic);Zb?(R(Document.prototype,hc),R(Document.prototype,["activeElement"])):cc(Document.prototype,a);R(Document.prototype,["importNode","getElementById"]);R(Document.prototype,ic);}var kc=Q({get childNodes(){return this.__shady_childNodes},get firstChild(){return this.__shady_firstChild},get lastChild(){return this.__shady_lastChild},get childElementCount(){return this.__shady_childElementCount},get children(){return this.__shady_children},get firstElementChild(){return this.__shady_firstElementChild},get lastElementChild(){return this.__shady_lastElementChild},get shadowRoot(){return this.__shady_shadowRoot}}),lc=Q({get textContent(){return this.__shady_textContent},set textContent(a){this.__shady_textContent=
	a;},get innerHTML(){return this.__shady_innerHTML},set innerHTML(a){return this.__shady_innerHTML=a}}),mc=Q({get parentElement(){return this.__shady_parentElement},get parentNode(){return this.__shady_parentNode},get nextSibling(){return this.__shady_nextSibling},get previousSibling(){return this.__shady_previousSibling},get nextElementSibling(){return this.__shady_nextElementSibling},get previousElementSibling(){return this.__shady_previousElementSibling},get className(){return this.__shady_className},
	set className(a){return this.__shady_className=a}});function nc(a){for(var b in a){var c=a[b];c&&(c.enumerable=!1);}}nc(kc);nc(lc);nc(mc);var oc=M.D||!0===M.G,pc=oc?function(){}:function(a){var b=B(a);b.Aa||(b.Aa=!0,Gb(a,mc));},qc=oc?function(){}:function(a){var b=B(a);b.za||(b.za=!0,Gb(a,kc),window.customElements&&!M.G||Gb(a,lc));};var rc="__eventWrappers"+Date.now(),sc=function(){var a=Object.getOwnPropertyDescriptor(Event.prototype,"composed");return a?function(b){return a.get.call(b)}:null}(),tc=function(){function a(){}var b=!1,c={get capture(){b=!0;return !1}};window.addEventListener("test",a,c);window.removeEventListener("test",a,c);return b}();function uc(a){if(a&&"object"===typeof a){var b=!!a.capture;var c=!!a.once;var d=!!a.passive;var e=a.O;}else b=!!a,d=c=!1;return {wa:e,capture:b,once:c,passive:d,ua:tc?a:b}}
	var vc={blur:!0,focus:!0,focusin:!0,focusout:!0,click:!0,dblclick:!0,mousedown:!0,mouseenter:!0,mouseleave:!0,mousemove:!0,mouseout:!0,mouseover:!0,mouseup:!0,wheel:!0,beforeinput:!0,input:!0,keydown:!0,keyup:!0,compositionstart:!0,compositionupdate:!0,compositionend:!0,touchstart:!0,touchend:!0,touchmove:!0,touchcancel:!0,pointerover:!0,pointerenter:!0,pointerdown:!0,pointermove:!0,pointerup:!0,pointercancel:!0,pointerout:!0,pointerleave:!0,gotpointercapture:!0,lostpointercapture:!0,dragstart:!0,
	drag:!0,dragenter:!0,dragleave:!0,dragover:!0,drop:!0,dragend:!0,DOMActivate:!0,DOMFocusIn:!0,DOMFocusOut:!0,keypress:!0},wc={DOMAttrModified:!0,DOMAttributeNameChanged:!0,DOMCharacterDataModified:!0,DOMElementNameChanged:!0,DOMNodeInserted:!0,DOMNodeInsertedIntoDocument:!0,DOMNodeRemoved:!0,DOMNodeRemovedFromDocument:!0,DOMSubtreeModified:!0};function xc(a){return a instanceof Node?a.__shady_getRootNode():a}
	function yc(a,b){var c=[],d=a;for(a=xc(a);d;)c.push(d),d.__shady_assignedSlot?d=d.__shady_assignedSlot:d.nodeType===Node.DOCUMENT_FRAGMENT_NODE&&d.host&&(b||d!==a)?d=d.host:d=d.__shady_parentNode;c[c.length-1]===document&&c.push(window);return c}function zc(a){a.__composedPath||(a.__composedPath=yc(a.target,!0));return a.__composedPath}function Ac(a,b){if(!O)return a;a=yc(a,!0);for(var c=0,d,e=void 0,f,g=void 0;c<b.length;c++)if(d=b[c],f=xc(d),f!==e&&(g=a.indexOf(f),e=f),!O(f)||-1<g)return d}
	function Bc(a){function b(c,d){c=new a(c,d);c.__composed=d&&!!d.composed;return c}b.__proto__=a;b.prototype=a.prototype;return b}var Cc={focus:!0,blur:!0};function Dc(a){return a.__target!==a.target||a.__relatedTarget!==a.relatedTarget}function Ec(a,b,c){if(c=b.__handlers&&b.__handlers[a.type]&&b.__handlers[a.type][c])for(var d=0,e;(e=c[d])&&(!Dc(a)||a.target!==a.relatedTarget)&&(e.call(b,a),!a.__immediatePropagationStopped);d++);}
	function Fc(a){var b=a.composedPath();Object.defineProperty(a,"currentTarget",{get:function(){return d},configurable:!0});for(var c=b.length-1;0<=c;c--){var d=b[c];Ec(a,d,"capture");if(a.ea)return}Object.defineProperty(a,"eventPhase",{get:function(){return Event.AT_TARGET}});var e;for(c=0;c<b.length;c++){d=b[c];var f=L(d);f=f&&f.root;if(0===c||f&&f===e)if(Ec(a,d,"bubble"),d!==window&&(e=d.__shady_getRootNode()),a.ea)break}}
	function Gc(a,b,c,d,e,f){for(var g=0;g<a.length;g++){var h=a[g],k=h.type,l=h.capture,m=h.once,q=h.passive;if(b===h.node&&c===k&&d===l&&e===m&&f===q)return g}return -1}function Hc(a){Kb();return this.__shady_native_dispatchEvent(a)}
	function Ic(a,b,c){var d=uc(c),e=d.capture,f=d.once,g=d.passive,h=d.wa;d=d.ua;if(b){var k=typeof b;if("function"===k||"object"===k)if("object"!==k||b.handleEvent&&"function"===typeof b.handleEvent){if(wc[a])return this.__shady_native_addEventListener(a,b,d);var l=h||this;if(h=b[rc]){if(-1<Gc(h,l,a,e,f,g))return}else b[rc]=[];h=function(m){f&&this.__shady_removeEventListener(a,b,c);m.__target||Jc(m);if(l!==this){var q=Object.getOwnPropertyDescriptor(m,"currentTarget");Object.defineProperty(m,"currentTarget",
	{get:function(){return l},configurable:!0});}m.__previousCurrentTarget=m.currentTarget;if(!O(l)&&"slot"!==l.localName||-1!=m.composedPath().indexOf(l))if(m.composed||-1<m.composedPath().indexOf(l))if(Dc(m)&&m.target===m.relatedTarget)m.eventPhase===Event.BUBBLING_PHASE&&m.stopImmediatePropagation();else if(m.eventPhase===Event.CAPTURING_PHASE||m.bubbles||m.target===l||l instanceof Window){var H="function"===k?b.call(l,m):b.handleEvent&&b.handleEvent(m);l!==this&&(q?(Object.defineProperty(m,"currentTarget",
	q),q=null):delete m.currentTarget);return H}};b[rc].push({node:l,type:a,capture:e,once:f,passive:g,$a:h});Cc[a]?(this.__handlers=this.__handlers||{},this.__handlers[a]=this.__handlers[a]||{capture:[],bubble:[]},this.__handlers[a][e?"capture":"bubble"].push(h)):this.__shady_native_addEventListener(a,h,d);}}}
	function Kc(a,b,c){if(b){var d=uc(c);c=d.capture;var e=d.once,f=d.passive,g=d.wa;d=d.ua;if(wc[a])return this.__shady_native_removeEventListener(a,b,d);var h=g||this;g=void 0;var k=null;try{k=b[rc];}catch(l){}k&&(e=Gc(k,h,a,c,e,f),-1<e&&(g=k.splice(e,1)[0].$a,k.length||(b[rc]=void 0)));this.__shady_native_removeEventListener(a,g||b,d);g&&Cc[a]&&this.__handlers&&this.__handlers[a]&&(a=this.__handlers[a][c?"capture":"bubble"],b=a.indexOf(g),-1<b&&a.splice(b,1));}}
	function Lc(){for(var a in Cc)window.__shady_native_addEventListener(a,function(b){b.__target||(Jc(b),Fc(b));},!0);}
	var Mc=Q({get composed(){void 0===this.__composed&&(sc?this.__composed="focusin"===this.type||"focusout"===this.type||sc(this):!1!==this.isTrusted&&(this.__composed=vc[this.type]));return this.__composed||!1},composedPath:function(){this.__composedPath||(this.__composedPath=yc(this.__target,this.composed));return this.__composedPath},get target(){return Ac(this.currentTarget||this.__previousCurrentTarget,this.composedPath())},get relatedTarget(){if(!this.__relatedTarget)return null;this.__relatedTargetComposedPath||
	(this.__relatedTargetComposedPath=yc(this.__relatedTarget,!0));return Ac(this.currentTarget||this.__previousCurrentTarget,this.__relatedTargetComposedPath)},stopPropagation:function(){Event.prototype.stopPropagation.call(this);this.ea=!0;},stopImmediatePropagation:function(){Event.prototype.stopImmediatePropagation.call(this);this.ea=this.__immediatePropagationStopped=!0;}});
	function Jc(a){a.__target=a.target;a.__relatedTarget=a.relatedTarget;if(M.D){var b=Object.getPrototypeOf(a);if(!b.hasOwnProperty("__shady_patchedProto")){var c=Object.create(b);c.__shady_sourceProto=b;P(c,Mc);b.__shady_patchedProto=c;}a.__proto__=b.__shady_patchedProto;}else P(a,Mc);}var Nc=Bc(Event),Oc=Bc(CustomEvent),Pc=Bc(MouseEvent);
	function Qc(){if(!sc&&Object.getOwnPropertyDescriptor(Event.prototype,"isTrusted")){var a=function(){var b=new MouseEvent("click",{bubbles:!0,cancelable:!0,composed:!0});this.__shady_dispatchEvent(b);};Element.prototype.click?Element.prototype.click=a:HTMLElement.prototype.click&&(HTMLElement.prototype.click=a);}}var Rc=Object.getOwnPropertyNames(Document.prototype).filter(function(a){return "on"===a.substring(0,2)});function Sc(a,b){return {index:a,X:[],aa:b}}
	function Tc(a,b,c,d){var e=0,f=0,g=0,h=0,k=Math.min(b-e,d-f);if(0==e&&0==f)a:{for(g=0;g<k;g++)if(a[g]!==c[g])break a;g=k;}if(b==a.length&&d==c.length){h=a.length;for(var l=c.length,m=0;m<k-g&&Uc(a[--h],c[--l]);)m++;h=m;}e+=g;f+=g;b-=h;d-=h;if(0==b-e&&0==d-f)return [];if(e==b){for(b=Sc(e,0);f<d;)b.X.push(c[f++]);return [b]}if(f==d)return [Sc(e,b-e)];k=e;g=f;d=d-g+1;h=b-k+1;b=Array(d);for(l=0;l<d;l++)b[l]=Array(h),b[l][0]=l;for(l=0;l<h;l++)b[0][l]=l;for(l=1;l<d;l++)for(m=1;m<h;m++)if(a[k+m-1]===c[g+l-1])b[l][m]=
	b[l-1][m-1];else{var q=b[l-1][m]+1,H=b[l][m-1]+1;b[l][m]=q<H?q:H;}k=b.length-1;g=b[0].length-1;d=b[k][g];for(a=[];0<k||0<g;)0==k?(a.push(2),g--):0==g?(a.push(3),k--):(h=b[k-1][g-1],l=b[k-1][g],m=b[k][g-1],q=l<m?l<h?l:h:m<h?m:h,q==h?(h==d?a.push(0):(a.push(1),d=h),k--,g--):q==l?(a.push(3),k--,d=l):(a.push(2),g--,d=m));a.reverse();b=void 0;k=[];for(g=0;g<a.length;g++)switch(a[g]){case 0:b&&(k.push(b),b=void 0);e++;f++;break;case 1:b||(b=Sc(e,0));b.aa++;e++;b.X.push(c[f]);f++;break;case 2:b||(b=Sc(e,
	0));b.aa++;e++;break;case 3:b||(b=Sc(e,0)),b.X.push(c[f]),f++;}b&&k.push(b);return k}function Uc(a,b){return a===b}var Vc=Q({dispatchEvent:Hc,addEventListener:Ic,removeEventListener:Kc});var Wc=null;function Xc(){Wc||(Wc=window.ShadyCSS&&window.ShadyCSS.ScopingShim);return Wc||null}function Yc(a,b,c){var d=Xc();return d&&"class"===b?(d.setElementClass(a,c),!0):!1}function Zc(a,b){var c=Xc();c&&c.unscopeNode(a,b);}function $c(a,b){var c=Xc();if(!c)return !0;if(a.nodeType===Node.DOCUMENT_FRAGMENT_NODE){c=!0;for(a=a.__shady_firstChild;a;a=a.__shady_nextSibling)c=c&&$c(a,b);return c}return a.nodeType!==Node.ELEMENT_NODE?!0:c.currentScopeForNode(a)===b}
	function ad(a){if(a.nodeType!==Node.ELEMENT_NODE)return "";var b=Xc();return b?b.currentScopeForNode(a):""}function bd(a,b){if(a)for(a.nodeType===Node.ELEMENT_NODE&&b(a),a=a.__shady_firstChild;a;a=a.__shady_nextSibling)a.nodeType===Node.ELEMENT_NODE&&bd(a,b);}var cd=window.document,dd=M.ma,ed=Object.getOwnPropertyDescriptor(Node.prototype,"isConnected"),fd=ed&&ed.get;function gd(a){for(var b;b=a.__shady_firstChild;)a.__shady_removeChild(b);}function hd(a){var b=L(a);if(b&&void 0!==b.da)for(b=a.__shady_firstChild;b;b=b.__shady_nextSibling)hd(b);if(a=L(a))a.da=void 0;}function id(a){var b=a;a&&"slot"===a.localName&&(b=(b=(b=L(a))&&b.T)&&b.length?b[0]:id(a.__shady_nextSibling));return b}
	function jd(a,b,c){if(a=(a=L(a))&&a.W){if(b)if(b.nodeType===Node.DOCUMENT_FRAGMENT_NODE)for(var d=0,e=b.childNodes.length;d<e;d++)a.addedNodes.push(b.childNodes[d]);else a.addedNodes.push(b);c&&a.removedNodes.push(c);Mb(a);}}
	var qd=Q({get parentNode(){var a=L(this);a=a&&a.parentNode;return void 0!==a?a:this.__shady_native_parentNode},get firstChild(){var a=L(this);a=a&&a.firstChild;return void 0!==a?a:this.__shady_native_firstChild},get lastChild(){var a=L(this);a=a&&a.lastChild;return void 0!==a?a:this.__shady_native_lastChild},get nextSibling(){var a=L(this);a=a&&a.nextSibling;return void 0!==a?a:this.__shady_native_nextSibling},get previousSibling(){var a=L(this);a=a&&a.previousSibling;return void 0!==a?a:this.__shady_native_previousSibling},
	get childNodes(){if(rb(this)){var a=L(this);if(!a.childNodes){a.childNodes=[];for(var b=this.__shady_firstChild;b;b=b.__shady_nextSibling)a.childNodes.push(b);}var c=a.childNodes;}else c=this.__shady_native_childNodes;c.item=function(d){return c[d]};return c},get parentElement(){var a=L(this);(a=a&&a.parentNode)&&a.nodeType!==Node.ELEMENT_NODE&&(a=null);return void 0!==a?a:this.__shady_native_parentElement},get isConnected(){if(fd&&fd.call(this))return !0;if(this.nodeType==Node.DOCUMENT_FRAGMENT_NODE)return !1;
	var a=this.ownerDocument;if(Ab){if(a.__shady_native_contains(this))return !0}else if(a.documentElement&&a.documentElement.__shady_native_contains(this))return !0;for(a=this;a&&!(a instanceof Document);)a=a.__shady_parentNode||(O(a)?a.host:void 0);return !!(a&&a instanceof Document)},get textContent(){if(rb(this)){for(var a=[],b=this.__shady_firstChild;b;b=b.__shady_nextSibling)b.nodeType!==Node.COMMENT_NODE&&a.push(b.__shady_textContent);return a.join("")}return this.__shady_native_textContent},set textContent(a){if("undefined"===
	typeof a||null===a)a="";switch(this.nodeType){case Node.ELEMENT_NODE:case Node.DOCUMENT_FRAGMENT_NODE:if(!rb(this)&&M.D){var b=this.__shady_firstChild;(b!=this.__shady_lastChild||b&&b.nodeType!=Node.TEXT_NODE)&&gd(this);this.__shady_native_textContent=a;}else gd(this),(0<a.length||this.nodeType===Node.ELEMENT_NODE)&&this.__shady_insertBefore(document.createTextNode(a));break;default:this.nodeValue=a;}},insertBefore:function(a,b){if(this.ownerDocument!==cd&&a.ownerDocument!==cd)return this.__shady_native_insertBefore(a,
	b),a;if(a===this)throw Error("Failed to execute 'appendChild' on 'Node': The new child element contains the parent.");if(b){var c=L(b);c=c&&c.parentNode;if(void 0!==c&&c!==this||void 0===c&&b.__shady_native_parentNode!==this)throw Error("Failed to execute 'insertBefore' on 'Node': The node before which the new node is to be inserted is not a child of this node.");}if(b===a)return a;jd(this,a);var d=[],e=(c=kd(this))?c.host.localName:ad(this),f=a.__shady_parentNode;if(f){var g=ad(a);var h=!!c||!kd(a)||
	dd&&void 0!==this.__noInsertionPoint;f.__shady_removeChild(a,h);}f=!0;var k=(!dd||void 0===a.__noInsertionPoint&&void 0===this.__noInsertionPoint)&&!$c(a,e),l=c&&!a.__noInsertionPoint&&(!dd||a.nodeType===Node.DOCUMENT_FRAGMENT_NODE);if(l||k)k&&(g=g||ad(a)),bd(a,function(m){l&&"slot"===m.localName&&d.push(m);if(k){var q=g;Xc()&&(q&&Zc(m,q),(q=Xc())&&q.scopeNode(m,e));}});d.length&&(ld(c),c.c.push.apply(c.c,d instanceof Array?d:da(ca(d))),md(c));rb(this)&&(nd(a,this,b),c=L(this),sb(this)?(md(c.root),
	f=!1):c.root&&(f=!1));f?(c=O(this)?this.host:this,b?(b=id(b),c.__shady_native_insertBefore(a,b)):c.__shady_native_appendChild(a)):a.ownerDocument!==this.ownerDocument&&this.ownerDocument.adoptNode(a);return a},appendChild:function(a){if(this!=a||!O(a))return this.__shady_insertBefore(a)},removeChild:function(a,b){b=void 0===b?!1:b;if(this.ownerDocument!==cd)return this.__shady_native_removeChild(a);if(a.__shady_parentNode!==this)throw Error("The node to be removed is not a child of this node: "+a);
	jd(this,null,a);var c=kd(a),d=c&&od(c,a),e=L(this);if(rb(this)&&(pd(a,this),sb(this))){md(e.root);var f=!0;}if(Xc()&&!b&&c&&a.nodeType!==Node.TEXT_NODE){var g=ad(a);bd(a,function(h){Zc(h,g);});}hd(a);c&&((b=this&&"slot"===this.localName)&&(f=!0),(d||b)&&md(c));f||(f=O(this)?this.host:this,(!e.root&&"slot"!==a.localName||f===a.__shady_native_parentNode)&&f.__shady_native_removeChild(a));return a},replaceChild:function(a,b){this.__shady_insertBefore(a,b);this.__shady_removeChild(b);return a},cloneNode:function(a){if("template"==
	this.localName)return this.__shady_native_cloneNode(a);var b=this.__shady_native_cloneNode(!1);if(a&&b.nodeType!==Node.ATTRIBUTE_NODE){a=this.__shady_firstChild;for(var c;a;a=a.__shady_nextSibling)c=a.__shady_cloneNode(!0),b.__shady_appendChild(c);}return b},getRootNode:function(a){if(this&&this.nodeType){var b=B(this),c=b.da;void 0===c&&(O(this)?(c=this,b.da=c):(c=(c=this.__shady_parentNode)?c.__shady_getRootNode(a):this,document.documentElement.__shady_native_contains(this)&&(b.da=c)));return c}},
	contains:function(a){return Bb(this,a)}});var sd=Q({get assignedSlot(){var a=this.__shady_parentNode;(a=a&&a.__shady_shadowRoot)&&rd(a);return (a=L(this))&&a.assignedSlot||null}});function td(a,b,c){var d=[];vd(a,b,c,d);return d}function vd(a,b,c,d){for(a=a.__shady_firstChild;a;a=a.__shady_nextSibling){var e;if(e=a.nodeType===Node.ELEMENT_NODE){e=a;var f=b,g=c,h=d,k=f(e);k&&h.push(e);g&&g(k)?e=k:(vd(e,f,g,h),e=void 0);}if(e)break}}
	var wd=Q({get firstElementChild(){var a=L(this);if(a&&void 0!==a.firstChild){for(a=this.__shady_firstChild;a&&a.nodeType!==Node.ELEMENT_NODE;)a=a.__shady_nextSibling;return a}return this.__shady_native_firstElementChild},get lastElementChild(){var a=L(this);if(a&&void 0!==a.lastChild){for(a=this.__shady_lastChild;a&&a.nodeType!==Node.ELEMENT_NODE;)a=a.__shady_previousSibling;return a}return this.__shady_native_lastElementChild},get children(){return rb(this)?Cb(Array.prototype.filter.call(Eb(this),
	function(a){return a.nodeType===Node.ELEMENT_NODE})):this.__shady_native_children},get childElementCount(){var a=this.__shady_children;return a?a.length:0}}),xd=Q({querySelector:function(a){return td(this,function(b){return vb.call(b,a)},function(b){return !!b})[0]||null},querySelectorAll:function(a,b){if(b){b=Array.prototype.slice.call(this.__shady_native_querySelectorAll(a));var c=this.__shady_getRootNode();return Cb(b.filter(function(d){return d.__shady_getRootNode()==c}))}return Cb(td(this,function(d){return vb.call(d,
	a)}))}}),yd=M.ma&&!M.G?Object.assign({},wd):wd;Object.assign(wd,xd);var zd=window.document;function Ad(a,b){if("slot"===b)a=a.__shady_parentNode,sb(a)&&md(L(a).root);else if("slot"===a.localName&&"name"===b&&(b=kd(a))){if(b.a){Bd(b);var c=a.Ba,d=Cd(a);if(d!==c){c=b.b[c];var e=c.indexOf(a);0<=e&&c.splice(e,1);c=b.b[d]||(b.b[d]=[]);c.push(a);1<c.length&&(b.b[d]=Dd(c));}}md(b);}}
	var Ed=Q({get previousElementSibling(){var a=L(this);if(a&&void 0!==a.previousSibling){for(a=this.__shady_previousSibling;a&&a.nodeType!==Node.ELEMENT_NODE;)a=a.__shady_previousSibling;return a}return this.__shady_native_previousElementSibling},get nextElementSibling(){var a=L(this);if(a&&void 0!==a.nextSibling){for(a=this.__shady_nextSibling;a&&a.nodeType!==Node.ELEMENT_NODE;)a=a.__shady_nextSibling;return a}return this.__shady_native_nextElementSibling},get slot(){return this.getAttribute("slot")},
	set slot(a){this.__shady_setAttribute("slot",a);},get className(){return this.getAttribute("class")||""},set className(a){this.__shady_setAttribute("class",a);},setAttribute:function(a,b){this.ownerDocument!==zd?this.__shady_native_setAttribute(a,b):Yc(this,a,b)||(this.__shady_native_setAttribute(a,b),Ad(this,a));},removeAttribute:function(a){this.ownerDocument!==zd?this.__shady_native_removeAttribute(a):Yc(this,a,"")?""===this.getAttribute(a)&&this.__shady_native_removeAttribute(a):(this.__shady_native_removeAttribute(a),
	Ad(this,a));}}),Jd=Q({attachShadow:function(a){if(!this)throw Error("Must provide a host.");if(!a)throw Error("Not enough arguments.");if(a.shadyUpgradeFragment&&!M.ya){var b=a.shadyUpgradeFragment;b.__proto__=ShadowRoot.prototype;Fd(b,this,a);Gd(b,b);a=b.__noInsertionPoint?null:b.querySelectorAll("slot");b.__noInsertionPoint=void 0;if(a&&a.length){var c=b;ld(c);c.c.push.apply(c.c,a instanceof Array?a:da(ca(a)));md(b);}b.host.__shady_native_appendChild(b);}else b=new Hd(Id,this,a);return this.__CE_shadowRoot=
	b},get shadowRoot(){var a=L(this);return a&&a.Sa||null}});Object.assign(Ed,Jd);var Kd=document.implementation.createHTMLDocument("inert"),Ld=Q({get innerHTML(){return rb(this)?Wb("template"===this.localName?this.content:this,Eb):this.__shady_native_innerHTML},set innerHTML(a){if("template"===this.localName)this.__shady_native_innerHTML=a;else{gd(this);var b=this.localName||"div";b=this.namespaceURI&&this.namespaceURI!==Kd.namespaceURI?Kd.createElementNS(this.namespaceURI,b):Kd.createElement(b);for(M.D?b.__shady_native_innerHTML=a:b.innerHTML=a;a=b.__shady_firstChild;)this.__shady_insertBefore(a);}}});var Md=Q({blur:function(){var a=L(this);(a=(a=a&&a.root)&&a.activeElement)?a.__shady_blur():this.__shady_native_blur();}});M.ma||Rc.forEach(function(a){Md[a]={set:function(b){var c=B(this),d=a.substring(2);c.N||(c.N={});c.N[a]&&this.removeEventListener(d,c.N[a]);this.__shady_addEventListener(d,b);c.N[a]=b;},get:function(){var b=L(this);return b&&b.N&&b.N[a]},configurable:!0};});var Nd=Q({assignedNodes:function(a){if("slot"===this.localName){var b=this.__shady_getRootNode();b&&O(b)&&rd(b);return (b=L(this))?(a&&a.flatten?b.T:b.assignedNodes)||[]:[]}},addEventListener:function(a,b,c){if("slot"!==this.localName||"slotchange"===a)Ic.call(this,a,b,c);else{"object"!==typeof c&&(c={capture:!!c});var d=this.__shady_parentNode;if(!d)throw Error("ShadyDOM cannot attach event to slot unless it has a `parentNode`");c.O=this;d.__shady_addEventListener(a,b,c);}},removeEventListener:function(a,
	b,c){if("slot"!==this.localName||"slotchange"===a)Kc.call(this,a,b,c);else{"object"!==typeof c&&(c={capture:!!c});var d=this.__shady_parentNode;if(!d)throw Error("ShadyDOM cannot attach event to slot unless it has a `parentNode`");c.O=this;d.__shady_removeEventListener(a,b,c);}}});var Od=Q({getElementById:function(a){return ""===a?null:td(this,function(b){return b.id==a},function(b){return !!b})[0]||null}});var Pd=Q({get activeElement(){var a=M.D?document.__shady_native_activeElement:document.activeElement;if(!a||!a.nodeType)return null;var b=!!O(this);if(!(this===document||b&&this.host!==a&&this.host.__shady_native_contains(a)))return null;for(b=kd(a);b&&b!==this;)a=b.host,b=kd(a);return this===document?b?null:a:b===this?a:null}});var Qd=window.document,Rd=Q({importNode:function(a,b){if(a.ownerDocument!==Qd||"template"===a.localName)return this.__shady_native_importNode(a,b);var c=this.__shady_native_importNode(a,!1);if(b)for(a=a.__shady_firstChild;a;a=a.__shady_nextSibling)b=this.__shady_importNode(a,!0),c.__shady_appendChild(b);return c}});var Sd=Q({dispatchEvent:Hc,addEventListener:Ic.bind(window),removeEventListener:Kc.bind(window)});var Td={};Object.getOwnPropertyDescriptor(HTMLElement.prototype,"parentElement")&&(Td.parentElement=qd.parentElement);Object.getOwnPropertyDescriptor(HTMLElement.prototype,"contains")&&(Td.contains=qd.contains);Object.getOwnPropertyDescriptor(HTMLElement.prototype,"children")&&(Td.children=wd.children);Object.getOwnPropertyDescriptor(HTMLElement.prototype,"innerHTML")&&(Td.innerHTML=Ld.innerHTML);Object.getOwnPropertyDescriptor(HTMLElement.prototype,"className")&&(Td.className=Ed.className);
	var Ud={EventTarget:[Vc],Node:[qd,window.EventTarget?null:Vc],Text:[sd],Comment:[sd],CDATASection:[sd],ProcessingInstruction:[sd],Element:[Ed,wd,sd,!M.D||"innerHTML"in Element.prototype?Ld:null,window.HTMLSlotElement?null:Nd],HTMLElement:[Md,Td],HTMLSlotElement:[Nd],DocumentFragment:[yd,Od],Document:[Rd,yd,Od,Pd],Window:[Sd]},Vd=M.D?null:["innerHTML","textContent"];function Wd(a,b,c,d){b.forEach(function(e){return a&&e&&P(a,e,c,d)});}
	function Xd(a){var b=a?null:Vd,c;for(c in Ud)Wd(window[c]&&window[c].prototype,Ud[c],a,b);}["Text","Comment","CDATASection","ProcessingInstruction"].forEach(function(a){var b=window[a],c=Object.create(b.prototype);c.__shady_protoIsPatched=!0;Wd(c,Ud.EventTarget);Wd(c,Ud.Node);Ud[a]&&Wd(c,Ud[a]);b.prototype.__shady_patchedProto=c;});function Yd(a){a.__shady_protoIsPatched=!0;Wd(a,Ud.EventTarget);Wd(a,Ud.Node);Wd(a,Ud.Element);Wd(a,Ud.HTMLElement);Wd(a,Ud.HTMLSlotElement);return a}var Zd=M.la,$d=M.D;function ae(a,b){if(Zd&&!a.__shady_protoIsPatched&&!O(a)){var c=Object.getPrototypeOf(a),d=c.hasOwnProperty("__shady_patchedProto")&&c.__shady_patchedProto;d||(d=Object.create(c),Yd(d),c.__shady_patchedProto=d);Object.setPrototypeOf(a,d);}$d||(1===b?pc(a):2===b&&qc(a));}
	function be(a,b,c,d){ae(a,1);d=d||null;var e=B(a),f=d?B(d):null;e.previousSibling=d?f.previousSibling:b.__shady_lastChild;if(f=L(e.previousSibling))f.nextSibling=a;if(f=L(e.nextSibling=d))f.previousSibling=a;e.parentNode=b;d?d===c.firstChild&&(c.firstChild=a):(c.lastChild=a,c.firstChild||(c.firstChild=a));c.childNodes=null;}
	function nd(a,b,c){ae(b,2);var d=B(b);void 0!==d.firstChild&&(d.childNodes=null);if(a.nodeType===Node.DOCUMENT_FRAGMENT_NODE)for(a=a.__shady_native_firstChild;a;a=a.__shady_native_nextSibling)be(a,b,d,c);else be(a,b,d,c);}
	function pd(a,b){var c=B(a);b=B(b);a===b.firstChild&&(b.firstChild=c.nextSibling);a===b.lastChild&&(b.lastChild=c.previousSibling);a=c.previousSibling;var d=c.nextSibling;a&&(B(a).nextSibling=d);d&&(B(d).previousSibling=a);c.parentNode=c.previousSibling=c.nextSibling=void 0;void 0!==b.childNodes&&(b.childNodes=null);}
	function Gd(a,b){var c=B(a);if(b||void 0===c.firstChild){c.childNodes=null;var d=c.firstChild=a.__shady_native_firstChild;c.lastChild=a.__shady_native_lastChild;ae(a,2);c=d;for(d=void 0;c;c=c.__shady_native_nextSibling){var e=B(c);e.parentNode=b||a;e.nextSibling=c.__shady_native_nextSibling;e.previousSibling=d||null;d=c;ae(c,1);}}}var ce=Q({addEventListener:function(a,b,c){"object"!==typeof c&&(c={capture:!!c});c.O=c.O||this;this.host.__shady_addEventListener(a,b,c);},removeEventListener:function(a,b,c){"object"!==typeof c&&(c={capture:!!c});c.O=c.O||this;this.host.__shady_removeEventListener(a,b,c);}});function de(a,b){P(a,ce,b);P(a,Pd,b);P(a,Ld,b);P(a,wd,b);M.G&&!b?(P(a,qd,b),P(a,Od,b)):M.D||(P(a,mc),P(a,kc),P(a,lc));}var Id={},ee=M.deferConnectionCallbacks&&"loading"===document.readyState,fe;function ge(a){var b=[];do b.unshift(a);while(a=a.__shady_parentNode);return b}function Hd(a,b,c){if(a!==Id)throw new TypeError("Illegal constructor");this.a=null;Fd(this,b,c);}
	function Fd(a,b,c){a.host=b;a.mode=c&&c.mode;Gd(a.host);b=B(a.host);b.root=a;b.Sa="closed"!==a.mode?a:null;b=B(a);b.firstChild=b.lastChild=b.parentNode=b.nextSibling=b.previousSibling=null;if(M.preferPerformance)for(;b=a.host.__shady_native_firstChild;)a.host.__shady_native_removeChild(b);else md(a);}function md(a){a.R||(a.R=!0,Jb(function(){return rd(a)}));}
	function rd(a){var b;if(b=a.R){for(var c;a;)a:{a.R&&(c=a),b=a;a=b.host.__shady_getRootNode();if(O(a)&&(b=L(b.host))&&0<b.Z)break a;a=void 0;}b=c;}(c=b)&&c._renderSelf();}
	Hd.prototype._renderSelf=function(){var a=ee;ee=!0;this.R=!1;if(this.a){Bd(this);for(var b=0,c;b<this.a.length;b++){c=this.a[b];var d=L(c),e=d.assignedNodes;d.assignedNodes=[];d.T=[];if(d.ra=e)for(d=0;d<e.length;d++){var f=L(e[d]);f.fa=f.assignedSlot;f.assignedSlot===c&&(f.assignedSlot=null);}}for(b=this.host.__shady_firstChild;b;b=b.__shady_nextSibling)he(this,b);for(b=0;b<this.a.length;b++){c=this.a[b];e=L(c);if(!e.assignedNodes.length)for(d=c.__shady_firstChild;d;d=d.__shady_nextSibling)he(this,
	d,c);(d=(d=L(c.__shady_parentNode))&&d.root)&&(tb(d)||d.R)&&d._renderSelf();ie(this,e.T,e.assignedNodes);if(d=e.ra){for(f=0;f<d.length;f++)L(d[f]).fa=null;e.ra=null;d.length>e.assignedNodes.length&&(e.ha=!0);}e.ha&&(e.ha=!1,je(this,c));}c=this.a;b=[];for(e=0;e<c.length;e++)d=c[e].__shady_parentNode,(f=L(d))&&f.root||!(0>b.indexOf(d))||b.push(d);for(c=0;c<b.length;c++){f=b[c];e=f===this?this.host:f;d=[];for(f=f.__shady_firstChild;f;f=f.__shady_nextSibling)if("slot"==f.localName)for(var g=L(f).T,h=0;h<
	g.length;h++)d.push(g[h]);else d.push(f);f=Db(e);g=Tc(d,d.length,f,f.length);for(var k=h=0,l=void 0;h<g.length&&(l=g[h]);h++){for(var m=0,q=void 0;m<l.X.length&&(q=l.X[m]);m++)q.__shady_native_parentNode===e&&e.__shady_native_removeChild(q),f.splice(l.index+k,1);k-=l.aa;}k=0;for(l=void 0;k<g.length&&(l=g[k]);k++)for(h=f[l.index],m=l.index;m<l.index+l.aa;m++)q=d[m],e.__shady_native_insertBefore(q,h),f.splice(m,0,q);}}if(!M.preferPerformance&&!this.qa)for(b=this.host.__shady_firstChild;b;b=b.__shady_nextSibling)c=
	L(b),b.__shady_native_parentNode!==this.host||"slot"!==b.localName&&c.assignedSlot||this.host.__shady_native_removeChild(b);this.qa=!0;ee=a;fe&&fe();};function he(a,b,c){var d=B(b),e=d.fa;d.fa=null;c||(c=(a=a.b[b.__shady_slot||"__catchall"])&&a[0]);c?(B(c).assignedNodes.push(b),d.assignedSlot=c):d.assignedSlot=void 0;e!==d.assignedSlot&&d.assignedSlot&&(B(d.assignedSlot).ha=!0);}
	function ie(a,b,c){for(var d=0,e=void 0;d<c.length&&(e=c[d]);d++)if("slot"==e.localName){var f=L(e).assignedNodes;f&&f.length&&ie(a,b,f);}else b.push(c[d]);}function je(a,b){b.__shady_native_dispatchEvent(new Event("slotchange"));b=L(b);b.assignedSlot&&je(a,b.assignedSlot);}function ld(a){a.c=a.c||[];a.a=a.a||[];a.b=a.b||{};}
	function Bd(a){if(a.c&&a.c.length){for(var b=a.c,c,d=0;d<b.length;d++){var e=b[d];Gd(e);var f=e.__shady_parentNode;Gd(f);f=L(f);f.Z=(f.Z||0)+1;f=Cd(e);a.b[f]?(c=c||{},c[f]=!0,a.b[f].push(e)):a.b[f]=[e];a.a.push(e);}if(c)for(var g in c)a.b[g]=Dd(a.b[g]);a.c=[];}}function Cd(a){var b=a.name||a.getAttribute("name")||"__catchall";return a.Ba=b}
	function Dd(a){return a.sort(function(b,c){b=ge(b);for(var d=ge(c),e=0;e<b.length;e++){c=b[e];var f=d[e];if(c!==f)return b=Eb(c.__shady_parentNode),b.indexOf(c)-b.indexOf(f)}})}
	function od(a,b){if(a.a){Bd(a);var c=a.b,d;for(d in c)for(var e=c[d],f=0;f<e.length;f++){var g=e[f];if(Bb(b,g)){e.splice(f,1);var h=a.a.indexOf(g);0<=h&&(a.a.splice(h,1),(h=L(g.__shady_parentNode))&&h.Z&&h.Z--);f--;g=L(g);if(h=g.T)for(var k=0;k<h.length;k++){var l=h[k],m=l.__shady_native_parentNode;m&&m.__shady_native_removeChild(l);}g.T=[];g.assignedNodes=[];h=!0;}}return h}}function tb(a){Bd(a);return !(!a.a||!a.a.length)}
	(function(a){a.__proto__=DocumentFragment.prototype;de(a,"__shady_");de(a);Object.defineProperties(a,{nodeType:{value:Node.DOCUMENT_FRAGMENT_NODE,configurable:!0},nodeName:{value:"#document-fragment",configurable:!0},nodeValue:{value:null,configurable:!0}});["localName","namespaceURI","prefix"].forEach(function(b){Object.defineProperty(a,b,{value:void 0,configurable:!0});});["ownerDocument","baseURI","isConnected"].forEach(function(b){Object.defineProperty(a,b,{get:function(){return this.host[b]},
	configurable:!0});});})(Hd.prototype);
	if(window.customElements&&M.ia&&!M.preferPerformance){var ke=new Map;fe=function(){var a=[];ke.forEach(function(d,e){a.push([e,d]);});ke.clear();for(var b=0;b<a.length;b++){var c=a[b][0];a[b][1]?c.__shadydom_connectedCallback():c.__shadydom_disconnectedCallback();}};ee&&document.addEventListener("readystatechange",function(){ee=!1;fe();},{once:!0});var le=function(a,b,c){var d=0,e="__isConnected"+d++;if(b||c)a.prototype.connectedCallback=a.prototype.__shadydom_connectedCallback=function(){ee?ke.set(this,
	!0):this[e]||(this[e]=!0,b&&b.call(this));},a.prototype.disconnectedCallback=a.prototype.__shadydom_disconnectedCallback=function(){ee?this.isConnected||ke.set(this,!1):this[e]&&(this[e]=!1,c&&c.call(this));};return a},me=window.customElements.define,define=function(a,b){var c=b.prototype.connectedCallback,d=b.prototype.disconnectedCallback;me.call(window.customElements,a,le(b,c,d));b.prototype.connectedCallback=c;b.prototype.disconnectedCallback=d;};window.customElements.define=define;Object.defineProperty(window.CustomElementRegistry.prototype,
	"define",{value:define,configurable:!0});}function kd(a){a=a.__shady_getRootNode();if(O(a))return a}function ne(a){this.node=a;}w=ne.prototype;w.addEventListener=function(a,b,c){return this.node.__shady_addEventListener(a,b,c)};w.removeEventListener=function(a,b,c){return this.node.__shady_removeEventListener(a,b,c)};w.appendChild=function(a){return this.node.__shady_appendChild(a)};w.insertBefore=function(a,b){return this.node.__shady_insertBefore(a,b)};w.removeChild=function(a){return this.node.__shady_removeChild(a)};w.replaceChild=function(a,b){return this.node.__shady_replaceChild(a,b)};
	w.cloneNode=function(a){return this.node.__shady_cloneNode(a)};w.getRootNode=function(a){return this.node.__shady_getRootNode(a)};w.contains=function(a){return this.node.__shady_contains(a)};w.dispatchEvent=function(a){return this.node.__shady_dispatchEvent(a)};w.setAttribute=function(a,b){this.node.__shady_setAttribute(a,b);};w.getAttribute=function(a){return this.node.__shady_native_getAttribute(a)};w.hasAttribute=function(a){return this.node.__shady_native_hasAttribute(a)};w.removeAttribute=function(a){this.node.__shady_removeAttribute(a);};
	w.attachShadow=function(a){return this.node.__shady_attachShadow(a)};w.focus=function(){this.node.__shady_native_focus();};w.blur=function(){this.node.__shady_blur();};w.importNode=function(a,b){if(this.node.nodeType===Node.DOCUMENT_NODE)return this.node.__shady_importNode(a,b)};w.getElementById=function(a){if(this.node.nodeType===Node.DOCUMENT_NODE)return this.node.__shady_getElementById(a)};w.querySelector=function(a){return this.node.__shady_querySelector(a)};
	w.querySelectorAll=function(a,b){return this.node.__shady_querySelectorAll(a,b)};w.assignedNodes=function(a){if("slot"===this.node.localName)return this.node.__shady_assignedNodes(a)};
	ea.Object.defineProperties(ne.prototype,{activeElement:{configurable:!0,enumerable:!0,get:function(){if(O(this.node)||this.node.nodeType===Node.DOCUMENT_NODE)return this.node.__shady_activeElement}},_activeElement:{configurable:!0,enumerable:!0,get:function(){return this.activeElement}},host:{configurable:!0,enumerable:!0,get:function(){if(O(this.node))return this.node.host}},parentNode:{configurable:!0,enumerable:!0,get:function(){return this.node.__shady_parentNode}},firstChild:{configurable:!0,
	enumerable:!0,get:function(){return this.node.__shady_firstChild}},lastChild:{configurable:!0,enumerable:!0,get:function(){return this.node.__shady_lastChild}},nextSibling:{configurable:!0,enumerable:!0,get:function(){return this.node.__shady_nextSibling}},previousSibling:{configurable:!0,enumerable:!0,get:function(){return this.node.__shady_previousSibling}},childNodes:{configurable:!0,enumerable:!0,get:function(){return this.node.__shady_childNodes}},parentElement:{configurable:!0,enumerable:!0,
	get:function(){return this.node.__shady_parentElement}},firstElementChild:{configurable:!0,enumerable:!0,get:function(){return this.node.__shady_firstElementChild}},lastElementChild:{configurable:!0,enumerable:!0,get:function(){return this.node.__shady_lastElementChild}},nextElementSibling:{configurable:!0,enumerable:!0,get:function(){return this.node.__shady_nextElementSibling}},previousElementSibling:{configurable:!0,enumerable:!0,get:function(){return this.node.__shady_previousElementSibling}},
	children:{configurable:!0,enumerable:!0,get:function(){return this.node.__shady_children}},childElementCount:{configurable:!0,enumerable:!0,get:function(){return this.node.__shady_childElementCount}},shadowRoot:{configurable:!0,enumerable:!0,get:function(){return this.node.__shady_shadowRoot}},assignedSlot:{configurable:!0,enumerable:!0,get:function(){return this.node.__shady_assignedSlot}},isConnected:{configurable:!0,enumerable:!0,get:function(){return this.node.__shady_isConnected}},innerHTML:{configurable:!0,
	enumerable:!0,get:function(){return this.node.__shady_innerHTML},set:function(a){this.node.__shady_innerHTML=a;}},textContent:{configurable:!0,enumerable:!0,get:function(){return this.node.__shady_textContent},set:function(a){this.node.__shady_textContent=a;}},slot:{configurable:!0,enumerable:!0,get:function(){return this.node.__shady_slot},set:function(a){this.node.__shady_slot=a;}},className:{configurable:!0,enumerable:!0,get:function(){return this.node.__shady_className},set:function(a){return this.node.__shady_className=
	a}}});Rc.forEach(function(a){Object.defineProperty(ne.prototype,a,{get:function(){return this.node["__shady_"+a]},set:function(b){this.node["__shady_"+a]=b;},configurable:!0});});var oe=new WeakMap;function pe(a){if(O(a)||a instanceof ne)return a;var b=oe.get(a);b||(b=new ne(a),oe.set(a,b));return b}if(M.ia){var qe=M.D?function(a){return a}:function(a){qc(a);pc(a);return a},ShadyDOM={inUse:M.ia,patch:qe,isShadyRoot:O,enqueue:Jb,flush:Kb,flushInitial:function(a){!a.qa&&a.R&&rd(a);},settings:M,filterMutations:Pb,observeChildren:Nb,unobserveChildren:Ob,deferConnectionCallbacks:M.deferConnectionCallbacks,preferPerformance:M.preferPerformance,handlesDynamicScoping:!0,wrap:M.G?pe:qe,wrapIfNeeded:!0===M.G?pe:function(a){return a},Wrapper:ne,composedPath:zc,noPatch:M.G,patchOnDemand:M.la,nativeMethods:$b,
	nativeTree:ac,patchElementProto:Yd};window.ShadyDOM=ShadyDOM;jc();Xd("__shady_");Object.defineProperty(document,"_activeElement",Pd.activeElement);P(Window.prototype,Sd,"__shady_");M.G?M.la&&P(Element.prototype,Jd):(Xd(),Qc());Lc();window.Event=Nc;window.CustomEvent=Oc;window.MouseEvent=Pc;window.ShadowRoot=Hd;}var re=window.Document.prototype.createElement,se=window.Document.prototype.createElementNS,te=window.Document.prototype.importNode,ue=window.Document.prototype.prepend,ve=window.Document.prototype.append,we=window.DocumentFragment.prototype.prepend,xe=window.DocumentFragment.prototype.append,ye=window.Node.prototype.cloneNode,ze=window.Node.prototype.appendChild,Ae=window.Node.prototype.insertBefore,Be=window.Node.prototype.removeChild,Ce=window.Node.prototype.replaceChild,De=Object.getOwnPropertyDescriptor(window.Node.prototype,
	"textContent"),Ee=window.Element.prototype.attachShadow,Fe=Object.getOwnPropertyDescriptor(window.Element.prototype,"innerHTML"),Ge=window.Element.prototype.getAttribute,He=window.Element.prototype.setAttribute,Ie=window.Element.prototype.removeAttribute,Je=window.Element.prototype.getAttributeNS,Ke=window.Element.prototype.setAttributeNS,Le=window.Element.prototype.removeAttributeNS,Me=window.Element.prototype.insertAdjacentElement,Ne=window.Element.prototype.insertAdjacentHTML,Oe=window.Element.prototype.prepend,
	Pe=window.Element.prototype.append,Qe=window.Element.prototype.before,Re=window.Element.prototype.after,Se=window.Element.prototype.replaceWith,Te=window.Element.prototype.remove,Ue=window.HTMLElement,Ve=Object.getOwnPropertyDescriptor(window.HTMLElement.prototype,"innerHTML"),We=window.HTMLElement.prototype.insertAdjacentElement,Xe=window.HTMLElement.prototype.insertAdjacentHTML;var Ye=new Set;"annotation-xml color-profile font-face font-face-src font-face-uri font-face-format font-face-name missing-glyph".split(" ").forEach(function(a){return Ye.add(a)});function Ze(a){var b=Ye.has(a);a=/^[a-z][.0-9_a-z]*-[\-.0-9_a-z]*$/.test(a);return !b&&a}var $e=document.contains?document.contains.bind(document):document.documentElement.contains.bind(document.documentElement);
	function T(a){var b=a.isConnected;if(void 0!==b)return b;if($e(a))return !0;for(;a&&!(a.__CE_isImportDocument||a instanceof Document);)a=a.parentNode||(window.ShadowRoot&&a instanceof ShadowRoot?a.host:void 0);return !(!a||!(a.__CE_isImportDocument||a instanceof Document))}function af(a){var b=a.children;if(b)return Array.prototype.slice.call(b);b=[];for(a=a.firstChild;a;a=a.nextSibling)a.nodeType===Node.ELEMENT_NODE&&b.push(a);return b}
	function bf(a,b){for(;b&&b!==a&&!b.nextSibling;)b=b.parentNode;return b&&b!==a?b.nextSibling:null}
	function cf(a,b,c){for(var d=a;d;){if(d.nodeType===Node.ELEMENT_NODE){var e=d;b(e);var f=e.localName;if("link"===f&&"import"===e.getAttribute("rel")){d=e.import;void 0===c&&(c=new Set);if(d instanceof Node&&!c.has(d))for(c.add(d),d=d.firstChild;d;d=d.nextSibling)cf(d,b,c);d=bf(a,e);continue}else if("template"===f){d=bf(a,e);continue}if(e=e.__CE_shadowRoot)for(e=e.firstChild;e;e=e.nextSibling)cf(e,b,c);}d=d.firstChild?d.firstChild:bf(a,d);}}function U(a,b,c){a[b]=c;}function df(a){var b=document;this.b=a;this.a=b;this.P=void 0;ef(this.b,this.a);"loading"===this.a.readyState&&(this.P=new MutationObserver(this.c.bind(this)),this.P.observe(this.a,{childList:!0,subtree:!0}));}function ff(a){a.P&&a.P.disconnect();}df.prototype.c=function(a){var b=this.a.readyState;"interactive"!==b&&"complete"!==b||ff(this);for(b=0;b<a.length;b++)for(var c=a[b].addedNodes,d=0;d<c.length;d++)ef(this.b,c[d]);};function gf(){var a=this;this.a=this.w=void 0;this.b=new Promise(function(b){a.a=b;a.w&&b(a.w);});}gf.prototype.resolve=function(a){if(this.w)throw Error("Already resolved.");this.w=a;this.a&&this.a(a);};function V(a){this.f=new Map;this.u=new Map;this.ta=new Map;this.U=!1;this.b=a;this.ja=new Map;this.c=function(b){return b()};this.a=!1;this.F=[];this.va=a.f?new df(a):void 0;}w=V.prototype;w.Qa=function(a,b){var c=this;if(!(b instanceof Function))throw new TypeError("Custom element constructor getters must be functions.");hf(this,a);this.f.set(a,b);this.F.push(a);this.a||(this.a=!0,this.c(function(){return jf(c)}));};
	w.define=function(a,b){var c=this;if(!(b instanceof Function))throw new TypeError("Custom element constructors must be functions.");hf(this,a);kf(this,a,b);this.F.push(a);this.a||(this.a=!0,this.c(function(){return jf(c)}));};function hf(a,b){if(!Ze(b))throw new SyntaxError("The element name '"+b+"' is not valid.");if(lf(a,b))throw Error("A custom element with name '"+b+"' has already been defined.");if(a.U)throw Error("A custom element is already being defined.");}
	function kf(a,b,c){a.U=!0;var d;try{var e=function(m){var q=f[m];if(void 0!==q&&!(q instanceof Function))throw Error("The '"+m+"' callback must be a function.");return q},f=c.prototype;if(!(f instanceof Object))throw new TypeError("The custom element constructor's prototype is not an object.");var g=e("connectedCallback");var h=e("disconnectedCallback");var k=e("adoptedCallback");var l=(d=e("attributeChangedCallback"))&&c.observedAttributes||[];}catch(m){throw m;}finally{a.U=!1;}c={localName:b,constructorFunction:c,
	connectedCallback:g,disconnectedCallback:h,adoptedCallback:k,attributeChangedCallback:d,observedAttributes:l,constructionStack:[]};a.u.set(b,c);a.ta.set(c.constructorFunction,c);return c}w.upgrade=function(a){ef(this.b,a);};
	function jf(a){if(!1!==a.a){a.a=!1;for(var b=[],c=a.F,d=new Map,e=0;e<c.length;e++)d.set(c[e],[]);ef(a.b,document,{upgrade:function(k){if(void 0===k.__CE_state){var l=k.localName,m=d.get(l);m?m.push(k):a.u.has(l)&&b.push(k);}}});for(e=0;e<b.length;e++)mf(a.b,b[e]);for(e=0;e<c.length;e++){for(var f=c[e],g=d.get(f),h=0;h<g.length;h++)mf(a.b,g[h]);(f=a.ja.get(f))&&f.resolve(void 0);}c.length=0;}}w.get=function(a){if(a=lf(this,a))return a.constructorFunction};
	w.whenDefined=function(a){if(!Ze(a))return Promise.reject(new SyntaxError("'"+a+"' is not a valid custom element name."));var b=this.ja.get(a);if(b)return b.b;b=new gf;this.ja.set(a,b);var c=this.u.has(a)||this.f.has(a);a=-1===this.F.indexOf(a);c&&a&&b.resolve(void 0);return b.b};w.polyfillWrapFlushCallback=function(a){this.va&&ff(this.va);var b=this.c;this.c=function(c){return a(function(){return b(c)})};};
	function lf(a,b){var c=a.u.get(b);if(c)return c;if(c=a.f.get(b)){a.f.delete(b);try{return kf(a,b,c())}catch(d){nf(d);}}}window.CustomElementRegistry=V;V.prototype.define=V.prototype.define;V.prototype.upgrade=V.prototype.upgrade;V.prototype.get=V.prototype.get;V.prototype.whenDefined=V.prototype.whenDefined;V.prototype.polyfillDefineLazy=V.prototype.Qa;V.prototype.polyfillWrapFlushCallback=V.prototype.polyfillWrapFlushCallback;function of(){var a=pf&&pf.noDocumentConstructionObserver,b=pf&&pf.shadyDomFastWalk;this.b=[];this.c=[];this.a=!1;this.shadyDomFastWalk=b;this.f=!a;}function qf(a,b,c,d){var e=window.ShadyDOM;if(a.shadyDomFastWalk&&e&&e.inUse){if(b.nodeType===Node.ELEMENT_NODE&&c(b),b.querySelectorAll)for(a=e.nativeMethods.querySelectorAll.call(b,"*"),b=0;b<a.length;b++)c(a[b]);}else cf(b,c,d);}function rf(a,b){a.a=!0;a.b.push(b);}function sf(a,b){a.a=!0;a.c.push(b);}
	function tf(a,b){a.a&&qf(a,b,function(c){return uf(a,c)});}function uf(a,b){if(a.a&&!b.__CE_patched){b.__CE_patched=!0;for(var c=0;c<a.b.length;c++)a.b[c](b);for(c=0;c<a.c.length;c++)a.c[c](b);}}function vf(a,b){var c=[];qf(a,b,function(e){return c.push(e)});for(b=0;b<c.length;b++){var d=c[b];1===d.__CE_state?a.connectedCallback(d):mf(a,d);}}function wf(a,b){var c=[];qf(a,b,function(e){return c.push(e)});for(b=0;b<c.length;b++){var d=c[b];1===d.__CE_state&&a.disconnectedCallback(d);}}
	function ef(a,b,c){c=void 0===c?{}:c;var d=c.Za,e=c.upgrade||function(g){return mf(a,g)},f=[];qf(a,b,function(g){a.a&&uf(a,g);if("link"===g.localName&&"import"===g.getAttribute("rel")){var h=g.import;h instanceof Node&&(h.__CE_isImportDocument=!0,h.__CE_registry=document.__CE_registry);h&&"complete"===h.readyState?h.__CE_documentLoadHandled=!0:g.addEventListener("load",function(){var k=g.import;if(!k.__CE_documentLoadHandled){k.__CE_documentLoadHandled=!0;var l=new Set;d&&(d.forEach(function(m){return l.add(m)}),
	l.delete(k));ef(a,k,{Za:l,upgrade:e});}});}else f.push(g);},d);for(b=0;b<f.length;b++)e(f[b]);}
	function mf(a,b){try{var c=b.ownerDocument,d=c.__CE_registry;var e=d&&(c.defaultView||c.__CE_isImportDocument)?lf(d,b.localName):void 0;if(e&&void 0===b.__CE_state){e.constructionStack.push(b);try{try{if(new e.constructorFunction!==b)throw Error("The custom element constructor did not produce the element being upgraded.");}finally{e.constructionStack.pop();}}catch(k){throw b.__CE_state=2,k;}b.__CE_state=1;b.__CE_definition=e;if(e.attributeChangedCallback&&b.hasAttributes()){var f=e.observedAttributes;
	for(e=0;e<f.length;e++){var g=f[e],h=b.getAttribute(g);null!==h&&a.attributeChangedCallback(b,g,null,h,null);}}T(b)&&a.connectedCallback(b);}}catch(k){nf(k);}}of.prototype.connectedCallback=function(a){var b=a.__CE_definition;if(b.connectedCallback)try{b.connectedCallback.call(a);}catch(c){nf(c);}};of.prototype.disconnectedCallback=function(a){var b=a.__CE_definition;if(b.disconnectedCallback)try{b.disconnectedCallback.call(a);}catch(c){nf(c);}};
	of.prototype.attributeChangedCallback=function(a,b,c,d,e){var f=a.__CE_definition;if(f.attributeChangedCallback&&-1<f.observedAttributes.indexOf(b))try{f.attributeChangedCallback.call(a,b,c,d,e);}catch(g){nf(g);}};
	function xf(a,b,c,d){var e=b.__CE_registry;if(e&&(null===d||"http://www.w3.org/1999/xhtml"===d)&&(e=lf(e,c)))try{var f=new e.constructorFunction;if(void 0===f.__CE_state||void 0===f.__CE_definition)throw Error("Failed to construct '"+c+"': The returned value was not constructed with the HTMLElement constructor.");if("http://www.w3.org/1999/xhtml"!==f.namespaceURI)throw Error("Failed to construct '"+c+"': The constructed element's namespace must be the HTML namespace.");if(f.hasAttributes())throw Error("Failed to construct '"+
	c+"': The constructed element must not have any attributes.");if(null!==f.firstChild)throw Error("Failed to construct '"+c+"': The constructed element must not have any children.");if(null!==f.parentNode)throw Error("Failed to construct '"+c+"': The constructed element must not have a parent node.");if(f.ownerDocument!==b)throw Error("Failed to construct '"+c+"': The constructed element's owner document is incorrect.");if(f.localName!==c)throw Error("Failed to construct '"+c+"': The constructed element's local name is incorrect.");
	return f}catch(g){return nf(g),b=null===d?re.call(b,c):se.call(b,d,c),Object.setPrototypeOf(b,HTMLUnknownElement.prototype),b.__CE_state=2,b.__CE_definition=void 0,uf(a,b),b}b=null===d?re.call(b,c):se.call(b,d,c);uf(a,b);return b}
	function nf(a){var b=a.message,c=a.sourceURL||a.fileName||"",d=a.line||a.lineNumber||0,e=a.column||a.columnNumber||0,f=void 0;void 0===ErrorEvent.prototype.initErrorEvent?f=new ErrorEvent("error",{cancelable:!0,message:b,filename:c,lineno:d,colno:e,error:a}):(f=document.createEvent("ErrorEvent"),f.initErrorEvent("error",!1,!0,b,c,d),f.preventDefault=function(){Object.defineProperty(this,"defaultPrevented",{configurable:!0,get:function(){return !0}});});void 0===f.error&&Object.defineProperty(f,"error",
	{configurable:!0,enumerable:!0,get:function(){return a}});window.dispatchEvent(f);f.defaultPrevented||console.error(a);}var yf=new function(){};function zf(a){window.HTMLElement=function(){function b(){var c=this.constructor;var d=document.__CE_registry.ta.get(c);if(!d)throw Error("Failed to construct a custom element: The constructor was not registered with `customElements`.");var e=d.constructionStack;if(0===e.length)return e=re.call(document,d.localName),Object.setPrototypeOf(e,c.prototype),e.__CE_state=1,e.__CE_definition=d,uf(a,e),e;var f=e.length-1,g=e[f];if(g===yf)throw Error("Failed to construct '"+d.localName+"': This element was already constructed.");
	e[f]=yf;Object.setPrototypeOf(g,c.prototype);uf(a,g);return g}b.prototype=Ue.prototype;Object.defineProperty(b.prototype,"constructor",{writable:!0,configurable:!0,enumerable:!1,value:b});return b}();}function Af(a,b,c){function d(e){return function(f){for(var g=[],h=0;h<arguments.length;++h)g[h]=arguments[h];h=[];for(var k=[],l=0;l<g.length;l++){var m=g[l];m instanceof Element&&T(m)&&k.push(m);if(m instanceof DocumentFragment)for(m=m.firstChild;m;m=m.nextSibling)h.push(m);else h.push(m);}e.apply(this,g);for(g=0;g<k.length;g++)wf(a,k[g]);if(T(this))for(g=0;g<h.length;g++)k=h[g],k instanceof Element&&vf(a,k);}}void 0!==c.prepend&&U(b,"prepend",d(c.prepend));void 0!==c.append&&U(b,"append",d(c.append));}
	function Bf(a){U(Document.prototype,"createElement",function(b){return xf(a,this,b,null)});U(Document.prototype,"importNode",function(b,c){b=te.call(this,b,!!c);this.__CE_registry?ef(a,b):tf(a,b);return b});U(Document.prototype,"createElementNS",function(b,c){return xf(a,this,c,b)});Af(a,Document.prototype,{prepend:ue,append:ve});}function Cf(a){function b(c,d){Object.defineProperty(c,"textContent",{enumerable:d.enumerable,configurable:!0,get:d.get,set:function(e){if(this.nodeType===Node.TEXT_NODE)d.set.call(this,e);else{var f=void 0;if(this.firstChild){var g=this.childNodes,h=g.length;if(0<h&&T(this)){f=Array(h);for(var k=0;k<h;k++)f[k]=g[k];}}d.set.call(this,e);if(f)for(e=0;e<f.length;e++)wf(a,f[e]);}}});}U(Node.prototype,"insertBefore",function(c,d){if(c instanceof DocumentFragment){var e=af(c);c=Ae.call(this,c,d);if(T(this))for(d=
	0;d<e.length;d++)vf(a,e[d]);return c}e=c instanceof Element&&T(c);d=Ae.call(this,c,d);e&&wf(a,c);T(this)&&vf(a,c);return d});U(Node.prototype,"appendChild",function(c){if(c instanceof DocumentFragment){var d=af(c);c=ze.call(this,c);if(T(this))for(var e=0;e<d.length;e++)vf(a,d[e]);return c}d=c instanceof Element&&T(c);e=ze.call(this,c);d&&wf(a,c);T(this)&&vf(a,c);return e});U(Node.prototype,"cloneNode",function(c){c=ye.call(this,!!c);this.ownerDocument.__CE_registry?ef(a,c):tf(a,c);return c});U(Node.prototype,
	"removeChild",function(c){var d=c instanceof Element&&T(c),e=Be.call(this,c);d&&wf(a,c);return e});U(Node.prototype,"replaceChild",function(c,d){if(c instanceof DocumentFragment){var e=af(c);c=Ce.call(this,c,d);if(T(this))for(wf(a,d),d=0;d<e.length;d++)vf(a,e[d]);return c}e=c instanceof Element&&T(c);var f=Ce.call(this,c,d),g=T(this);g&&wf(a,d);e&&wf(a,c);g&&vf(a,c);return f});De&&De.get?b(Node.prototype,De):rf(a,function(c){b(c,{enumerable:!0,configurable:!0,get:function(){for(var d=[],e=this.firstChild;e;e=
	e.nextSibling)e.nodeType!==Node.COMMENT_NODE&&d.push(e.textContent);return d.join("")},set:function(d){for(;this.firstChild;)Be.call(this,this.firstChild);null!=d&&""!==d&&ze.call(this,document.createTextNode(d));}});});}function Df(a){function b(d){return function(e){for(var f=[],g=0;g<arguments.length;++g)f[g]=arguments[g];g=[];for(var h=[],k=0;k<f.length;k++){var l=f[k];l instanceof Element&&T(l)&&h.push(l);if(l instanceof DocumentFragment)for(l=l.firstChild;l;l=l.nextSibling)g.push(l);else g.push(l);}d.apply(this,f);for(f=0;f<h.length;f++)wf(a,h[f]);if(T(this))for(f=0;f<g.length;f++)h=g[f],h instanceof Element&&vf(a,h);}}var c=Element.prototype;void 0!==Qe&&U(c,"before",b(Qe));void 0!==Re&&U(c,"after",b(Re));void 0!==
	Se&&U(c,"replaceWith",function(d){for(var e=[],f=0;f<arguments.length;++f)e[f]=arguments[f];f=[];for(var g=[],h=0;h<e.length;h++){var k=e[h];k instanceof Element&&T(k)&&g.push(k);if(k instanceof DocumentFragment)for(k=k.firstChild;k;k=k.nextSibling)f.push(k);else f.push(k);}h=T(this);Se.apply(this,e);for(e=0;e<g.length;e++)wf(a,g[e]);if(h)for(wf(a,this),e=0;e<f.length;e++)g=f[e],g instanceof Element&&vf(a,g);});void 0!==Te&&U(c,"remove",function(){var d=T(this);Te.call(this);d&&wf(a,this);});}function Ef(a){function b(e,f){Object.defineProperty(e,"innerHTML",{enumerable:f.enumerable,configurable:!0,get:f.get,set:function(g){var h=this,k=void 0;T(this)&&(k=[],qf(a,this,function(q){q!==h&&k.push(q);}));f.set.call(this,g);if(k)for(var l=0;l<k.length;l++){var m=k[l];1===m.__CE_state&&a.disconnectedCallback(m);}this.ownerDocument.__CE_registry?ef(a,this):tf(a,this);return g}});}function c(e,f){U(e,"insertAdjacentElement",function(g,h){var k=T(h);g=f.call(this,g,h);k&&wf(a,h);T(g)&&vf(a,h);return g});}
	function d(e,f){function g(h,k){for(var l=[];h!==k;h=h.nextSibling)l.push(h);for(k=0;k<l.length;k++)ef(a,l[k]);}U(e,"insertAdjacentHTML",function(h,k){h=h.toLowerCase();if("beforebegin"===h){var l=this.previousSibling;f.call(this,h,k);g(l||this.parentNode.firstChild,this);}else if("afterbegin"===h)l=this.firstChild,f.call(this,h,k),g(this.firstChild,l);else if("beforeend"===h)l=this.lastChild,f.call(this,h,k),g(l||this.firstChild,null);else if("afterend"===h)l=this.nextSibling,f.call(this,h,k),g(this.nextSibling,
	l);else throw new SyntaxError("The value provided ("+String(h)+") is not one of 'beforebegin', 'afterbegin', 'beforeend', or 'afterend'.");});}Ee&&U(Element.prototype,"attachShadow",function(e){e=Ee.call(this,e);if(a.a&&!e.__CE_patched){e.__CE_patched=!0;for(var f=0;f<a.b.length;f++)a.b[f](e);}return this.__CE_shadowRoot=e});Fe&&Fe.get?b(Element.prototype,Fe):Ve&&Ve.get?b(HTMLElement.prototype,Ve):sf(a,function(e){b(e,{enumerable:!0,configurable:!0,get:function(){return ye.call(this,!0).innerHTML},
	set:function(f){var g="template"===this.localName,h=g?this.content:this,k=se.call(document,this.namespaceURI,this.localName);for(k.innerHTML=f;0<h.childNodes.length;)Be.call(h,h.childNodes[0]);for(f=g?k.content:k;0<f.childNodes.length;)ze.call(h,f.childNodes[0]);}});});U(Element.prototype,"setAttribute",function(e,f){if(1!==this.__CE_state)return He.call(this,e,f);var g=Ge.call(this,e);He.call(this,e,f);f=Ge.call(this,e);a.attributeChangedCallback(this,e,g,f,null);});U(Element.prototype,"setAttributeNS",
	function(e,f,g){if(1!==this.__CE_state)return Ke.call(this,e,f,g);var h=Je.call(this,e,f);Ke.call(this,e,f,g);g=Je.call(this,e,f);a.attributeChangedCallback(this,f,h,g,e);});U(Element.prototype,"removeAttribute",function(e){if(1!==this.__CE_state)return Ie.call(this,e);var f=Ge.call(this,e);Ie.call(this,e);null!==f&&a.attributeChangedCallback(this,e,f,null,null);});U(Element.prototype,"removeAttributeNS",function(e,f){if(1!==this.__CE_state)return Le.call(this,e,f);var g=Je.call(this,e,f);Le.call(this,
	e,f);var h=Je.call(this,e,f);g!==h&&a.attributeChangedCallback(this,f,g,h,e);});We?c(HTMLElement.prototype,We):Me&&c(Element.prototype,Me);Xe?d(HTMLElement.prototype,Xe):Ne&&d(Element.prototype,Ne);Af(a,Element.prototype,{prepend:Oe,append:Pe});Df(a);}var pf=window.customElements;function Ff(){var a=new of;zf(a);Bf(a);Af(a,DocumentFragment.prototype,{prepend:we,append:xe});Cf(a);Ef(a);a=new V(a);document.__CE_registry=a;Object.defineProperty(window,"customElements",{configurable:!0,enumerable:!0,value:a});}pf&&!pf.forcePolyfill&&"function"==typeof pf.define&&"function"==typeof pf.get||Ff();window.__CE_installPolyfill=Ff;function Gf(){this.end=this.start=0;this.rules=this.parent=this.previous=null;this.cssText=this.parsedCssText="";this.atRule=!1;this.type=0;this.parsedSelector=this.selector=this.keyframesName="";}
	function Hf(a){var b=a=a.replace(If,"").replace(Jf,""),c=new Gf;c.start=0;c.end=b.length;for(var d=c,e=0,f=b.length;e<f;e++)if("{"===b[e]){d.rules||(d.rules=[]);var g=d,h=g.rules[g.rules.length-1]||null;d=new Gf;d.start=e+1;d.parent=g;d.previous=h;g.rules.push(d);}else"}"===b[e]&&(d.end=e+1,d=d.parent||c);return Kf(c,a)}
	function Kf(a,b){var c=b.substring(a.start,a.end-1);a.parsedCssText=a.cssText=c.trim();a.parent&&(c=b.substring(a.previous?a.previous.end:a.parent.start,a.start-1),c=Lf(c),c=c.replace(Mf," "),c=c.substring(c.lastIndexOf(";")+1),c=a.parsedSelector=a.selector=c.trim(),a.atRule=0===c.indexOf("@"),a.atRule?0===c.indexOf("@media")?a.type=Nf:c.match(Of)&&(a.type=Pf,a.keyframesName=a.selector.split(Mf).pop()):a.type=0===c.indexOf("--")?Qf:Rf);if(c=a.rules)for(var d=0,e=c.length,f=void 0;d<e&&(f=c[d]);d++)Kf(f,
	b);return a}function Lf(a){return a.replace(/\\([0-9a-f]{1,6})\s/gi,function(b,c){b=c;for(c=6-b.length;c--;)b="0"+b;return "\\"+b})}
	function Sf(a,b,c){c=void 0===c?"":c;var d="";if(a.cssText||a.rules){var e=a.rules,f;if(f=e)f=e[0],f=!(f&&f.selector&&0===f.selector.indexOf("--"));if(f){f=0;for(var g=e.length,h=void 0;f<g&&(h=e[f]);f++)d=Sf(h,b,d);}else b?b=a.cssText:(b=a.cssText,b=b.replace(Tf,"").replace(Uf,""),b=b.replace(Vf,"").replace(Wf,"")),(d=b.trim())&&(d="  "+d+"\n");}d&&(a.selector&&(c+=a.selector+" {\n"),c+=d,a.selector&&(c+="}\n\n"));return c}
	var Rf=1,Pf=7,Nf=4,Qf=1E3,If=/\/\*[^*]*\*+([^/*][^*]*\*+)*\//gim,Jf=/@import[^;]*;/gim,Tf=/(?:^[^;\-\s}]+)?--[^;{}]*?:[^{};]*?(?:[;\n]|$)/gim,Uf=/(?:^[^;\-\s}]+)?--[^;{}]*?:[^{};]*?{[^}]*?}(?:[;\n]|$)?/gim,Vf=/@apply\s*\(?[^);]*\)?\s*(?:[;\n]|$)?/gim,Wf=/[^;:]*?:[^;]*?var\([^;]*\)(?:[;\n]|$)?/gim,Of=/^@[^\s]*keyframes/,Mf=/\s+/g;var W=!(window.ShadyDOM&&window.ShadyDOM.inUse),Xf;function Yf(a){Xf=a&&a.shimcssproperties?!1:W||!(navigator.userAgent.match(/AppleWebKit\/601|Edge\/15/)||!window.CSS||!CSS.supports||!CSS.supports("box-shadow","0 0 0 var(--foo)"));}var Zf;window.ShadyCSS&&void 0!==window.ShadyCSS.cssBuild&&(Zf=window.ShadyCSS.cssBuild);var $f=!(!window.ShadyCSS||!window.ShadyCSS.disableRuntime);
	window.ShadyCSS&&void 0!==window.ShadyCSS.nativeCss?Xf=window.ShadyCSS.nativeCss:window.ShadyCSS?(Yf(window.ShadyCSS),window.ShadyCSS=void 0):Yf(window.WebComponents&&window.WebComponents.flags);var Y=Xf;var ag=/(?:^|[;\s{]\s*)(--[\w-]*?)\s*:\s*(?:((?:'(?:\\'|.)*?'|"(?:\\"|.)*?"|\([^)]*?\)|[^};{])+)|\{([^}]*)\}(?:(?=[;\s}])|$))/gi,bg=/(?:^|\W+)@apply\s*\(?([^);\n]*)\)?/gi,dg=/(--[\w-]+)\s*([:,;)]|$)/gi,eg=/(animation\s*:)|(animation-name\s*:)/,fg=/@media\s(.*)/,gg=/\{[^}]*\}/g;var hg=new Set;function ig(a,b){if(!a)return "";"string"===typeof a&&(a=Hf(a));b&&jg(a,b);return Sf(a,Y)}function kg(a){!a.__cssRules&&a.textContent&&(a.__cssRules=Hf(a.textContent));return a.__cssRules||null}function lg(a){return !!a.parent&&a.parent.type===Pf}function jg(a,b,c,d){if(a){var e=!1,f=a.type;if(d&&f===Nf){var g=a.selector.match(fg);g&&(window.matchMedia(g[1]).matches||(e=!0));}f===Rf?b(a):c&&f===Pf?c(a):f===Qf&&(e=!0);if((a=a.rules)&&!e)for(e=0,f=a.length,g=void 0;e<f&&(g=a[e]);e++)jg(g,b,c,d);}}
	function mg(a,b,c,d){var e=document.createElement("style");b&&e.setAttribute("scope",b);e.textContent=a;ng(e,c,d);return e}var og=null;function pg(a){a=document.createComment(" Shady DOM styles for "+a+" ");var b=document.head;b.insertBefore(a,(og?og.nextSibling:null)||b.firstChild);return og=a}function ng(a,b,c){b=b||document.head;b.insertBefore(a,c&&c.nextSibling||b.firstChild);og?a.compareDocumentPosition(og)===Node.DOCUMENT_POSITION_PRECEDING&&(og=a):og=a;}
	function qg(a,b){for(var c=0,d=a.length;b<d;b++)if("("===a[b])c++;else if(")"===a[b]&&0===--c)return b;return -1}function rg(a,b){var c=a.indexOf("var(");if(-1===c)return b(a,"","","");var d=qg(a,c+3),e=a.substring(c+4,d);c=a.substring(0,c);a=rg(a.substring(d+1),b);d=e.indexOf(",");return -1===d?b(c,e.trim(),"",a):b(c,e.substring(0,d).trim(),e.substring(d+1).trim(),a)}function sg(a,b){W?a.setAttribute("class",b):window.ShadyDOM.nativeMethods.setAttribute.call(a,"class",b);}
	var tg=window.ShadyDOM&&window.ShadyDOM.wrap||function(a){return a};function ug(a){var b=a.localName,c="";b?-1<b.indexOf("-")||(c=b,b=a.getAttribute&&a.getAttribute("is")||""):(b=a.is,c=a.extends);return {is:b,Y:c}}function vg(a){for(var b=[],c="",d=0;0<=d&&d<a.length;d++)if("("===a[d]){var e=qg(a,d);c+=a.slice(d,e+1);d=e;}else","===a[d]?(b.push(c),c=""):c+=a[d];c&&b.push(c);return b}
	function wg(a){if(void 0!==Zf)return Zf;if(void 0===a.__cssBuild){var b=a.getAttribute("css-build");if(b)a.__cssBuild=b;else{a:{b="template"===a.localName?a.content.firstChild:a.firstChild;if(b instanceof Comment&&(b=b.textContent.trim().split(":"),"css-build"===b[0])){b=b[1];break a}b="";}if(""!==b){var c="template"===a.localName?a.content.firstChild:a.firstChild;c.parentNode.removeChild(c);}a.__cssBuild=b;}}return a.__cssBuild||""}
	function xg(a){a=void 0===a?"":a;return ""!==a&&Y?W?"shadow"===a:"shady"===a:!1}function yg(){}function zg(a,b){Ag(Bg,a,function(c){Cg(c,b||"");});}function Ag(a,b,c){b.nodeType===Node.ELEMENT_NODE&&c(b);var d;"template"===b.localName?d=(b.content||b._content||b).childNodes:d=b.children||b.childNodes;if(d)for(b=0;b<d.length;b++)Ag(a,d[b],c);}
	function Cg(a,b,c){if(b)if(a.classList)c?(a.classList.remove("style-scope"),a.classList.remove(b)):(a.classList.add("style-scope"),a.classList.add(b));else if(a.getAttribute){var d=a.getAttribute("class");c?d&&(b=d.replace("style-scope","").replace(b,""),sg(a,b)):sg(a,(d?d+" ":"")+"style-scope "+b);}}function Dg(a,b,c){Ag(Bg,a,function(d){Cg(d,b,!0);Cg(d,c);});}function Eg(a,b){Ag(Bg,a,function(c){Cg(c,b||"",!0);});}
	function Fg(a,b,c,d,e){var f=Bg;e=void 0===e?"":e;""===e&&(W||"shady"===(void 0===d?"":d)?e=ig(b,c):(a=ug(a),e=Gg(f,b,a.is,a.Y,c)+"\n\n"));return e.trim()}function Gg(a,b,c,d,e){var f=Hg(c,d);c=c?"."+c:"";return ig(b,function(g){g.c||(g.selector=g.B=Ig(a,g,a.b,c,f),g.c=!0);e&&e(g,c,f);})}function Hg(a,b){return b?"[is="+a+"]":a}
	function Ig(a,b,c,d,e){var f=vg(b.selector);if(!lg(b)){b=0;for(var g=f.length,h=void 0;b<g&&(h=f[b]);b++)f[b]=c.call(a,h,d,e);}return f.filter(function(k){return !!k}).join(",")}function Jg(a){return a.replace(Kg,function(b,c,d){-1<d.indexOf("+")?d=d.replace(/\+/g,"___"):-1<d.indexOf("___")&&(d=d.replace(/___/g,"+"));return ":"+c+"("+d+")"})}
	function Lg(a){for(var b=[],c;c=a.match(Mg);){var d=c.index,e=qg(a,d);if(-1===e)throw Error(c.input+" selector missing ')'");c=a.slice(d,e+1);a=a.replace(c,"\ue000");b.push(c);}return {oa:a,matches:b}}function Ng(a,b){var c=a.split("\ue000");return b.reduce(function(d,e,f){return d+e+c[f+1]},c[0])}
	yg.prototype.b=function(a,b,c){var d=!1;a=a.trim();var e=Kg.test(a);e&&(a=a.replace(Kg,function(h,k,l){return ":"+k+"("+l.replace(/\s/g,"")+")"}),a=Jg(a));var f=Mg.test(a);if(f){var g=Lg(a);a=g.oa;g=g.matches;}a=a.replace(Og,":host $1");a=a.replace(Pg,function(h,k,l){d||(h=Qg(l,k,b,c),d=d||h.stop,k=h.Ga,l=h.value);return k+l});f&&(a=Ng(a,g));e&&(a=Jg(a));return a=a.replace(Rg,function(h,k,l,m){return '[dir="'+l+'"] '+k+m+", "+k+'[dir="'+l+'"]'+m})};
	function Qg(a,b,c,d){var e=a.indexOf("::slotted");0<=a.indexOf(":host")?a=Sg(a,d):0!==e&&(a=c?Tg(a,c):a);c=!1;0<=e&&(b="",c=!0);if(c){var f=!0;c&&(a=a.replace(Ug,function(g,h){return " > "+h}));}return {value:a,Ga:b,stop:f}}function Tg(a,b){a=a.split(/(\[.+?\])/);for(var c=[],d=0;d<a.length;d++)if(1===d%2)c.push(a[d]);else{var e=a[d];if(""!==e||d!==a.length-1)e=e.split(":"),e[0]+=b,c.push(e.join(":"));}return c.join("")}
	function Sg(a,b){var c=a.match(Vg);return (c=c&&c[2].trim()||"")?c[0].match(Wg)?a.replace(Vg,function(d,e,f){return b+f}):c.split(Wg)[0]===b?c:"should_not_match":a.replace(":host",b)}function Xg(a){":root"===a.selector&&(a.selector="html");}yg.prototype.c=function(a){return a.match(":host")?"":a.match("::slotted")?this.b(a,":not(.style-scope)"):Tg(a.trim(),":not(.style-scope)")};ea.Object.defineProperties(yg.prototype,{a:{configurable:!0,enumerable:!0,get:function(){return "style-scope"}}});
	var Kg=/:(nth[-\w]+)\(([^)]+)\)/,Pg=/(^|[\s>+~]+)((?:\[.+?\]|[^\s>+~=[])+)/g,Wg=/[[.:#*]/,Og=/^(::slotted)/,Vg=/(:host)(?:\(((?:\([^)(]*\)|[^)(]*)+?)\))/,Ug=/(?:::slotted)(?:\(((?:\([^)(]*\)|[^)(]*)+?)\))/,Rg=/(.*):dir\((?:(ltr|rtl))\)(.*)/,Mg=/:(?:matches|any|-(?:webkit|moz)-any)/,Bg=new yg;function Yg(a,b,c,d,e){this.J=a||null;this.b=b||null;this.ka=c||[];this.H=null;this.cssBuild=e||"";this.Y=d||"";this.a=this.I=this.M=null;}function Zg(a){return a?a.__styleInfo:null}function $g(a,b){return a.__styleInfo=b}Yg.prototype.c=function(){return this.J};Yg.prototype._getStyleRules=Yg.prototype.c;function ah(a){var b=this.matches||this.matchesSelector||this.mozMatchesSelector||this.msMatchesSelector||this.oMatchesSelector||this.webkitMatchesSelector;return b&&b.call(this,a)}var bh=/:host\s*>\s*/,ch=navigator.userAgent.match("Trident");function dh(){}function eh(a){var b={},c=[],d=0;jg(a,function(f){fh(f);f.index=d++;f=f.A.cssText;for(var g;g=dg.exec(f);){var h=g[1];":"!==g[2]&&(b[h]=!0);}},function(f){c.push(f);});a.b=c;a=[];for(var e in b)a.push(e);return a}
	function fh(a){if(!a.A){var b={},c={};gh(a,c)&&(b.L=c,a.rules=null);b.cssText=a.parsedCssText.replace(gg,"").replace(ag,"");a.A=b;}}function gh(a,b){var c=a.A;if(c){if(c.L)return Object.assign(b,c.L),!0}else{c=a.parsedCssText;for(var d;a=ag.exec(c);){d=(a[2]||a[3]).trim();if("inherit"!==d||"unset"!==d)b[a[1].trim()]=d;d=!0;}return d}}
	function hh(a,b,c){b&&(b=0<=b.indexOf(";")?ih(a,b,c):rg(b,function(d,e,f,g){if(!e)return d+g;(e=hh(a,c[e],c))&&"initial"!==e?"apply-shim-inherit"===e&&(e="inherit"):e=hh(a,c[f]||f,c)||f;return d+(e||"")+g}));return b&&b.trim()||""}
	function ih(a,b,c){b=b.split(";");for(var d=0,e,f;d<b.length;d++)if(e=b[d]){bg.lastIndex=0;if(f=bg.exec(e))e=hh(a,c[f[1]],c);else if(f=e.indexOf(":"),-1!==f){var g=e.substring(f);g=g.trim();g=hh(a,g,c)||g;e=e.substring(0,f)+g;}b[d]=e&&e.lastIndexOf(";")===e.length-1?e.slice(0,-1):e||"";}return b.join(";")}
	function jh(a,b){var c={},d=[];jg(a,function(e){e.A||fh(e);var f=e.B||e.parsedSelector;b&&e.A.L&&f&&ah.call(b,f)&&(gh(e,c),e=e.index,f=parseInt(e/32,10),d[f]=(d[f]||0)|1<<e%32);},null,!0);return {L:c,key:d}}
	function kh(a,b,c,d){b.A||fh(b);if(b.A.L){var e=ug(a);a=e.is;e=e.Y;e=a?Hg(a,e):"html";var f=b.parsedSelector;var g=!!f.match(bh)||"html"===e&&-1<f.indexOf("html");var h=0===f.indexOf(":host")&&!g;"shady"===c&&(g=f===e+" > *."+e||-1!==f.indexOf("html"),h=!g&&0===f.indexOf(e));if(g||h)c=e,h&&(b.B||(b.B=Ig(Bg,b,Bg.b,a?"."+a:"",e)),c=b.B||e),g&&"html"===e&&(c=b.B||b.u),d({oa:c,Na:h,ab:g});}}
	function lh(a,b,c){var d={},e={};jg(b,function(f){kh(a,f,c,function(g){ah.call(a._element||a,g.oa)&&(g.Na?gh(f,d):gh(f,e));});},null,!0);return {Ta:e,La:d}}
	function mh(a,b,c,d){var e=ug(b),f=Hg(e.is,e.Y),g=new RegExp("(?:^|[^.#[:])"+(b.extends?"\\"+f.slice(0,-1)+"\\]":f)+"($|[.:[\\s>+~])"),h=Zg(b);e=h.J;h=h.cssBuild;var k=nh(e,d);return Fg(b,e,function(l){var m="";l.A||fh(l);l.A.cssText&&(m=ih(a,l.A.cssText,c));l.cssText=m;if(!W&&!lg(l)&&l.cssText){var q=m=l.cssText;null==l.sa&&(l.sa=eg.test(m));if(l.sa)if(null==l.ca){l.ca=[];for(var H in k)q=k[H],q=q(m),m!==q&&(m=q,l.ca.push(H));}else{for(H=0;H<l.ca.length;++H)q=k[l.ca[H]],m=q(m);q=m;}l.cssText=q;l.B=
	l.B||l.selector;m="."+d;H=vg(l.B);q=0;for(var E=H.length,r=void 0;q<E&&(r=H[q]);q++)H[q]=r.match(g)?r.replace(f,m):m+" "+r;l.selector=H.join(",");}},h)}function nh(a,b){a=a.b;var c={};if(!W&&a)for(var d=0,e=a[d];d<a.length;e=a[++d]){var f=e,g=b;f.f=new RegExp("\\b"+f.keyframesName+"(?!\\B|-)","g");f.a=f.keyframesName+"-"+g;f.B=f.B||f.selector;f.selector=f.B.replace(f.keyframesName,f.a);c[e.keyframesName]=oh(e);}return c}function oh(a){return function(b){return b.replace(a.f,a.a)}}
	function ph(a,b){var c=qh,d=kg(a);a.textContent=ig(d,function(e){var f=e.cssText=e.parsedCssText;e.A&&e.A.cssText&&(f=f.replace(Tf,"").replace(Uf,""),e.cssText=ih(c,f,b));});}ea.Object.defineProperties(dh.prototype,{a:{configurable:!0,enumerable:!0,get:function(){return "x-scope"}}});var qh=new dh;var rh={},sh=window.customElements;if(sh&&!W&&!$f){var th=sh.define;sh.define=function(a,b,c){rh[a]||(rh[a]=pg(a));th.call(sh,a,b,c);};}function uh(){this.cache={};}uh.prototype.store=function(a,b,c,d){var e=this.cache[a]||[];e.push({L:b,styleElement:c,I:d});100<e.length&&e.shift();this.cache[a]=e;};function vh(){}var wh=new RegExp(Bg.a+"\\s*([^\\s]*)");function xh(a){return (a=(a.classList&&a.classList.value?a.classList.value:a.getAttribute("class")||"").match(wh))?a[1]:""}function yh(a){var b=tg(a).getRootNode();return b===a||b===a.ownerDocument?"":(a=b.host)?ug(a).is:""}
	function zh(a){for(var b=0;b<a.length;b++){var c=a[b];if(c.target!==document.documentElement&&c.target!==document.head)for(var d=0;d<c.addedNodes.length;d++){var e=c.addedNodes[d];if(e.nodeType===Node.ELEMENT_NODE){var f=e.getRootNode(),g=xh(e);if(g&&f===e.ownerDocument&&("style"!==e.localName&&"template"!==e.localName||""===wg(e)))Eg(e,g);else if(f instanceof ShadowRoot)for(f=yh(e),f!==g&&Dg(e,g,f),e=window.ShadyDOM.nativeMethods.querySelectorAll.call(e,":not(."+Bg.a+")"),g=0;g<e.length;g++){f=e[g];
	var h=yh(f);h&&Cg(f,h);}}}}}
	if(!(W||window.ShadyDOM&&window.ShadyDOM.handlesDynamicScoping)){var Ah=new MutationObserver(zh),Bh=function(a){Ah.observe(a,{childList:!0,subtree:!0});};if(window.customElements&&!window.customElements.polyfillWrapFlushCallback)Bh(document);else{var Ch=function(){Bh(document.body);};window.HTMLImports?window.HTMLImports.whenReady(Ch):requestAnimationFrame(function(){if("loading"===document.readyState){var a=function(){Ch();document.removeEventListener("readystatechange",a);};document.addEventListener("readystatechange",
	a);}else Ch();});}vh=function(){zh(Ah.takeRecords());};}var Dh={};var Eh=Promise.resolve();function Fh(a){if(a=Dh[a])a._applyShimCurrentVersion=a._applyShimCurrentVersion||0,a._applyShimValidatingVersion=a._applyShimValidatingVersion||0,a._applyShimNextVersion=(a._applyShimNextVersion||0)+1;}function Gh(a){return a._applyShimCurrentVersion===a._applyShimNextVersion}function Hh(a){a._applyShimValidatingVersion=a._applyShimNextVersion;a._validating||(a._validating=!0,Eh.then(function(){a._applyShimCurrentVersion=a._applyShimNextVersion;a._validating=!1;}));}var Ih={},Jh=new uh;function Z(){this.F={};this.c=document.documentElement;var a=new Gf;a.rules=[];this.f=$g(this.c,new Yg(a));this.u=!1;this.a=this.b=null;}w=Z.prototype;w.flush=function(){vh();};w.Ja=function(a){return kg(a)};w.Xa=function(a){return ig(a)};w.prepareTemplate=function(a,b,c){this.prepareTemplateDom(a,b);this.prepareTemplateStyles(a,b,c);};
	w.prepareTemplateStyles=function(a,b,c){if(!a._prepared&&!$f){W||rh[b]||(rh[b]=pg(b));a._prepared=!0;a.name=b;a.extends=c;Dh[b]=a;var d=wg(a),e=xg(d);c={is:b,extends:c};for(var f=[],g=a.content.querySelectorAll("style"),h=0;h<g.length;h++){var k=g[h];if(k.hasAttribute("shady-unscoped")){if(!W){var l=k.textContent;hg.has(l)||(hg.add(l),l=k.cloneNode(!0),document.head.appendChild(l));k.parentNode.removeChild(k);}}else f.push(k.textContent),k.parentNode.removeChild(k);}f=f.join("").trim()+(Ih[b]||"");
	Kh(this);if(!e){if(g=!d)g=bg.test(f)||ag.test(f),bg.lastIndex=0,ag.lastIndex=0;h=Hf(f);g&&Y&&this.b&&this.b.transformRules(h,b);a._styleAst=h;}g=[];Y||(g=eh(a._styleAst));if(!g.length||Y)h=W?a.content:null,b=rh[b]||null,d=Fg(c,a._styleAst,null,d,e?f:""),d=d.length?mg(d,c.is,h,b):null,a._style=d;a.a=g;}};w.Ra=function(a,b){Ih[b]=a.join(" ");};w.prepareTemplateDom=function(a,b){if(!$f){var c=wg(a);W||"shady"===c||a._domPrepared||(a._domPrepared=!0,zg(a.content,b));}};
	function Lh(a){var b=ug(a),c=b.is;b=b.Y;var d=rh[c]||null,e=Dh[c];if(e){c=e._styleAst;var f=e.a;e=wg(e);b=new Yg(c,d,f,b,e);$g(a,b);return b}}function Mh(a){!a.a&&window.ShadyCSS&&window.ShadyCSS.CustomStyleInterface&&(a.a=window.ShadyCSS.CustomStyleInterface,a.a.transformCallback=function(b){a.xa(b);},a.a.validateCallback=function(){requestAnimationFrame(function(){(a.a.enqueued||a.u)&&a.flushCustomStyles();});});}
	function Kh(a){if(!a.b&&window.ShadyCSS&&window.ShadyCSS.ApplyShim){a.b=window.ShadyCSS.ApplyShim;a.b.invalidCallback=Fh;var b=!0;}else b=!1;Mh(a);return b}
	w.flushCustomStyles=function(){if(!$f){var a=Kh(this);if(this.a){var b=this.a.processStyles();if((a||this.a.enqueued)&&!xg(this.f.cssBuild)){if(Y){if(!this.f.cssBuild)for(a=0;a<b.length;a++){var c=this.a.getStyleForCustomStyle(b[a]);if(c&&Y&&this.b){var d=kg(c);Kh(this);this.b.transformRules(d);c.textContent=ig(d);}}}else{Nh(this,b);Oh(this,this.c,this.f);for(a=0;a<b.length;a++)(c=this.a.getStyleForCustomStyle(b[a]))&&ph(c,this.f.M);this.u&&this.styleDocument();}this.a.enqueued=!1;}}}};
	function Nh(a,b){b=b.map(function(c){return a.a.getStyleForCustomStyle(c)}).filter(function(c){return !!c});b.sort(function(c,d){c=d.compareDocumentPosition(c);return c&Node.DOCUMENT_POSITION_FOLLOWING?1:c&Node.DOCUMENT_POSITION_PRECEDING?-1:0});a.f.J.rules=b.map(function(c){return kg(c)});}
	w.styleElement=function(a,b){if($f){if(b){Zg(a)||$g(a,new Yg(null));var c=Zg(a);c.H=c.H||{};Object.assign(c.H,b);Ph(this,a,c);}}else if(c=Zg(a)||Lh(a))if(a!==this.c&&(this.u=!0),b&&(c.H=c.H||{},Object.assign(c.H,b)),Y)Ph(this,a,c);else if(this.flush(),Oh(this,a,c),c.ka&&c.ka.length){b=ug(a).is;var d;a:{if(d=Jh.cache[b])for(var e=d.length-1;0<=e;e--){var f=d[e];b:{var g=c.ka;for(var h=0;h<g.length;h++){var k=g[h];if(f.L[k]!==c.M[k]){g=!1;break b}}g=!0;}if(g){d=f;break a}}d=void 0;}g=d?d.styleElement:
	null;e=c.I;(f=d&&d.I)||(f=this.F[b]=(this.F[b]||0)+1,f=b+"-"+f);c.I=f;f=c.I;h=qh;h=g?g.textContent||"":mh(h,a,c.M,f);k=Zg(a);var l=k.a;l&&!W&&l!==g&&(l._useCount--,0>=l._useCount&&l.parentNode&&l.parentNode.removeChild(l));W?k.a?(k.a.textContent=h,g=k.a):h&&(g=mg(h,f,a.shadowRoot,k.b)):g?g.parentNode||(ch&&-1<h.indexOf("@media")&&(g.textContent=h),ng(g,null,k.b)):h&&(g=mg(h,f,null,k.b));g&&(g._useCount=g._useCount||0,k.a!=g&&g._useCount++,k.a=g);f=g;W||(g=c.I,k=h=a.getAttribute("class")||"",e&&(k=
	h.replace(new RegExp("\\s*x-scope\\s*"+e+"\\s*","g")," ")),k+=(k?" ":"")+"x-scope "+g,h!==k&&sg(a,k));d||Jh.store(b,c.M,f,c.I);}};
	function Ph(a,b,c){var d=ug(b).is;if(c.H){var e=c.H,f;for(f in e)null===f?b.style.removeProperty(f):b.style.setProperty(f,e[f]);}e=Dh[d];if(!(!e&&b!==a.c||e&&""!==wg(e))&&e&&e._style&&!Gh(e)){if(Gh(e)||e._applyShimValidatingVersion!==e._applyShimNextVersion)Kh(a),a.b&&a.b.transformRules(e._styleAst,d),e._style.textContent=Fg(b,c.J),Hh(e);W&&(a=b.shadowRoot)&&(a=a.querySelector("style"))&&(a.textContent=Fg(b,c.J));c.J=e._styleAst;}}
	function Qh(a,b){return (b=tg(b).getRootNode().host)?Zg(b)||Lh(b)?b:Qh(a,b):a.c}function Oh(a,b,c){var d=Qh(a,b),e=Zg(d),f=e.M;d===a.c||f||(Oh(a,d,e),f=e.M);a=Object.create(f||null);d=lh(b,c.J,c.cssBuild);b=jh(e.J,b).L;Object.assign(a,d.La,b,d.Ta);b=c.H;for(var g in b)if((e=b[g])||0===e)a[g]=e;g=qh;b=Object.getOwnPropertyNames(a);for(e=0;e<b.length;e++)d=b[e],a[d]=hh(g,a[d],a);c.M=a;}w.styleDocument=function(a){this.styleSubtree(this.c,a);};
	w.styleSubtree=function(a,b){var c=tg(a),d=c.shadowRoot,e=a===this.c;(d||e)&&this.styleElement(a,b);if(a=e?c:d)for(a=Array.from(a.querySelectorAll("*")).filter(function(f){return tg(f).shadowRoot}),b=0;b<a.length;b++)this.styleSubtree(a[b]);};
	w.xa=function(a){var b=this,c=wg(a);c!==this.f.cssBuild&&(this.f.cssBuild=c);if(!xg(c)){var d=kg(a);jg(d,function(e){if(W)Xg(e);else{var f=Bg;e.selector=e.parsedSelector;Xg(e);e.selector=e.B=Ig(f,e,f.c,void 0,void 0);}Y&&""===c&&(Kh(b),b.b&&b.b.transformRule(e));});Y?a.textContent=ig(d):this.f.J.rules.push(d);}};w.getComputedStyleValue=function(a,b){var c;Y||(c=(Zg(a)||Zg(Qh(this,a))).M[b]);return (c=c||window.getComputedStyle(a).getPropertyValue(b))?c.trim():""};
	w.Wa=function(a,b){var c=tg(a).getRootNode(),d;b?d=("string"===typeof b?b:String(b)).split(/\s/):d=[];b=c.host&&c.host.localName;if(!b&&(c=a.getAttribute("class"))){c=c.split(/\s/);for(var e=0;e<c.length;e++)if(c[e]===Bg.a){b=c[e+1];break}}b&&d.push(Bg.a,b);Y||(b=Zg(a))&&b.I&&d.push(qh.a,b.I);sg(a,d.join(" "));};w.Ea=function(a){return Zg(a)};w.Va=function(a,b){Cg(a,b);};w.Ya=function(a,b){Cg(a,b,!0);};w.Ua=function(a){return yh(a)};w.Ha=function(a){return xh(a)};Z.prototype.flush=Z.prototype.flush;
	Z.prototype.prepareTemplate=Z.prototype.prepareTemplate;Z.prototype.styleElement=Z.prototype.styleElement;Z.prototype.styleDocument=Z.prototype.styleDocument;Z.prototype.styleSubtree=Z.prototype.styleSubtree;Z.prototype.getComputedStyleValue=Z.prototype.getComputedStyleValue;Z.prototype.setElementClass=Z.prototype.Wa;Z.prototype._styleInfoForNode=Z.prototype.Ea;Z.prototype.transformCustomStyleForDocument=Z.prototype.xa;Z.prototype.getStyleAst=Z.prototype.Ja;Z.prototype.styleAstToString=Z.prototype.Xa;
	Z.prototype.flushCustomStyles=Z.prototype.flushCustomStyles;Z.prototype.scopeNode=Z.prototype.Va;Z.prototype.unscopeNode=Z.prototype.Ya;Z.prototype.scopeForNode=Z.prototype.Ua;Z.prototype.currentScopeForNode=Z.prototype.Ha;Z.prototype.prepareAdoptedCssText=Z.prototype.Ra;Object.defineProperties(Z.prototype,{nativeShadow:{get:function(){return W}},nativeCss:{get:function(){return Y}}});var Rh=new Z,Sh,Th;window.ShadyCSS&&(Sh=window.ShadyCSS.ApplyShim,Th=window.ShadyCSS.CustomStyleInterface);
	window.ShadyCSS={ScopingShim:Rh,prepareTemplate:function(a,b,c){Rh.flushCustomStyles();Rh.prepareTemplate(a,b,c);},prepareTemplateDom:function(a,b){Rh.prepareTemplateDom(a,b);},prepareTemplateStyles:function(a,b,c){Rh.flushCustomStyles();Rh.prepareTemplateStyles(a,b,c);},styleSubtree:function(a,b){Rh.flushCustomStyles();Rh.styleSubtree(a,b);},styleElement:function(a){Rh.flushCustomStyles();Rh.styleElement(a);},styleDocument:function(a){Rh.flushCustomStyles();Rh.styleDocument(a);},flushCustomStyles:function(){Rh.flushCustomStyles();},
	getComputedStyleValue:function(a,b){return Rh.getComputedStyleValue(a,b)},nativeCss:Y,nativeShadow:W,cssBuild:Zf,disableRuntime:$f};Sh&&(window.ShadyCSS.ApplyShim=Sh);Th&&(window.ShadyCSS.CustomStyleInterface=Th);(function(a){function b(r){""==r&&(f.call(this),this.i=!0);return r.toLowerCase()}function c(r){var F=r.charCodeAt(0);return 32<F&&127>F&&-1==[34,35,60,62,63,96].indexOf(F)?r:encodeURIComponent(r)}function d(r){var F=r.charCodeAt(0);return 32<F&&127>F&&-1==[34,35,60,62,96].indexOf(F)?r:encodeURIComponent(r)}function e(r,F,C){function N(la){}var y=F||"scheme start",X=0,v="",ra=!1,fa=!1;a:for(;(void 0!=r[X-1]||0==X)&&!this.i;){var n=r[X];switch(y){case "scheme start":if(n&&q.test(n))v+=
	n.toLowerCase(),y="scheme";else if(F){break a}else{v="";y="no scheme";continue}break;case "scheme":if(n&&H.test(n))v+=n.toLowerCase();else if(":"==n){this.h=v;v="";if(F)break a;void 0!==l[this.h]&&(this.C=!0);y="file"==this.h?"relative":this.C&&C&&C.h==this.h?"relative or authority":this.C?"authority first slash":"scheme data";}else if(F){break a}else{v="";X=0;y="no scheme";continue}break;case "scheme data":"?"==n?(this.o="?",
	y="query"):"#"==n?(this.v="#",y="fragment"):void 0!=n&&"\t"!=n&&"\n"!=n&&"\r"!=n&&(this.ga+=c(n));break;case "no scheme":if(C&&void 0!==l[C.h]){y="relative";continue}else f.call(this),this.i=!0;break;case "relative or authority":if("/"==n&&"/"==r[X+1])y="authority ignore slashes";else{y="relative";continue}break;case "relative":this.C=!0;"file"!=this.h&&(this.h=C.h);if(void 0==n){this.j=C.j;this.m=C.m;this.l=C.l.slice();this.o=C.o;this.s=C.s;this.g=C.g;
	break a}else if("/"==n||"\\"==n)y="relative slash";else if("?"==n)this.j=C.j,this.m=C.m,this.l=C.l.slice(),this.o="?",this.s=C.s,this.g=C.g,y="query";else if("#"==n)this.j=C.j,this.m=C.m,this.l=C.l.slice(),this.o=C.o,this.v="#",this.s=C.s,this.g=C.g,y="fragment";else{y=r[X+1];var I=r[X+2];if("file"!=this.h||!q.test(n)||":"!=y&&"|"!=y||void 0!=I&&"/"!=I&&"\\"!=I&&"?"!=I&&"#"!=I)this.j=C.j,this.m=C.m,this.s=C.s,this.g=C.g,this.l=C.l.slice(),this.l.pop();y=
	"relative path";continue}break;case "relative slash":if("/"==n||"\\"==n)y="file"==this.h?"file host":"authority ignore slashes";else{"file"!=this.h&&(this.j=C.j,this.m=C.m,this.s=C.s,this.g=C.g);y="relative path";continue}break;case "authority first slash":if("/"==n)y="authority second slash";else{y="authority ignore slashes";continue}break;case "authority second slash":y="authority ignore slashes";if("/"!=n){continue}break;case "authority ignore slashes":if("/"!=n&&"\\"!=n){y="authority";continue}break;case "authority":if("@"==n){ra&&(v+="%40");ra=!0;for(n=0;n<v.length;n++)I=v[n],"\t"==I||"\n"==I||"\r"==I?N("Invalid whitespace in authority."):":"==I&&null===this.g?this.g="":(I=c(I),null!==this.g?this.g+=I:this.s+=I);v="";}else if(void 0==n||"/"==n||"\\"==n||"?"==n||"#"==n){X-=v.length;v="";y="host";continue}else v+=n;break;case "file host":if(void 0==
	n||"/"==n||"\\"==n||"?"==n||"#"==n){2!=v.length||!q.test(v[0])||":"!=v[1]&&"|"!=v[1]?(0!=v.length&&(this.j=b.call(this,v),v=""),y="relative path start"):y="relative path";continue}else"\t"==n||"\n"==n||"\r"==n?N("Invalid whitespace in file host."):v+=n;break;case "host":case "hostname":if(":"!=n||fa)if(void 0==n||"/"==n||"\\"==n||"?"==n||"#"==n){this.j=b.call(this,v);v="";y="relative path start";if(F)break a;continue}else"\t"!=n&&"\n"!=n&&"\r"!=n?("["==n?fa=!0:"]"==n&&(fa=!1),v+=n):N("Invalid code point in host/hostname: "+
	n);else if(this.j=b.call(this,v),v="",y="port","hostname"==F)break a;break;case "port":if(/[0-9]/.test(n))v+=n;else if(void 0==n||"/"==n||"\\"==n||"?"==n||"#"==n||F){""!=v&&(v=parseInt(v,10),v!=l[this.h]&&(this.m=v+""),v="");if(F)break a;y="relative path start";continue}else"\t"==n||"\n"==n||"\r"==n?N("Invalid code point in port: "+n):(f.call(this),this.i=!0);break;case "relative path start":y="relative path";if("/"!=n&&"\\"!=n)continue;break;case "relative path":if(void 0!=
	n&&"/"!=n&&"\\"!=n&&(F||"?"!=n&&"#"!=n))"\t"!=n&&"\n"!=n&&"\r"!=n&&(v+=c(n));else{if(I=m[v.toLowerCase()])v=I;".."==v?(this.l.pop(),"/"!=n&&"\\"!=n&&this.l.push("")):"."==v&&"/"!=n&&"\\"!=n?this.l.push(""):"."!=v&&("file"==this.h&&0==this.l.length&&2==v.length&&q.test(v[0])&&"|"==v[1]&&(v=v[0]+":"),this.l.push(v));v="";"?"==n?(this.o="?",y="query"):"#"==n&&(this.v="#",y="fragment");}break;case "query":F||"#"!=n?void 0!=n&&"\t"!=n&&"\n"!=n&&"\r"!=n&&(this.o+=
	d(n)):(this.v="#",y="fragment");break;case "fragment":void 0!=n&&"\t"!=n&&"\n"!=n&&"\r"!=n&&(this.v+=n);}X++;}}function f(){this.s=this.ga=this.h="";this.g=null;this.m=this.j="";this.l=[];this.v=this.o="";this.C=this.i=!1;}function g(r,F){void 0===F||F instanceof g||(F=new g(String(F)));this.a=r;f.call(this);e.call(this,this.a.replace(/^[ \t\r\n\f]+|[ \t\r\n\f]+$/g,""),null,F);}var h=!1;try{var k=new URL("b","http://a");k.pathname="c%20d";h="http://a/c%20d"===k.href;}catch(r){}if(!h){var l=Object.create(null);
	l.ftp=21;l.file=0;l.gopher=70;l.http=80;l.https=443;l.ws=80;l.wss=443;var m=Object.create(null);m["%2e"]=".";m[".%2e"]="..";m["%2e."]="..";m["%2e%2e"]="..";var q=/[a-zA-Z]/,H=/[a-zA-Z0-9\+\-\.]/;g.prototype={toString:function(){return this.href},get href(){if(this.i)return this.a;var r="";if(""!=this.s||null!=this.g)r=this.s+(null!=this.g?":"+this.g:"")+"@";return this.protocol+(this.C?"//"+r+this.host:"")+this.pathname+this.o+this.v},set href(r){f.call(this);e.call(this,r);},get protocol(){return this.h+
	":"},set protocol(r){this.i||e.call(this,r+":","scheme start");},get host(){return this.i?"":this.m?this.j+":"+this.m:this.j},set host(r){!this.i&&this.C&&e.call(this,r,"host");},get hostname(){return this.j},set hostname(r){!this.i&&this.C&&e.call(this,r,"hostname");},get port(){return this.m},set port(r){!this.i&&this.C&&e.call(this,r,"port");},get pathname(){return this.i?"":this.C?"/"+this.l.join("/"):this.ga},set pathname(r){!this.i&&this.C&&(this.l=[],e.call(this,r,"relative path start"));},get search(){return this.i||
	!this.o||"?"==this.o?"":this.o},set search(r){!this.i&&this.C&&(this.o="?","?"==r[0]&&(r=r.slice(1)),e.call(this,r,"query"));},get hash(){return this.i||!this.v||"#"==this.v?"":this.v},set hash(r){this.i||(r?(this.v="#","#"==r[0]&&(r=r.slice(1)),e.call(this,r,"fragment")):this.v="");},get origin(){var r;if(this.i||!this.h)return "";switch(this.h){case "data":case "file":case "javascript":case "mailto":return "null"}return (r=this.host)?this.h+"://"+r:""}};var E=a.URL;E&&(g.createObjectURL=function(r){return E.createObjectURL.apply(E,
	arguments)},g.revokeObjectURL=function(r){E.revokeObjectURL(r);});a.URL=g;}})(window);Object.getOwnPropertyDescriptor(Node.prototype,"baseURI")||Object.defineProperty(Node.prototype,"baseURI",{get:function(){var a=(this.ownerDocument||this).querySelector("base[href]");return a&&a.href||window.location.href},configurable:!0,enumerable:!0});var Uh=document.createElement("style");Uh.textContent="body {transition: opacity ease-in 0.2s; } \nbody[unresolved] {opacity: 0; display: block; overflow: hidden; position: relative; } \n";var Vh=document.querySelector("head");Vh.insertBefore(Uh,Vh.firstChild);var Wh=window.customElements,Xh=!1,Yh=null;Wh.polyfillWrapFlushCallback&&Wh.polyfillWrapFlushCallback(function(a){Yh=a;Xh&&a();});function Zh(){window.HTMLTemplateElement.bootstrap&&window.HTMLTemplateElement.bootstrap(window.document);Yh&&Yh();Xh=!0;window.WebComponents.ready=!0;document.dispatchEvent(new CustomEvent("WebComponentsReady",{bubbles:!0}));}
	"complete"!==document.readyState?(window.addEventListener("load",Zh),window.addEventListener("DOMContentLoaded",function(){window.removeEventListener("load",Zh);Zh();})):Zh();}).call(commonjsGlobal);

	/**
	 * lodash (Custom Build) <https://lodash.com/>
	 * Build: `lodash modularize exports="npm" -o ./`
	 * Copyright jQuery Foundation and other contributors <https://jquery.org/>
	 * Released under MIT license <https://lodash.com/license>
	 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
	 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
	 */

	/** Used as the `TypeError` message for "Functions" methods. */
	var FUNC_ERROR_TEXT = 'Expected a function';

	/** Used as references for various `Number` constants. */
	var NAN = 0 / 0;

	/** `Object#toString` result references. */
	var symbolTag = '[object Symbol]';

	/** Used to match leading and trailing whitespace. */
	var reTrim = /^\s+|\s+$/g;

	/** Used to detect bad signed hexadecimal string values. */
	var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

	/** Used to detect binary string values. */
	var reIsBinary = /^0b[01]+$/i;

	/** Used to detect octal string values. */
	var reIsOctal = /^0o[0-7]+$/i;

	/** Built-in method references without a dependency on `root`. */
	var freeParseInt = parseInt;

	/** Detect free variable `global` from Node.js. */
	var freeGlobal = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;

	/** Detect free variable `self`. */
	var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

	/** Used as a reference to the global object. */
	var root = freeGlobal || freeSelf || Function('return this')();

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/**
	 * Used to resolve the
	 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var objectToString$1 = objectProto.toString;

	/* Built-in method references for those with the same name as other `lodash` methods. */
	var nativeMax = Math.max,
	    nativeMin = Math.min;

	/**
	 * Gets the timestamp of the number of milliseconds that have elapsed since
	 * the Unix epoch (1 January 1970 00:00:00 UTC).
	 *
	 * @static
	 * @memberOf _
	 * @since 2.4.0
	 * @category Date
	 * @returns {number} Returns the timestamp.
	 * @example
	 *
	 * _.defer(function(stamp) {
	 *   console.log(_.now() - stamp);
	 * }, _.now());
	 * // => Logs the number of milliseconds it took for the deferred invocation.
	 */
	var now = function() {
	  return root.Date.now();
	};

	/**
	 * Creates a debounced function that delays invoking `func` until after `wait`
	 * milliseconds have elapsed since the last time the debounced function was
	 * invoked. The debounced function comes with a `cancel` method to cancel
	 * delayed `func` invocations and a `flush` method to immediately invoke them.
	 * Provide `options` to indicate whether `func` should be invoked on the
	 * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
	 * with the last arguments provided to the debounced function. Subsequent
	 * calls to the debounced function return the result of the last `func`
	 * invocation.
	 *
	 * **Note:** If `leading` and `trailing` options are `true`, `func` is
	 * invoked on the trailing edge of the timeout only if the debounced function
	 * is invoked more than once during the `wait` timeout.
	 *
	 * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
	 * until to the next tick, similar to `setTimeout` with a timeout of `0`.
	 *
	 * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
	 * for details over the differences between `_.debounce` and `_.throttle`.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Function
	 * @param {Function} func The function to debounce.
	 * @param {number} [wait=0] The number of milliseconds to delay.
	 * @param {Object} [options={}] The options object.
	 * @param {boolean} [options.leading=false]
	 *  Specify invoking on the leading edge of the timeout.
	 * @param {number} [options.maxWait]
	 *  The maximum time `func` is allowed to be delayed before it's invoked.
	 * @param {boolean} [options.trailing=true]
	 *  Specify invoking on the trailing edge of the timeout.
	 * @returns {Function} Returns the new debounced function.
	 * @example
	 *
	 * // Avoid costly calculations while the window size is in flux.
	 * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
	 *
	 * // Invoke `sendMail` when clicked, debouncing subsequent calls.
	 * jQuery(element).on('click', _.debounce(sendMail, 300, {
	 *   'leading': true,
	 *   'trailing': false
	 * }));
	 *
	 * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
	 * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
	 * var source = new EventSource('/stream');
	 * jQuery(source).on('message', debounced);
	 *
	 * // Cancel the trailing debounced invocation.
	 * jQuery(window).on('popstate', debounced.cancel);
	 */
	function debounce(func, wait, options) {
	  var lastArgs,
	      lastThis,
	      maxWait,
	      result,
	      timerId,
	      lastCallTime,
	      lastInvokeTime = 0,
	      leading = false,
	      maxing = false,
	      trailing = true;

	  if (typeof func != 'function') {
	    throw new TypeError(FUNC_ERROR_TEXT);
	  }
	  wait = toNumber$1(wait) || 0;
	  if (isObject$1(options)) {
	    leading = !!options.leading;
	    maxing = 'maxWait' in options;
	    maxWait = maxing ? nativeMax(toNumber$1(options.maxWait) || 0, wait) : maxWait;
	    trailing = 'trailing' in options ? !!options.trailing : trailing;
	  }

	  function invokeFunc(time) {
	    var args = lastArgs,
	        thisArg = lastThis;

	    lastArgs = lastThis = undefined;
	    lastInvokeTime = time;
	    result = func.apply(thisArg, args);
	    return result;
	  }

	  function leadingEdge(time) {
	    // Reset any `maxWait` timer.
	    lastInvokeTime = time;
	    // Start the timer for the trailing edge.
	    timerId = setTimeout(timerExpired, wait);
	    // Invoke the leading edge.
	    return leading ? invokeFunc(time) : result;
	  }

	  function remainingWait(time) {
	    var timeSinceLastCall = time - lastCallTime,
	        timeSinceLastInvoke = time - lastInvokeTime,
	        result = wait - timeSinceLastCall;

	    return maxing ? nativeMin(result, maxWait - timeSinceLastInvoke) : result;
	  }

	  function shouldInvoke(time) {
	    var timeSinceLastCall = time - lastCallTime,
	        timeSinceLastInvoke = time - lastInvokeTime;

	    // Either this is the first call, activity has stopped and we're at the
	    // trailing edge, the system time has gone backwards and we're treating
	    // it as the trailing edge, or we've hit the `maxWait` limit.
	    return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||
	      (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));
	  }

	  function timerExpired() {
	    var time = now();
	    if (shouldInvoke(time)) {
	      return trailingEdge(time);
	    }
	    // Restart the timer.
	    timerId = setTimeout(timerExpired, remainingWait(time));
	  }

	  function trailingEdge(time) {
	    timerId = undefined;

	    // Only invoke if we have `lastArgs` which means `func` has been
	    // debounced at least once.
	    if (trailing && lastArgs) {
	      return invokeFunc(time);
	    }
	    lastArgs = lastThis = undefined;
	    return result;
	  }

	  function cancel() {
	    if (timerId !== undefined) {
	      clearTimeout(timerId);
	    }
	    lastInvokeTime = 0;
	    lastArgs = lastCallTime = lastThis = timerId = undefined;
	  }

	  function flush() {
	    return timerId === undefined ? result : trailingEdge(now());
	  }

	  function debounced() {
	    var time = now(),
	        isInvoking = shouldInvoke(time);

	    lastArgs = arguments;
	    lastThis = this;
	    lastCallTime = time;

	    if (isInvoking) {
	      if (timerId === undefined) {
	        return leadingEdge(lastCallTime);
	      }
	      if (maxing) {
	        // Handle invocations in a tight loop.
	        timerId = setTimeout(timerExpired, wait);
	        return invokeFunc(lastCallTime);
	      }
	    }
	    if (timerId === undefined) {
	      timerId = setTimeout(timerExpired, wait);
	    }
	    return result;
	  }
	  debounced.cancel = cancel;
	  debounced.flush = flush;
	  return debounced;
	}

	/**
	 * Checks if `value` is the
	 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
	 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
	 * @example
	 *
	 * _.isObject({});
	 * // => true
	 *
	 * _.isObject([1, 2, 3]);
	 * // => true
	 *
	 * _.isObject(_.noop);
	 * // => true
	 *
	 * _.isObject(null);
	 * // => false
	 */
	function isObject$1(value) {
	  var type = typeof value;
	  return !!value && (type == 'object' || type == 'function');
	}

	/**
	 * Checks if `value` is object-like. A value is object-like if it's not `null`
	 * and has a `typeof` result of "object".
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
	 * @example
	 *
	 * _.isObjectLike({});
	 * // => true
	 *
	 * _.isObjectLike([1, 2, 3]);
	 * // => true
	 *
	 * _.isObjectLike(_.noop);
	 * // => false
	 *
	 * _.isObjectLike(null);
	 * // => false
	 */
	function isObjectLike(value) {
	  return !!value && typeof value == 'object';
	}

	/**
	 * Checks if `value` is classified as a `Symbol` primitive or object.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
	 * @example
	 *
	 * _.isSymbol(Symbol.iterator);
	 * // => true
	 *
	 * _.isSymbol('abc');
	 * // => false
	 */
	function isSymbol$1(value) {
	  return typeof value == 'symbol' ||
	    (isObjectLike(value) && objectToString$1.call(value) == symbolTag);
	}

	/**
	 * Converts `value` to a number.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to process.
	 * @returns {number} Returns the number.
	 * @example
	 *
	 * _.toNumber(3.2);
	 * // => 3.2
	 *
	 * _.toNumber(Number.MIN_VALUE);
	 * // => 5e-324
	 *
	 * _.toNumber(Infinity);
	 * // => Infinity
	 *
	 * _.toNumber('3.2');
	 * // => 3.2
	 */
	function toNumber$1(value) {
	  if (typeof value == 'number') {
	    return value;
	  }
	  if (isSymbol$1(value)) {
	    return NAN;
	  }
	  if (isObject$1(value)) {
	    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
	    value = isObject$1(other) ? (other + '') : other;
	  }
	  if (typeof value != 'string') {
	    return value === 0 ? value : +value;
	  }
	  value = value.replace(reTrim, '');
	  var isBinary = reIsBinary.test(value);
	  return (isBinary || reIsOctal.test(value))
	    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
	    : (reIsBadHex.test(value) ? NAN : +value);
	}

	var lodash_debounce = debounce;

	var heap = createCommonjsModule(function (module, exports) {
	// Generated by CoffeeScript 1.8.0
	(function() {
	  var Heap, defaultCmp, floor, heapify, heappop, heappush, heappushpop, heapreplace, insort, min, nlargest, nsmallest, updateItem, _siftdown, _siftup;

	  floor = Math.floor, min = Math.min;


	  /*
	  Default comparison function to be used
	   */

	  defaultCmp = function(x, y) {
	    if (x < y) {
	      return -1;
	    }
	    if (x > y) {
	      return 1;
	    }
	    return 0;
	  };


	  /*
	  Insert item x in list a, and keep it sorted assuming a is sorted.
	  
	  If x is already in a, insert it to the right of the rightmost x.
	  
	  Optional args lo (default 0) and hi (default a.length) bound the slice
	  of a to be searched.
	   */

	  insort = function(a, x, lo, hi, cmp) {
	    var mid;
	    if (lo == null) {
	      lo = 0;
	    }
	    if (cmp == null) {
	      cmp = defaultCmp;
	    }
	    if (lo < 0) {
	      throw new Error('lo must be non-negative');
	    }
	    if (hi == null) {
	      hi = a.length;
	    }
	    while (lo < hi) {
	      mid = floor((lo + hi) / 2);
	      if (cmp(x, a[mid]) < 0) {
	        hi = mid;
	      } else {
	        lo = mid + 1;
	      }
	    }
	    return ([].splice.apply(a, [lo, lo - lo].concat(x)), x);
	  };


	  /*
	  Push item onto heap, maintaining the heap invariant.
	   */

	  heappush = function(array, item, cmp) {
	    if (cmp == null) {
	      cmp = defaultCmp;
	    }
	    array.push(item);
	    return _siftdown(array, 0, array.length - 1, cmp);
	  };


	  /*
	  Pop the smallest item off the heap, maintaining the heap invariant.
	   */

	  heappop = function(array, cmp) {
	    var lastelt, returnitem;
	    if (cmp == null) {
	      cmp = defaultCmp;
	    }
	    lastelt = array.pop();
	    if (array.length) {
	      returnitem = array[0];
	      array[0] = lastelt;
	      _siftup(array, 0, cmp);
	    } else {
	      returnitem = lastelt;
	    }
	    return returnitem;
	  };


	  /*
	  Pop and return the current smallest value, and add the new item.
	  
	  This is more efficient than heappop() followed by heappush(), and can be
	  more appropriate when using a fixed size heap. Note that the value
	  returned may be larger than item! That constrains reasonable use of
	  this routine unless written as part of a conditional replacement:
	      if item > array[0]
	        item = heapreplace(array, item)
	   */

	  heapreplace = function(array, item, cmp) {
	    var returnitem;
	    if (cmp == null) {
	      cmp = defaultCmp;
	    }
	    returnitem = array[0];
	    array[0] = item;
	    _siftup(array, 0, cmp);
	    return returnitem;
	  };


	  /*
	  Fast version of a heappush followed by a heappop.
	   */

	  heappushpop = function(array, item, cmp) {
	    var _ref;
	    if (cmp == null) {
	      cmp = defaultCmp;
	    }
	    if (array.length && cmp(array[0], item) < 0) {
	      _ref = [array[0], item], item = _ref[0], array[0] = _ref[1];
	      _siftup(array, 0, cmp);
	    }
	    return item;
	  };


	  /*
	  Transform list into a heap, in-place, in O(array.length) time.
	   */

	  heapify = function(array, cmp) {
	    var i, _i, _len, _ref1, _results, _results1;
	    if (cmp == null) {
	      cmp = defaultCmp;
	    }
	    _ref1 = (function() {
	      _results1 = [];
	      for (var _j = 0, _ref = floor(array.length / 2); 0 <= _ref ? _j < _ref : _j > _ref; 0 <= _ref ? _j++ : _j--){ _results1.push(_j); }
	      return _results1;
	    }).apply(this).reverse();
	    _results = [];
	    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
	      i = _ref1[_i];
	      _results.push(_siftup(array, i, cmp));
	    }
	    return _results;
	  };


	  /*
	  Update the position of the given item in the heap.
	  This function should be called every time the item is being modified.
	   */

	  updateItem = function(array, item, cmp) {
	    var pos;
	    if (cmp == null) {
	      cmp = defaultCmp;
	    }
	    pos = array.indexOf(item);
	    if (pos === -1) {
	      return;
	    }
	    _siftdown(array, 0, pos, cmp);
	    return _siftup(array, pos, cmp);
	  };


	  /*
	  Find the n largest elements in a dataset.
	   */

	  nlargest = function(array, n, cmp) {
	    var elem, result, _i, _len, _ref;
	    if (cmp == null) {
	      cmp = defaultCmp;
	    }
	    result = array.slice(0, n);
	    if (!result.length) {
	      return result;
	    }
	    heapify(result, cmp);
	    _ref = array.slice(n);
	    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
	      elem = _ref[_i];
	      heappushpop(result, elem, cmp);
	    }
	    return result.sort(cmp).reverse();
	  };


	  /*
	  Find the n smallest elements in a dataset.
	   */

	  nsmallest = function(array, n, cmp) {
	    var elem, i, los, result, _i, _j, _len, _ref, _ref1, _results;
	    if (cmp == null) {
	      cmp = defaultCmp;
	    }
	    if (n * 10 <= array.length) {
	      result = array.slice(0, n).sort(cmp);
	      if (!result.length) {
	        return result;
	      }
	      los = result[result.length - 1];
	      _ref = array.slice(n);
	      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
	        elem = _ref[_i];
	        if (cmp(elem, los) < 0) {
	          insort(result, elem, 0, null, cmp);
	          result.pop();
	          los = result[result.length - 1];
	        }
	      }
	      return result;
	    }
	    heapify(array, cmp);
	    _results = [];
	    for (i = _j = 0, _ref1 = min(n, array.length); 0 <= _ref1 ? _j < _ref1 : _j > _ref1; i = 0 <= _ref1 ? ++_j : --_j) {
	      _results.push(heappop(array, cmp));
	    }
	    return _results;
	  };

	  _siftdown = function(array, startpos, pos, cmp) {
	    var newitem, parent, parentpos;
	    if (cmp == null) {
	      cmp = defaultCmp;
	    }
	    newitem = array[pos];
	    while (pos > startpos) {
	      parentpos = (pos - 1) >> 1;
	      parent = array[parentpos];
	      if (cmp(newitem, parent) < 0) {
	        array[pos] = parent;
	        pos = parentpos;
	        continue;
	      }
	      break;
	    }
	    return array[pos] = newitem;
	  };

	  _siftup = function(array, pos, cmp) {
	    var childpos, endpos, newitem, rightpos, startpos;
	    if (cmp == null) {
	      cmp = defaultCmp;
	    }
	    endpos = array.length;
	    startpos = pos;
	    newitem = array[pos];
	    childpos = 2 * pos + 1;
	    while (childpos < endpos) {
	      rightpos = childpos + 1;
	      if (rightpos < endpos && !(cmp(array[childpos], array[rightpos]) < 0)) {
	        childpos = rightpos;
	      }
	      array[pos] = array[childpos];
	      pos = childpos;
	      childpos = 2 * pos + 1;
	    }
	    array[pos] = newitem;
	    return _siftdown(array, startpos, pos, cmp);
	  };

	  Heap = (function() {
	    Heap.push = heappush;

	    Heap.pop = heappop;

	    Heap.replace = heapreplace;

	    Heap.pushpop = heappushpop;

	    Heap.heapify = heapify;

	    Heap.updateItem = updateItem;

	    Heap.nlargest = nlargest;

	    Heap.nsmallest = nsmallest;

	    function Heap(cmp) {
	      this.cmp = cmp != null ? cmp : defaultCmp;
	      this.nodes = [];
	    }

	    Heap.prototype.push = function(x) {
	      return heappush(this.nodes, x, this.cmp);
	    };

	    Heap.prototype.pop = function() {
	      return heappop(this.nodes, this.cmp);
	    };

	    Heap.prototype.peek = function() {
	      return this.nodes[0];
	    };

	    Heap.prototype.contains = function(x) {
	      return this.nodes.indexOf(x) !== -1;
	    };

	    Heap.prototype.replace = function(x) {
	      return heapreplace(this.nodes, x, this.cmp);
	    };

	    Heap.prototype.pushpop = function(x) {
	      return heappushpop(this.nodes, x, this.cmp);
	    };

	    Heap.prototype.heapify = function() {
	      return heapify(this.nodes, this.cmp);
	    };

	    Heap.prototype.updateItem = function(x) {
	      return updateItem(this.nodes, x, this.cmp);
	    };

	    Heap.prototype.clear = function() {
	      return this.nodes = [];
	    };

	    Heap.prototype.empty = function() {
	      return this.nodes.length === 0;
	    };

	    Heap.prototype.size = function() {
	      return this.nodes.length;
	    };

	    Heap.prototype.clone = function() {
	      var heap;
	      heap = new Heap();
	      heap.nodes = this.nodes.slice(0);
	      return heap;
	    };

	    Heap.prototype.toArray = function() {
	      return this.nodes.slice(0);
	    };

	    Heap.prototype.insert = Heap.prototype.push;

	    Heap.prototype.top = Heap.prototype.peek;

	    Heap.prototype.front = Heap.prototype.peek;

	    Heap.prototype.has = Heap.prototype.contains;

	    Heap.prototype.copy = Heap.prototype.clone;

	    return Heap;

	  })();

	  (function(root, factory) {
	    {
	      return module.exports = factory();
	    }
	  })(this, function() {
	    return Heap;
	  });

	}).call(commonjsGlobal);
	});

	var heap$1 = heap;

	var cytoscape_cjs = createCommonjsModule(function (module, exports) {
	(function webpackUniversalModuleDefinition(root, factory) {
		module.exports = factory(lodash_debounce, heap$1);
	})(typeof self !== 'undefined' ? self : commonjsGlobal, function(__WEBPACK_EXTERNAL_MODULE_26__, __WEBPACK_EXTERNAL_MODULE_32__) {
	return /******/ (function(modules) { // webpackBootstrap
	/******/ 	// The module cache
	/******/ 	var installedModules = {};
	/******/
	/******/ 	// The require function
	/******/ 	function __webpack_require__(moduleId) {
	/******/
	/******/ 		// Check if module is in cache
	/******/ 		if(installedModules[moduleId]) {
	/******/ 			return installedModules[moduleId].exports;
	/******/ 		}
	/******/ 		// Create a new module (and put it into the cache)
	/******/ 		var module = installedModules[moduleId] = {
	/******/ 			i: moduleId,
	/******/ 			l: false,
	/******/ 			exports: {}
	/******/ 		};
	/******/
	/******/ 		// Execute the module function
	/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
	/******/
	/******/ 		// Flag the module as loaded
	/******/ 		module.l = true;
	/******/
	/******/ 		// Return the exports of the module
	/******/ 		return module.exports;
	/******/ 	}
	/******/
	/******/
	/******/ 	// expose the modules object (__webpack_modules__)
	/******/ 	__webpack_require__.m = modules;
	/******/
	/******/ 	// expose the module cache
	/******/ 	__webpack_require__.c = installedModules;
	/******/
	/******/ 	// define getter function for harmony exports
	/******/ 	__webpack_require__.d = function(exports, name, getter) {
	/******/ 		if(!__webpack_require__.o(exports, name)) {
	/******/ 			Object.defineProperty(exports, name, {
	/******/ 				configurable: false,
	/******/ 				enumerable: true,
	/******/ 				get: getter
	/******/ 			});
	/******/ 		}
	/******/ 	};
	/******/
	/******/ 	// getDefaultExport function for compatibility with non-harmony modules
	/******/ 	__webpack_require__.n = function(module) {
	/******/ 		var getter = module && module.__esModule ?
	/******/ 			function getDefault() { return module['default']; } :
	/******/ 			function getModuleExports() { return module; };
	/******/ 		__webpack_require__.d(getter, 'a', getter);
	/******/ 		return getter;
	/******/ 	};
	/******/
	/******/ 	// Object.prototype.hasOwnProperty.call
	/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
	/******/
	/******/ 	// __webpack_public_path__
	/******/ 	__webpack_require__.p = "";
	/******/
	/******/ 	// Load entry module and return exports
	/******/ 	return __webpack_require__(__webpack_require__.s = 20);
	/******/ })
	/************************************************************************/
	/******/ ([
	/* 0 */
	/***/ (function(module, exports, __webpack_require__) {


	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	/*global HTMLElement DocumentTouch */

	var window = __webpack_require__(3);
	var navigator = window ? window.navigator : null;
	var document = window ? window.document : null;

	var typeofstr = _typeof('');
	var typeofobj = _typeof({});
	var typeoffn = _typeof(function () {});
	var typeofhtmlele = typeof HTMLElement === 'undefined' ? 'undefined' : _typeof(HTMLElement);

	var instanceStr = function instanceStr(obj) {
	  return obj && obj.instanceString && is.fn(obj.instanceString) ? obj.instanceString() : null;
	};

	var is = {
	  defined: function defined(obj) {
	    return obj != null; // not undefined or null
	  },

	  string: function string(obj) {
	    return obj != null && (typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) == typeofstr;
	  },

	  fn: function fn(obj) {
	    return obj != null && (typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) === typeoffn;
	  },

	  array: function array(obj) {
	    return Array.isArray ? Array.isArray(obj) : obj != null && obj instanceof Array;
	  },

	  plainObject: function plainObject(obj) {
	    return obj != null && (typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) === typeofobj && !is.array(obj) && obj.constructor === Object;
	  },

	  object: function object(obj) {
	    return obj != null && (typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) === typeofobj;
	  },

	  number: function number(obj) {
	    return obj != null && (typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) === _typeof(1) && !isNaN(obj);
	  },

	  integer: function integer(obj) {
	    return is.number(obj) && Math.floor(obj) === obj;
	  },

	  bool: function bool(obj) {
	    return obj != null && (typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) === _typeof(true);
	  },

	  htmlElement: function htmlElement(obj) {
	    if ('undefined' === typeofhtmlele) {
	      return undefined;
	    } else {
	      return null != obj && obj instanceof HTMLElement;
	    }
	  },

	  elementOrCollection: function elementOrCollection(obj) {
	    return is.element(obj) || is.collection(obj);
	  },

	  element: function element(obj) {
	    return instanceStr(obj) === 'collection' && obj._private.single;
	  },

	  collection: function collection(obj) {
	    return instanceStr(obj) === 'collection' && !obj._private.single;
	  },

	  core: function core(obj) {
	    return instanceStr(obj) === 'core';
	  },

	  style: function style(obj) {
	    return instanceStr(obj) === 'style';
	  },

	  stylesheet: function stylesheet(obj) {
	    return instanceStr(obj) === 'stylesheet';
	  },

	  event: function event(obj) {
	    return instanceStr(obj) === 'event';
	  },

	  thread: function thread(obj) {
	    return instanceStr(obj) === 'thread';
	  },

	  fabric: function fabric(obj) {
	    return instanceStr(obj) === 'fabric';
	  },

	  emptyString: function emptyString(obj) {
	    if (obj === undefined || obj === null) {
	      // null is empty
	      return true;
	    } else if (obj === '' || obj.match(/^\s+$/)) {
	      return true; // empty string is empty
	    }

	    return false; // otherwise, we don't know what we've got
	  },

	  nonemptyString: function nonemptyString(obj) {
	    if (obj && is.string(obj) && obj !== '' && !obj.match(/^\s+$/)) {
	      return true;
	    }

	    return false;
	  },

	  domElement: function domElement(obj) {
	    if (typeof HTMLElement === 'undefined') {
	      return false; // we're not in a browser so it doesn't matter
	    } else {
	      return obj instanceof HTMLElement;
	    }
	  },

	  boundingBox: function boundingBox(obj) {
	    return is.plainObject(obj) && is.number(obj.x1) && is.number(obj.x2) && is.number(obj.y1) && is.number(obj.y2);
	  },

	  promise: function promise(obj) {
	    return is.object(obj) && is.fn(obj.then);
	  },

	  touch: function touch() {
	    return window && ('ontouchstart' in window || window.DocumentTouch && document instanceof DocumentTouch);
	  },

	  gecko: function gecko() {
	    return window && (typeof InstallTrigger !== 'undefined' || 'MozAppearance' in document.documentElement.style);
	  },

	  webkit: function webkit() {
	    return window && (typeof webkitURL !== 'undefined' || 'WebkitAppearance' in document.documentElement.style);
	  },

	  chromium: function chromium() {
	    return window && typeof chrome !== 'undefined';
	  },

	  khtml: function khtml() {
	    return navigator && navigator.vendor.match(/kde/i); // probably a better way to detect this...
	  },

	  khtmlEtc: function khtmlEtc() {
	    return is.khtml() || is.webkit() || is.chromium();
	  },

	  ms: function ms() {
	    return navigator && navigator.userAgent.match(/msie|trident|edge/i); // probably a better way to detect this...
	  },

	  windows: function windows() {
	    return navigator && navigator.appVersion.match(/Win/i);
	  },

	  mac: function mac() {
	    return navigator && navigator.appVersion.match(/Mac/i);
	  },

	  linux: function linux() {
	    return navigator && navigator.appVersion.match(/Linux/i);
	  },

	  unix: function unix() {
	    return navigator && navigator.appVersion.match(/X11/i);
	  }
	};

	module.exports = is;

	/***/ }),
	/* 1 */
	/***/ (function(module, exports, __webpack_require__) {


	/*global console */

	var is = __webpack_require__(0);
	var math = __webpack_require__(2);

	var util = {

	  MAX_INT: Number.MAX_SAFE_INTEGER || 9007199254740991,

	  trueify: function trueify() {
	    return true;
	  },

	  falsify: function falsify() {
	    return false;
	  },

	  zeroify: function zeroify() {
	    return 0;
	  },

	  noop: function noop() {},

	  error: function error(msg) {
	    /* eslint-disable */
	    if (console.error) {
	      console.error.apply(console, arguments);

	      if (console.trace) {
	        console.trace();
	      }
	    } else {
	      console.log.apply(console, arguments);

	      if (console.trace) {
	        console.trace();
	      }
	    }
	    /* eslint-enable */
	  },

	  clone: function clone(obj) {
	    return this.extend({}, obj);
	  },

	  // gets a shallow copy of the argument
	  copy: function copy(obj) {
	    if (obj == null) {
	      return obj;
	    }if (is.array(obj)) {
	      return obj.slice();
	    } else if (is.plainObject(obj)) {
	      return this.clone(obj);
	    } else {
	      return obj;
	    }
	  },

	  copyArray: function copyArray(arr) {
	    return arr.slice();
	  },

	  clonePosition: function clonePosition(pos) {
	    return { x: pos.x, y: pos.y };
	  },

	  uuid: function uuid(a, b // placeholders
	  ) {
	    for ( // loop :)
	    b = a = ''; // b - result , a - numeric letiable
	    a++ < 36; //
	    b += a * 51 & 52 // if "a" is not 9 or 14 or 19 or 24
	    ? //  return a random number or 4
	    (a ^ 15 // if "a" is not 15
	    ? // genetate a random number from 0 to 15
	    8 ^ Math.random() * (a ^ 20 ? 16 : 4) // unless "a" is 20, in which case a random number from 8 to 11
	    : 4 //  otherwise 4
	    ).toString(16) : '-' //  in other cases (if "a" is 9,14,19,24) insert "-"
	    ) {}
	    return b;
	  }

	};

	util.makeBoundingBox = math.makeBoundingBox.bind(math);

	util._staticEmptyObject = {};

	util.staticEmptyObject = function () {
	  return util._staticEmptyObject;
	};

	util.extend = Object.assign != null ? Object.assign.bind(Object) : function (tgt) {
	  var args = arguments;

	  for (var i = 1; i < args.length; i++) {
	    var obj = args[i];

	    if (obj == null) {
	      continue;
	    }

	    var keys = Object.keys(obj);

	    for (var j = 0; j < keys.length; j++) {
	      var k = keys[j];

	      tgt[k] = obj[k];
	    }
	  }

	  return tgt;
	};

	util.assign = util.extend;

	util.default = function (val, def) {
	  if (val === undefined) {
	    return def;
	  } else {
	    return val;
	  }
	};

	util.removeFromArray = function (arr, ele, manyCopies) {
	  for (var i = arr.length; i >= 0; i--) {
	    if (arr[i] === ele) {
	      arr.splice(i, 1);

	      if (!manyCopies) {
	        break;
	      }
	    }
	  }
	};

	util.clearArray = function (arr) {
	  arr.splice(0, arr.length);
	};

	util.push = function (arr, otherArr) {
	  for (var i = 0; i < otherArr.length; i++) {
	    var el = otherArr[i];

	    arr.push(el);
	  }
	};

	util.getPrefixedProperty = function (obj, propName, prefix) {
	  if (prefix) {
	    propName = this.prependCamel(prefix, propName); // e.g. (labelWidth, source) => sourceLabelWidth
	  }

	  return obj[propName];
	};

	util.setPrefixedProperty = function (obj, propName, prefix, value) {
	  if (prefix) {
	    propName = this.prependCamel(prefix, propName); // e.g. (labelWidth, source) => sourceLabelWidth
	  }

	  obj[propName] = value;
	};

	[__webpack_require__(21), __webpack_require__(22), { memoize: __webpack_require__(13) }, __webpack_require__(23), __webpack_require__(24), __webpack_require__(25), __webpack_require__(27)].forEach(function (req) {
	  util.extend(util, req);
	});

	module.exports = util;

	/***/ }),
	/* 2 */
	/***/ (function(module, exports, __webpack_require__) {


	var math = {};

	math.arePositionsSame = function (p1, p2) {
	  return p1.x === p2.x && p1.y === p2.y;
	};

	math.copyPosition = function (p) {
	  return { x: p.x, y: p.y };
	};

	math.modelToRenderedPosition = function (p, zoom, pan) {
	  return {
	    x: p.x * zoom + pan.x,
	    y: p.y * zoom + pan.y
	  };
	};

	math.renderedToModelPosition = function (p, zoom, pan) {
	  return {
	    x: (p.x - pan.x) / zoom,
	    y: (p.y - pan.y) / zoom
	  };
	};

	math.array2point = function (arr) {
	  return {
	    x: arr[0],
	    y: arr[1]
	  };
	};

	math.deg2rad = function (deg) {
	  return Math.PI * deg / 180;
	};

	math.getAngleFromDisp = function (dispX, dispY) {
	  return Math.atan2(dispY, dispX) - Math.PI / 2;
	};

	math.log2 = Math.log2 || function (n) {
	  return Math.log(n) / Math.log(2);
	};

	math.signum = function (x) {
	  if (x > 0) {
	    return 1;
	  } else if (x < 0) {
	    return -1;
	  } else {
	    return 0;
	  }
	};

	math.dist = function (p1, p2) {
	  return Math.sqrt(math.sqdist(p1, p2));
	};

	math.sqdist = function (p1, p2) {
	  var dx = p2.x - p1.x;
	  var dy = p2.y - p1.y;

	  return dx * dx + dy * dy;
	};

	// from http://en.wikipedia.org/wiki/BÃ©zier_curve#Quadratic_curves
	math.qbezierAt = function (p0, p1, p2, t) {
	  return (1 - t) * (1 - t) * p0 + 2 * (1 - t) * t * p1 + t * t * p2;
	};

	math.qbezierPtAt = function (p0, p1, p2, t) {
	  return {
	    x: math.qbezierAt(p0.x, p1.x, p2.x, t),
	    y: math.qbezierAt(p0.y, p1.y, p2.y, t)
	  };
	};

	math.lineAt = function (p0, p1, t, d) {
	  var vec = {
	    x: p1.x - p0.x,
	    y: p1.y - p0.y
	  };

	  var vecDist = math.dist(p0, p1);

	  var normVec = {
	    x: vec.x / vecDist,
	    y: vec.y / vecDist
	  };

	  t = t == null ? 0 : t;

	  d = d != null ? d : t * vecDist;

	  return {
	    x: p0.x + normVec.x * d,
	    y: p0.y + normVec.y * d
	  };
	};

	math.lineAtDist = function (p0, p1, d) {
	  return math.lineAt(p0, p1, undefined, d);
	};

	// get angle at A via cosine law
	math.triangleAngle = function (A, B, C) {
	  var a = math.dist(B, C);
	  var b = math.dist(A, C);
	  var c = math.dist(A, B);

	  return Math.acos((a * a + b * b - c * c) / (2 * a * b));
	};

	math.bound = function (min, val, max) {
	  return Math.max(min, Math.min(max, val));
	};

	// makes a full bb (x1, y1, x2, y2, w, h) from implicit params
	math.makeBoundingBox = function (bb) {
	  if (bb == null) {
	    return {
	      x1: Infinity,
	      y1: Infinity,
	      x2: -Infinity,
	      y2: -Infinity,
	      w: 0,
	      h: 0
	    };
	  } else if (bb.x1 != null && bb.y1 != null) {
	    if (bb.x2 != null && bb.y2 != null && bb.x2 >= bb.x1 && bb.y2 >= bb.y1) {
	      return {
	        x1: bb.x1,
	        y1: bb.y1,
	        x2: bb.x2,
	        y2: bb.y2,
	        w: bb.x2 - bb.x1,
	        h: bb.y2 - bb.y1
	      };
	    } else if (bb.w != null && bb.h != null && bb.w >= 0 && bb.h >= 0) {
	      return {
	        x1: bb.x1,
	        y1: bb.y1,
	        x2: bb.x1 + bb.w,
	        y2: bb.y1 + bb.h,
	        w: bb.w,
	        h: bb.h
	      };
	    }
	  }
	};

	math.updateBoundingBox = function (bb1, bb2) {
	  // update bb1 with bb2 bounds

	  bb1.x1 = Math.min(bb1.x1, bb2.x1);
	  bb1.x2 = Math.max(bb1.x2, bb2.x2);
	  bb1.w = bb1.x2 - bb1.x1;

	  bb1.y1 = Math.min(bb1.y1, bb2.y1);
	  bb1.y2 = Math.max(bb1.y2, bb2.y2);
	  bb1.h = bb1.y2 - bb1.y1;
	};

	math.expandBoundingBoxByPoint = function (bb, x, y) {
	  bb.x1 = Math.min(bb.x1, x);
	  bb.x2 = Math.max(bb.x2, x);
	  bb.w = bb.x2 - bb.x1;

	  bb.y1 = Math.min(bb.y1, y);
	  bb.y2 = Math.max(bb.y2, y);
	  bb.h = bb.y2 - bb.y1;
	};

	math.expandBoundingBox = function (bb, padding) {
	  bb.x1 -= padding;
	  bb.x2 += padding;
	  bb.y1 -= padding;
	  bb.y2 += padding;
	  bb.w = bb.x2 - bb.x1;
	  bb.h = bb.y2 - bb.y1;

	  return bb;
	};

	math.boundingBoxesIntersect = function (bb1, bb2) {
	  // case: one bb to right of other
	  if (bb1.x1 > bb2.x2) {
	    return false;
	  }
	  if (bb2.x1 > bb1.x2) {
	    return false;
	  }

	  // case: one bb to left of other
	  if (bb1.x2 < bb2.x1) {
	    return false;
	  }
	  if (bb2.x2 < bb1.x1) {
	    return false;
	  }

	  // case: one bb above other
	  if (bb1.y2 < bb2.y1) {
	    return false;
	  }
	  if (bb2.y2 < bb1.y1) {
	    return false;
	  }

	  // case: one bb below other
	  if (bb1.y1 > bb2.y2) {
	    return false;
	  }
	  if (bb2.y1 > bb1.y2) {
	    return false;
	  }

	  // otherwise, must have some overlap
	  return true;
	};

	math.inBoundingBox = function (bb, x, y) {
	  return bb.x1 <= x && x <= bb.x2 && bb.y1 <= y && y <= bb.y2;
	};

	math.pointInBoundingBox = function (bb, pt) {
	  return this.inBoundingBox(bb, pt.x, pt.y);
	};

	math.boundingBoxInBoundingBox = function (bb1, bb2) {
	  return math.inBoundingBox(bb1, bb2.x1, bb2.y1) && math.inBoundingBox(bb1, bb2.x2, bb2.y2);
	};

	math.roundRectangleIntersectLine = function (x, y, nodeX, nodeY, width, height, padding) {

	  var cornerRadius = this.getRoundRectangleRadius(width, height);

	  var halfWidth = width / 2;
	  var halfHeight = height / 2;

	  // Check intersections with straight line segments
	  var straightLineIntersections = void 0;

	  // Top segment, left to right
	  {
	    var topStartX = nodeX - halfWidth + cornerRadius - padding;
	    var topStartY = nodeY - halfHeight - padding;
	    var topEndX = nodeX + halfWidth - cornerRadius + padding;
	    var topEndY = topStartY;

	    straightLineIntersections = this.finiteLinesIntersect(x, y, nodeX, nodeY, topStartX, topStartY, topEndX, topEndY, false);

	    if (straightLineIntersections.length > 0) {
	      return straightLineIntersections;
	    }
	  }

	  // Right segment, top to bottom
	  {
	    var rightStartX = nodeX + halfWidth + padding;
	    var rightStartY = nodeY - halfHeight + cornerRadius - padding;
	    var rightEndX = rightStartX;
	    var rightEndY = nodeY + halfHeight - cornerRadius + padding;

	    straightLineIntersections = this.finiteLinesIntersect(x, y, nodeX, nodeY, rightStartX, rightStartY, rightEndX, rightEndY, false);

	    if (straightLineIntersections.length > 0) {
	      return straightLineIntersections;
	    }
	  }

	  // Bottom segment, left to right
	  {
	    var bottomStartX = nodeX - halfWidth + cornerRadius - padding;
	    var bottomStartY = nodeY + halfHeight + padding;
	    var bottomEndX = nodeX + halfWidth - cornerRadius + padding;
	    var bottomEndY = bottomStartY;

	    straightLineIntersections = this.finiteLinesIntersect(x, y, nodeX, nodeY, bottomStartX, bottomStartY, bottomEndX, bottomEndY, false);

	    if (straightLineIntersections.length > 0) {
	      return straightLineIntersections;
	    }
	  }

	  // Left segment, top to bottom
	  {
	    var leftStartX = nodeX - halfWidth - padding;
	    var leftStartY = nodeY - halfHeight + cornerRadius - padding;
	    var leftEndX = leftStartX;
	    var leftEndY = nodeY + halfHeight - cornerRadius + padding;

	    straightLineIntersections = this.finiteLinesIntersect(x, y, nodeX, nodeY, leftStartX, leftStartY, leftEndX, leftEndY, false);

	    if (straightLineIntersections.length > 0) {
	      return straightLineIntersections;
	    }
	  }

	  // Check intersections with arc segments
	  var arcIntersections = void 0;

	  // Top Left
	  {
	    var topLeftCenterX = nodeX - halfWidth + cornerRadius;
	    var topLeftCenterY = nodeY - halfHeight + cornerRadius;
	    arcIntersections = this.intersectLineCircle(x, y, nodeX, nodeY, topLeftCenterX, topLeftCenterY, cornerRadius + padding);

	    // Ensure the intersection is on the desired quarter of the circle
	    if (arcIntersections.length > 0 && arcIntersections[0] <= topLeftCenterX && arcIntersections[1] <= topLeftCenterY) {
	      return [arcIntersections[0], arcIntersections[1]];
	    }
	  }

	  // Top Right
	  {
	    var topRightCenterX = nodeX + halfWidth - cornerRadius;
	    var topRightCenterY = nodeY - halfHeight + cornerRadius;
	    arcIntersections = this.intersectLineCircle(x, y, nodeX, nodeY, topRightCenterX, topRightCenterY, cornerRadius + padding);

	    // Ensure the intersection is on the desired quarter of the circle
	    if (arcIntersections.length > 0 && arcIntersections[0] >= topRightCenterX && arcIntersections[1] <= topRightCenterY) {
	      return [arcIntersections[0], arcIntersections[1]];
	    }
	  }

	  // Bottom Right
	  {
	    var bottomRightCenterX = nodeX + halfWidth - cornerRadius;
	    var bottomRightCenterY = nodeY + halfHeight - cornerRadius;
	    arcIntersections = this.intersectLineCircle(x, y, nodeX, nodeY, bottomRightCenterX, bottomRightCenterY, cornerRadius + padding);

	    // Ensure the intersection is on the desired quarter of the circle
	    if (arcIntersections.length > 0 && arcIntersections[0] >= bottomRightCenterX && arcIntersections[1] >= bottomRightCenterY) {
	      return [arcIntersections[0], arcIntersections[1]];
	    }
	  }

	  // Bottom Left
	  {
	    var bottomLeftCenterX = nodeX - halfWidth + cornerRadius;
	    var bottomLeftCenterY = nodeY + halfHeight - cornerRadius;
	    arcIntersections = this.intersectLineCircle(x, y, nodeX, nodeY, bottomLeftCenterX, bottomLeftCenterY, cornerRadius + padding);

	    // Ensure the intersection is on the desired quarter of the circle
	    if (arcIntersections.length > 0 && arcIntersections[0] <= bottomLeftCenterX && arcIntersections[1] >= bottomLeftCenterY) {
	      return [arcIntersections[0], arcIntersections[1]];
	    }
	  }

	  return []; // if nothing
	};

	math.inLineVicinity = function (x, y, lx1, ly1, lx2, ly2, tolerance) {
	  var t = tolerance;

	  var x1 = Math.min(lx1, lx2);
	  var x2 = Math.max(lx1, lx2);
	  var y1 = Math.min(ly1, ly2);
	  var y2 = Math.max(ly1, ly2);

	  return x1 - t <= x && x <= x2 + t && y1 - t <= y && y <= y2 + t;
	};

	math.inBezierVicinity = function (x, y, x1, y1, x2, y2, x3, y3, tolerance) {

	  var bb = {
	    x1: Math.min(x1, x3, x2) - tolerance,
	    x2: Math.max(x1, x3, x2) + tolerance,
	    y1: Math.min(y1, y3, y2) - tolerance,
	    y2: Math.max(y1, y3, y2) + tolerance
	  };

	  // if outside the rough bounding box for the bezier, then it can't be a hit
	  if (x < bb.x1 || x > bb.x2 || y < bb.y1 || y > bb.y2) {
	    // console.log('bezier out of rough bb')
	    return false;
	  } else {
	    // console.log('do more expensive check');
	    return true;
	  }
	};
	math.solveQuadratic = function (a, b, c, val) {
	  c -= val;

	  var r = b * b - 4 * a * c;

	  if (r < 0) {
	    return [];
	  }

	  var sqrtR = Math.sqrt(r);
	  var denom = 2 * a;
	  var root1 = (-b + sqrtR) / denom;
	  var root2 = (-b - sqrtR) / denom;

	  return [root1, root2];
	};

	math.solveCubic = function (a, b, c, d, result) {

	  // Solves a cubic function, returns root in form [r1, i1, r2, i2, r3, i3], where
	  // r is the real component, i is the imaginary component

	  // An implementation of the Cardano method from the year 1545
	  // http://en.wikipedia.org/wiki/Cubic_function#The_nature_of_the_roots

	  b /= a;
	  c /= a;
	  d /= a;

	  var discriminant = void 0,
	      q = void 0,
	      r = void 0,
	      dum1 = void 0,
	      s = void 0,
	      t = void 0,
	      term1 = void 0,
	      r13 = void 0;

	  q = (3.0 * c - b * b) / 9.0;
	  r = -(27.0 * d) + b * (9.0 * c - 2.0 * (b * b));
	  r /= 54.0;

	  discriminant = q * q * q + r * r;
	  result[1] = 0;
	  term1 = b / 3.0;

	  if (discriminant > 0) {
	    s = r + Math.sqrt(discriminant);
	    s = s < 0 ? -Math.pow(-s, 1.0 / 3.0) : Math.pow(s, 1.0 / 3.0);
	    t = r - Math.sqrt(discriminant);
	    t = t < 0 ? -Math.pow(-t, 1.0 / 3.0) : Math.pow(t, 1.0 / 3.0);
	    result[0] = -term1 + s + t;
	    term1 += (s + t) / 2.0;
	    result[4] = result[2] = -term1;
	    term1 = Math.sqrt(3.0) * (-t + s) / 2;
	    result[3] = term1;
	    result[5] = -term1;
	    return;
	  }

	  result[5] = result[3] = 0;

	  if (discriminant === 0) {
	    r13 = r < 0 ? -Math.pow(-r, 1.0 / 3.0) : Math.pow(r, 1.0 / 3.0);
	    result[0] = -term1 + 2.0 * r13;
	    result[4] = result[2] = -(r13 + term1);
	    return;
	  }

	  q = -q;
	  dum1 = q * q * q;
	  dum1 = Math.acos(r / Math.sqrt(dum1));
	  r13 = 2.0 * Math.sqrt(q);
	  result[0] = -term1 + r13 * Math.cos(dum1 / 3.0);
	  result[2] = -term1 + r13 * Math.cos((dum1 + 2.0 * Math.PI) / 3.0);
	  result[4] = -term1 + r13 * Math.cos((dum1 + 4.0 * Math.PI) / 3.0);

	  return;
	};

	math.sqdistToQuadraticBezier = function (x, y, x1, y1, x2, y2, x3, y3) {

	  // Find minimum distance by using the minimum of the distance
	  // function between the given point and the curve

	  // This gives the coefficients of the resulting cubic equation
	  // whose roots tell us where a possible minimum is
	  // (Coefficients are divided by 4)

	  var a = 1.0 * x1 * x1 - 4 * x1 * x2 + 2 * x1 * x3 + 4 * x2 * x2 - 4 * x2 * x3 + x3 * x3 + y1 * y1 - 4 * y1 * y2 + 2 * y1 * y3 + 4 * y2 * y2 - 4 * y2 * y3 + y3 * y3;

	  var b = 1.0 * 9 * x1 * x2 - 3 * x1 * x1 - 3 * x1 * x3 - 6 * x2 * x2 + 3 * x2 * x3 + 9 * y1 * y2 - 3 * y1 * y1 - 3 * y1 * y3 - 6 * y2 * y2 + 3 * y2 * y3;

	  var c = 1.0 * 3 * x1 * x1 - 6 * x1 * x2 + x1 * x3 - x1 * x + 2 * x2 * x2 + 2 * x2 * x - x3 * x + 3 * y1 * y1 - 6 * y1 * y2 + y1 * y3 - y1 * y + 2 * y2 * y2 + 2 * y2 * y - y3 * y;

	  var d = 1.0 * x1 * x2 - x1 * x1 + x1 * x - x2 * x + y1 * y2 - y1 * y1 + y1 * y - y2 * y;

	  // debug("coefficients: " + a / a + ", " + b / a + ", " + c / a + ", " + d / a);

	  var roots = [];

	  // Use the cubic solving algorithm
	  this.solveCubic(a, b, c, d, roots);

	  var zeroThreshold = 0.0000001;

	  var params = [];

	  for (var index = 0; index < 6; index += 2) {
	    if (Math.abs(roots[index + 1]) < zeroThreshold && roots[index] >= 0 && roots[index] <= 1.0) {
	      params.push(roots[index]);
	    }
	  }

	  params.push(1.0);
	  params.push(0.0);

	  var minDistanceSquared = -1;

	  var curX = void 0,
	      curY = void 0,
	      distSquared = void 0;
	  for (var i = 0; i < params.length; i++) {
	    curX = Math.pow(1.0 - params[i], 2.0) * x1 + 2.0 * (1 - params[i]) * params[i] * x2 + params[i] * params[i] * x3;

	    curY = Math.pow(1 - params[i], 2.0) * y1 + 2 * (1.0 - params[i]) * params[i] * y2 + params[i] * params[i] * y3;

	    distSquared = Math.pow(curX - x, 2) + Math.pow(curY - y, 2);
	    // debug('distance for param ' + params[i] + ": " + Math.sqrt(distSquared));
	    if (minDistanceSquared >= 0) {
	      if (distSquared < minDistanceSquared) {
	        minDistanceSquared = distSquared;
	      }
	    } else {
	      minDistanceSquared = distSquared;
	    }
	  }

	  return minDistanceSquared;
	};

	math.sqdistToFiniteLine = function (x, y, x1, y1, x2, y2) {
	  var offset = [x - x1, y - y1];
	  var line = [x2 - x1, y2 - y1];

	  var lineSq = line[0] * line[0] + line[1] * line[1];
	  var hypSq = offset[0] * offset[0] + offset[1] * offset[1];

	  var dotProduct = offset[0] * line[0] + offset[1] * line[1];
	  var adjSq = dotProduct * dotProduct / lineSq;

	  if (dotProduct < 0) {
	    return hypSq;
	  }

	  if (adjSq > lineSq) {
	    return (x - x2) * (x - x2) + (y - y2) * (y - y2);
	  }

	  return hypSq - adjSq;
	};

	math.pointInsidePolygonPoints = function (x, y, points) {
	  var x1 = void 0,
	      y1 = void 0,
	      x2 = void 0,
	      y2 = void 0;
	  var y3 = void 0;

	  // Intersect with vertical line through (x, y)
	  var up = 0;
	  // let down = 0;
	  for (var i = 0; i < points.length / 2; i++) {
	    x1 = points[i * 2];
	    y1 = points[i * 2 + 1];

	    if (i + 1 < points.length / 2) {
	      x2 = points[(i + 1) * 2];
	      y2 = points[(i + 1) * 2 + 1];
	    } else {
	      x2 = points[(i + 1 - points.length / 2) * 2];
	      y2 = points[(i + 1 - points.length / 2) * 2 + 1];
	    }

	    if (x1 == x && x2 == x) ; else if (x1 >= x && x >= x2 || x1 <= x && x <= x2) {

	      y3 = (x - x1) / (x2 - x1) * (y2 - y1) + y1;

	      if (y3 > y) {
	        up++;
	      }

	      // if( y3 < y ){
	      // down++;
	      // }
	    } else {
	      continue;
	    }
	  }

	  if (up % 2 === 0) {
	    return false;
	  } else {
	    return true;
	  }
	};

	math.pointInsidePolygon = function (x, y, basePoints, centerX, centerY, width, height, direction, padding) {

	  //let direction = arguments[6];
	  var transformedPoints = new Array(basePoints.length);

	  // Gives negative angle
	  var angle = void 0;

	  if (direction[0] != null) {
	    angle = Math.atan(direction[1] / direction[0]);

	    if (direction[0] < 0) {
	      angle = angle + Math.PI / 2;
	    } else {
	      angle = -angle - Math.PI / 2;
	    }
	  } else {
	    angle = direction;
	  }

	  var cos = Math.cos(-angle);
	  var sin = Math.sin(-angle);

	  //    console.log("base: " + basePoints);
	  for (var i = 0; i < transformedPoints.length / 2; i++) {
	    transformedPoints[i * 2] = width / 2 * (basePoints[i * 2] * cos - basePoints[i * 2 + 1] * sin);

	    transformedPoints[i * 2 + 1] = height / 2 * (basePoints[i * 2 + 1] * cos + basePoints[i * 2] * sin);

	    transformedPoints[i * 2] += centerX;
	    transformedPoints[i * 2 + 1] += centerY;
	  }

	  var points = void 0;

	  if (padding > 0) {
	    var expandedLineSet = this.expandPolygon(transformedPoints, -padding);

	    points = this.joinLines(expandedLineSet);
	  } else {
	    points = transformedPoints;
	  }

	  return math.pointInsidePolygonPoints(x, y, points);
	};

	math.joinLines = function (lineSet) {

	  var vertices = new Array(lineSet.length / 2);

	  var currentLineStartX = void 0,
	      currentLineStartY = void 0,
	      currentLineEndX = void 0,
	      currentLineEndY = void 0;
	  var nextLineStartX = void 0,
	      nextLineStartY = void 0,
	      nextLineEndX = void 0,
	      nextLineEndY = void 0;

	  for (var i = 0; i < lineSet.length / 4; i++) {
	    currentLineStartX = lineSet[i * 4];
	    currentLineStartY = lineSet[i * 4 + 1];
	    currentLineEndX = lineSet[i * 4 + 2];
	    currentLineEndY = lineSet[i * 4 + 3];

	    if (i < lineSet.length / 4 - 1) {
	      nextLineStartX = lineSet[(i + 1) * 4];
	      nextLineStartY = lineSet[(i + 1) * 4 + 1];
	      nextLineEndX = lineSet[(i + 1) * 4 + 2];
	      nextLineEndY = lineSet[(i + 1) * 4 + 3];
	    } else {
	      nextLineStartX = lineSet[0];
	      nextLineStartY = lineSet[1];
	      nextLineEndX = lineSet[2];
	      nextLineEndY = lineSet[3];
	    }

	    var intersection = this.finiteLinesIntersect(currentLineStartX, currentLineStartY, currentLineEndX, currentLineEndY, nextLineStartX, nextLineStartY, nextLineEndX, nextLineEndY, true);

	    vertices[i * 2] = intersection[0];
	    vertices[i * 2 + 1] = intersection[1];
	  }

	  return vertices;
	};

	math.expandPolygon = function (points, pad) {

	  var expandedLineSet = new Array(points.length * 2);

	  var currentPointX = void 0,
	      currentPointY = void 0,
	      nextPointX = void 0,
	      nextPointY = void 0;

	  for (var i = 0; i < points.length / 2; i++) {
	    currentPointX = points[i * 2];
	    currentPointY = points[i * 2 + 1];

	    if (i < points.length / 2 - 1) {
	      nextPointX = points[(i + 1) * 2];
	      nextPointY = points[(i + 1) * 2 + 1];
	    } else {
	      nextPointX = points[0];
	      nextPointY = points[1];
	    }

	    // Current line: [currentPointX, currentPointY] to [nextPointX, nextPointY]

	    // Assume CCW polygon winding

	    var offsetX = nextPointY - currentPointY;
	    var offsetY = -(nextPointX - currentPointX);

	    // Normalize
	    var offsetLength = Math.sqrt(offsetX * offsetX + offsetY * offsetY);
	    var normalizedOffsetX = offsetX / offsetLength;
	    var normalizedOffsetY = offsetY / offsetLength;

	    expandedLineSet[i * 4] = currentPointX + normalizedOffsetX * pad;
	    expandedLineSet[i * 4 + 1] = currentPointY + normalizedOffsetY * pad;
	    expandedLineSet[i * 4 + 2] = nextPointX + normalizedOffsetX * pad;
	    expandedLineSet[i * 4 + 3] = nextPointY + normalizedOffsetY * pad;
	  }

	  return expandedLineSet;
	};

	math.intersectLineEllipse = function (x, y, centerX, centerY, ellipseWradius, ellipseHradius) {

	  var dispX = centerX - x;
	  var dispY = centerY - y;

	  dispX /= ellipseWradius;
	  dispY /= ellipseHradius;

	  var len = Math.sqrt(dispX * dispX + dispY * dispY);

	  var newLength = len - 1;

	  if (newLength < 0) {
	    return [];
	  }

	  var lenProportion = newLength / len;

	  return [(centerX - x) * lenProportion + x, (centerY - y) * lenProportion + y];
	};

	math.checkInEllipse = function (x, y, width, height, centerX, centerY, padding) {
	  x -= centerX;
	  y -= centerY;

	  x /= width / 2 + padding;
	  y /= height / 2 + padding;

	  return x * x + y * y <= 1;
	};

	// Returns intersections of increasing distance from line's start point
	math.intersectLineCircle = function (x1, y1, x2, y2, centerX, centerY, radius) {

	  // Calculate d, direction vector of line
	  var d = [x2 - x1, y2 - y1]; // Direction vector of line
	  var f = [x1 - centerX, y1 - centerY];

	  var a = d[0] * d[0] + d[1] * d[1];
	  var b = 2 * (f[0] * d[0] + f[1] * d[1]);
	  var c = f[0] * f[0] + f[1] * f[1] - radius * radius;

	  var discriminant = b * b - 4 * a * c;

	  if (discriminant < 0) {
	    return [];
	  }

	  var t1 = (-b + Math.sqrt(discriminant)) / (2 * a);
	  var t2 = (-b - Math.sqrt(discriminant)) / (2 * a);

	  var tMin = Math.min(t1, t2);
	  var tMax = Math.max(t1, t2);
	  var inRangeParams = [];

	  if (tMin >= 0 && tMin <= 1) {
	    inRangeParams.push(tMin);
	  }

	  if (tMax >= 0 && tMax <= 1) {
	    inRangeParams.push(tMax);
	  }

	  if (inRangeParams.length === 0) {
	    return [];
	  }

	  var nearIntersectionX = inRangeParams[0] * d[0] + x1;
	  var nearIntersectionY = inRangeParams[0] * d[1] + y1;

	  if (inRangeParams.length > 1) {

	    if (inRangeParams[0] == inRangeParams[1]) {
	      return [nearIntersectionX, nearIntersectionY];
	    } else {

	      var farIntersectionX = inRangeParams[1] * d[0] + x1;
	      var farIntersectionY = inRangeParams[1] * d[1] + y1;

	      return [nearIntersectionX, nearIntersectionY, farIntersectionX, farIntersectionY];
	    }
	  } else {
	    return [nearIntersectionX, nearIntersectionY];
	  }
	};

	math.findCircleNearPoint = function (centerX, centerY, radius, farX, farY) {

	  var displacementX = farX - centerX;
	  var displacementY = farY - centerY;
	  var distance = Math.sqrt(displacementX * displacementX + displacementY * displacementY);

	  var unitDisplacementX = displacementX / distance;
	  var unitDisplacementY = displacementY / distance;

	  return [centerX + unitDisplacementX * radius, centerY + unitDisplacementY * radius];
	};

	math.findMaxSqDistanceToOrigin = function (points) {
	  var maxSqDistance = 0.000001;
	  var sqDistance = void 0;

	  for (var i = 0; i < points.length / 2; i++) {

	    sqDistance = points[i * 2] * points[i * 2] + points[i * 2 + 1] * points[i * 2 + 1];

	    if (sqDistance > maxSqDistance) {
	      maxSqDistance = sqDistance;
	    }
	  }

	  return maxSqDistance;
	};

	math.midOfThree = function (a, b, c) {
	  if (b <= a && a <= c || c <= a && a <= b) {
	    return a;
	  } else if (a <= b && b <= c || c <= b && b <= a) {
	    return b;
	  } else {
	    return c;
	  }
	};

	// (x1,y1)=>(x2,y2) intersect with (x3,y3)=>(x4,y4)
	math.finiteLinesIntersect = function (x1, y1, x2, y2, x3, y3, x4, y4, infiniteLines) {

	  var dx13 = x1 - x3;
	  var dx21 = x2 - x1;
	  var dx43 = x4 - x3;

	  var dy13 = y1 - y3;
	  var dy21 = y2 - y1;
	  var dy43 = y4 - y3;

	  var ua_t = dx43 * dy13 - dy43 * dx13;
	  var ub_t = dx21 * dy13 - dy21 * dx13;
	  var u_b = dy43 * dx21 - dx43 * dy21;

	  if (u_b !== 0) {
	    var ua = ua_t / u_b;
	    var ub = ub_t / u_b;

	    var flptThreshold = 0.001;
	    var min = 0 - flptThreshold;
	    var max = 1 + flptThreshold;

	    if (min <= ua && ua <= max && min <= ub && ub <= max) {
	      return [x1 + ua * dx21, y1 + ua * dy21];
	    } else {
	      if (!infiniteLines) {
	        return [];
	      } else {
	        return [x1 + ua * dx21, y1 + ua * dy21];
	      }
	    }
	  } else {
	    if (ua_t === 0 || ub_t === 0) {

	      // Parallel, coincident lines. Check if overlap

	      // Check endpoint of second line
	      if (this.midOfThree(x1, x2, x4) === x4) {
	        return [x4, y4];
	      }

	      // Check start point of second line
	      if (this.midOfThree(x1, x2, x3) === x3) {
	        return [x3, y3];
	      }

	      // Endpoint of first line
	      if (this.midOfThree(x3, x4, x2) === x2) {
	        return [x2, y2];
	      }

	      return [];
	    } else {

	      // Parallel, non-coincident
	      return [];
	    }
	  }
	};

	// math.polygonIntersectLine( x, y, basePoints, centerX, centerY, width, height, padding )
	// intersect a node polygon (pts transformed)
	//
	// math.polygonIntersectLine( x, y, basePoints, centerX, centerY )
	// intersect the points (no transform)
	math.polygonIntersectLine = function (x, y, basePoints, centerX, centerY, width, height, padding) {

	  var intersections = [];
	  var intersection = void 0;

	  var transformedPoints = new Array(basePoints.length);

	  var doTransform = true;
	  if (arguments.length === 5) {
	    doTransform = false;
	  }

	  var points = void 0;

	  if (doTransform) {
	    for (var i = 0; i < transformedPoints.length / 2; i++) {
	      transformedPoints[i * 2] = basePoints[i * 2] * width + centerX;
	      transformedPoints[i * 2 + 1] = basePoints[i * 2 + 1] * height + centerY;
	    }

	    if (padding > 0) {
	      var expandedLineSet = math.expandPolygon(transformedPoints, -padding);

	      points = math.joinLines(expandedLineSet);
	    } else {
	      points = transformedPoints;
	    }
	  } else {
	    points = basePoints;
	  }

	  var currentX = void 0,
	      currentY = void 0,
	      nextX = void 0,
	      nextY = void 0;

	  for (var _i = 0; _i < points.length / 2; _i++) {

	    currentX = points[_i * 2];
	    currentY = points[_i * 2 + 1];

	    if (_i < points.length / 2 - 1) {
	      nextX = points[(_i + 1) * 2];
	      nextY = points[(_i + 1) * 2 + 1];
	    } else {
	      nextX = points[0];
	      nextY = points[1];
	    }

	    intersection = this.finiteLinesIntersect(x, y, centerX, centerY, currentX, currentY, nextX, nextY);

	    if (intersection.length !== 0) {
	      intersections.push(intersection[0], intersection[1]);
	    }
	  }

	  return intersections;
	};

	math.shortenIntersection = function (intersection, offset, amount) {

	  var disp = [intersection[0] - offset[0], intersection[1] - offset[1]];

	  var length = Math.sqrt(disp[0] * disp[0] + disp[1] * disp[1]);

	  var lenRatio = (length - amount) / length;

	  if (lenRatio < 0) {
	    lenRatio = 0.00001;
	  }

	  return [offset[0] + lenRatio * disp[0], offset[1] + lenRatio * disp[1]];
	};

	math.generateUnitNgonPointsFitToSquare = function (sides, rotationRadians) {
	  var points = math.generateUnitNgonPoints(sides, rotationRadians);
	  points = math.fitPolygonToSquare(points);

	  return points;
	};

	math.fitPolygonToSquare = function (points) {
	  var x = void 0,
	      y = void 0;
	  var sides = points.length / 2;
	  var minX = Infinity,
	      minY = Infinity,
	      maxX = -Infinity,
	      maxY = -Infinity;

	  for (var i = 0; i < sides; i++) {
	    x = points[2 * i];
	    y = points[2 * i + 1];

	    minX = Math.min(minX, x);
	    maxX = Math.max(maxX, x);
	    minY = Math.min(minY, y);
	    maxY = Math.max(maxY, y);
	  }

	  // stretch factors
	  var sx = 2 / (maxX - minX);
	  var sy = 2 / (maxY - minY);

	  for (var _i2 = 0; _i2 < sides; _i2++) {
	    x = points[2 * _i2] = points[2 * _i2] * sx;
	    y = points[2 * _i2 + 1] = points[2 * _i2 + 1] * sy;

	    minX = Math.min(minX, x);
	    maxX = Math.max(maxX, x);
	    minY = Math.min(minY, y);
	    maxY = Math.max(maxY, y);
	  }

	  if (minY < -1) {
	    for (var _i3 = 0; _i3 < sides; _i3++) {
	      y = points[2 * _i3 + 1] = points[2 * _i3 + 1] + (-1 - minY);
	    }
	  }

	  return points;
	};

	math.generateUnitNgonPoints = function (sides, rotationRadians) {

	  var increment = 1.0 / sides * 2 * Math.PI;
	  var startAngle = sides % 2 === 0 ? Math.PI / 2.0 + increment / 2.0 : Math.PI / 2.0;

	  startAngle += rotationRadians;

	  var points = new Array(sides * 2);

	  var currentAngle = void 0;
	  for (var i = 0; i < sides; i++) {
	    currentAngle = i * increment + startAngle;

	    points[2 * i] = Math.cos(currentAngle); // x
	    points[2 * i + 1] = Math.sin(-currentAngle); // y
	  }

	  return points;
	};

	math.getRoundRectangleRadius = function (width, height) {

	  // Set the default radius, unless half of width or height is smaller than default
	  return Math.min(width / 4, height / 4, 8);
	};

	math.getCutRectangleCornerLength = function () {
	  return 8;
	};

	math.bezierPtsToQuadCoeff = function (p0, p1, p2) {
	  return [p0 - 2 * p1 + p2, 2 * (p1 - p0), p0];
	};

	math.getBarrelCurveConstants = function (width, height) {
	  // get curve width, height, and control point position offsets as a percentage of node height / width
	  return {
	    heightOffset: Math.min(15, 0.05 * height),
	    widthOffset: Math.min(100, 0.25 * width),
	    ctrlPtOffsetPct: 0.05
	  };
	};

	module.exports = math;

	/***/ }),
	/* 3 */
	/***/ (function(module, exports, __webpack_require__) {


	module.exports = typeof window === 'undefined' ? null : window; // eslint-disable-line no-undef

	/***/ }),
	/* 4 */
	/***/ (function(module, exports, __webpack_require__) {


	// use this module to cherry pick functions into your prototype
	// (useful for functions shared between the core and collections, for example)

	// e.g.
	// let foo = define.foo({ /* params... */ })

	var util = __webpack_require__(1);

	var define = {};

	[__webpack_require__(43), __webpack_require__(45), __webpack_require__(46)].forEach(function (m) {
	  util.assign(define, m);
	});

	module.exports = define;

	/***/ }),
	/* 5 */
	/***/ (function(module, exports, __webpack_require__) {


	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	/*!
	Embeddable Minimum Strictly-Compliant Promises/A+ 1.1.1 Thenable
	Copyright (c) 2013-2014 Ralf S. Engelschall (http://engelschall.com)
	Licensed under The MIT License (http://opensource.org/licenses/MIT)
	*/

	/*  promise states [Promises/A+ 2.1]  */
	var STATE_PENDING = 0; /*  [Promises/A+ 2.1.1]  */
	var STATE_FULFILLED = 1; /*  [Promises/A+ 2.1.2]  */
	var STATE_REJECTED = 2; /*  [Promises/A+ 2.1.3]  */

	/*  promise object constructor  */
	var api = function api(executor) {
	  /*  optionally support non-constructor/plain-function call  */
	  if (!(this instanceof api)) return new api(executor);

	  /*  initialize object  */
	  this.id = 'Thenable/1.0.7';
	  this.state = STATE_PENDING; /*  initial state  */
	  this.fulfillValue = undefined; /*  initial value  */ /*  [Promises/A+ 1.3, 2.1.2.2]  */
	  this.rejectReason = undefined; /*  initial reason */ /*  [Promises/A+ 1.5, 2.1.3.2]  */
	  this.onFulfilled = []; /*  initial handlers  */
	  this.onRejected = []; /*  initial handlers  */

	  /*  provide optional information-hiding proxy  */
	  this.proxy = {
	    then: this.then.bind(this)
	  };

	  /*  support optional executor function  */
	  if (typeof executor === 'function') executor.call(this, this.fulfill.bind(this), this.reject.bind(this));
	};

	/*  promise API methods  */
	api.prototype = {
	  /*  promise resolving methods  */
	  fulfill: function fulfill(value) {
	    return deliver(this, STATE_FULFILLED, 'fulfillValue', value);
	  },
	  reject: function reject(value) {
	    return deliver(this, STATE_REJECTED, 'rejectReason', value);
	  },

	  /*  "The then Method" [Promises/A+ 1.1, 1.2, 2.2]  */
	  then: function then(onFulfilled, onRejected) {
	    var curr = this;
	    var next = new api(); /*  [Promises/A+ 2.2.7]  */
	    curr.onFulfilled.push(resolver(onFulfilled, next, 'fulfill')); /*  [Promises/A+ 2.2.2/2.2.6]  */
	    curr.onRejected.push(resolver(onRejected, next, 'reject')); /*  [Promises/A+ 2.2.3/2.2.6]  */
	    execute(curr);
	    return next.proxy; /*  [Promises/A+ 2.2.7, 3.3]  */
	  }
	};

	/*  deliver an action  */
	var deliver = function deliver(curr, state, name, value) {
	  if (curr.state === STATE_PENDING) {
	    curr.state = state; /*  [Promises/A+ 2.1.2.1, 2.1.3.1]  */
	    curr[name] = value; /*  [Promises/A+ 2.1.2.2, 2.1.3.2]  */
	    execute(curr);
	  }
	  return curr;
	};

	/*  execute all handlers  */
	var execute = function execute(curr) {
	  if (curr.state === STATE_FULFILLED) execute_handlers(curr, 'onFulfilled', curr.fulfillValue);else if (curr.state === STATE_REJECTED) execute_handlers(curr, 'onRejected', curr.rejectReason);
	};

	/*  execute particular set of handlers  */
	var execute_handlers = function execute_handlers(curr, name, value) {
	  /* global setImmediate: true */
	  /* global setTimeout: true */

	  /*  short-circuit processing  */
	  if (curr[name].length === 0) return;

	  /*  iterate over all handlers, exactly once  */
	  var handlers = curr[name];
	  curr[name] = []; /*  [Promises/A+ 2.2.2.3, 2.2.3.3]  */
	  var func = function func() {
	    for (var i = 0; i < handlers.length; i++) {
	      handlers[i](value);
	    } /*  [Promises/A+ 2.2.5]  */
	  };

	  /*  execute procedure asynchronously  */ /*  [Promises/A+ 2.2.4, 3.1]  */
	  if (typeof setImmediate === 'function') setImmediate(func);else setTimeout(func, 0);
	};

	/*  generate a resolver function  */
	var resolver = function resolver(cb, next, method) {
	  return function (value) {
	    if (typeof cb !== 'function') /*  [Promises/A+ 2.2.1, 2.2.7.3, 2.2.7.4]  */
	      next[method].call(next, value); /*  [Promises/A+ 2.2.7.3, 2.2.7.4]  */
	    else {
	        var result;
	        try {
	          result = cb(value);
	        } /*  [Promises/A+ 2.2.2.1, 2.2.3.1, 2.2.5, 3.2]  */
	        catch (e) {
	          next.reject(e); /*  [Promises/A+ 2.2.7.2]  */
	          return;
	        }
	        resolve(next, result); /*  [Promises/A+ 2.2.7.1]  */
	      }
	  };
	};

	/*  "Promise Resolution Procedure"  */ /*  [Promises/A+ 2.3]  */
	var resolve = function resolve(promise, x) {
	  /*  sanity check arguments  */ /*  [Promises/A+ 2.3.1]  */
	  if (promise === x || promise.proxy === x) {
	    promise.reject(new TypeError('cannot resolve promise with itself'));
	    return;
	  }

	  /*  surgically check for a "then" method
	    (mainly to just call the "getter" of "then" only once)  */
	  var then;
	  if ((typeof x === 'undefined' ? 'undefined' : _typeof(x)) === 'object' && x !== null || typeof x === 'function') {
	    try {
	      then = x.then;
	    } /*  [Promises/A+ 2.3.3.1, 3.5]  */
	    catch (e) {
	      promise.reject(e); /*  [Promises/A+ 2.3.3.2]  */
	      return;
	    }
	  }

	  /*  handle own Thenables    [Promises/A+ 2.3.2]
	    and similar "thenables" [Promises/A+ 2.3.3]  */
	  if (typeof then === 'function') {
	    var resolved = false;
	    try {
	      /*  call retrieved "then" method */ /*  [Promises/A+ 2.3.3.3]  */
	      then.call(x,
	      /*  resolvePromise  */ /*  [Promises/A+ 2.3.3.3.1]  */
	      function (y) {
	        if (resolved) return;resolved = true; /*  [Promises/A+ 2.3.3.3.3]  */
	        if (y === x) /*  [Promises/A+ 3.6]  */
	          promise.reject(new TypeError('circular thenable chain'));else resolve(promise, y);
	      },

	      /*  rejectPromise  */ /*  [Promises/A+ 2.3.3.3.2]  */
	      function (r) {
	        if (resolved) return;resolved = true; /*  [Promises/A+ 2.3.3.3.3]  */
	        promise.reject(r);
	      });
	    } catch (e) {
	      if (!resolved) /*  [Promises/A+ 2.3.3.3.3]  */
	        promise.reject(e); /*  [Promises/A+ 2.3.3.3.4]  */
	    }
	    return;
	  }

	  /*  handle other values  */
	  promise.fulfill(x); /*  [Promises/A+ 2.3.4, 2.3.3.4]  */
	};

	// so we always have Promise.all()
	api.all = function (ps) {
	  return new api(function (resolveAll, rejectAll) {
	    var vals = new Array(ps.length);
	    var doneCount = 0;

	    var fulfill = function fulfill(i, val) {
	      vals[i] = val;
	      doneCount++;

	      if (doneCount === ps.length) {
	        resolveAll(vals);
	      }
	    };

	    for (var i = 0; i < ps.length; i++) {
	      (function (i) {
	        var p = ps[i];
	        var isPromise = p != null && p.then != null;

	        if (isPromise) {
	          p.then(function (val) {
	            fulfill(i, val);
	          }, function (err) {
	            rejectAll(err);
	          });
	        } else {
	          var val = p;
	          fulfill(i, val);
	        }
	      })(i);
	    }
	  });
	};

	api.resolve = function (val) {
	  return new api(function (resolve, reject) {
	    resolve(val);
	  });
	};

	api.reject = function (val) {
	  return new api(function (resolve, reject) {
	    reject(val);
	  });
	};

	module.exports = typeof Promise !== 'undefined' ? Promise : api; // eslint-disable-line no-undef

	/***/ }),
	/* 6 */
	/***/ (function(module, exports, __webpack_require__) {


	var is = __webpack_require__(0);
	var util = __webpack_require__(1);
	var newQuery = __webpack_require__(10);

	var Selector = function Selector(selector) {
	  var self = this;

	  self._private = {
	    selectorText: selector,
	    invalid: true
	  };

	  if (selector == null || is.string(selector) && selector.match(/^\s*$/)) {

	    self.length = 0;
	  } else if (selector === '*' || selector === 'edge' || selector === 'node') {

	    // make single, group-only selectors cheap to make and cheap to filter

	    self[0] = newQuery();
	    self[0].group = selector === '*' ? selector : selector + 's';
	    self[0].groupOnly = true;
	    self[0].length = 1;
	    self._private.invalid = false;
	    self.length = 1;
	  } else if (is.elementOrCollection(selector)) {

	    var collection = selector.collection();

	    self[0] = newQuery();
	    self[0].collection = collection;
	    self[0].length = 1;
	    self.length = 1;
	  } else if (is.fn(selector)) {

	    self[0] = newQuery();
	    self[0].filter = selector;
	    self[0].length = 1;
	    self.length = 1;
	  } else if (is.string(selector)) {
	    if (!self.parse(selector)) {
	      return;
	    }
	  } else {
	    util.error('A selector must be created from a string; found ', selector);
	    return;
	  }

	  self._private.invalid = false;
	};

	var selfn = Selector.prototype;

	selfn.valid = function () {
	  return !this._private.invalid;
	};

	selfn.invalid = function () {
	  return this._private.invalid;
	};

	selfn.text = function () {
	  return this._private.selectorText;
	};

	selfn.size = function () {
	  return this.length;
	};

	selfn.eq = function (i) {
	  return this[i];
	};

	selfn.sameText = function (otherSel) {
	  return this.text() === otherSel.text();
	};

	selfn.toString = selfn.selector = function () {

	  if (this._private.toStringCache != null) {
	    return this._private.toStringCache;
	  }

	  var i = void 0;
	  var str = '';

	  var clean = function clean(obj) {
	    if (obj == null) {
	      return '';
	    } else {
	      return obj;
	    }
	  };

	  var cleanVal = function cleanVal(val) {
	    if (is.string(val)) {
	      return '"' + val + '"';
	    } else {
	      return clean(val);
	    }
	  };

	  var space = function space(val) {
	    return ' ' + val + ' ';
	  };

	  var queryToString = function queryToString(query) {
	    var str = '';
	    var j = void 0,
	        sel = void 0;

	    if (query.subject === query) {
	      str += '$';
	    }

	    var group = clean(query.group);
	    str += group.substring(0, group.length - 1);

	    for (j = 0; j < query.data.length; j++) {
	      var data = query.data[j];

	      if (data.value) {
	        str += '[' + data.field + space(clean(data.operator)) + cleanVal(data.value) + ']';
	      } else {
	        str += '[' + clean(data.operator) + data.field + ']';
	      }
	    }

	    for (j = 0; j < query.meta.length; j++) {
	      var meta = query.meta[j];
	      str += '[[' + meta.field + space(clean(meta.operator)) + cleanVal(meta.value) + ']]';
	    }

	    for (j = 0; j < query.colonSelectors.length; j++) {
	      sel = query.colonSelectors[i];
	      str += sel;
	    }

	    for (j = 0; j < query.ids.length; j++) {
	      sel = '#' + query.ids[i];
	      str += sel;
	    }

	    for (j = 0; j < query.classes.length; j++) {
	      sel = '.' + query.classes[j];
	      str += sel;
	    }

	    if (query.source != null && query.target != null) {
	      str = queryToString(query.source) + ' -> ' + queryToString(query.target);
	    }

	    if (query.connectedNodes != null) {
	      var n = query.connectedNodes;

	      str = queryToString(n[0]) + ' <-> ' + queryToString(n[1]);
	    }

	    if (query.parent != null) {
	      str = queryToString(query.parent) + ' > ' + str;
	    }

	    if (query.ancestor != null) {
	      str = queryToString(query.ancestor) + ' ' + str;
	    }

	    if (query.child != null) {
	      str += ' > ' + queryToString(query.child);
	    }

	    if (query.descendant != null) {
	      str += ' ' + queryToString(query.descendant);
	    }

	    return str;
	  };

	  for (i = 0; i < this.length; i++) {
	    var query = this[i];

	    str += queryToString(query);

	    if (this.length > 1 && i < this.length - 1) {
	      str += ', ';
	    }
	  }

	  this._private.toStringCache = str;

	  return str;
	};

	[__webpack_require__(49), __webpack_require__(52)].forEach(function (p) {
	  return util.assign(selfn, p);
	});

	module.exports = Selector;

	/***/ }),
	/* 7 */
	/***/ (function(module, exports, __webpack_require__) {


	var util = __webpack_require__(1);
	var is = __webpack_require__(0);
	var Map = __webpack_require__(28);
	var Set = __webpack_require__(8);

	var Element = __webpack_require__(14);

	// factory for generating edge ids when no id is specified for a new element
	var idFactory = {
	  generate: function generate(cy, element, tryThisId) {
	    var id = tryThisId != null ? tryThisId : util.uuid();

	    while (cy.hasElementWithId(id)) {
	      id = util.uuid();
	    }

	    return id;
	  }
	};

	// represents a set of nodes, edges, or both together
	var Collection = function Collection(cy, elements, options) {
	  if (cy === undefined || !is.core(cy)) {
	    util.error('A collection must have a reference to the core');
	    return;
	  }

	  var map = new Map();
	  var createdElements = false;

	  if (!elements) {
	    elements = [];
	  } else if (elements.length > 0 && is.plainObject(elements[0]) && !is.element(elements[0])) {
	    createdElements = true;

	    // make elements from json and restore all at once later
	    var eles = [];
	    var elesIds = new Set();

	    for (var i = 0, l = elements.length; i < l; i++) {
	      var json = elements[i];

	      if (json.data == null) {
	        json.data = {};
	      }

	      var data = json.data;

	      // make sure newly created elements have valid ids
	      if (data.id == null) {
	        data.id = idFactory.generate(cy, json);
	      } else if (cy.hasElementWithId(data.id) || elesIds.has(data.id)) {
	        continue; // can't create element if prior id already exists
	      }

	      var ele = new Element(cy, json, false);
	      eles.push(ele);
	      elesIds.add(data.id);
	    }

	    elements = eles;
	  }

	  this.length = 0;

	  for (var _i = 0, _l = elements.length; _i < _l; _i++) {
	    var element = elements[_i];
	    if (element == null) {
	      continue;
	    }

	    var id = element._private.data.id;

	    if (options == null || options.unique && !map.has(id)) {
	      map.set(id, {
	        index: this.length,
	        ele: element
	      });

	      this[this.length] = element;
	      this.length++;
	    }
	  }

	  this._private = {
	    cy: cy,
	    map: map
	  };

	  // restore the elements if we created them from json
	  if (createdElements) {
	    this.restore();
	  }
	};

	// Functions
	////////////////////////////////////////////////////////////////////////////////////////////////////

	// keep the prototypes in sync (an element has the same functions as a collection)
	// and use elefn and elesfn as shorthands to the prototypes
	var elesfn = Element.prototype = Collection.prototype;

	elesfn.instanceString = function () {
	  return 'collection';
	};

	elesfn.spawn = function (cy, eles, opts) {
	  if (!is.core(cy)) {
	    // cy is optional
	    opts = eles;
	    eles = cy;
	    cy = this.cy();
	  }

	  return new Collection(cy, eles, opts);
	};

	elesfn.spawnSelf = function () {
	  return this.spawn(this);
	};

	elesfn.cy = function () {
	  return this._private.cy;
	};

	elesfn.renderer = function () {
	  return this._private.cy.renderer();
	};

	elesfn.element = function () {
	  return this[0];
	};

	elesfn.collection = function () {
	  if (is.collection(this)) {
	    return this;
	  } else {
	    // an element
	    return new Collection(this._private.cy, [this]);
	  }
	};

	elesfn.unique = function () {
	  return new Collection(this._private.cy, this, { unique: true });
	};

	elesfn.hasElementWithId = function (id) {
	  return this._private.map.has(id);
	};

	elesfn.getElementById = function (id) {
	  var cy = this._private.cy;
	  var entry = this._private.map.get(id);

	  return entry ? entry.ele : new Collection(cy); // get ele or empty collection
	};

	elesfn.$id = elesfn.getElementById;

	elesfn.poolIndex = function () {
	  var cy = this._private.cy;
	  var eles = cy._private.elements;
	  var id = this._private.data.id;

	  return eles._private.map.get(id).index;
	};

	elesfn.json = function (obj) {
	  var ele = this.element();
	  var cy = this.cy();

	  if (ele == null && obj) {
	    return this;
	  } // can't set to no eles

	  if (ele == null) {
	    return undefined;
	  } // can't get from no eles

	  var p = ele._private;

	  if (is.plainObject(obj)) {
	    // set

	    cy.startBatch();

	    if (obj.data) {
	      ele.data(obj.data);

	      var data = p.data;

	      if (ele.isEdge()) {
	        // source and target are immutable via data()
	        var move = false;
	        var spec = {};
	        var src = obj.data.source;
	        var tgt = obj.data.target;

	        if (src != null && src !== data.source) {
	          spec.source = src;
	          move = true;
	        }

	        if (tgt != null && tgt !== data.target) {
	          spec.target = tgt;
	          move = true;
	        }

	        if (move) {
	          ele = ele.move(spec);
	        }
	      } else {
	        // parent is immutable via data()
	        var parent = obj.data.parent;

	        if ((parent != null || data.parent != null) && parent !== data.parent) {
	          if (parent === undefined) {
	            // can't set undefined imperatively, so use null
	            parent = null;
	          }

	          ele = ele.move({ parent: parent });
	        }
	      }
	    }

	    if (obj.position) {
	      ele.position(obj.position);
	    }

	    // ignore group -- immutable

	    var checkSwitch = function checkSwitch(k, trueFnName, falseFnName) {
	      var obj_k = obj[k];

	      if (obj_k != null && obj_k !== p[k]) {
	        if (obj_k) {
	          ele[trueFnName]();
	        } else {
	          ele[falseFnName]();
	        }
	      }
	    };

	    checkSwitch('removed', 'remove', 'restore');

	    checkSwitch('selected', 'select', 'unselect');

	    checkSwitch('selectable', 'selectify', 'unselectify');

	    checkSwitch('locked', 'lock', 'unlock');

	    checkSwitch('grabbable', 'grabify', 'ungrabify');

	    if (obj.classes != null) {
	      ele.classes(obj.classes);
	    }

	    cy.endBatch();

	    return this;
	  } else if (obj === undefined) {
	    // get

	    var json = {
	      data: util.copy(p.data),
	      position: util.copy(p.position),
	      group: p.group,
	      removed: p.removed,
	      selected: p.selected,
	      selectable: p.selectable,
	      locked: p.locked,
	      grabbable: p.grabbable,
	      classes: null
	    };

	    json.classes = '';

	    var i = 0;
	    p.classes.forEach(function (cls) {
	      return json.classes += i++ === 0 ? cls : ' ' + cls;
	    });

	    return json;
	  }
	};

	elesfn.jsons = function () {
	  var jsons = [];

	  for (var i = 0; i < this.length; i++) {
	    var ele = this[i];
	    var json = ele.json();

	    jsons.push(json);
	  }

	  return jsons;
	};

	elesfn.clone = function () {
	  var cy = this.cy();
	  var elesArr = [];

	  for (var i = 0; i < this.length; i++) {
	    var ele = this[i];
	    var json = ele.json();
	    var clone = new Element(cy, json, false); // NB no restore

	    elesArr.push(clone);
	  }

	  return new Collection(cy, elesArr);
	};
	elesfn.copy = elesfn.clone;

	elesfn.restore = function (notifyRenderer) {
	  var self = this;
	  var cy = self.cy();
	  var cy_p = cy._private;

	  if (notifyRenderer === undefined) {
	    notifyRenderer = true;
	  }

	  // create arrays of nodes and edges, since we need to
	  // restore the nodes first
	  var nodes = [];
	  var edges = [];
	  var elements = void 0;
	  for (var _i2 = 0, l = self.length; _i2 < l; _i2++) {
	    var ele = self[_i2];

	    if (!ele.removed()) {
	      // don't need to handle this ele
	      continue;
	    }

	    // keep nodes first in the array and edges after
	    if (ele.isNode()) {
	      // put to front of array if node
	      nodes.push(ele);
	    } else {
	      // put to end of array if edge
	      edges.push(ele);
	    }
	  }

	  elements = nodes.concat(edges);

	  var i = void 0;
	  var removeFromElements = function removeFromElements() {
	    elements.splice(i, 1);
	    i--;
	  };

	  // now, restore each element
	  for (i = 0; i < elements.length; i++) {
	    var _ele = elements[i];

	    var _private = _ele._private;
	    var data = _private.data;

	    // the traversal cache should start fresh when ele is added
	    _ele.clearTraversalCache();

	    // set id and validate
	    if (data.id === undefined) {
	      data.id = idFactory.generate(cy, _ele);
	    } else if (is.number(data.id)) {
	      data.id = '' + data.id; // now it's a string
	    } else if (is.emptyString(data.id) || !is.string(data.id)) {
	      util.error('Can not create element with invalid string ID `' + data.id + '`');

	      // can't create element if it has empty string as id or non-string id
	      removeFromElements();
	      continue;
	    } else if (cy.hasElementWithId(data.id)) {
	      util.error('Can not create second element with ID `' + data.id + '`');

	      // can't create element if one already has that id
	      removeFromElements();
	      continue;
	    }

	    var id = data.id; // id is finalised, now let's keep a ref

	    if (_ele.isNode()) {
	      // extra checks for nodes
	      var pos = _private.position;

	      // make sure the nodes have a defined position

	      if (pos.x == null) {
	        pos.x = 0;
	      }

	      if (pos.y == null) {
	        pos.y = 0;
	      }
	    }

	    if (_ele.isEdge()) {
	      // extra checks for edges

	      var edge = _ele;
	      var fields = ['source', 'target'];
	      var fieldsLength = fields.length;
	      var badSourceOrTarget = false;
	      for (var j = 0; j < fieldsLength; j++) {

	        var field = fields[j];
	        var val = data[field];

	        if (is.number(val)) {
	          val = data[field] = '' + data[field]; // now string
	        }

	        if (val == null || val === '') {
	          // can't create if source or target is not defined properly
	          util.error('Can not create edge `' + id + '` with unspecified ' + field);
	          badSourceOrTarget = true;
	        } else if (!cy.hasElementWithId(val)) {
	          // can't create edge if one of its nodes doesn't exist
	          util.error('Can not create edge `' + id + '` with nonexistant ' + field + ' `' + val + '`');
	          badSourceOrTarget = true;
	        }
	      }

	      if (badSourceOrTarget) {
	        removeFromElements();continue;
	      } // can't create this

	      var src = cy.getElementById(data.source);
	      var tgt = cy.getElementById(data.target);

	      src._private.edges.push(edge);
	      tgt._private.edges.push(edge);

	      edge._private.source = src;
	      edge._private.target = tgt;
	    } // if is edge

	    // create mock ids / indexes maps for element so it can be used like collections
	    _private.map = new Map();
	    _private.map.set(id, { ele: _ele, index: 0 });

	    _private.removed = false;
	    cy.addToPool(_ele);
	  } // for each element

	  // do compound node sanity checks
	  for (var _i3 = 0; _i3 < nodes.length; _i3++) {
	    // each node
	    var node = nodes[_i3];
	    var _data = node._private.data;

	    if (is.number(_data.parent)) {
	      // then automake string
	      _data.parent = '' + _data.parent;
	    }

	    var parentId = _data.parent;

	    var specifiedParent = parentId != null;

	    if (specifiedParent) {
	      var parent = cy.getElementById(parentId);

	      if (parent.empty()) {
	        // non-existant parent; just remove it
	        _data.parent = undefined;
	      } else {
	        var selfAsParent = false;
	        var ancestor = parent;
	        while (!ancestor.empty()) {
	          if (node.same(ancestor)) {
	            // mark self as parent and remove from data
	            selfAsParent = true;
	            _data.parent = undefined; // remove parent reference

	            // exit or we loop forever
	            break;
	          }

	          ancestor = ancestor.parent();
	        }

	        if (!selfAsParent) {
	          // connect with children
	          parent[0]._private.children.push(node);
	          node._private.parent = parent[0];

	          // let the core know we have a compound graph
	          cy_p.hasCompoundNodes = true;
	        }
	      } // else
	    } // if specified parent
	  } // for each node

	  if (elements.length > 0) {
	    var restored = new Collection(cy, elements);

	    for (var _i4 = 0; _i4 < restored.length; _i4++) {
	      var _ele2 = restored[_i4];

	      if (_ele2.isNode()) {
	        continue;
	      }

	      // adding an edge invalidates the traversal caches for the parallel edges
	      _ele2.parallelEdges().clearTraversalCache();

	      // adding an edge invalidates the traversal cache for the connected nodes
	      _ele2.source().clearTraversalCache();
	      _ele2.target().clearTraversalCache();
	    }

	    var toUpdateStyle = void 0;

	    if (cy_p.hasCompoundNodes) {
	      toUpdateStyle = cy.collection().merge(restored).merge(restored.connectedNodes()).merge(restored.parent());
	    } else {
	      toUpdateStyle = restored;
	    }

	    toUpdateStyle.dirtyCompoundBoundsCache().updateStyle(notifyRenderer);

	    if (notifyRenderer) {
	      restored.emitAndNotify('add');
	    } else {
	      restored.emit('add');
	    }
	  }

	  return self; // chainability
	};

	elesfn.removed = function () {
	  var ele = this[0];
	  return ele && ele._private.removed;
	};

	elesfn.inside = function () {
	  var ele = this[0];
	  return ele && !ele._private.removed;
	};

	elesfn.remove = function (notifyRenderer) {
	  var self = this;
	  var removed = [];
	  var elesToRemove = [];
	  var elesToRemoveIds = {};
	  var cy = self._private.cy;

	  if (notifyRenderer === undefined) {
	    notifyRenderer = true;
	  }

	  // add connected edges
	  function addConnectedEdges(node) {
	    var edges = node._private.edges;
	    for (var i = 0; i < edges.length; i++) {
	      add(edges[i]);
	    }
	  }

	  // add descendant nodes
	  function addChildren(node) {
	    var children = node._private.children;

	    for (var i = 0; i < children.length; i++) {
	      add(children[i]);
	    }
	  }

	  function add(ele) {
	    var alreadyAdded = elesToRemoveIds[ele.id()];
	    if (ele.removed() || alreadyAdded) {
	      return;
	    } else {
	      elesToRemoveIds[ele.id()] = true;
	    }

	    if (ele.isNode()) {
	      elesToRemove.push(ele); // nodes are removed last

	      addConnectedEdges(ele);
	      addChildren(ele);
	    } else {
	      elesToRemove.unshift(ele); // edges are removed first
	    }
	  }

	  // make the list of elements to remove
	  // (may be removing more than specified due to connected edges etc)

	  for (var i = 0, l = self.length; i < l; i++) {
	    var ele = self[i];

	    add(ele);
	  }

	  function removeEdgeRef(node, edge) {
	    var connectedEdges = node._private.edges;

	    util.removeFromArray(connectedEdges, edge);

	    // removing an edges invalidates the traversal cache for its nodes
	    node.clearTraversalCache();
	  }

	  function removeParallelRefs(edge) {
	    // removing an edge invalidates the traversal caches for the parallel edges
	    edge.parallelEdges().clearTraversalCache();
	  }

	  var alteredParents = [];
	  alteredParents.ids = {};

	  function removeChildRef(parent, ele) {
	    ele = ele[0];
	    parent = parent[0];

	    var children = parent._private.children;
	    var pid = parent.id();

	    util.removeFromArray(children, ele);

	    if (!alteredParents.ids[pid]) {
	      alteredParents.ids[pid] = true;
	      alteredParents.push(parent);
	    }
	  }

	  self.dirtyCompoundBoundsCache();

	  cy.removeFromPool(elesToRemove); // remove from core pool

	  for (var _i5 = 0; _i5 < elesToRemove.length; _i5++) {
	    var _ele3 = elesToRemove[_i5];

	    // mark as removed
	    _ele3._private.removed = true;

	    // add to list of removed elements
	    removed.push(_ele3);

	    if (_ele3.isEdge()) {
	      // remove references to this edge in its connected nodes
	      var src = _ele3.source()[0];
	      var tgt = _ele3.target()[0];

	      removeEdgeRef(src, _ele3);
	      removeEdgeRef(tgt, _ele3);
	      removeParallelRefs(_ele3);
	    } else {
	      // remove reference to parent
	      var parent = _ele3.parent();

	      if (parent.length !== 0) {
	        removeChildRef(parent, _ele3);
	      }
	    }
	  }

	  // check to see if we have a compound graph or not
	  var elesStillInside = cy._private.elements;
	  cy._private.hasCompoundNodes = false;
	  for (var _i6 = 0; _i6 < elesStillInside.length; _i6++) {
	    var _ele4 = elesStillInside[_i6];

	    if (_ele4.isParent()) {
	      cy._private.hasCompoundNodes = true;
	      break;
	    }
	  }

	  var removedElements = new Collection(this.cy(), removed);
	  if (removedElements.size() > 0) {
	    // must manually notify since trigger won't do this automatically once removed

	    if (notifyRenderer) {
	      this.cy().notify({
	        type: 'remove',
	        eles: removedElements
	      });
	    }

	    removedElements.emit('remove');
	  }

	  // the parents who were modified by the removal need their style updated
	  for (var _i7 = 0; _i7 < alteredParents.length; _i7++) {
	    var _ele5 = alteredParents[_i7];

	    if (!_ele5.removed()) {
	      _ele5.updateStyle();
	    }
	  }

	  return new Collection(cy, removed);
	};

	elesfn.move = function (struct) {
	  var cy = this._private.cy;

	  if (struct.source !== undefined || struct.target !== undefined) {
	    var srcId = struct.source;
	    var tgtId = struct.target;
	    var srcExists = cy.hasElementWithId(srcId);
	    var tgtExists = cy.hasElementWithId(tgtId);

	    if (srcExists || tgtExists) {
	      var jsons = this.jsons();

	      this.remove();

	      for (var i = 0; i < jsons.length; i++) {
	        var json = jsons[i];
	        var ele = this[i];

	        if (json.group === 'edges') {
	          if (srcExists) {
	            json.data.source = srcId;
	          }

	          if (tgtExists) {
	            json.data.target = tgtId;
	          }

	          json.scratch = ele._private.scratch;
	        }
	      }

	      return cy.add(jsons);
	    }
	  } else if (struct.parent !== undefined) {
	    // move node to new parent
	    var parentId = struct.parent;
	    var parentExists = parentId === null || cy.hasElementWithId(parentId);

	    if (parentExists) {
	      var _jsons = this.jsons();
	      var descs = this.descendants();
	      var descsEtcJsons = descs.union(descs.union(this).connectedEdges()).jsons();

	      this.remove(); // NB: also removes descendants and their connected edges

	      for (var _i8 = 0; _i8 < _jsons.length; _i8++) {
	        var _json = _jsons[_i8];
	        var _ele6 = this[_i8];

	        if (_json.group === 'nodes') {
	          _json.data.parent = parentId === null ? undefined : parentId;

	          _json.scratch = _ele6._private.scratch;
	        }
	      }

	      return cy.add(_jsons.concat(descsEtcJsons));
	    }
	  }

	  return this; // if nothing done
	};

	[__webpack_require__(29), __webpack_require__(42), __webpack_require__(47), __webpack_require__(48), __webpack_require__(53), __webpack_require__(54), __webpack_require__(55), __webpack_require__(56), __webpack_require__(61), __webpack_require__(62), __webpack_require__(63), __webpack_require__(7), __webpack_require__(64), __webpack_require__(65), __webpack_require__(66), __webpack_require__(67), __webpack_require__(68)].forEach(function (props) {
	  util.extend(elesfn, props);
	});

	module.exports = Collection;

	/***/ }),
	/* 8 */
	/***/ (function(module, exports, __webpack_require__) {


	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var ObjectSet = function () {
	  function ObjectSet(arrayOrObjectSet) {
	    _classCallCheck(this, ObjectSet);

	    this._obj = Object.create(null);

	    if (arrayOrObjectSet != null) {
	      var arr = void 0;

	      if (arrayOrObjectSet.instanceString != null && arrayOrObjectSet.instanceString() === this.instanceString()) {
	        arr = arrayOrObjectSet.toArray();
	      } else {
	        arr = arrayOrObjectSet;
	      }

	      for (var i = 0; i < arr.length; i++) {
	        this.add(arr[i]);
	      }
	    }
	  }

	  _createClass(ObjectSet, [{
	    key: 'instanceString',
	    value: function instanceString() {
	      return 'set';
	    }
	  }, {
	    key: 'add',
	    value: function add(val) {
	      this._obj[val] = 1;
	    }
	  }, {
	    key: 'delete',
	    value: function _delete(val) {
	      this._obj[val] = 0;
	    }
	  }, {
	    key: 'clear',
	    value: function clear() {
	      this._obj = Object.create(null);
	    }
	  }, {
	    key: 'has',
	    value: function has(val) {
	      return this._obj[val] === 1;
	    }
	  }, {
	    key: 'toArray',
	    value: function toArray() {
	      var _this = this;

	      return Object.keys(this._obj).filter(function (key) {
	        return _this.has(key);
	      });
	    }
	  }, {
	    key: 'forEach',
	    value: function forEach(callback, thisArg) {
	      return this.toArray().forEach(callback, thisArg);
	    }
	  }, {
	    key: 'size',
	    get: function get() {
	      return this.toArray().length;
	    }
	  }]);

	  return ObjectSet;
	}();

	// TODO use the stdlib Set in future...
	// module.exports = typeof Set !== undef ? Set : ObjectSet;


	module.exports = ObjectSet;

	/***/ }),
	/* 9 */
	/***/ (function(module, exports, __webpack_require__) {


	module.exports = __webpack_require__(32);

	/***/ }),
	/* 10 */
	/***/ (function(module, exports, __webpack_require__) {


	// storage for parsed queries
	var newQuery = function newQuery() {
	  return {
	    classes: [],
	    colonSelectors: [],
	    data: [],
	    group: null,
	    ids: [],
	    meta: [],

	    // fake selectors
	    collection: null, // a collection to match against
	    filter: null, // filter function

	    // these are defined in the upward direction rather than down (e.g. child)
	    // because we need to go up in Selector.filter()
	    parent: null, // parent query obj
	    ancestor: null, // ancestor query obj
	    subject: null, // defines subject in compound query (subject query obj; points to self if subject)

	    // use these only when subject has been defined
	    child: null,
	    descendant: null
	  };
	};

	module.exports = newQuery;

	/***/ }),
	/* 11 */
	/***/ (function(module, exports, __webpack_require__) {


	var util = __webpack_require__(1);
	var is = __webpack_require__(0);
	var Event = __webpack_require__(16);

	var eventRegex = /^([^.]+)(\.(?:[^.]+))?$/; // regex for matching event strings (e.g. "click.namespace")
	var universalNamespace = '.*'; // matches as if no namespace specified and prevents users from unbinding accidentally

	var defaults = {
	  qualifierCompare: function qualifierCompare(q1, q2) {
	    return q1 === q2;
	  },
	  eventMatches: function eventMatches() /*context, listener, eventObj*/{
	    return true;
	  },
	  eventFields: function eventFields() /*context*/{
	    return {};
	  },
	  callbackContext: function callbackContext(context /*, listener, eventObj*/) {
	    return context;
	  },
	  beforeEmit: function beforeEmit() /* context, listener, eventObj */{},
	  afterEmit: function afterEmit() /* context, listener, eventObj */{},
	  bubble: function bubble() /*context*/{
	    return false;
	  },
	  parent: function parent() /*context*/{
	    return null;
	  },
	  context: undefined
	};

	function Emitter(opts) {
	  util.assign(this, defaults, opts);

	  this.listeners = [];
	  this.emitting = 0;
	}

	var p = Emitter.prototype;

	var forEachEvent = function forEachEvent(self, handler, events, qualifier, callback, conf, confOverrides) {
	  if (is.fn(qualifier)) {
	    callback = qualifier;
	    qualifier = null;
	  }

	  if (confOverrides) {
	    if (conf == null) {
	      conf = confOverrides;
	    } else {
	      conf = util.assign({}, conf, confOverrides);
	    }
	  }

	  var eventList = events.split(/\s+/);

	  for (var i = 0; i < eventList.length; i++) {
	    var evt = eventList[i];

	    if (is.emptyString(evt)) {
	      continue;
	    }

	    var match = evt.match(eventRegex); // type[.namespace]

	    if (match) {
	      var type = match[1];
	      var namespace = match[2] ? match[2] : null;
	      var ret = handler(self, evt, type, namespace, qualifier, callback, conf);

	      if (ret === false) {
	        break;
	      } // allow exiting early
	    }
	  }
	};

	var makeEventObj = function makeEventObj(self, obj) {
	  return new Event(obj.type, util.assign(obj, self.eventFields(self.context)));
	};

	var forEachEventObj = function forEachEventObj(self, handler, events) {
	  if (is.event(events)) {
	    handler(self, events);

	    return;
	  } else if (is.plainObject(events)) {
	    handler(self, makeEventObj(self, events));

	    return;
	  }

	  var eventList = events.split(/\s+/);

	  for (var i = 0; i < eventList.length; i++) {
	    var evt = eventList[i];

	    if (is.emptyString(evt)) {
	      continue;
	    }

	    var match = evt.match(eventRegex); // type[.namespace]

	    if (match) {
	      var type = match[1];
	      var namespace = match[2] ? match[2] : null;
	      var eventObj = makeEventObj(self, {
	        type: type,
	        namespace: namespace,
	        target: self.context
	      });

	      handler(self, eventObj);
	    }
	  }
	};

	p.on = p.addListener = function (events, qualifier, callback, conf, confOverrides) {
	  forEachEvent(this, function (self, event, type, namespace, qualifier, callback, conf) {
	    if (is.fn(callback)) {
	      self.listeners.push({
	        event: event, // full event string
	        callback: callback, // callback to run
	        type: type, // the event type (e.g. 'click')
	        namespace: namespace, // the event namespace (e.g. ".foo")
	        qualifier: qualifier, // a restriction on whether to match this emitter
	        conf: conf // additional configuration
	      });
	    }
	  }, events, qualifier, callback, conf, confOverrides);

	  return this;
	};

	p.one = function (events, qualifier, callback, conf) {
	  return this.on(events, qualifier, callback, conf, { one: true });
	};

	p.removeListener = p.off = function (events, qualifier, callback, conf) {
	  var _this = this;

	  if (this.emitting !== 0) {
	    this.listeners = util.copyArray(this.listeners);
	  }

	  var listeners = this.listeners;

	  var _loop = function _loop(i) {
	    var listener = listeners[i];

	    forEachEvent(_this, function (self, event, type, namespace, qualifier, callback /*, conf*/) {
	      if (listener.type === type && (!namespace || listener.namespace === namespace) && (!qualifier || self.qualifierCompare(listener.qualifier, qualifier)) && (!callback || listener.callback === callback)) {
	        listeners.splice(i, 1);

	        return false;
	      }
	    }, events, qualifier, callback, conf);
	  };

	  for (var i = listeners.length - 1; i >= 0; i--) {
	    _loop(i);
	  }

	  return this;
	};

	p.emit = p.trigger = function (events, extraParams, manualCallback) {
	  var listeners = this.listeners;
	  var numListenersBeforeEmit = listeners.length;

	  this.emitting++;

	  if (!is.array(extraParams)) {
	    extraParams = [extraParams];
	  }

	  forEachEventObj(this, function (self, eventObj) {
	    if (manualCallback != null) {
	      listeners = [{
	        event: eventObj.event,
	        type: eventObj.type,
	        namespace: eventObj.namespace,
	        callback: manualCallback
	      }];

	      numListenersBeforeEmit = listeners.length;
	    }

	    var _loop2 = function _loop2(i) {
	      var listener = listeners[i];

	      if (listener.type === eventObj.type && (!listener.namespace || listener.namespace === eventObj.namespace || listener.namespace === universalNamespace) && self.eventMatches(self.context, listener, eventObj)) {
	        var args = [eventObj];

	        if (extraParams != null) {
	          util.push(args, extraParams);
	        }

	        self.beforeEmit(self.context, listener, eventObj);

	        if (listener.conf && listener.conf.one) {
	          self.listeners = self.listeners.filter(function (l) {
	            return l !== listener;
	          });
	        }

	        var context = self.callbackContext(self.context, listener, eventObj);
	        var ret = listener.callback.apply(context, args);

	        self.afterEmit(self.context, listener, eventObj);

	        if (ret === false) {
	          eventObj.stopPropagation();
	          eventObj.preventDefault();
	        }
	      } // if listener matches
	    };

	    for (var i = 0; i < numListenersBeforeEmit; i++) {
	      _loop2(i);
	    } // for listener

	    if (self.bubble(self.context) && !eventObj.isPropagationStopped()) {
	      self.parent(self.context).emit(eventObj, extraParams);
	    }
	  }, events);

	  this.emitting--;

	  return this;
	};

	module.exports = Emitter;

	/***/ }),
	/* 12 */
	/***/ (function(module, exports, __webpack_require__) {


	var window = __webpack_require__(3);
	var util = __webpack_require__(1);
	var Collection = __webpack_require__(7);
	var is = __webpack_require__(0);
	var Promise = __webpack_require__(5);
	var define = __webpack_require__(4);

	var Core = function Core(opts) {
	  var cy = this;

	  opts = util.extend({}, opts);

	  var container = opts.container;

	  // allow for passing a wrapped jquery object
	  // e.g. cytoscape({ container: $('#cy') })
	  if (container && !is.htmlElement(container) && is.htmlElement(container[0])) {
	    container = container[0];
	  }

	  var reg = container ? container._cyreg : null; // e.g. already registered some info (e.g. readies) via jquery
	  reg = reg || {};

	  if (reg && reg.cy) {
	    reg.cy.destroy();

	    reg = {}; // old instance => replace reg completely
	  }

	  var readies = reg.readies = reg.readies || [];

	  if (container) {
	    container._cyreg = reg;
	  } // make sure container assoc'd reg points to this cy
	  reg.cy = cy;

	  var head = window !== undefined && container !== undefined && !opts.headless;
	  var options = opts;
	  options.layout = util.extend({ name: head ? 'grid' : 'null' }, options.layout);
	  options.renderer = util.extend({ name: head ? 'canvas' : 'null' }, options.renderer);

	  var defVal = function defVal(def, val, altVal) {
	    if (val !== undefined) {
	      return val;
	    } else if (altVal !== undefined) {
	      return altVal;
	    } else {
	      return def;
	    }
	  };

	  var _p = this._private = {
	    container: container, // html dom ele container
	    ready: false, // whether ready has been triggered
	    options: options, // cached options
	    elements: new Collection(this), // elements in the graph
	    listeners: [], // list of listeners
	    aniEles: new Collection(this), // elements being animated
	    scratch: {}, // scratch object for core
	    layout: null,
	    renderer: null,
	    destroyed: false, // whether destroy was called
	    notificationsEnabled: true, // whether notifications are sent to the renderer
	    minZoom: 1e-50,
	    maxZoom: 1e50,
	    zoomingEnabled: defVal(true, options.zoomingEnabled),
	    userZoomingEnabled: defVal(true, options.userZoomingEnabled),
	    panningEnabled: defVal(true, options.panningEnabled),
	    userPanningEnabled: defVal(true, options.userPanningEnabled),
	    boxSelectionEnabled: defVal(true, options.boxSelectionEnabled),
	    autolock: defVal(false, options.autolock, options.autolockNodes),
	    autoungrabify: defVal(false, options.autoungrabify, options.autoungrabifyNodes),
	    autounselectify: defVal(false, options.autounselectify),
	    styleEnabled: options.styleEnabled === undefined ? head : options.styleEnabled,
	    zoom: is.number(options.zoom) ? options.zoom : 1,
	    pan: {
	      x: is.plainObject(options.pan) && is.number(options.pan.x) ? options.pan.x : 0,
	      y: is.plainObject(options.pan) && is.number(options.pan.y) ? options.pan.y : 0
	    },
	    animation: { // object for currently-running animations
	      current: [],
	      queue: []
	    },
	    hasCompoundNodes: false
	  };

	  this.createEmitter();

	  // set selection type
	  var selType = options.selectionType;
	  if (selType === undefined || selType !== 'additive' && selType !== 'single') {
	    // then set default

	    _p.selectionType = 'single';
	  } else {
	    _p.selectionType = selType;
	  }

	  // init zoom bounds
	  if (is.number(options.minZoom) && is.number(options.maxZoom) && options.minZoom < options.maxZoom) {
	    _p.minZoom = options.minZoom;
	    _p.maxZoom = options.maxZoom;
	  } else if (is.number(options.minZoom) && options.maxZoom === undefined) {
	    _p.minZoom = options.minZoom;
	  } else if (is.number(options.maxZoom) && options.minZoom === undefined) {
	    _p.maxZoom = options.maxZoom;
	  }

	  var loadExtData = function loadExtData(extData, next) {
	    var anyIsPromise = extData.some(is.promise);

	    if (anyIsPromise) {
	      return Promise.all(extData).then(next); // load all data asynchronously, then exec rest of init
	    } else {
	      next(extData); // exec synchronously for convenience
	    }
	  };

	  // start with the default stylesheet so we have something before loading an external stylesheet
	  if (_p.styleEnabled) {
	    cy.setStyle([]);
	  }

	  // create the renderer
	  cy.initRenderer(util.extend({
	    hideEdgesOnViewport: options.hideEdgesOnViewport,
	    textureOnViewport: options.textureOnViewport,
	    wheelSensitivity: is.number(options.wheelSensitivity) && options.wheelSensitivity > 0 ? options.wheelSensitivity : 1,
	    motionBlur: options.motionBlur === undefined ? false : options.motionBlur, // off by default
	    motionBlurOpacity: options.motionBlurOpacity === undefined ? 0.05 : options.motionBlurOpacity,
	    pixelRatio: is.number(options.pixelRatio) && options.pixelRatio > 0 ? options.pixelRatio : undefined,
	    desktopTapThreshold: options.desktopTapThreshold === undefined ? 4 : options.desktopTapThreshold,
	    touchTapThreshold: options.touchTapThreshold === undefined ? 8 : options.touchTapThreshold
	  }, options.renderer));

	  var setElesAndLayout = function setElesAndLayout(elements, onload, ondone) {
	    cy.notifications(false);

	    // remove old elements
	    var oldEles = cy.mutableElements();
	    if (oldEles.length > 0) {
	      oldEles.remove();
	    }

	    if (elements != null) {
	      if (is.plainObject(elements) || is.array(elements)) {
	        cy.add(elements);
	      }
	    }

	    cy.one('layoutready', function (e) {
	      cy.notifications(true);
	      cy.emit(e); // we missed this event by turning notifications off, so pass it on

	      cy.notify({
	        type: 'load',
	        eles: cy.mutableElements()
	      });

	      cy.one('load', onload);
	      cy.emit('load');
	    }).one('layoutstop', function () {
	      cy.one('done', ondone);
	      cy.emit('done');
	    });

	    var layoutOpts = util.extend({}, cy._private.options.layout);
	    layoutOpts.eles = cy.elements();

	    cy.layout(layoutOpts).run();
	  };

	  loadExtData([options.style, options.elements], function (thens) {
	    var initStyle = thens[0];
	    var initEles = thens[1];

	    // init style
	    if (_p.styleEnabled) {
	      cy.style().append(initStyle);
	    }

	    // initial load
	    setElesAndLayout(initEles, function () {
	      // onready
	      cy.startAnimationLoop();
	      _p.ready = true;

	      // if a ready callback is specified as an option, the bind it
	      if (is.fn(options.ready)) {
	        cy.on('ready', options.ready);
	      }

	      // bind all the ready handlers registered before creating this instance
	      for (var i = 0; i < readies.length; i++) {
	        var fn = readies[i];
	        cy.on('ready', fn);
	      }
	      if (reg) {
	        reg.readies = [];
	      } // clear b/c we've bound them all and don't want to keep it around in case a new core uses the same div etc

	      cy.emit('ready');
	    }, options.done);
	  });
	};

	var corefn = Core.prototype; // short alias

	util.extend(corefn, {
	  instanceString: function instanceString() {
	    return 'core';
	  },

	  isReady: function isReady() {
	    return this._private.ready;
	  },

	  isDestroyed: function isDestroyed() {
	    return this._private.destroyed;
	  },

	  ready: function ready(fn) {
	    if (this.isReady()) {
	      this.emitter().emit('ready', [], fn); // just calls fn as though triggered via ready event
	    } else {
	      this.on('ready', fn);
	    }

	    return this;
	  },

	  destroy: function destroy() {
	    var cy = this;
	    if (cy.isDestroyed()) return;

	    cy.stopAnimationLoop();

	    cy.destroyRenderer();

	    this.emit('destroy');

	    cy._private.destroyed = true;

	    return cy;
	  },

	  hasElementWithId: function hasElementWithId(id) {
	    return this._private.elements.hasElementWithId(id);
	  },

	  getElementById: function getElementById(id) {
	    return this._private.elements.getElementById(id);
	  },

	  selectionType: function selectionType() {
	    return this._private.selectionType;
	  },

	  hasCompoundNodes: function hasCompoundNodes() {
	    return this._private.hasCompoundNodes;
	  },

	  headless: function headless() {
	    return this._private.options.renderer.name === 'null';
	  },

	  styleEnabled: function styleEnabled() {
	    return this._private.styleEnabled;
	  },

	  addToPool: function addToPool(eles) {
	    this._private.elements.merge(eles);

	    return this; // chaining
	  },

	  removeFromPool: function removeFromPool(eles) {
	    this._private.elements.unmerge(eles);

	    return this;
	  },

	  container: function container() {
	    return this._private.container;
	  },

	  options: function options() {
	    return util.copy(this._private.options);
	  },

	  json: function json(obj) {
	    var cy = this;
	    var _p = cy._private;
	    var eles = cy.mutableElements();

	    if (is.plainObject(obj)) {
	      // set

	      cy.startBatch();

	      if (obj.elements) {
	        var idInJson = {};

	        var updateEles = function updateEles(jsons, gr) {
	          var toAdd = [];
	          var toMod = [];

	          for (var i = 0; i < jsons.length; i++) {
	            var json = jsons[i];
	            var id = json.data.id;
	            var ele = cy.getElementById(id);

	            idInJson[id] = true;

	            if (ele.length !== 0) {
	              // existing element should be updated
	              toMod.push({ ele: ele, json: json });
	            } else {
	              // otherwise should be added
	              if (gr) {
	                toAdd.push(util.extend({ group: gr }, json));
	              } else {
	                toAdd.push(json);
	              }
	            }
	          }

	          cy.add(toAdd);

	          for (var _i = 0; _i < toMod.length; _i++) {
	            var _toMod$_i = toMod[_i],
	                _ele = _toMod$_i.ele,
	                _json = _toMod$_i.json;


	            _ele.json(_json);
	          }
	        };

	        if (is.array(obj.elements)) {
	          // elements: []
	          updateEles(obj.elements);
	        } else {
	          // elements: { nodes: [], edges: [] }
	          var grs = ['nodes', 'edges'];
	          for (var i = 0; i < grs.length; i++) {
	            var gr = grs[i];
	            var elements = obj.elements[gr];

	            if (is.array(elements)) {
	              updateEles(elements, gr);
	            }
	          }
	        }

	        // elements not specified in json should be removed
	        for (var _i2 = 0; _i2 < eles.length; _i2++) {
	          var ele = eles[_i2];
	          var remove = !idInJson[ele.id()];

	          if (remove) {
	            if (ele.isParent()) {
	              ele.children().move({ parent: null }); // so that children are not removed w/ parent

	              ele.remove(); // remove parent
	            } else {
	              ele.remove();
	            }
	          }
	        }
	      }

	      if (obj.style) {
	        cy.style(obj.style);
	      }

	      if (obj.zoom != null && obj.zoom !== _p.zoom) {
	        cy.zoom(obj.zoom);
	      }

	      if (obj.pan) {
	        if (obj.pan.x !== _p.pan.x || obj.pan.y !== _p.pan.y) {
	          cy.pan(obj.pan);
	        }
	      }

	      var fields = ['minZoom', 'maxZoom', 'zoomingEnabled', 'userZoomingEnabled', 'panningEnabled', 'userPanningEnabled', 'boxSelectionEnabled', 'autolock', 'autoungrabify', 'autounselectify'];

	      for (var _i3 = 0; _i3 < fields.length; _i3++) {
	        var f = fields[_i3];

	        if (obj[f] != null) {
	          cy[f](obj[f]);
	        }
	      }

	      cy.endBatch();

	      return this; // chaining
	    } else if (obj === undefined) {
	      // get
	      var json = {};

	      json.elements = {};
	      eles.forEach(function (ele) {
	        var group = ele.group();

	        if (!json.elements[group]) {
	          json.elements[group] = [];
	        }

	        json.elements[group].push(ele.json());
	      });

	      if (this._private.styleEnabled) {
	        json.style = cy.style().json();
	      }

	      json.zoomingEnabled = cy._private.zoomingEnabled;
	      json.userZoomingEnabled = cy._private.userZoomingEnabled;
	      json.zoom = cy._private.zoom;
	      json.minZoom = cy._private.minZoom;
	      json.maxZoom = cy._private.maxZoom;
	      json.panningEnabled = cy._private.panningEnabled;
	      json.userPanningEnabled = cy._private.userPanningEnabled;
	      json.pan = util.copy(cy._private.pan);
	      json.boxSelectionEnabled = cy._private.boxSelectionEnabled;
	      json.renderer = util.copy(cy._private.options.renderer);
	      json.hideEdgesOnViewport = cy._private.options.hideEdgesOnViewport;
	      json.textureOnViewport = cy._private.options.textureOnViewport;
	      json.wheelSensitivity = cy._private.options.wheelSensitivity;
	      json.motionBlur = cy._private.options.motionBlur;

	      return json;
	    }
	  },

	  scratch: define.data({
	    field: 'scratch',
	    bindingEvent: 'scratch',
	    allowBinding: true,
	    allowSetting: true,
	    settingEvent: 'scratch',
	    settingTriggersEvent: true,
	    triggerFnName: 'trigger',
	    allowGetting: true
	  }),

	  removeScratch: define.removeData({
	    field: 'scratch',
	    event: 'scratch',
	    triggerFnName: 'trigger',
	    triggerEvent: true
	  })

	});

	corefn.$id = corefn.getElementById;

	[__webpack_require__(69), __webpack_require__(70), __webpack_require__(78), __webpack_require__(79), __webpack_require__(80), __webpack_require__(81), __webpack_require__(82), __webpack_require__(83), __webpack_require__(84), __webpack_require__(93)].forEach(function (props) {
	  util.extend(corefn, props);
	});

	module.exports = Core;

	/***/ }),
	/* 13 */
	/***/ (function(module, exports, __webpack_require__) {


	module.exports = function memoize(fn, keyFn) {
	  if (!keyFn) {
	    keyFn = function keyFn() {
	      if (arguments.length === 1) {
	        return arguments[0];
	      } else if (arguments.length === 0) {
	        return 'undefined';
	      }

	      var args = [];

	      for (var i = 0; i < arguments.length; i++) {
	        args.push(arguments[i]);
	      }

	      return args.join('$');
	    };
	  }

	  var memoizedFn = function memoizedFn() {
	    var self = this;
	    var args = arguments;
	    var ret = void 0;
	    var k = keyFn.apply(self, args);
	    var cache = memoizedFn.cache;

	    if (!(ret = cache[k])) {
	      ret = cache[k] = fn.apply(self, args);
	    }

	    return ret;
	  };

	  memoizedFn.cache = {};

	  return memoizedFn;
	};

	/***/ }),
	/* 14 */
	/***/ (function(module, exports, __webpack_require__) {


	var util = __webpack_require__(1);
	var is = __webpack_require__(0);
	var Set = __webpack_require__(8);

	// represents a node or an edge
	var Element = function Element(cy, params, restore) {
	  restore = restore === undefined || restore ? true : false;

	  if (cy === undefined || params === undefined || !is.core(cy)) {
	    util.error('An element must have a core reference and parameters set');
	    return;
	  }

	  var group = params.group;

	  // try to automatically infer the group if unspecified
	  if (group == null) {
	    if (params.data && params.data.source != null && params.data.target != null) {
	      group = 'edges';
	    } else {
	      group = 'nodes';
	    }
	  }

	  // validate group
	  if (group !== 'nodes' && group !== 'edges') {
	    util.error('An element must be of type `nodes` or `edges`; you specified `' + group + '`');
	    return;
	  }

	  // make the element array-like, just like a collection
	  this.length = 1;
	  this[0] = this;

	  // NOTE: when something is added here, add also to ele.json()
	  var _p = this._private = {
	    cy: cy,
	    single: true, // indicates this is an element
	    data: params.data || {}, // data object
	    position: params.position || {}, // (x, y) position pair
	    autoWidth: undefined, // width and height of nodes calculated by the renderer when set to special 'auto' value
	    autoHeight: undefined,
	    autoPadding: undefined,
	    compoundBoundsClean: false, // whether the compound dimensions need to be recalculated the next time dimensions are read
	    listeners: [], // array of bound listeners
	    group: group, // string; 'nodes' or 'edges'
	    style: {}, // properties as set by the style
	    rstyle: {}, // properties for style sent from the renderer to the core
	    styleCxts: [], // applied style contexts from the styler
	    removed: true, // whether it's inside the vis; true if removed (set true here since we call restore)
	    selected: params.selected ? true : false, // whether it's selected
	    selectable: params.selectable === undefined ? true : params.selectable ? true : false, // whether it's selectable
	    locked: params.locked ? true : false, // whether the element is locked (cannot be moved)
	    grabbed: false, // whether the element is grabbed by the mouse; renderer sets this privately
	    grabbable: params.grabbable === undefined ? true : params.grabbable ? true : false, // whether the element can be grabbed
	    active: false, // whether the element is active from user interaction
	    classes: new Set(), // map ( className => true )
	    animation: { // object for currently-running animations
	      current: [],
	      queue: []
	    },
	    rscratch: {}, // object in which the renderer can store information
	    scratch: params.scratch || {}, // scratch objects
	    edges: [], // array of connected edges
	    children: [], // array of children
	    parent: null, // parent ref
	    traversalCache: {}, // cache of output of traversal functions
	    backgrounding: false // whether background images are loading
	  };

	  // renderedPosition overrides if specified
	  if (params.renderedPosition) {
	    var rpos = params.renderedPosition;
	    var pan = cy.pan();
	    var zoom = cy.zoom();

	    _p.position = {
	      x: (rpos.x - pan.x) / zoom,
	      y: (rpos.y - pan.y) / zoom
	    };
	  }

	  if (is.string(params.classes)) {
	    var classes = params.classes.split(/\s+/);
	    for (var i = 0, l = classes.length; i < l; i++) {
	      var cls = classes[i];
	      if (!cls || cls === '') {
	        continue;
	      }

	      _p.classes.add(cls);
	    }
	  }

	  if (params.style || params.css) {
	    cy.style().applyBypass(this, params.style || params.css);
	  }

	  this.createEmitter();

	  if (restore === undefined || restore) {
	    this.restore();
	  }
	};

	module.exports = Element;

	/***/ }),
	/* 15 */
	/***/ (function(module, exports, __webpack_require__) {


	var util = __webpack_require__(1);

	var stateSelectors = [{
	  selector: ':selected',
	  matches: function matches(ele) {
	    return ele.selected();
	  }
	}, {
	  selector: ':unselected',
	  matches: function matches(ele) {
	    return !ele.selected();
	  }
	}, {
	  selector: ':selectable',
	  matches: function matches(ele) {
	    return ele.selectable();
	  }
	}, {
	  selector: ':unselectable',
	  matches: function matches(ele) {
	    return !ele.selectable();
	  }
	}, {
	  selector: ':locked',
	  matches: function matches(ele) {
	    return ele.locked();
	  }
	}, {
	  selector: ':unlocked',
	  matches: function matches(ele) {
	    return !ele.locked();
	  }
	}, {
	  selector: ':visible',
	  matches: function matches(ele) {
	    return ele.visible();
	  }
	}, {
	  selector: ':hidden',
	  matches: function matches(ele) {
	    return !ele.visible();
	  }
	}, {
	  selector: ':transparent',
	  matches: function matches(ele) {
	    return ele.transparent();
	  }
	}, {
	  selector: ':grabbed',
	  matches: function matches(ele) {
	    return ele.grabbed();
	  }
	}, {
	  selector: ':free',
	  matches: function matches(ele) {
	    return !ele.grabbed();
	  }
	}, {
	  selector: ':removed',
	  matches: function matches(ele) {
	    return ele.removed();
	  }
	}, {
	  selector: ':inside',
	  matches: function matches(ele) {
	    return !ele.removed();
	  }
	}, {
	  selector: ':grabbable',
	  matches: function matches(ele) {
	    return ele.grabbable();
	  }
	}, {
	  selector: ':ungrabbable',
	  matches: function matches(ele) {
	    return !ele.grabbable();
	  }
	}, {
	  selector: ':animated',
	  matches: function matches(ele) {
	    return ele.animated();
	  }
	}, {
	  selector: ':unanimated',
	  matches: function matches(ele) {
	    return !ele.animated();
	  }
	}, {
	  selector: ':parent',
	  matches: function matches(ele) {
	    return ele.isParent();
	  }
	}, {
	  selector: ':childless',
	  matches: function matches(ele) {
	    return ele.isChildless();
	  }
	}, {
	  selector: ':child',
	  matches: function matches(ele) {
	    return ele.isChild();
	  }
	}, {
	  selector: ':orphan',
	  matches: function matches(ele) {
	    return ele.isOrphan();
	  }
	}, {
	  selector: ':nonorphan',
	  matches: function matches(ele) {
	    return ele.isChild();
	  }
	}, {
	  selector: ':loop',
	  matches: function matches(ele) {
	    return ele.isLoop();
	  }
	}, {
	  selector: ':simple',
	  matches: function matches(ele) {
	    return ele.isSimple();
	  }
	}, {
	  selector: ':active',
	  matches: function matches(ele) {
	    return ele.active();
	  }
	}, {
	  selector: ':inactive',
	  matches: function matches(ele) {
	    return !ele.active();
	  }
	}, {
	  selector: ':backgrounding',
	  matches: function matches(ele) {
	    return ele.backgrounding();
	  }
	}, {
	  selector: ':nonbackgrounding',
	  matches: function matches(ele) {
	    return !ele.backgrounding();
	  }
	}].sort(function (a, b) {
	  // n.b. selectors that are starting substrings of others must have the longer ones first
	  return util.sort.descending(a.selector, b.selector);
	});

	var stateSelectorMatches = function stateSelectorMatches(sel, ele) {
	  var lookup = stateSelectorMatches.lookup = stateSelectorMatches.lookup || function () {
	    var selToFn = {};
	    var s = void 0;

	    for (var i = 0; i < stateSelectors.length; i++) {
	      s = stateSelectors[i];

	      selToFn[s.selector] = s.matches;
	    }

	    return selToFn;
	  }();

	  return lookup[sel](ele);
	};

	var stateSelectorRegex = '(' + stateSelectors.map(function (s) {
	  return s.selector;
	}).join('|') + ')';

	module.exports = { stateSelectors: stateSelectors, stateSelectorMatches: stateSelectorMatches, stateSelectorRegex: stateSelectorRegex };

	/***/ }),
	/* 16 */
	/***/ (function(module, exports, __webpack_require__) {


	/*!
	Event object based on jQuery events, MIT license

	https://jquery.org/license/
	https://tldrlegal.com/license/mit-license
	https://github.com/jquery/jquery/blob/master/src/event.js
	*/

	var Event = function Event(src, props) {
	  this.recycle(src, props);
	};

	function returnFalse() {
	  return false;
	}

	function returnTrue() {
	  return true;
	}

	// http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
	Event.prototype = {
	  instanceString: function instanceString() {
	    return 'event';
	  },

	  recycle: function recycle(src, props) {
	    this.isImmediatePropagationStopped = this.isPropagationStopped = this.isDefaultPrevented = returnFalse;

	    if (src != null && src.preventDefault) {
	      // Browser Event object
	      this.type = src.type;

	      // Events bubbling up the document may have been marked as prevented
	      // by a handler lower down the tree; reflect the correct value.
	      this.isDefaultPrevented = src.defaultPrevented ? returnTrue : returnFalse;
	    } else if (src != null && src.type) {
	      // Plain object containing all event details
	      props = src;
	    } else {
	      // Event string
	      this.type = src;
	    }

	    // Put explicitly provided properties onto the event object
	    if (props != null) {
	      // more efficient to manually copy fields we use
	      this.originalEvent = props.originalEvent;
	      this.type = props.type != null ? props.type : this.type;
	      this.cy = props.cy;
	      this.target = props.target;
	      this.position = props.position;
	      this.renderedPosition = props.renderedPosition;
	      this.namespace = props.namespace;
	      this.layout = props.layout;
	    }

	    if (this.cy != null && this.position != null && this.renderedPosition == null) {
	      // create a rendered position based on the passed position
	      var pos = this.position;
	      var zoom = this.cy.zoom();
	      var pan = this.cy.pan();

	      this.renderedPosition = {
	        x: pos.x * zoom + pan.x,
	        y: pos.y * zoom + pan.y
	      };
	    }

	    // Create a timestamp if incoming event doesn't have one
	    this.timeStamp = src && src.timeStamp || Date.now();
	  },

	  preventDefault: function preventDefault() {
	    this.isDefaultPrevented = returnTrue;

	    var e = this.originalEvent;
	    if (!e) {
	      return;
	    }

	    // if preventDefault exists run it on the original event
	    if (e.preventDefault) {
	      e.preventDefault();
	    }
	  },

	  stopPropagation: function stopPropagation() {
	    this.isPropagationStopped = returnTrue;

	    var e = this.originalEvent;
	    if (!e) {
	      return;
	    }

	    // if stopPropagation exists run it on the original event
	    if (e.stopPropagation) {
	      e.stopPropagation();
	    }
	  },

	  stopImmediatePropagation: function stopImmediatePropagation() {
	    this.isImmediatePropagationStopped = returnTrue;
	    this.stopPropagation();
	  },

	  isDefaultPrevented: returnFalse,
	  isPropagationStopped: returnFalse,
	  isImmediatePropagationStopped: returnFalse
	};

	module.exports = Event;

	/***/ }),
	/* 17 */
	/***/ (function(module, exports, __webpack_require__) {


	/**
	 *  Elements are drawn in a specific order based on compound depth (low to high), the element type (nodes above edges),
	 *  and z-index (low to high).  These styles affect how this applies:
	 *
	 *  z-compound-depth: May be `bottom | orphan | auto | top`.  The first drawn is `bottom`, then `orphan` which is the
	 *      same depth as the root of the compound graph, followed by the default value `auto` which draws in order from
	 *      root to leaves of the compound graph.  The last drawn is `top`.
	 *  z-index-compare: May be `auto | manual`.  The default value is `auto` which always draws edges under nodes.
	 *      `manual` ignores this convention and draws based on the `z-index` value setting.
	 *  z-index: An integer value that affects the relative draw order of elements.  In general, an element with a higher
	 *      `z-index` will be drawn on top of an element with a lower `z-index`.
	 */
	var util = __webpack_require__(1);

	var zIndexSort = function zIndexSort(a, b) {
	  var cy = a.cy();
	  var hasCompoundNodes = cy.hasCompoundNodes();

	  function getDepth(ele) {
	    var style = ele.pstyle('z-compound-depth');
	    if (style.value === 'auto') {
	      return hasCompoundNodes ? ele.zDepth() : 0;
	    } else if (style.value === 'bottom') {
	      return -1;
	    } else if (style.value === 'top') {
	      return util.MAX_INT;
	    }
	    // 'orphan'
	    return 0;
	  }
	  var depthDiff = getDepth(a) - getDepth(b);
	  if (depthDiff !== 0) {
	    return depthDiff;
	  }

	  function getEleDepth(ele) {
	    var style = ele.pstyle('z-index-compare');
	    if (style.value === 'auto') {
	      return ele.isNode() ? 1 : 0;
	    }
	    // 'manual'
	    return 0;
	  }
	  var eleDiff = getEleDepth(a) - getEleDepth(b);
	  if (eleDiff !== 0) {
	    return eleDiff;
	  }

	  var zDiff = a.pstyle('z-index').value - b.pstyle('z-index').value;
	  if (zDiff !== 0) {
	    return zDiff;
	  }
	  // compare indices in the core (order added to graph w/ last on top)
	  return a.poolIndex() - b.poolIndex();
	};

	module.exports = zIndexSort;

	/***/ }),
	/* 18 */
	/***/ (function(module, exports, __webpack_require__) {


	var is = __webpack_require__(0);
	var util = __webpack_require__(1);
	var Selector = __webpack_require__(6);

	var Style = function Style(cy) {

	  if (!(this instanceof Style)) {
	    return new Style(cy);
	  }

	  if (!is.core(cy)) {
	    util.error('A style must have a core reference');
	    return;
	  }

	  this._private = {
	    cy: cy,
	    coreStyle: {}
	  };

	  this.length = 0;

	  this.resetToDefault();
	};

	var styfn = Style.prototype;

	styfn.instanceString = function () {
	  return 'style';
	};

	// remove all contexts
	styfn.clear = function () {
	  for (var i = 0; i < this.length; i++) {
	    this[i] = undefined;
	  }
	  this.length = 0;

	  var _p = this._private;

	  _p.newStyle = true;

	  return this; // chaining
	};

	styfn.resetToDefault = function () {
	  this.clear();
	  this.addDefaultStylesheet();

	  return this;
	};

	// builds a style object for the 'core' selector
	styfn.core = function () {
	  return this._private.coreStyle;
	};

	// create a new context from the specified selector string and switch to that context
	styfn.selector = function (selectorStr) {
	  // 'core' is a special case and does not need a selector
	  var selector = selectorStr === 'core' ? null : new Selector(selectorStr);

	  var i = this.length++; // new context means new index
	  this[i] = {
	    selector: selector,
	    properties: [],
	    mappedProperties: [],
	    index: i
	  };

	  return this; // chaining
	};

	// add one or many css rules to the current context
	styfn.css = function () {
	  var self = this;
	  var args = arguments;

	  switch (args.length) {
	    case 1:
	      var map = args[0];

	      for (var i = 0; i < self.properties.length; i++) {
	        var prop = self.properties[i];
	        var mapVal = map[prop.name];

	        if (mapVal === undefined) {
	          mapVal = map[util.dash2camel(prop.name)];
	        }

	        if (mapVal !== undefined) {
	          this.cssRule(prop.name, mapVal);
	        }
	      }

	      break;

	    case 2:
	      this.cssRule(args[0], args[1]);
	      break;

	    default:
	      break; // do nothing if args are invalid
	  }

	  return this; // chaining
	};
	styfn.style = styfn.css;

	// add a single css rule to the current context
	styfn.cssRule = function (name, value) {
	  // name-value pair
	  var property = this.parse(name, value);

	  // add property to current context if valid
	  if (property) {
	    var i = this.length - 1;
	    this[i].properties.push(property);
	    this[i].properties[property.name] = property; // allow access by name as well

	    if (property.name.match(/pie-(\d+)-background-size/) && property.value) {
	      this._private.hasPie = true;
	    }

	    if (property.mapped) {
	      this[i].mappedProperties.push(property);
	    }

	    // add to core style if necessary
	    var currentSelectorIsCore = !this[i].selector;
	    if (currentSelectorIsCore) {
	      this._private.coreStyle[property.name] = property;
	    }
	  }

	  return this; // chaining
	};

	styfn.append = function (style) {
	  if (is.stylesheet(style)) {
	    style.appendToStyle(this);
	  } else if (is.array(style)) {
	    this.appendFromJson(style);
	  } else if (is.string(style)) {
	    this.appendFromString(style);
	  } // you probably wouldn't want to append a Style, since you'd duplicate the default parts

	  return this;
	};

	// static function
	Style.fromJson = function (cy, json) {
	  var style = new Style(cy);

	  style.fromJson(json);

	  return style;
	};

	Style.fromString = function (cy, string) {
	  return new Style(cy).fromString(string);
	};

	[__webpack_require__(85), __webpack_require__(86), __webpack_require__(87), __webpack_require__(88), __webpack_require__(89), __webpack_require__(90), __webpack_require__(91), __webpack_require__(92)].forEach(function (props) {
	  util.extend(styfn, props);
	});

	Style.types = styfn.types;
	Style.properties = styfn.properties;

	module.exports = Style;

	/***/ }),
	/* 19 */
	/***/ (function(module, exports, __webpack_require__) {


	var util = __webpack_require__(1);

	var fullFpsTime = 1000 / 60; // assume 60 frames per second

	module.exports = {
	  setupDequeueing: function setupDequeueing(opts) {
	    return function setupDequeueingImpl() {
	      var self = this;
	      var r = this.renderer;

	      if (self.dequeueingSetup) {
	        return;
	      } else {
	        self.dequeueingSetup = true;
	      }

	      var queueRedraw = util.debounce(function () {
	        r.redrawHint('eles', true);
	        r.redrawHint('drag', true);

	        r.redraw();
	      }, opts.deqRedrawThreshold);

	      var dequeue = function dequeue(willDraw, frameStartTime) {
	        var startTime = util.performanceNow();
	        var avgRenderTime = r.averageRedrawTime;
	        var renderTime = r.lastRedrawTime;
	        var deqd = [];
	        var extent = r.cy.extent();
	        var pixelRatio = r.getPixelRatio();

	        while (true) {
	          var now = util.performanceNow();
	          var duration = now - startTime;
	          var frameDuration = now - frameStartTime;

	          if (renderTime < fullFpsTime) {
	            // if we're rendering faster than the ideal fps, then do dequeueing
	            // during all of the remaining frame time

	            var timeAvailable = fullFpsTime - (willDraw ? avgRenderTime : 0);

	            if (frameDuration >= opts.deqFastCost * timeAvailable) {
	              break;
	            }
	          } else {
	            if (willDraw) {
	              if (duration >= opts.deqCost * renderTime || duration >= opts.deqAvgCost * avgRenderTime) {
	                break;
	              }
	            } else if (frameDuration >= opts.deqNoDrawCost * fullFpsTime) {
	              break;
	            }
	          }

	          var thisDeqd = opts.deq(self, pixelRatio, extent);

	          if (thisDeqd.length > 0) {
	            for (var i = 0; i < thisDeqd.length; i++) {
	              deqd.push(thisDeqd[i]);
	            }
	          } else {
	            break;
	          }
	        }

	        // callbacks on dequeue
	        if (deqd.length > 0) {
	          opts.onDeqd(self, deqd);

	          if (!willDraw && opts.shouldRedraw(self, deqd, pixelRatio, extent)) {
	            queueRedraw();
	          }
	        }
	      };

	      var priority = opts.priority || util.noop;

	      r.beforeRender(dequeue, priority(self));
	    };
	  }
	};

	/***/ }),
	/* 20 */
	/***/ (function(module, exports, __webpack_require__) {


	var is = __webpack_require__(0);
	var Core = __webpack_require__(12);
	var extension = __webpack_require__(94);
	var Stylesheet = __webpack_require__(136);

	var cytoscape = function cytoscape(options) {
	  // jshint ignore:line
	  // if no options specified, use default
	  if (options === undefined) {
	    options = {};
	  }

	  // create instance
	  if (is.plainObject(options)) {
	    return new Core(options);
	  }

	  // allow for registration of extensions
	  else if (is.string(options)) {
	      return extension.apply(extension, arguments);
	    }
	};

	// e.g. cytoscape.use( require('cytoscape-foo'), bar )
	cytoscape.use = function (ext) {
	  var args = Array.prototype.slice.call(arguments, 1); // args to pass to ext

	  args.unshift(cytoscape); // cytoscape is first arg to ext

	  ext.apply(null, args);

	  return this;
	};

	// replaced by build system
	cytoscape.version = __webpack_require__(137);

	// expose public apis (mostly for extensions)
	cytoscape.stylesheet = cytoscape.Stylesheet = Stylesheet;

	module.exports = cytoscape;

	/***/ }),
	/* 21 */
	/***/ (function(module, exports, __webpack_require__) {


	var is = __webpack_require__(0);

	module.exports = {
	  // get [r, g, b] from #abc or #aabbcc
	  hex2tuple: function hex2tuple(hex) {
	    if (!(hex.length === 4 || hex.length === 7) || hex[0] !== '#') {
	      return;
	    }

	    var shortHex = hex.length === 4;
	    var r = void 0,
	        g = void 0,
	        b = void 0;
	    var base = 16;

	    if (shortHex) {
	      r = parseInt(hex[1] + hex[1], base);
	      g = parseInt(hex[2] + hex[2], base);
	      b = parseInt(hex[3] + hex[3], base);
	    } else {
	      r = parseInt(hex[1] + hex[2], base);
	      g = parseInt(hex[3] + hex[4], base);
	      b = parseInt(hex[5] + hex[6], base);
	    }

	    return [r, g, b];
	  },

	  // get [r, g, b, a] from hsl(0, 0, 0) or hsla(0, 0, 0, 0)
	  hsl2tuple: function hsl2tuple(hsl) {
	    var ret = void 0;
	    var h = void 0,
	        s = void 0,
	        l = void 0,
	        a = void 0,
	        r = void 0,
	        g = void 0,
	        b = void 0;
	    function hue2rgb(p, q, t) {
	      if (t < 0) t += 1;
	      if (t > 1) t -= 1;
	      if (t < 1 / 6) return p + (q - p) * 6 * t;
	      if (t < 1 / 2) return q;
	      if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;
	      return p;
	    }

	    var m = new RegExp('^' + this.regex.hsla + '$').exec(hsl);
	    if (m) {

	      // get hue
	      h = parseInt(m[1]);
	      if (h < 0) {
	        h = (360 - -1 * h % 360) % 360;
	      } else if (h > 360) {
	        h = h % 360;
	      }
	      h /= 360; // normalise on [0, 1]

	      s = parseFloat(m[2]);
	      if (s < 0 || s > 100) {
	        return;
	      } // saturation is [0, 100]
	      s = s / 100; // normalise on [0, 1]

	      l = parseFloat(m[3]);
	      if (l < 0 || l > 100) {
	        return;
	      } // lightness is [0, 100]
	      l = l / 100; // normalise on [0, 1]

	      a = m[4];
	      if (a !== undefined) {
	        a = parseFloat(a);

	        if (a < 0 || a > 1) {
	          return;
	        } // alpha is [0, 1]
	      }

	      // now, convert to rgb
	      // code from http://mjijackson.com/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript
	      if (s === 0) {
	        r = g = b = Math.round(l * 255); // achromatic
	      } else {
	        var q = l < 0.5 ? l * (1 + s) : l + s - l * s;
	        var p = 2 * l - q;
	        r = Math.round(255 * hue2rgb(p, q, h + 1 / 3));
	        g = Math.round(255 * hue2rgb(p, q, h));
	        b = Math.round(255 * hue2rgb(p, q, h - 1 / 3));
	      }

	      ret = [r, g, b, a];
	    }

	    return ret;
	  },

	  // get [r, g, b, a] from rgb(0, 0, 0) or rgba(0, 0, 0, 0)
	  rgb2tuple: function rgb2tuple(rgb) {
	    var ret = void 0;

	    var m = new RegExp('^' + this.regex.rgba + '$').exec(rgb);
	    if (m) {
	      ret = [];

	      var isPct = [];
	      for (var i = 1; i <= 3; i++) {
	        var channel = m[i];

	        if (channel[channel.length - 1] === '%') {
	          isPct[i] = true;
	        }
	        channel = parseFloat(channel);

	        if (isPct[i]) {
	          channel = channel / 100 * 255; // normalise to [0, 255]
	        }

	        if (channel < 0 || channel > 255) {
	          return;
	        } // invalid channel value

	        ret.push(Math.floor(channel));
	      }

	      var atLeastOneIsPct = isPct[1] || isPct[2] || isPct[3];
	      var allArePct = isPct[1] && isPct[2] && isPct[3];
	      if (atLeastOneIsPct && !allArePct) {
	        return;
	      } // must all be percent values if one is

	      var alpha = m[4];
	      if (alpha !== undefined) {
	        alpha = parseFloat(alpha);

	        if (alpha < 0 || alpha > 1) {
	          return;
	        } // invalid alpha value

	        ret.push(alpha);
	      }
	    }

	    return ret;
	  },

	  colorname2tuple: function colorname2tuple(color) {
	    return this.colors[color.toLowerCase()];
	  },

	  color2tuple: function color2tuple(color) {
	    return (is.array(color) ? color : null) || this.colorname2tuple(color) || this.hex2tuple(color) || this.rgb2tuple(color) || this.hsl2tuple(color);
	  },

	  colors: {
	    // special colour names
	    transparent: [0, 0, 0, 0], // NB alpha === 0

	    // regular colours
	    aliceblue: [240, 248, 255],
	    antiquewhite: [250, 235, 215],
	    aqua: [0, 255, 255],
	    aquamarine: [127, 255, 212],
	    azure: [240, 255, 255],
	    beige: [245, 245, 220],
	    bisque: [255, 228, 196],
	    black: [0, 0, 0],
	    blanchedalmond: [255, 235, 205],
	    blue: [0, 0, 255],
	    blueviolet: [138, 43, 226],
	    brown: [165, 42, 42],
	    burlywood: [222, 184, 135],
	    cadetblue: [95, 158, 160],
	    chartreuse: [127, 255, 0],
	    chocolate: [210, 105, 30],
	    coral: [255, 127, 80],
	    cornflowerblue: [100, 149, 237],
	    cornsilk: [255, 248, 220],
	    crimson: [220, 20, 60],
	    cyan: [0, 255, 255],
	    darkblue: [0, 0, 139],
	    darkcyan: [0, 139, 139],
	    darkgoldenrod: [184, 134, 11],
	    darkgray: [169, 169, 169],
	    darkgreen: [0, 100, 0],
	    darkgrey: [169, 169, 169],
	    darkkhaki: [189, 183, 107],
	    darkmagenta: [139, 0, 139],
	    darkolivegreen: [85, 107, 47],
	    darkorange: [255, 140, 0],
	    darkorchid: [153, 50, 204],
	    darkred: [139, 0, 0],
	    darksalmon: [233, 150, 122],
	    darkseagreen: [143, 188, 143],
	    darkslateblue: [72, 61, 139],
	    darkslategray: [47, 79, 79],
	    darkslategrey: [47, 79, 79],
	    darkturquoise: [0, 206, 209],
	    darkviolet: [148, 0, 211],
	    deeppink: [255, 20, 147],
	    deepskyblue: [0, 191, 255],
	    dimgray: [105, 105, 105],
	    dimgrey: [105, 105, 105],
	    dodgerblue: [30, 144, 255],
	    firebrick: [178, 34, 34],
	    floralwhite: [255, 250, 240],
	    forestgreen: [34, 139, 34],
	    fuchsia: [255, 0, 255],
	    gainsboro: [220, 220, 220],
	    ghostwhite: [248, 248, 255],
	    gold: [255, 215, 0],
	    goldenrod: [218, 165, 32],
	    gray: [128, 128, 128],
	    grey: [128, 128, 128],
	    green: [0, 128, 0],
	    greenyellow: [173, 255, 47],
	    honeydew: [240, 255, 240],
	    hotpink: [255, 105, 180],
	    indianred: [205, 92, 92],
	    indigo: [75, 0, 130],
	    ivory: [255, 255, 240],
	    khaki: [240, 230, 140],
	    lavender: [230, 230, 250],
	    lavenderblush: [255, 240, 245],
	    lawngreen: [124, 252, 0],
	    lemonchiffon: [255, 250, 205],
	    lightblue: [173, 216, 230],
	    lightcoral: [240, 128, 128],
	    lightcyan: [224, 255, 255],
	    lightgoldenrodyellow: [250, 250, 210],
	    lightgray: [211, 211, 211],
	    lightgreen: [144, 238, 144],
	    lightgrey: [211, 211, 211],
	    lightpink: [255, 182, 193],
	    lightsalmon: [255, 160, 122],
	    lightseagreen: [32, 178, 170],
	    lightskyblue: [135, 206, 250],
	    lightslategray: [119, 136, 153],
	    lightslategrey: [119, 136, 153],
	    lightsteelblue: [176, 196, 222],
	    lightyellow: [255, 255, 224],
	    lime: [0, 255, 0],
	    limegreen: [50, 205, 50],
	    linen: [250, 240, 230],
	    magenta: [255, 0, 255],
	    maroon: [128, 0, 0],
	    mediumaquamarine: [102, 205, 170],
	    mediumblue: [0, 0, 205],
	    mediumorchid: [186, 85, 211],
	    mediumpurple: [147, 112, 219],
	    mediumseagreen: [60, 179, 113],
	    mediumslateblue: [123, 104, 238],
	    mediumspringgreen: [0, 250, 154],
	    mediumturquoise: [72, 209, 204],
	    mediumvioletred: [199, 21, 133],
	    midnightblue: [25, 25, 112],
	    mintcream: [245, 255, 250],
	    mistyrose: [255, 228, 225],
	    moccasin: [255, 228, 181],
	    navajowhite: [255, 222, 173],
	    navy: [0, 0, 128],
	    oldlace: [253, 245, 230],
	    olive: [128, 128, 0],
	    olivedrab: [107, 142, 35],
	    orange: [255, 165, 0],
	    orangered: [255, 69, 0],
	    orchid: [218, 112, 214],
	    palegoldenrod: [238, 232, 170],
	    palegreen: [152, 251, 152],
	    paleturquoise: [175, 238, 238],
	    palevioletred: [219, 112, 147],
	    papayawhip: [255, 239, 213],
	    peachpuff: [255, 218, 185],
	    peru: [205, 133, 63],
	    pink: [255, 192, 203],
	    plum: [221, 160, 221],
	    powderblue: [176, 224, 230],
	    purple: [128, 0, 128],
	    red: [255, 0, 0],
	    rosybrown: [188, 143, 143],
	    royalblue: [65, 105, 225],
	    saddlebrown: [139, 69, 19],
	    salmon: [250, 128, 114],
	    sandybrown: [244, 164, 96],
	    seagreen: [46, 139, 87],
	    seashell: [255, 245, 238],
	    sienna: [160, 82, 45],
	    silver: [192, 192, 192],
	    skyblue: [135, 206, 235],
	    slateblue: [106, 90, 205],
	    slategray: [112, 128, 144],
	    slategrey: [112, 128, 144],
	    snow: [255, 250, 250],
	    springgreen: [0, 255, 127],
	    steelblue: [70, 130, 180],
	    tan: [210, 180, 140],
	    teal: [0, 128, 128],
	    thistle: [216, 191, 216],
	    tomato: [255, 99, 71],
	    turquoise: [64, 224, 208],
	    violet: [238, 130, 238],
	    wheat: [245, 222, 179],
	    white: [255, 255, 255],
	    whitesmoke: [245, 245, 245],
	    yellow: [255, 255, 0],
	    yellowgreen: [154, 205, 50]
	  }
	};

	/***/ }),
	/* 22 */
	/***/ (function(module, exports, __webpack_require__) {


	var is = __webpack_require__(0);

	module.exports = {
	  // has anything been set in the map
	  mapEmpty: function mapEmpty(map) {
	    var empty = true;

	    if (map != null) {
	      return Object.keys(map).length === 0;
	    }

	    return empty;
	  },

	  // pushes to the array at the end of a map (map may not be built)
	  pushMap: function pushMap(options) {
	    var array = this.getMap(options);

	    if (array == null) {
	      // if empty, put initial array
	      this.setMap(this.extend({}, options, {
	        value: [options.value]
	      }));
	    } else {
	      array.push(options.value);
	    }
	  },

	  // sets the value in a map (map may not be built)
	  setMap: function setMap(options) {
	    var obj = options.map;
	    var keys = options.keys;
	    var l = keys.length;

	    for (var i = 0; i < l; i++) {
	      var _key = keys[i];

	      if (is.plainObject(_key)) {
	        this.error('Tried to set map with object key');
	      }

	      if (i < keys.length - 1) {

	        // extend the map if necessary
	        if (obj[_key] == null) {
	          obj[_key] = {};
	        }

	        obj = obj[_key];
	      } else {
	        // set the value
	        obj[_key] = options.value;
	      }
	    }
	  },

	  // gets the value in a map even if it's not built in places
	  getMap: function getMap(options) {
	    var obj = options.map;
	    var keys = options.keys;
	    var l = keys.length;

	    for (var i = 0; i < l; i++) {
	      var key = keys[i];

	      if (is.plainObject(key)) {
	        this.error('Tried to get map with object key');
	      }

	      obj = obj[key];

	      if (obj == null) {
	        return obj;
	      }
	    }

	    return obj;
	  },

	  // deletes the entry in the map
	  deleteMap: function deleteMap(options) {
	    var obj = options.map;
	    var keys = options.keys;
	    var l = keys.length;
	    var keepChildren = options.keepChildren;

	    for (var i = 0; i < l; i++) {
	      var key = keys[i];

	      if (is.plainObject(key)) {
	        this.error('Tried to delete map with object key');
	      }

	      var lastKey = i === options.keys.length - 1;
	      if (lastKey) {

	        if (keepChildren) {
	          // then only delete child fields not in keepChildren
	          var children = Object.keys(obj);

	          for (var j = 0; j < children.length; j++) {
	            var child = children[j];

	            if (!keepChildren[child]) {
	              obj[child] = undefined;
	            }
	          }
	        } else {
	          obj[key] = undefined;
	        }
	      } else {
	        obj = obj[key];
	      }
	    }
	  }
	};

	/***/ }),
	/* 23 */
	/***/ (function(module, exports, __webpack_require__) {


	var number = '(?:[-+]?(?:(?:\\d+|\\d*\\.\\d+)(?:[Ee][+-]?\\d+)?))';

	var rgba = 'rgb[a]?\\((' + number + '[%]?)\\s*,\\s*(' + number + '[%]?)\\s*,\\s*(' + number + '[%]?)(?:\\s*,\\s*(' + number + '))?\\)';
	var rgbaNoBackRefs = 'rgb[a]?\\((?:' + number + '[%]?)\\s*,\\s*(?:' + number + '[%]?)\\s*,\\s*(?:' + number + '[%]?)(?:\\s*,\\s*(?:' + number + '))?\\)';

	var hsla = 'hsl[a]?\\((' + number + ')\\s*,\\s*(' + number + '[%])\\s*,\\s*(' + number + '[%])(?:\\s*,\\s*(' + number + '))?\\)';
	var hslaNoBackRefs = 'hsl[a]?\\((?:' + number + ')\\s*,\\s*(?:' + number + '[%])\\s*,\\s*(?:' + number + '[%])(?:\\s*,\\s*(?:' + number + '))?\\)';

	var hex3 = '\\#[0-9a-fA-F]{3}';
	var hex6 = '\\#[0-9a-fA-F]{6}';

	module.exports = {
	  regex: {
	    number: number,
	    rgba: rgba,
	    rgbaNoBackRefs: rgbaNoBackRefs,
	    hsla: hsla,
	    hslaNoBackRefs: hslaNoBackRefs,
	    hex3: hex3,
	    hex6: hex6
	  }
	};

	/***/ }),
	/* 24 */
	/***/ (function(module, exports, __webpack_require__) {


	var memoize = __webpack_require__(13);
	var is = __webpack_require__(0);

	module.exports = {

	  camel2dash: memoize(function (str) {
	    return str.replace(/([A-Z])/g, function (v) {
	      return '-' + v.toLowerCase();
	    });
	  }),

	  dash2camel: memoize(function (str) {
	    return str.replace(/(-\w)/g, function (v) {
	      return v[1].toUpperCase();
	    });
	  }),

	  prependCamel: memoize(function (prefix, str) {
	    return prefix + str[0].toUpperCase() + str.substring(1);
	  }, function (prefix, str) {
	    return prefix + '$' + str;
	  }),

	  capitalize: function capitalize(str) {
	    if (is.emptyString(str)) {
	      return str;
	    }

	    return str.charAt(0).toUpperCase() + str.substring(1);
	  }

	};

	/***/ }),
	/* 25 */
	/***/ (function(module, exports, __webpack_require__) {


	var window = __webpack_require__(3);
	var performance = window ? window.performance : null;

	var util = {};

	var pnow = performance && performance.now ? function () {
	  return performance.now();
	} : function () {
	  return Date.now();
	};

	var raf = function () {
	  if (window) {
	    if (window.requestAnimationFrame) {
	      return function (fn) {
	        window.requestAnimationFrame(fn);
	      };
	    } else if (window.mozRequestAnimationFrame) {
	      return function (fn) {
	        window.mozRequestAnimationFrame(fn);
	      };
	    } else if (window.webkitRequestAnimationFrame) {
	      return function (fn) {
	        window.webkitRequestAnimationFrame(fn);
	      };
	    } else if (window.msRequestAnimationFrame) {
	      return function (fn) {
	        window.msRequestAnimationFrame(fn);
	      };
	    }
	  }

	  return function (fn) {
	    if (fn) {
	      setTimeout(function () {
	        fn(pnow());
	      }, 1000 / 60);
	    }
	  };
	}();

	util.requestAnimationFrame = function (fn) {
	  raf(fn);
	};

	util.performanceNow = pnow;

	util.debounce = __webpack_require__(26);

	util.now = function () {
	  return Date.now();
	};

	module.exports = util;

	/***/ }),
	/* 26 */
	/***/ (function(module, exports) {

	module.exports = __WEBPACK_EXTERNAL_MODULE_26__;

	/***/ }),
	/* 27 */
	/***/ (function(module, exports, __webpack_require__) {


	function ascending(a, b) {
	  if (a < b) {
	    return -1;
	  } else if (a > b) {
	    return 1;
	  } else {
	    return 0;
	  }
	}

	function descending(a, b) {
	  return -1 * ascending(a, b);
	}

	module.exports = {
	  sort: {
	    ascending: ascending,
	    descending: descending
	  }
	};

	/***/ }),
	/* 28 */
	/***/ (function(module, exports, __webpack_require__) {


	function ObjectMap() {
	  this._obj = {};
	}

	var p = ObjectMap.prototype;

	p.set = function (key, val) {
	  this._obj[key] = val;
	};

	p.delete = function (key) {
	  this._obj[key] = null;
	};

	p.has = function (key) {
	  return this._obj[key] != null;
	};

	p.get = function (key) {
	  return this._obj[key];
	};

	// TODO use the stdlib Map in future...
	// module.exports = typeof Map !== 'undefined' ? Map : ObjectMap;
	module.exports = ObjectMap;

	/***/ }),
	/* 29 */
	/***/ (function(module, exports, __webpack_require__) {


	var util = __webpack_require__(1);

	var elesfn = {};

	[__webpack_require__(30), __webpack_require__(31), __webpack_require__(33), __webpack_require__(34), __webpack_require__(35), __webpack_require__(36), __webpack_require__(37), __webpack_require__(38), __webpack_require__(39), __webpack_require__(40), __webpack_require__(41)].forEach(function (props) {
	  util.extend(elesfn, props);
	});

	module.exports = elesfn;

	/***/ }),
	/* 30 */
	/***/ (function(module, exports, __webpack_require__) {


	var is = __webpack_require__(0);

	var defineSearch = function defineSearch(params) {
	  params = {
	    bfs: params.bfs || !params.dfs,
	    dfs: params.dfs || !params.bfs
	  };

	  // from pseudocode on wikipedia
	  return function searchFn(roots, fn, directed) {
	    var options;
	    if (is.plainObject(roots) && !is.elementOrCollection(roots)) {
	      options = roots;
	      roots = options.roots || options.root;
	      fn = options.visit;
	      directed = options.directed;
	    }

	    directed = arguments.length === 2 && !is.fn(fn) ? fn : directed;
	    fn = is.fn(fn) ? fn : function () {};

	    var cy = this._private.cy;
	    var v = roots = is.string(roots) ? this.filter(roots) : roots;
	    var Q = [];
	    var connectedNodes = [];
	    var connectedBy = {};
	    var id2depth = {};
	    var V = {};
	    var j = 0;
	    var found;
	    var nodes = this.nodes();
	    var edges = this.edges();

	    // enqueue v
	    for (var i = 0; i < v.length; i++) {
	      if (v[i].isNode()) {
	        Q.unshift(v[i]);

	        if (params.bfs) {
	          V[v[i].id()] = true;

	          connectedNodes.push(v[i]);
	        }

	        id2depth[v[i].id()] = 0;
	      }
	    }

	    while (Q.length !== 0) {
	      var v = params.bfs ? Q.shift() : Q.pop();

	      if (params.dfs) {
	        if (V[v.id()]) {
	          continue;
	        }

	        V[v.id()] = true;

	        connectedNodes.push(v);
	      }

	      var depth = id2depth[v.id()];
	      var prevEdge = connectedBy[v.id()];
	      var prevNode = prevEdge == null ? undefined : prevEdge.connectedNodes().not(v)[0];
	      var ret;

	      ret = fn(v, prevEdge, prevNode, j++, depth);

	      if (ret === true) {
	        found = v;
	        break;
	      }

	      if (ret === false) {
	        break;
	      }

	      var vwEdges = v.connectedEdges(directed ? function (ele) {
	        return ele.data('source') === v.id();
	      } : undefined).intersect(edges);
	      for (var i = 0; i < vwEdges.length; i++) {
	        var e = vwEdges[i];
	        var w = e.connectedNodes(function (n) {
	          return n.id() !== v.id();
	        }).intersect(nodes);

	        if (w.length !== 0 && !V[w.id()]) {
	          w = w[0];

	          Q.push(w);

	          if (params.bfs) {
	            V[w.id()] = true;

	            connectedNodes.push(w);
	          }

	          connectedBy[w.id()] = e;

	          id2depth[w.id()] = id2depth[v.id()] + 1;
	        }
	      }
	    }

	    var connectedEles = [];

	    for (var i = 0; i < connectedNodes.length; i++) {
	      var node = connectedNodes[i];
	      var edge = connectedBy[node.id()];

	      if (edge) {
	        connectedEles.push(edge);
	      }

	      connectedEles.push(node);
	    }

	    return {
	      path: cy.collection(connectedEles, { unique: true }),
	      found: cy.collection(found)
	    };
	  };
	};

	// search, spanning trees, etc
	var elesfn = {
	  breadthFirstSearch: defineSearch({ bfs: true }),
	  depthFirstSearch: defineSearch({ dfs: true })
	};

	// nice, short mathemathical alias
	elesfn.bfs = elesfn.breadthFirstSearch;
	elesfn.dfs = elesfn.depthFirstSearch;

	module.exports = elesfn;

	/***/ }),
	/* 31 */
	/***/ (function(module, exports, __webpack_require__) {


	var is = __webpack_require__(0);
	var Heap = __webpack_require__(9);

	var elesfn = {

	  dijkstra: function dijkstra(root, weightFn, directed) {
	    var options;
	    if (is.plainObject(root) && !is.elementOrCollection(root)) {
	      options = root;
	      root = options.root;
	      weightFn = options.weight;
	      directed = options.directed;
	    }

	    var cy = this._private.cy;
	    weightFn = is.fn(weightFn) ? weightFn : function () {
	      return 1;
	    }; // if not specified, assume each edge has equal weight (1)

	    var source = is.string(root) ? this.filter(root)[0] : root[0];
	    var dist = {};
	    var prev = {};
	    var knownDist = {};

	    var edges = this.edges().filter(function (ele) {
	      return !ele.isLoop();
	    });
	    var nodes = this.nodes();

	    var getDist = function getDist(node) {
	      return dist[node.id()];
	    };

	    var setDist = function setDist(node, d) {
	      dist[node.id()] = d;

	      Q.updateItem(node);
	    };

	    var Q = new Heap(function (a, b) {
	      return getDist(a) - getDist(b);
	    });

	    for (var i = 0; i < nodes.length; i++) {
	      var node = nodes[i];

	      dist[node.id()] = node.same(source) ? 0 : Infinity;
	      Q.push(node);
	    }

	    var distBetween = function distBetween(u, v) {
	      var uvs = (directed ? u.edgesTo(v) : u.edgesWith(v)).intersect(edges);
	      var smallestDistance = Infinity;
	      var smallestEdge;

	      for (var i = 0; i < uvs.length; i++) {
	        var edge = uvs[i];
	        var weight = weightFn(edge);

	        if (weight < smallestDistance || !smallestEdge) {
	          smallestDistance = weight;
	          smallestEdge = edge;
	        }
	      }

	      return {
	        edge: smallestEdge,
	        dist: smallestDistance
	      };
	    };

	    while (Q.size() > 0) {
	      var u = Q.pop();
	      var smalletsDist = getDist(u);
	      var uid = u.id();

	      knownDist[uid] = smalletsDist;

	      if (smalletsDist === Infinity) {
	        continue;
	      }

	      var neighbors = u.neighborhood().intersect(nodes);
	      for (var i = 0; i < neighbors.length; i++) {
	        var v = neighbors[i];
	        var vid = v.id();
	        var vDist = distBetween(u, v);

	        var alt = smalletsDist + vDist.dist;

	        if (alt < getDist(v)) {
	          setDist(v, alt);

	          prev[vid] = {
	            node: u,
	            edge: vDist.edge
	          };
	        }
	      } // for
	    } // while

	    return {
	      distanceTo: function distanceTo(node) {
	        var target = is.string(node) ? nodes.filter(node)[0] : node[0];

	        return knownDist[target.id()];
	      },

	      pathTo: function pathTo(node) {
	        var target = is.string(node) ? nodes.filter(node)[0] : node[0];
	        var S = [];
	        var u = target;

	        if (target.length > 0) {
	          S.unshift(target);

	          while (prev[u.id()]) {
	            var p = prev[u.id()];

	            S.unshift(p.edge);
	            S.unshift(p.node);

	            u = p.node;
	          }
	        }

	        return cy.collection(S);
	      }
	    };
	  }
	};

	module.exports = elesfn;

	/***/ }),
	/* 32 */
	/***/ (function(module, exports) {

	module.exports = __WEBPACK_EXTERNAL_MODULE_32__;

	/***/ }),
	/* 33 */
	/***/ (function(module, exports, __webpack_require__) {


	var is = __webpack_require__(0);

	// search, spanning trees, etc
	var elesfn = {

	  // kruskal's algorithm (finds min spanning tree, assuming undirected graph)
	  // implemented from pseudocode from wikipedia
	  kruskal: function kruskal(weightFn) {
	    var cy = this.cy();

	    weightFn = is.fn(weightFn) ? weightFn : function () {
	      return 1;
	    }; // if not specified, assume each edge has equal weight (1)

	    function findSet(ele) {
	      for (var i = 0; i < forest.length; i++) {
	        var eles = forest[i];

	        if (eles.anySame(ele)) {
	          return {
	            eles: eles,
	            index: i
	          };
	        }
	      }
	    }

	    var A = cy.collection(cy, []);
	    var forest = [];
	    var nodes = this.nodes();

	    for (var i = 0; i < nodes.length; i++) {
	      forest.push(nodes[i].collection());
	    }

	    var edges = this.edges();
	    var S = edges.toArray().sort(function (a, b) {
	      var weightA = weightFn(a);
	      var weightB = weightFn(b);

	      return weightA - weightB;
	    });

	    for (var i = 0; i < S.length; i++) {
	      var edge = S[i];
	      var u = edge.source()[0];
	      var v = edge.target()[0];
	      var setU = findSet(u);
	      var setV = findSet(v);

	      if (setU.index !== setV.index) {
	        A = A.add(edge);

	        // combine forests for u and v
	        forest[setU.index] = setU.eles.add(setV.eles);
	        forest.splice(setV.index, 1);
	      }
	    }

	    return nodes.add(A);
	  }
	};

	module.exports = elesfn;

	/***/ }),
	/* 34 */
	/***/ (function(module, exports, __webpack_require__) {


	var is = __webpack_require__(0);

	var elesfn = {

	  // Implemented from pseudocode from wikipedia
	  aStar: function aStar(options) {
	    var eles = this;

	    options = options || {};

	    // Reconstructs the path from Start to End, acumulating the result in pathAcum
	    var reconstructPath = function reconstructPath(start, end, cameFromMap, pathAcum) {
	      // Base case
	      if (start == end) {
	        pathAcum.unshift(cy.getElementById(end));
	        return pathAcum;
	      }

	      if (end in cameFromMap) {
	        // We know which node is before the last one
	        var previous = cameFromMap[end];
	        var previousEdge = cameFromEdge[end];

	        pathAcum.unshift(cy.getElementById(previousEdge));
	        pathAcum.unshift(cy.getElementById(end));

	        return reconstructPath(start, previous, cameFromMap, pathAcum);
	      }

	      // We should not reach here!
	      return undefined;
	    };

	    // Returns the index of the element in openSet which has minimum fScore
	    var findMin = function findMin(openSet, fScore) {
	      if (openSet.length === 0) {
	        // Should never be the case
	        return undefined;
	      }
	      var minPos = 0;
	      var tempScore = fScore[openSet[0]];
	      for (var i = 1; i < openSet.length; i++) {
	        var s = fScore[openSet[i]];
	        if (s < tempScore) {
	          tempScore = s;
	          minPos = i;
	        }
	      }
	      return minPos;
	    };

	    var cy = this._private.cy;

	    // root - mandatory!
	    if (options != null && options.root != null) {
	      var source = is.string(options.root) ?
	      // use it as a selector, e.g. "#rootID
	      this.filter(options.root)[0] : options.root[0];
	    } else {
	      return undefined;
	    }

	    // goal - mandatory!
	    if (options.goal != null) {
	      var target = is.string(options.goal) ?
	      // use it as a selector, e.g. "#goalID
	      this.filter(options.goal)[0] : options.goal[0];
	    } else {
	      return undefined;
	    }

	    // Heuristic function - optional
	    if (options.heuristic != null && is.fn(options.heuristic)) {
	      var heuristic = options.heuristic;
	    } else {
	      var heuristic = function heuristic() {
	        return 0;
	      }; // use constant if unspecified
	    }

	    // Weight function - optional
	    if (options.weight != null && is.fn(options.weight)) {
	      var weightFn = options.weight;
	    } else {
	      // If not specified, assume each edge has equal weight (1)
	      var weightFn = function weightFn(e) {
	        return 1;
	      };
	    }

	    // directed - optional
	    if (options.directed != null) {
	      var directed = options.directed;
	    } else {
	      var directed = false;
	    }

	    var sid = source.id();
	    var tid = target.id();

	    var closedSet = [];
	    var openSet = [sid];
	    var cameFrom = {};
	    var cameFromEdge = {};
	    var gScore = {};
	    var fScore = {};

	    gScore[sid] = 0;
	    fScore[sid] = heuristic(source);

	    // Counter
	    var steps = 0;

	    // Main loop
	    while (openSet.length > 0) {
	      var minPos = findMin(openSet, fScore);
	      var cMin = cy.getElementById(openSet[minPos]);
	      var cMinId = cMin.id();
	      steps++;

	      // If we've found our goal, then we are done
	      if (cMinId == tid) {
	        var rPath = reconstructPath(sid, tid, cameFrom, []);

	        return {
	          found: true,
	          distance: gScore[cMinId],
	          path: eles.spawn(rPath),
	          steps: steps
	        };
	      }

	      // Add cMin to processed nodes
	      closedSet.push(cMinId);
	      // Remove cMin from boundary nodes
	      openSet.splice(minPos, 1);

	      // Update scores for neighbors of cMin
	      // Take into account if graph is directed or not
	      var vwEdges = cMin._private.edges;

	      for (var i = 0; i < vwEdges.length; i++) {
	        var e = vwEdges[i];

	        // edge must be in set of calling eles
	        if (!this.hasElementWithId(e.id())) {
	          continue;
	        }

	        // cMin must be the source of edge if directed
	        if (directed && e.data('source') !== cMinId) {
	          continue;
	        }

	        var wSrc = e.source();
	        var wTgt = e.target();

	        var w = wSrc.id() !== cMinId ? wSrc : wTgt;
	        var wid = w.id();

	        // node must be in set of calling eles
	        if (!this.hasElementWithId(wid)) {
	          continue;
	        }

	        // if node is in closedSet, ignore it
	        if (closedSet.indexOf(wid) != -1) {
	          continue;
	        }

	        // New tentative score for node w
	        var tempScore = gScore[cMinId] + weightFn(e);

	        // Update gScore for node w if:
	        //   w not present in openSet
	        // OR
	        //   tentative gScore is less than previous value

	        // w not in openSet
	        if (openSet.indexOf(wid) == -1) {
	          gScore[wid] = tempScore;
	          fScore[wid] = tempScore + heuristic(w);
	          openSet.push(wid); // Add node to openSet
	          cameFrom[wid] = cMinId;
	          cameFromEdge[wid] = e.id();
	          continue;
	        }
	        // w already in openSet, but with greater gScore
	        if (tempScore < gScore[wid]) {
	          gScore[wid] = tempScore;
	          fScore[wid] = tempScore + heuristic(w);
	          cameFrom[wid] = cMinId;
	        }
	      } // End of neighbors update
	    } // End of main loop

	    // If we've reached here, then we've not reached our goal
	    return {
	      found: false,
	      distance: undefined,
	      path: undefined,
	      steps: steps
	    };
	  }

	}; // elesfn


	module.exports = elesfn;

	/***/ }),
	/* 35 */
	/***/ (function(module, exports, __webpack_require__) {


	var is = __webpack_require__(0);

	var elesfn = {

	  // Implemented from pseudocode from wikipedia
	  floydWarshall: function floydWarshall(options) {
	    options = options || {};

	    var cy = this.cy();

	    // Weight function - optional
	    if (options.weight != null && is.fn(options.weight)) {
	      var weightFn = options.weight;
	    } else {
	      // If not specified, assume each edge has equal weight (1)
	      var weightFn = function weightFn(e) {
	        return 1;
	      };
	    }

	    // directed - optional
	    if (options.directed != null) {
	      var directed = options.directed;
	    } else {
	      var directed = false;
	    }

	    var edges = this.edges().stdFilter(function (e) {
	      return !e.isLoop();
	    });
	    var nodes = this.nodes();
	    var numNodes = nodes.length;

	    // mapping: node id -> position in nodes array
	    var id2position = {};
	    for (var i = 0; i < numNodes; i++) {
	      id2position[nodes[i].id()] = i;
	    }

	    // Initialize distance matrix
	    var dist = [];
	    for (var i = 0; i < numNodes; i++) {
	      var newRow = new Array(numNodes);
	      for (var j = 0; j < numNodes; j++) {
	        if (i == j) {
	          newRow[j] = 0;
	        } else {
	          newRow[j] = Infinity;
	        }
	      }
	      dist.push(newRow);
	    }

	    // Initialize matrix used for path reconstruction
	    // Initialize distance matrix
	    var next = [];
	    var edgeNext = [];

	    var initMatrix = function initMatrix(next) {
	      for (var i = 0; i < numNodes; i++) {
	        var newRow = new Array(numNodes);
	        for (var j = 0; j < numNodes; j++) {
	          newRow[j] = undefined;
	        }
	        next.push(newRow);
	      }
	    };

	    initMatrix(next);
	    initMatrix(edgeNext);

	    // Process edges
	    for (var i = 0; i < edges.length; i++) {
	      var sourceIndex = id2position[edges[i].source().id()];
	      var targetIndex = id2position[edges[i].target().id()];
	      var weight = weightFn(edges[i]);

	      // Check if already process another edge between same 2 nodes
	      if (dist[sourceIndex][targetIndex] > weight) {
	        dist[sourceIndex][targetIndex] = weight;
	        next[sourceIndex][targetIndex] = targetIndex;
	        edgeNext[sourceIndex][targetIndex] = edges[i];
	      }
	    }

	    // If undirected graph, process 'reversed' edges
	    if (!directed) {
	      for (var i = 0; i < edges.length; i++) {
	        var sourceIndex = id2position[edges[i].target().id()];
	        var targetIndex = id2position[edges[i].source().id()];
	        var weight = weightFn(edges[i]);

	        // Check if already process another edge between same 2 nodes
	        if (dist[sourceIndex][targetIndex] > weight) {
	          dist[sourceIndex][targetIndex] = weight;
	          next[sourceIndex][targetIndex] = targetIndex;
	          edgeNext[sourceIndex][targetIndex] = edges[i];
	        }
	      }
	    }

	    // Main loop
	    for (var k = 0; k < numNodes; k++) {
	      for (var i = 0; i < numNodes; i++) {
	        for (var j = 0; j < numNodes; j++) {
	          if (dist[i][k] + dist[k][j] < dist[i][j]) {
	            dist[i][j] = dist[i][k] + dist[k][j];
	            next[i][j] = next[i][k];
	          }
	        }
	      }
	    }

	    // Build result object
	    var position2id = [];
	    for (var i = 0; i < numNodes; i++) {
	      position2id.push(nodes[i].id());
	    }

	    var res = {
	      distance: function distance(from, to) {
	        if (is.string(from)) {
	          // from is a selector string
	          var fromId = cy.filter(from)[0].id();
	        } else {
	          // from is a node
	          var fromId = from.id();
	        }

	        if (is.string(to)) {
	          // to is a selector string
	          var toId = cy.filter(to)[0].id();
	        } else {
	          // to is a node
	          var toId = to.id();
	        }

	        return dist[id2position[fromId]][id2position[toId]];
	      },

	      path: function path(from, to) {
	        var reconstructPathAux = function reconstructPathAux(from, to, next, position2id, edgeNext) {
	          if (from === to) {
	            return cy.getElementById(position2id[from]);
	          }
	          if (next[from][to] === undefined) {
	            return undefined;
	          }

	          var path = [cy.getElementById(position2id[from])];
	          var prev = from;
	          while (from !== to) {
	            prev = from;
	            from = next[from][to];

	            var edge = edgeNext[prev][from];
	            path.push(edge);

	            path.push(cy.getElementById(position2id[from]));
	          }
	          return path;
	        };

	        if (is.string(from)) {
	          // from is a selector string
	          var fromId = cy.filter(from)[0].id();
	        } else {
	          // from is a node
	          var fromId = from.id();
	        }

	        if (is.string(to)) {
	          // to is a selector string
	          var toId = cy.filter(to)[0].id();
	        } else {
	          // to is a node
	          var toId = to.id();
	        }

	        var pathArr = reconstructPathAux(id2position[fromId], id2position[toId], next, position2id, edgeNext);

	        return cy.collection(pathArr);
	      }
	    };

	    return res;
	  } // floydWarshall

	}; // elesfn

	module.exports = elesfn;

	/***/ }),
	/* 36 */
	/***/ (function(module, exports, __webpack_require__) {


	var is = __webpack_require__(0);
	var util = __webpack_require__(1);

	var elesfn = {

	  // Implemented from pseudocode from wikipedia
	  bellmanFord: function bellmanFord(options) {
	    var eles = this;

	    options = options || {};

	    // Weight function - optional
	    if (options.weight != null && is.fn(options.weight)) {
	      var weightFn = options.weight;
	    } else {
	      // If not specified, assume each edge has equal weight (1)
	      var weightFn = function weightFn(e) {
	        return 1;
	      };
	    }

	    // directed - optional
	    if (options.directed != null) {
	      var directed = options.directed;
	    } else {
	      var directed = false;
	    }

	    // root - mandatory!
	    if (options.root != null) {
	      if (is.string(options.root)) {
	        // use it as a selector, e.g. "#rootID
	        var source = this.filter(options.root)[0];
	      } else {
	        var source = options.root[0];
	      }
	    } else {
	      return undefined;
	    }

	    var cy = this._private.cy;
	    var edges = this.edges().stdFilter(function (e) {
	      return !e.isLoop();
	    });
	    var nodes = this.nodes();
	    var numNodes = nodes.length;

	    // mapping: node id -> position in nodes array
	    var id2position = {};
	    for (var i = 0; i < numNodes; i++) {
	      id2position[nodes[i].id()] = i;
	    }

	    // Initializations
	    var cost = [];
	    var predecessor = [];
	    var predEdge = [];

	    for (var i = 0; i < numNodes; i++) {
	      if (nodes[i].id() === source.id()) {
	        cost[i] = 0;
	      } else {
	        cost[i] = Infinity;
	      }
	      predecessor[i] = undefined;
	    }

	    // Edges relaxation
	    var flag = false;
	    for (var i = 1; i < numNodes; i++) {
	      flag = false;
	      for (var e = 0; e < edges.length; e++) {
	        var sourceIndex = id2position[edges[e].source().id()];
	        var targetIndex = id2position[edges[e].target().id()];
	        var weight = weightFn(edges[e]);

	        var temp = cost[sourceIndex] + weight;
	        if (temp < cost[targetIndex]) {
	          cost[targetIndex] = temp;
	          predecessor[targetIndex] = sourceIndex;
	          predEdge[targetIndex] = edges[e];
	          flag = true;
	        }

	        // If undirected graph, we need to take into account the 'reverse' edge
	        if (!directed) {
	          var temp = cost[targetIndex] + weight;
	          if (temp < cost[sourceIndex]) {
	            cost[sourceIndex] = temp;
	            predecessor[sourceIndex] = targetIndex;
	            predEdge[sourceIndex] = edges[e];
	            flag = true;
	          }
	        }
	      }

	      if (!flag) {
	        break;
	      }
	    }

	    if (flag) {
	      // Check for negative weight cycles
	      for (var e = 0; e < edges.length; e++) {
	        var sourceIndex = id2position[edges[e].source().id()];
	        var targetIndex = id2position[edges[e].target().id()];
	        var weight = weightFn(edges[e]);

	        if (cost[sourceIndex] + weight < cost[targetIndex]) {
	          util.error('Graph contains a negative weight cycle for Bellman-Ford');
	          return { pathTo: undefined,
	            distanceTo: undefined,
	            hasNegativeWeightCycle: true };
	        }
	      }
	    }

	    // Build result object
	    var position2id = [];
	    for (var i = 0; i < numNodes; i++) {
	      position2id.push(nodes[i].id());
	    }

	    var res = {
	      distanceTo: function distanceTo(to) {
	        if (is.string(to)) {
	          // to is a selector string
	          var toId = cy.filter(to)[0].id();
	        } else {
	          // to is a node
	          var toId = to.id();
	        }

	        return cost[id2position[toId]];
	      },

	      pathTo: function pathTo(to) {

	        var reconstructPathAux = function reconstructPathAux(predecessor, fromPos, toPos, position2id, acumPath, predEdge) {
	          for (;;) {
	            // Add toId to path
	            acumPath.push(cy.getElementById(position2id[toPos]));
	            acumPath.push(predEdge[toPos]);

	            if (fromPos === toPos) {
	              // reached starting node
	              return acumPath;
	            }

	            // If no path exists, discart acumulated path and return undefined
	            var predPos = predecessor[toPos];
	            if (typeof predPos === 'undefined') {
	              return undefined;
	            }

	            toPos = predPos;
	          }
	        };

	        if (is.string(to)) {
	          // to is a selector string
	          var toId = cy.filter(to)[0].id();
	        } else {
	          // to is a node
	          var toId = to.id();
	        }
	        var path = [];

	        // This returns a reversed path
	        var res = reconstructPathAux(predecessor, id2position[source.id()], id2position[toId], position2id, path, predEdge);

	        // Get it in the correct order and return it
	        if (res != null) {
	          res.reverse();
	        }

	        return eles.spawn(res);
	      },

	      hasNegativeWeightCycle: false
	    };

	    return res;
	  } // bellmanFord

	}; // elesfn

	module.exports = elesfn;

	/***/ }),
	/* 37 */
	/***/ (function(module, exports, __webpack_require__) {


	var util = __webpack_require__(1);

	var elesfn = {

	  // Computes the minimum cut of an undirected graph
	  // Returns the correct answer with high probability
	  kargerStein: function kargerStein(options) {
	    var eles = this;

	    options = options || {};

	    // Function which colapses 2 (meta) nodes into one
	    // Updates the remaining edge lists
	    // Receives as a paramater the edge which causes the collapse
	    var colapse = function colapse(edgeIndex, nodeMap, remainingEdges) {
	      var edgeInfo = remainingEdges[edgeIndex];
	      var sourceIn = edgeInfo[1];
	      var targetIn = edgeInfo[2];
	      var partition1 = nodeMap[sourceIn];
	      var partition2 = nodeMap[targetIn];

	      // Delete all edges between partition1 and partition2
	      var newEdges = remainingEdges.filter(function (edge) {
	        if (nodeMap[edge[1]] === partition1 && nodeMap[edge[2]] === partition2) {
	          return false;
	        }
	        if (nodeMap[edge[1]] === partition2 && nodeMap[edge[2]] === partition1) {
	          return false;
	        }
	        return true;
	      });

	      // All edges pointing to partition2 should now point to partition1
	      for (var i = 0; i < newEdges.length; i++) {
	        var edge = newEdges[i];
	        if (edge[1] === partition2) {
	          // Check source
	          newEdges[i] = edge.slice(0);
	          newEdges[i][1] = partition1;
	        } else if (edge[2] === partition2) {
	          // Check target
	          newEdges[i] = edge.slice(0);
	          newEdges[i][2] = partition1;
	        }
	      }

	      // Move all nodes from partition2 to partition1
	      for (var i = 0; i < nodeMap.length; i++) {
	        if (nodeMap[i] === partition2) {
	          nodeMap[i] = partition1;
	        }
	      }

	      return newEdges;
	    };

	    // Contracts a graph until we reach a certain number of meta nodes
	    var contractUntil = function contractUntil(metaNodeMap, remainingEdges, size, sizeLimit) {
	      // Stop condition
	      if (size <= sizeLimit) {
	        return remainingEdges;
	      }

	      // Choose an edge randomly
	      var edgeIndex = Math.floor(Math.random() * remainingEdges.length);

	      // Colapse graph based on edge
	      var newEdges = colapse(edgeIndex, metaNodeMap, remainingEdges);

	      return contractUntil(metaNodeMap, newEdges, size - 1, sizeLimit);
	    };

	    var cy = this._private.cy;
	    var edges = this.edges().stdFilter(function (e) {
	      return !e.isLoop();
	    });
	    var nodes = this.nodes();
	    var numNodes = nodes.length;
	    var numEdges = edges.length;
	    var numIter = Math.ceil(Math.pow(Math.log(numNodes) / Math.LN2, 2));
	    var stopSize = Math.floor(numNodes / Math.sqrt(2));

	    if (numNodes < 2) {
	      util.error('At least 2 nodes are required for Karger-Stein algorithm');
	      return undefined;
	    }

	    // Create numerical identifiers for each node
	    // mapping: node id -> position in nodes array
	    // for reverse mapping, simply use nodes array
	    var id2position = {};
	    for (var i = 0; i < numNodes; i++) {
	      id2position[nodes[i].id()] = i;
	    }

	    // Now store edge destination as indexes
	    // Format for each edge (edge index, source node index, target node index)
	    var edgeIndexes = [];
	    for (var i = 0; i < numEdges; i++) {
	      var e = edges[i];
	      edgeIndexes.push([i, id2position[e.source().id()], id2position[e.target().id()]]);
	    }

	    // We will store the best cut found here
	    var minCutSize = Infinity;
	    var minCut;

	    // Initial meta node partition
	    var originalMetaNode = [];
	    for (var i = 0; i < numNodes; i++) {
	      originalMetaNode.push(i);
	    }

	    // Main loop
	    for (var iter = 0; iter <= numIter; iter++) {
	      // Create new meta node partition
	      var metaNodeMap = originalMetaNode.slice(0);

	      // Contract until stop point (stopSize nodes)
	      var edgesState = contractUntil(metaNodeMap, edgeIndexes, numNodes, stopSize);

	      // Create a copy of the colapsed nodes state
	      var metaNodeMap2 = metaNodeMap.slice(0);

	      // Run 2 iterations starting in the stop state
	      var res1 = contractUntil(metaNodeMap, edgesState, stopSize, 2);
	      var res2 = contractUntil(metaNodeMap2, edgesState, stopSize, 2);

	      // Is any of the 2 results the best cut so far?
	      if (res1.length <= res2.length && res1.length < minCutSize) {
	        minCutSize = res1.length;
	        minCut = [res1, metaNodeMap];
	      } else if (res2.length <= res1.length && res2.length < minCutSize) {
	        minCutSize = res2.length;
	        minCut = [res2, metaNodeMap2];
	      }
	    } // end of main loop


	    // Construct result
	    var resEdges = minCut[0].map(function (e) {
	      return edges[e[0]];
	    });
	    var partition1 = [];
	    var partition2 = [];

	    // traverse metaNodeMap for best cut
	    var witnessNodePartition = minCut[1][0];
	    for (var i = 0; i < minCut[1].length; i++) {
	      var partitionId = minCut[1][i];
	      if (partitionId === witnessNodePartition) {
	        partition1.push(nodes[i]);
	      } else {
	        partition2.push(nodes[i]);
	      }
	    }

	    var ret = {
	      cut: eles.spawn(cy, resEdges),
	      partition1: eles.spawn(partition1),
	      partition2: eles.spawn(partition2)
	    };

	    return ret;
	  }
	}; // elesfn


	module.exports = elesfn;

	/***/ }),
	/* 38 */
	/***/ (function(module, exports, __webpack_require__) {


	var is = __webpack_require__(0);

	var elesfn = {

	  pageRank: function pageRank(options) {
	    options = options || {};

	    var normalizeVector = function normalizeVector(vector) {
	      var length = vector.length;

	      // First, get sum of all elements
	      var total = 0;
	      for (var i = 0; i < length; i++) {
	        total += vector[i];
	      }

	      // Now, divide each by the sum of all elements
	      for (var i = 0; i < length; i++) {
	        vector[i] = vector[i] / total;
	      }
	    };

	    // dampingFactor - optional
	    if (options != null && options.dampingFactor != null) {
	      var dampingFactor = options.dampingFactor;
	    } else {
	      var dampingFactor = 0.8; // Default damping factor
	    }

	    // desired precision - optional
	    if (options != null && options.precision != null) {
	      var epsilon = options.precision;
	    } else {
	      var epsilon = 0.000001; // Default precision
	    }

	    // Max number of iterations - optional
	    if (options != null && options.iterations != null) {
	      var numIter = options.iterations;
	    } else {
	      var numIter = 200; // Default number of iterations
	    }

	    // Weight function - optional
	    if (options != null && options.weight != null && is.fn(options.weight)) {
	      var weightFn = options.weight;
	    } else {
	      // If not specified, assume each edge has equal weight (1)
	      var weightFn = function weightFn(e) {
	        return 1;
	      };
	    }

	    var cy = this._private.cy;
	    var edges = this.edges().stdFilter(function (e) {
	      return !e.isLoop();
	    });
	    var nodes = this.nodes();
	    var numNodes = nodes.length;
	    var numEdges = edges.length;

	    // Create numerical identifiers for each node
	    // mapping: node id -> position in nodes array
	    // for reverse mapping, simply use nodes array
	    var id2position = {};
	    for (var i = 0; i < numNodes; i++) {
	      id2position[nodes[i].id()] = i;
	    }

	    // Construct transposed adjacency matrix
	    // First lets have a zeroed matrix of the right size
	    // We'll also keep track of the sum of each column
	    var matrix = [];
	    var columnSum = [];
	    var additionalProb = (1 - dampingFactor) / numNodes;

	    // Create null matric
	    for (var i = 0; i < numNodes; i++) {
	      var newRow = [];
	      for (var j = 0; j < numNodes; j++) {
	        newRow.push(0.0);
	      }
	      matrix.push(newRow);
	      columnSum.push(0.0);
	    }

	    // Now, process edges
	    for (var i = 0; i < numEdges; i++) {
	      var edge = edges[i];
	      var s = id2position[edge.source().id()];
	      var t = id2position[edge.target().id()];
	      var w = weightFn(edge);

	      // Update matrix
	      matrix[t][s] += w;

	      // Update column sum
	      columnSum[s] += w;
	    }

	    // Add additional probability based on damping factor
	    // Also, take into account columns that have sum = 0
	    var p = 1.0 / numNodes + additionalProb; // Shorthand
	    // Traverse matrix, column by column
	    for (var j = 0; j < numNodes; j++) {
	      if (columnSum[j] === 0) {
	        // No 'links' out from node jth, assume equal probability for each possible node
	        for (var i = 0; i < numNodes; i++) {
	          matrix[i][j] = p;
	        }
	      } else {
	        // Node jth has outgoing link, compute normalized probabilities
	        for (var i = 0; i < numNodes; i++) {
	          matrix[i][j] = matrix[i][j] / columnSum[j] + additionalProb;
	        }
	      }
	    }

	    // Compute dominant eigenvector using power method
	    var eigenvector = [];
	    var nullVector = [];
	    var previous;

	    // Start with a vector of all 1's
	    // Also, initialize a null vector which will be used as shorthand
	    for (var i = 0; i < numNodes; i++) {
	      eigenvector.push(1.0);
	      nullVector.push(0.0);
	    }

	    for (var iter = 0; iter < numIter; iter++) {
	      // New array with all 0's
	      var temp = nullVector.slice(0);

	      // Multiply matrix with previous result
	      for (var i = 0; i < numNodes; i++) {
	        for (var j = 0; j < numNodes; j++) {
	          temp[i] += matrix[i][j] * eigenvector[j];
	        }
	      }

	      normalizeVector(temp);
	      previous = eigenvector;
	      eigenvector = temp;

	      var diff = 0;
	      // Compute difference (squared module) of both vectors
	      for (var i = 0; i < numNodes; i++) {
	        diff += Math.pow(previous[i] - eigenvector[i], 2);
	      }

	      // If difference is less than the desired threshold, stop iterating
	      if (diff < epsilon) {
	        break;
	      }
	    }

	    // Construct result
	    var res = {
	      rank: function rank(node) {
	        if (is.string(node)) {
	          // is a selector string
	          var nodeId = cy.filter(node)[0].id();
	        } else {
	          // is a node object
	          var nodeId = node.id();
	        }
	        return eigenvector[id2position[nodeId]];
	      }
	    };

	    return res;
	  } // pageRank

	}; // elesfn

	module.exports = elesfn;

	/***/ }),
	/* 39 */
	/***/ (function(module, exports, __webpack_require__) {


	var is = __webpack_require__(0);
	var util = __webpack_require__(1);

	var elesfn = {

	  degreeCentralityNormalized: function degreeCentralityNormalized(options) {
	    options = options || {};

	    var cy = this.cy();

	    // directed - optional
	    if (options.directed != null) {
	      var directed = options.directed;
	    } else {
	      var directed = false;
	    }

	    var nodes = this.nodes();
	    var numNodes = nodes.length;

	    if (!directed) {
	      var degrees = {};
	      var maxDegree = 0;

	      for (var i = 0; i < numNodes; i++) {
	        var node = nodes[i];
	        // add current node to the current options object and call degreeCentrality
	        var currDegree = this.degreeCentrality(util.extend({}, options, { root: node }));
	        if (maxDegree < currDegree.degree) maxDegree = currDegree.degree;

	        degrees[node.id()] = currDegree.degree;
	      }

	      return {
	        degree: function degree(node) {
	          if (maxDegree == 0) return 0;

	          if (is.string(node)) {
	            // from is a selector string
	            var node = cy.filter(node)[0].id();
	          } else {
	            // from is a node
	            var node = node.id();
	          }

	          return degrees[node] / maxDegree;
	        }
	      };
	    } else {
	      var indegrees = {};
	      var outdegrees = {};
	      var maxIndegree = 0;
	      var maxOutdegree = 0;

	      for (var i = 0; i < numNodes; i++) {
	        var node = nodes[i];
	        // add current node to the current options object and call degreeCentrality
	        var currDegree = this.degreeCentrality(util.extend({}, options, { root: node }));

	        if (maxIndegree < currDegree.indegree) maxIndegree = currDegree.indegree;

	        if (maxOutdegree < currDegree.outdegree) maxOutdegree = currDegree.outdegree;

	        indegrees[node.id()] = currDegree.indegree;
	        outdegrees[node.id()] = currDegree.outdegree;
	      }

	      return {
	        indegree: function indegree(node) {
	          if (maxIndegree == 0) return 0;

	          if (is.string(node)) {
	            // from is a selector string
	            var node = cy.filter(node)[0].id();
	          } else {
	            // from is a node
	            var node = node.id();
	          }

	          return indegrees[node] / maxIndegree;
	        },
	        outdegree: function outdegree(node) {
	          if (maxOutdegree == 0) return 0;

	          if (is.string(node)) {
	            // from is a selector string
	            var node = cy.filter(node)[0].id();
	          } else {
	            // from is a node
	            var node = node.id();
	          }

	          return outdegrees[node] / maxOutdegree;
	        }

	      };
	    }
	  }, // degreeCentralityNormalized

	  // Implemented from the algorithm in Opsahl's paper
	  // "Node centrality in weighted networks: Generalizing degree and shortest paths"
	  // check the heading 2 "Degree"
	  degreeCentrality: function degreeCentrality(options) {
	    options = options || {};

	    var callingEles = this;

	    // root - mandatory!
	    if (options != null && options.root != null) {
	      var root = is.string(options.root) ? this.filter(options.root)[0] : options.root[0];
	    } else {
	      return undefined;
	    }

	    // weight - optional
	    if (options.weight != null && is.fn(options.weight)) {
	      var weightFn = options.weight;
	    } else {
	      // If not specified, assume each edge has equal weight (1)
	      var weightFn = function weightFn(e) {
	        return 1;
	      };
	    }

	    // directed - optional
	    if (options.directed != null) {
	      var directed = options.directed;
	    } else {
	      var directed = false;
	    }

	    // alpha - optional
	    if (options.alpha != null && is.number(options.alpha)) {
	      var alpha = options.alpha;
	    } else {
	      alpha = 0;
	    }

	    if (!directed) {
	      var connEdges = root.connectedEdges().intersection(callingEles);
	      var k = connEdges.length;
	      var s = 0;

	      // Now, sum edge weights
	      for (var i = 0; i < connEdges.length; i++) {
	        var edge = connEdges[i];
	        s += weightFn(edge);
	      }

	      return {
	        degree: Math.pow(k, 1 - alpha) * Math.pow(s, alpha)
	      };
	    } else {
	      var incoming = root.connectedEdges('edge[target = "' + root.id() + '"]').intersection(callingEles);
	      var outgoing = root.connectedEdges('edge[source = "' + root.id() + '"]').intersection(callingEles);
	      var k_in = incoming.length;
	      var k_out = outgoing.length;
	      var s_in = 0;
	      var s_out = 0;

	      // Now, sum incoming edge weights
	      for (var i = 0; i < incoming.length; i++) {
	        var edge = incoming[i];
	        s_in += weightFn(edge);
	      }

	      // Now, sum outgoing edge weights
	      for (var i = 0; i < outgoing.length; i++) {
	        var edge = outgoing[i];
	        s_out += weightFn(edge);
	      }

	      return {
	        indegree: Math.pow(k_in, 1 - alpha) * Math.pow(s_in, alpha),
	        outdegree: Math.pow(k_out, 1 - alpha) * Math.pow(s_out, alpha)
	      };
	    }
	  } // degreeCentrality

	}; // elesfn

	// nice, short mathemathical alias
	elesfn.dc = elesfn.degreeCentrality;
	elesfn.dcn = elesfn.degreeCentralityNormalised = elesfn.degreeCentralityNormalized;

	module.exports = elesfn;

	/***/ }),
	/* 40 */
	/***/ (function(module, exports, __webpack_require__) {


	var is = __webpack_require__(0);

	var elesfn = {

	  closenessCentralityNormalized: function closenessCentralityNormalized(options) {
	    options = options || {};

	    var cy = this.cy();

	    var harmonic = options.harmonic;
	    if (harmonic === undefined) {
	      harmonic = true;
	    }

	    var closenesses = {};
	    var maxCloseness = 0;
	    var nodes = this.nodes();
	    var fw = this.floydWarshall({ weight: options.weight, directed: options.directed });

	    // Compute closeness for every node and find the maximum closeness
	    for (var i = 0; i < nodes.length; i++) {
	      var currCloseness = 0;
	      for (var j = 0; j < nodes.length; j++) {
	        if (i != j) {
	          var d = fw.distance(nodes[i], nodes[j]);

	          if (harmonic) {
	            currCloseness += 1 / d;
	          } else {
	            currCloseness += d;
	          }
	        }
	      }

	      if (!harmonic) {
	        currCloseness = 1 / currCloseness;
	      }

	      if (maxCloseness < currCloseness) {
	        maxCloseness = currCloseness;
	      }

	      closenesses[nodes[i].id()] = currCloseness;
	    }

	    return {
	      closeness: function closeness(node) {
	        if (maxCloseness == 0) {
	          return 0;
	        }

	        if (is.string(node)) {
	          // from is a selector string
	          var node = cy.filter(node)[0].id();
	        } else {
	          // from is a node
	          var node = node.id();
	        }

	        return closenesses[node] / maxCloseness;
	      }
	    };
	  },

	  // Implemented from pseudocode from wikipedia
	  closenessCentrality: function closenessCentrality(options) {
	    options = options || {};

	    // root - mandatory!
	    if (options.root != null) {
	      if (is.string(options.root)) {
	        // use it as a selector, e.g. "#rootID
	        var root = this.filter(options.root)[0];
	      } else {
	        var root = options.root[0];
	      }
	    } else {
	      return undefined;
	    }

	    // weight - optional
	    if (options.weight != null && is.fn(options.weight)) {
	      var weight = options.weight;
	    } else {
	      var weight = function weight() {
	        return 1;
	      };
	    }

	    // directed - optional
	    if (options.directed != null && is.bool(options.directed)) {
	      var directed = options.directed;
	    } else {
	      var directed = false;
	    }

	    var harmonic = options.harmonic;
	    if (harmonic === undefined) {
	      harmonic = true;
	    }

	    // we need distance from this node to every other node
	    var dijkstra = this.dijkstra({
	      root: root,
	      weight: weight,
	      directed: directed
	    });
	    var totalDistance = 0;

	    var nodes = this.nodes();
	    for (var i = 0; i < nodes.length; i++) {
	      if (nodes[i].id() != root.id()) {
	        var d = dijkstra.distanceTo(nodes[i]);

	        if (harmonic) {
	          totalDistance += 1 / d;
	        } else {
	          totalDistance += d;
	        }
	      }
	    }

	    return harmonic ? totalDistance : 1 / totalDistance;
	  } // closenessCentrality

	}; // elesfn

	// nice, short mathemathical alias
	elesfn.cc = elesfn.closenessCentrality;
	elesfn.ccn = elesfn.closenessCentralityNormalised = elesfn.closenessCentralityNormalized;

	module.exports = elesfn;

	/***/ }),
	/* 41 */
	/***/ (function(module, exports, __webpack_require__) {


	var is = __webpack_require__(0);
	var Heap = __webpack_require__(9);

	var elesfn = {

	  // Implemented from the algorithm in the paper "On Variants of Shortest-Path Betweenness Centrality and their Generic Computation" by Ulrik Brandes
	  betweennessCentrality: function betweennessCentrality(options) {
	    options = options || {};

	    // Weight - optional
	    var weighted, weightFn;
	    if (is.fn(options.weight)) {
	      weightFn = options.weight;
	      weighted = true;
	    } else {
	      weighted = false;
	    }

	    // Directed - default false
	    var directed = options.directed != null ? options.directed : false;

	    var cy = this._private.cy;

	    // starting
	    var V = this.nodes();
	    var A = {};
	    var _C = {};
	    var max = 0;
	    var C = {
	      set: function set(key, val) {
	        _C[key] = val;

	        if (val > max) {
	          max = val;
	        }
	      },

	      get: function get(key) {
	        return _C[key];
	      }
	    };

	    // A contains the neighborhoods of every node
	    for (var i = 0; i < V.length; i++) {
	      var v = V[i];
	      var vid = v.id();

	      if (directed) {
	        A[vid] = v.outgoers().nodes(); // get outgoers of every node
	      } else {
	        A[vid] = v.openNeighborhood().nodes(); // get neighbors of every node
	      }

	      C.set(vid, 0);
	    }

	    for (var s = 0; s < V.length; s++) {
	      var sid = V[s].id();
	      var S = []; // stack
	      var P = {};
	      var g = {};
	      var d = {};
	      var Q = new Heap(function (a, b) {
	        return d[a] - d[b];
	      }); // queue

	      // init dictionaries
	      for (var i = 0; i < V.length; i++) {
	        var vid = V[i].id();

	        P[vid] = [];
	        g[vid] = 0;
	        d[vid] = Infinity;
	      }

	      g[sid] = 1; // sigma
	      d[sid] = 0; // distance to s

	      Q.push(sid);

	      while (!Q.empty()) {
	        var v = Q.pop();

	        S.push(v);

	        if (weighted) {
	          for (var j = 0; j < A[v].length; j++) {
	            var w = A[v][j];
	            var vEle = cy.getElementById(v);

	            var edge;
	            if (vEle.edgesTo(w).length > 0) {
	              edge = vEle.edgesTo(w)[0];
	            } else {
	              edge = w.edgesTo(vEle)[0];
	            }

	            var edgeWeight = weightFn(edge);

	            w = w.id();

	            if (d[w] > d[v] + edgeWeight) {
	              d[w] = d[v] + edgeWeight;

	              if (Q.nodes.indexOf(w) < 0) {
	                //if w is not in Q
	                Q.push(w);
	              } else {
	                // update position if w is in Q
	                Q.updateItem(w);
	              }

	              g[w] = 0;
	              P[w] = [];
	            }

	            if (d[w] == d[v] + edgeWeight) {
	              g[w] = g[w] + g[v];
	              P[w].push(v);
	            }
	          }
	        } else {
	          for (var j = 0; j < A[v].length; j++) {
	            var w = A[v][j].id();

	            if (d[w] == Infinity) {
	              Q.push(w);

	              d[w] = d[v] + 1;
	            }

	            if (d[w] == d[v] + 1) {
	              g[w] = g[w] + g[v];
	              P[w].push(v);
	            }
	          }
	        }
	      }

	      var e = {};
	      for (var i = 0; i < V.length; i++) {
	        e[V[i].id()] = 0;
	      }

	      while (S.length > 0) {
	        var w = S.pop();

	        for (var j = 0; j < P[w].length; j++) {
	          var v = P[w][j];

	          e[v] = e[v] + g[v] / g[w] * (1 + e[w]);

	          if (w != V[s].id()) {
	            C.set(w, C.get(w) + e[w]);
	          }
	        }
	      }
	    }

	    var ret = {
	      betweenness: function betweenness(node) {
	        if (is.string(node)) {
	          var node = cy.filter(node).id();
	        } else {
	          var node = node.id();
	        }

	        return C.get(node);
	      },

	      betweennessNormalized: function betweennessNormalized(node) {
	        if (max == 0) return 0;

	        if (is.string(node)) {
	          var node = cy.filter(node).id();
	        } else {
	          var node = node.id();
	        }

	        return C.get(node) / max;
	      }
	    };

	    // alias
	    ret.betweennessNormalised = ret.betweennessNormalized;

	    return ret;
	  } // betweennessCentrality

	}; // elesfn

	// nice, short mathemathical alias
	elesfn.bc = elesfn.betweennessCentrality;

	module.exports = elesfn;

	/***/ }),
	/* 42 */
	/***/ (function(module, exports, __webpack_require__) {


	var define = __webpack_require__(4);

	var elesfn = {
	  animate: define.animate(),
	  animation: define.animation(),
	  animated: define.animated(),
	  clearQueue: define.clearQueue(),
	  delay: define.delay(),
	  delayAnimation: define.delayAnimation(),
	  stop: define.stop()
	};

	module.exports = elesfn;

	/***/ }),
	/* 43 */
	/***/ (function(module, exports, __webpack_require__) {


	var util = __webpack_require__(1);
	var Animation = __webpack_require__(44);
	var math = __webpack_require__(2);
	var is = __webpack_require__(0);

	var define = {

	  animated: function animated() {
	    return function animatedImpl() {
	      var self = this;
	      var selfIsArrayLike = self.length !== undefined;
	      var all = selfIsArrayLike ? self : [self]; // put in array if not array-like
	      var cy = this._private.cy || this;

	      if (!cy.styleEnabled()) {
	        return false;
	      }

	      var ele = all[0];

	      if (ele) {
	        return ele._private.animation.current.length > 0;
	      }
	    };
	  }, // animated

	  clearQueue: function clearQueue() {
	    return function clearQueueImpl() {
	      var self = this;
	      var selfIsArrayLike = self.length !== undefined;
	      var all = selfIsArrayLike ? self : [self]; // put in array if not array-like
	      var cy = this._private.cy || this;

	      if (!cy.styleEnabled()) {
	        return this;
	      }

	      for (var i = 0; i < all.length; i++) {
	        var ele = all[i];
	        ele._private.animation.queue = [];
	      }

	      return this;
	    };
	  }, // clearQueue

	  delay: function delay() {
	    return function delayImpl(time, complete) {
	      var cy = this._private.cy || this;

	      if (!cy.styleEnabled()) {
	        return this;
	      }

	      return this.animate({
	        delay: time,
	        duration: time,
	        complete: complete
	      });
	    };
	  }, // delay

	  delayAnimation: function delayAnimation() {
	    return function delayAnimationImpl(time, complete) {
	      var cy = this._private.cy || this;

	      if (!cy.styleEnabled()) {
	        return this;
	      }

	      return this.animation({
	        delay: time,
	        duration: time,
	        complete: complete
	      });
	    };
	  }, // delay

	  animation: function animation() {
	    return function animationImpl(properties, params) {
	      var self = this;
	      var selfIsArrayLike = self.length !== undefined;
	      var all = selfIsArrayLike ? self : [self]; // put in array if not array-like
	      var cy = this._private.cy || this;
	      var isCore = !selfIsArrayLike;
	      var isEles = !isCore;

	      if (!cy.styleEnabled()) {
	        return this;
	      }

	      var style = cy.style();

	      properties = util.assign({}, properties, params);

	      var propertiesEmpty = Object.keys(properties).length === 0;

	      if (propertiesEmpty) {
	        return new Animation(all[0], properties); // nothing to animate
	      }

	      if (properties.duration === undefined) {
	        properties.duration = 400;
	      }

	      switch (properties.duration) {
	        case 'slow':
	          properties.duration = 600;
	          break;
	        case 'fast':
	          properties.duration = 200;
	          break;
	      }

	      if (isEles) {
	        properties.style = style.getPropsList(properties.style || properties.css);

	        properties.css = undefined;
	      }

	      if (isEles && properties.renderedPosition != null) {
	        var rpos = properties.renderedPosition;
	        var pan = cy.pan();
	        var zoom = cy.zoom();

	        properties.position = math.renderedToModelPosition(rpos, zoom, pan);
	      }

	      // override pan w/ panBy if set
	      if (isCore && properties.panBy != null) {
	        var panBy = properties.panBy;
	        var cyPan = cy.pan();

	        properties.pan = {
	          x: cyPan.x + panBy.x,
	          y: cyPan.y + panBy.y
	        };
	      }

	      // override pan w/ center if set
	      var center = properties.center || properties.centre;
	      if (isCore && center != null) {
	        var centerPan = cy.getCenterPan(center.eles, properties.zoom);

	        if (centerPan != null) {
	          properties.pan = centerPan;
	        }
	      }

	      // override pan & zoom w/ fit if set
	      if (isCore && properties.fit != null) {
	        var fit = properties.fit;
	        var fitVp = cy.getFitViewport(fit.eles || fit.boundingBox, fit.padding);

	        if (fitVp != null) {
	          properties.pan = fitVp.pan;
	          properties.zoom = fitVp.zoom;
	        }
	      }

	      // override zoom (& potentially pan) w/ zoom obj if set
	      if (isCore && is.plainObject(properties.zoom)) {
	        var vp = cy.getZoomedViewport(properties.zoom);

	        if (vp != null) {
	          if (vp.zoomed) {
	            properties.zoom = vp.zoom;
	          }

	          if (vp.panned) {
	            properties.pan = vp.pan;
	          }
	        }
	      }

	      return new Animation(all[0], properties);
	    };
	  }, // animate

	  animate: function animate() {
	    return function animateImpl(properties, params) {
	      var self = this;
	      var selfIsArrayLike = self.length !== undefined;
	      var all = selfIsArrayLike ? self : [self]; // put in array if not array-like
	      var cy = this._private.cy || this;

	      if (!cy.styleEnabled()) {
	        return this;
	      }

	      if (params) {
	        properties = util.extend({}, properties, params);
	      }

	      // manually hook and run the animation
	      for (var i = 0; i < all.length; i++) {
	        var ele = all[i];
	        var queue = ele.animated() && (properties.queue === undefined || properties.queue);

	        var ani = ele.animation(properties, queue ? { queue: true } : undefined);

	        ani.play();
	      }

	      return this; // chaining
	    };
	  }, // animate

	  stop: function stop() {
	    return function stopImpl(clearQueue, jumpToEnd) {
	      var self = this;
	      var selfIsArrayLike = self.length !== undefined;
	      var all = selfIsArrayLike ? self : [self]; // put in array if not array-like
	      var cy = this._private.cy || this;

	      if (!cy.styleEnabled()) {
	        return this;
	      }

	      for (var i = 0; i < all.length; i++) {
	        var ele = all[i];
	        var _p = ele._private;
	        var anis = _p.animation.current;

	        for (var j = 0; j < anis.length; j++) {
	          var ani = anis[j];
	          var ani_p = ani._private;

	          if (jumpToEnd) {
	            // next iteration of the animation loop, the animation
	            // will go straight to the end and be removed
	            ani_p.duration = 0;
	          }
	        }

	        // clear the queue of future animations
	        if (clearQueue) {
	          _p.animation.queue = [];
	        }

	        if (!jumpToEnd) {
	          _p.animation.current = [];
	        }
	      }

	      // we have to notify (the animation loop doesn't do it for us on `stop`)
	      cy.notify({
	        eles: this,
	        type: 'draw'
	      });

	      return this;
	    };
	  } // stop

	}; // define

	module.exports = define;

	/***/ }),
	/* 44 */
	/***/ (function(module, exports, __webpack_require__) {


	var util = __webpack_require__(1);
	var is = __webpack_require__(0);
	var Promise = __webpack_require__(5);

	var Animation = function Animation(target, opts, opts2) {
	  var _p = this._private = util.extend({
	    duration: 1000
	  }, opts, opts2);

	  _p.target = target;
	  _p.style = _p.style || _p.css;
	  _p.started = false;
	  _p.playing = false;
	  _p.hooked = false;
	  _p.applying = false;
	  _p.progress = 0;
	  _p.completes = [];
	  _p.frames = [];

	  if (_p.complete && is.fn(_p.complete)) {
	    _p.completes.push(_p.complete);
	  }

	  // for future timeline/animations impl
	  this.length = 1;
	  this[0] = this;
	};

	var anifn = Animation.prototype;

	util.extend(anifn, {

	  instanceString: function instanceString() {
	    return 'animation';
	  },

	  hook: function hook() {
	    var _p = this._private;

	    if (!_p.hooked) {
	      // add to target's animation queue
	      var q = void 0;
	      var tAni = _p.target._private.animation;
	      if (_p.queue) {
	        q = tAni.queue;
	      } else {
	        q = tAni.current;
	      }
	      q.push(this);

	      // add to the animation loop pool
	      if (is.elementOrCollection(_p.target)) {
	        _p.target.cy().addToAnimationPool(_p.target);
	      }

	      _p.hooked = true;
	    }

	    return this;
	  },

	  play: function play() {
	    var _p = this._private;

	    // autorewind
	    if (_p.progress === 1) {
	      _p.progress = 0;
	    }

	    _p.playing = true;
	    _p.started = false; // needs to be started by animation loop
	    _p.stopped = false;

	    this.hook();

	    // the animation loop will start the animation...

	    return this;
	  },

	  playing: function playing() {
	    return this._private.playing;
	  },

	  apply: function apply() {
	    var _p = this._private;

	    _p.applying = true;
	    _p.started = false; // needs to be started by animation loop
	    _p.stopped = false;

	    this.hook();

	    // the animation loop will apply the animation at this progress

	    return this;
	  },

	  applying: function applying() {
	    return this._private.applying;
	  },

	  pause: function pause() {
	    var _p = this._private;

	    _p.playing = false;
	    _p.started = false;

	    return this;
	  },

	  stop: function stop() {
	    var _p = this._private;

	    _p.playing = false;
	    _p.started = false;
	    _p.stopped = true; // to be removed from animation queues

	    return this;
	  },

	  rewind: function rewind() {
	    return this.progress(0);
	  },

	  fastforward: function fastforward() {
	    return this.progress(1);
	  },

	  time: function time(t) {
	    var _p = this._private;

	    if (t === undefined) {
	      return _p.progress * _p.duration;
	    } else {
	      return this.progress(t / _p.duration);
	    }
	  },

	  progress: function progress(p) {
	    var _p = this._private;
	    var wasPlaying = _p.playing;

	    if (p === undefined) {
	      return _p.progress;
	    } else {
	      if (wasPlaying) {
	        this.pause();
	      }

	      _p.progress = p;
	      _p.started = false;

	      if (wasPlaying) {
	        this.play();
	      }
	    }

	    return this;
	  },

	  completed: function completed() {
	    return this._private.progress === 1;
	  },

	  reverse: function reverse() {
	    var _p = this._private;
	    var wasPlaying = _p.playing;

	    if (wasPlaying) {
	      this.pause();
	    }

	    _p.progress = 1 - _p.progress;
	    _p.started = false;

	    var swap = function swap(a, b) {
	      var _pa = _p[a];

	      if (_pa == null) {
	        return;
	      }

	      _p[a] = _p[b];
	      _p[b] = _pa;
	    };

	    swap('zoom', 'startZoom');
	    swap('pan', 'startPan');
	    swap('position', 'startPosition');

	    // swap styles
	    if (_p.style) {
	      for (var i = 0; i < _p.style.length; i++) {
	        var prop = _p.style[i];
	        var name = prop.name;
	        var startStyleProp = _p.startStyle[name];

	        _p.startStyle[name] = prop;
	        _p.style[i] = startStyleProp;
	      }
	    }

	    if (wasPlaying) {
	      this.play();
	    }

	    return this;
	  },

	  promise: function promise(type) {
	    var _p = this._private;

	    var arr = void 0;

	    switch (type) {
	      case 'frame':
	        arr = _p.frames;
	        break;
	      default:
	      case 'complete':
	      case 'completed':
	        arr = _p.completes;
	    }

	    return new Promise(function (resolve, reject) {
	      arr.push(function () {
	        resolve();
	      });
	    });
	  }

	});

	anifn.complete = anifn.completed;

	module.exports = Animation;

	/***/ }),
	/* 45 */
	/***/ (function(module, exports, __webpack_require__) {


	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	var util = __webpack_require__(1);
	var is = __webpack_require__(0);

	var define = {

	  // access data field
	  data: function data(params) {
	    var defaults = {
	      field: 'data',
	      bindingEvent: 'data',
	      allowBinding: false,
	      allowSetting: false,
	      allowGetting: false,
	      settingEvent: 'data',
	      settingTriggersEvent: false,
	      triggerFnName: 'trigger',
	      immutableKeys: {}, // key => true if immutable
	      updateStyle: false,
	      beforeGet: function beforeGet(self) {},
	      beforeSet: function beforeSet(self, obj) {},
	      onSet: function onSet(self) {},
	      canSet: function canSet(self) {
	        return true;
	      }
	    };
	    params = util.extend({}, defaults, params);

	    return function dataImpl(name, value) {
	      var p = params;
	      var self = this;
	      var selfIsArrayLike = self.length !== undefined;
	      var all = selfIsArrayLike ? self : [self]; // put in array if not array-like
	      var single = selfIsArrayLike ? self[0] : self;

	      // .data('foo', ...)
	      if (is.string(name)) {
	        // set or get property

	        // .data('foo')
	        if (p.allowGetting && value === undefined) {
	          // get

	          var ret = void 0;
	          if (single) {
	            p.beforeGet(single);

	            ret = single._private[p.field][name];
	          }
	          return ret;

	          // .data('foo', 'bar')
	        } else if (p.allowSetting && value !== undefined) {
	          // set
	          var valid = !p.immutableKeys[name];
	          if (valid) {
	            var change = _defineProperty({}, name, value);

	            p.beforeSet(self, change);

	            for (var i = 0, l = all.length; i < l; i++) {
	              var ele = all[i];

	              if (p.canSet(ele)) {
	                ele._private[p.field][name] = value;
	              }
	            }

	            // update mappers if asked
	            if (p.updateStyle) {
	              self.updateStyle();
	            }

	            // call onSet callback
	            p.onSet(self);

	            if (p.settingTriggersEvent) {
	              self[p.triggerFnName](p.settingEvent);
	            }
	          }
	        }

	        // .data({ 'foo': 'bar' })
	      } else if (p.allowSetting && is.plainObject(name)) {
	        // extend
	        var obj = name;
	        var k = void 0,
	            v = void 0;
	        var keys = Object.keys(obj);

	        p.beforeSet(self, obj);

	        for (var _i = 0; _i < keys.length; _i++) {
	          k = keys[_i];
	          v = obj[k];

	          var _valid = !p.immutableKeys[k];
	          if (_valid) {
	            for (var j = 0; j < all.length; j++) {
	              var _ele = all[j];

	              if (p.canSet(_ele)) {
	                _ele._private[p.field][k] = v;
	              }
	            }
	          }
	        }

	        // update mappers if asked
	        if (p.updateStyle) {
	          self.updateStyle();
	        }

	        // call onSet callback
	        p.onSet(self);

	        if (p.settingTriggersEvent) {
	          self[p.triggerFnName](p.settingEvent);
	        }

	        // .data(function(){ ... })
	      } else if (p.allowBinding && is.fn(name)) {
	        // bind to event
	        var fn = name;
	        self.on(p.bindingEvent, fn);

	        // .data()
	      } else if (p.allowGetting && name === undefined) {
	        // get whole object
	        var _ret = void 0;
	        if (single) {
	          p.beforeGet(single);

	          _ret = single._private[p.field];
	        }
	        return _ret;
	      }

	      return self; // maintain chainability
	    }; // function
	  }, // data

	  // remove data field
	  removeData: function removeData(params) {
	    var defaults = {
	      field: 'data',
	      event: 'data',
	      triggerFnName: 'trigger',
	      triggerEvent: false,
	      immutableKeys: {} // key => true if immutable
	    };
	    params = util.extend({}, defaults, params);

	    return function removeDataImpl(names) {
	      var p = params;
	      var self = this;
	      var selfIsArrayLike = self.length !== undefined;
	      var all = selfIsArrayLike ? self : [self]; // put in array if not array-like

	      // .removeData('foo bar')
	      if (is.string(names)) {
	        // then get the list of keys, and delete them
	        var keys = names.split(/\s+/);
	        var l = keys.length;

	        for (var i = 0; i < l; i++) {
	          // delete each non-empty key
	          var key = keys[i];
	          if (is.emptyString(key)) {
	            continue;
	          }

	          var valid = !p.immutableKeys[key]; // not valid if immutable
	          if (valid) {
	            for (var i_a = 0, l_a = all.length; i_a < l_a; i_a++) {
	              all[i_a]._private[p.field][key] = undefined;
	            }
	          }
	        }

	        if (p.triggerEvent) {
	          self[p.triggerFnName](p.event);
	        }

	        // .removeData()
	      } else if (names === undefined) {
	        // then delete all keys

	        for (var _i_a = 0, _l_a = all.length; _i_a < _l_a; _i_a++) {
	          var _privateFields = all[_i_a]._private[p.field];
	          var _keys = Object.keys(_privateFields);

	          for (var _i2 = 0; _i2 < _keys.length; _i2++) {
	            var _key = _keys[_i2];
	            var validKeyToDelete = !p.immutableKeys[_key];

	            if (validKeyToDelete) {
	              _privateFields[_key] = undefined;
	            }
	          }
	        }

	        if (p.triggerEvent) {
	          self[p.triggerFnName](p.event);
	        }
	      }

	      return self; // maintain chaining
	    }; // function
	  } // removeData
	}; // define

	module.exports = define;

	/***/ }),
	/* 46 */
	/***/ (function(module, exports, __webpack_require__) {


	var Promise = __webpack_require__(5);

	var define = {

	  eventAliasesOn: function eventAliasesOn(proto) {
	    var p = proto;

	    p.addListener = p.listen = p.bind = p.on;
	    p.unlisten = p.unbind = p.off = p.removeListener;
	    p.trigger = p.emit;

	    // this is just a wrapper alias of .on()
	    p.pon = p.promiseOn = function (events, selector) {
	      var self = this;
	      var args = Array.prototype.slice.call(arguments, 0);

	      return new Promise(function (resolve, reject) {
	        var callback = function callback(e) {
	          self.off.apply(self, offArgs);

	          resolve(e);
	        };

	        var onArgs = args.concat([callback]);
	        var offArgs = onArgs.concat([]);

	        self.on.apply(self, onArgs);
	      });
	    };
	  }

	}; // define

	module.exports = define;

	/***/ }),
	/* 47 */
	/***/ (function(module, exports, __webpack_require__) {


	var Set = __webpack_require__(8);

	var elesfn = {
	  classes: function classes(_classes) {
	    _classes = (_classes || '').match(/\S+/g) || [];
	    var self = this;
	    var changed = [];
	    var classesMap = new Set(_classes);

	    // check and update each ele

	    var _loop = function _loop(j) {
	      var ele = self[j];
	      var _p = ele._private;
	      var eleClasses = _p.classes;
	      var changedEle = false;

	      // check if ele has all of the passed classes
	      classesMap.forEach(function (cls) {
	        var eleHasClass = eleClasses.has(cls);

	        if (!eleHasClass) {
	          changedEle = true;
	        }
	      });

	      // check if ele has classes outside of those passed
	      if (!changedEle) {
	        eleClasses.forEach(function (eleCls) {
	          var specdClass = classesMap.has(eleCls);

	          if (!specdClass) {
	            changedEle = true;
	          }
	        });
	      }

	      if (changedEle) {
	        _p.classes = new Set(classesMap);

	        changed.push(ele);
	      }
	    };

	    for (var j = 0; j < self.length; j++) {
	      _loop(j);
	    }

	    // trigger update style on those eles that had class changes
	    if (changed.length > 0) {
	      this.spawn(changed).updateStyle().emit('class');
	    }

	    return self;
	  },

	  addClass: function addClass(classes) {
	    return this.toggleClass(classes, true);
	  },

	  hasClass: function hasClass(className) {
	    var ele = this[0];
	    return ele != null && ele._private.classes.has(className);
	  },

	  toggleClass: function toggleClass(classesStr, toggle) {
	    var classes = classesStr.match(/\S+/g) || [];
	    var self = this;
	    var changed = []; // eles who had classes changed

	    for (var i = 0, il = self.length; i < il; i++) {
	      var _ele = self[i];
	      var _changedEle = false;

	      for (var j = 0; j < classes.length; j++) {
	        var cls = classes[j];
	        var _eleClasses = _ele._private.classes;
	        var hasClass = _eleClasses.has(cls);
	        var shouldAdd = toggle || toggle === undefined && !hasClass;

	        if (shouldAdd) {
	          _eleClasses.add(cls);

	          if (!hasClass && !_changedEle) {
	            changed.push(_ele);
	            _changedEle = true;
	          }
	        } else {
	          // then remove
	          _eleClasses.delete(cls);

	          if (hasClass && !_changedEle) {
	            changed.push(_ele);
	            _changedEle = true;
	          }
	        }
	      } // for j classes
	    } // for i eles

	    // trigger update style on those eles that had class changes
	    if (changed.length > 0) {
	      this.spawn(changed).updateStyle().emit('class');
	    }

	    return self;
	  },

	  removeClass: function removeClass(classes) {
	    return this.toggleClass(classes, false);
	  },

	  flashClass: function flashClass(classes, duration) {
	    var self = this;

	    if (duration == null) {
	      duration = 250;
	    } else if (duration === 0) {
	      return self; // nothing to do really
	    }

	    self.addClass(classes);
	    setTimeout(function () {
	      self.removeClass(classes);
	    }, duration);

	    return self;
	  }
	};

	module.exports = elesfn;

	/***/ }),
	/* 48 */
	/***/ (function(module, exports, __webpack_require__) {


	var is = __webpack_require__(0);
	var Selector = __webpack_require__(6);

	var elesfn = {
	  allAre: function allAre(selector) {
	    var selObj = new Selector(selector);

	    return this.every(function (ele) {
	      return selObj.matches(ele);
	    });
	  },

	  is: function is(selector) {
	    var selObj = new Selector(selector);

	    return this.some(function (ele) {
	      return selObj.matches(ele);
	    });
	  },

	  some: function some(fn, thisArg) {
	    for (var i = 0; i < this.length; i++) {
	      var ret = !thisArg ? fn(this[i], i, this) : fn.apply(thisArg, [this[i], i, this]);

	      if (ret) {
	        return true;
	      }
	    }

	    return false;
	  },

	  every: function every(fn, thisArg) {
	    for (var i = 0; i < this.length; i++) {
	      var ret = !thisArg ? fn(this[i], i, this) : fn.apply(thisArg, [this[i], i, this]);

	      if (!ret) {
	        return false;
	      }
	    }

	    return true;
	  },

	  same: function same(collection) {
	    collection = this.cy().collection(collection);

	    // cheap extra check
	    if (this.length !== collection.length) {
	      return false;
	    }

	    return this.every(function (ele) {
	      return collection.hasElementWithId(ele.id());
	    });
	  },

	  anySame: function anySame(collection) {
	    collection = this.cy().collection(collection);

	    return this.some(function (ele) {
	      return collection.hasElementWithId(ele.id());
	    });
	  },

	  allAreNeighbors: function allAreNeighbors(collection) {
	    collection = this.cy().collection(collection);

	    var nhood = this.neighborhood();

	    return collection.every(function (ele) {
	      return nhood.hasElementWithId(ele.id());
	    });
	  },

	  contains: function contains(collection) {
	    collection = this.cy().collection(collection);

	    var self = this;

	    return collection.every(function (ele) {
	      return self.hasElementWithId(ele.id());
	    });
	  }
	};

	elesfn.allAreNeighbours = elesfn.allAreNeighbors;
	elesfn.has = elesfn.contains;

	module.exports = elesfn;

	/***/ }),
	/* 49 */
	/***/ (function(module, exports, __webpack_require__) {


	var util = __webpack_require__(1);
	var exprs = __webpack_require__(50);
	var newQuery = __webpack_require__(10);

	// of all the expressions, find the first match in the remaining text
	var consumeExpr = function consumeExpr(remaining) {
	  var expr = void 0;
	  var match = void 0;
	  var name = void 0;

	  for (var j = 0; j < exprs.length; j++) {
	    var e = exprs[j];
	    var n = e.name;

	    var m = remaining.match(e.regexObj);

	    if (m != null) {
	      match = m;
	      expr = e;
	      name = n;

	      var consumed = m[0];
	      remaining = remaining.substring(consumed.length);

	      break; // we've consumed one expr, so we can return now
	    }
	  }

	  return {
	    expr: expr,
	    match: match,
	    name: name,
	    remaining: remaining
	  };
	};

	// consume all leading whitespace
	var consumeWhitespace = function consumeWhitespace(remaining) {
	  var match = remaining.match(/^\s+/);

	  if (match) {
	    var consumed = match[0];
	    remaining = remaining.substring(consumed.length);
	  }

	  return remaining;
	};

	var parse = function parse(selector) {
	  var self = this;

	  var remaining = self._private.selectorText = selector;

	  var currentQuery = self[0] = newQuery();
	  self.length = 1;

	  remaining = consumeWhitespace(remaining); // get rid of leading whitespace

	  for (;;) {
	    var check = consumeExpr(remaining);

	    if (check.expr == null) {
	      util.error('The selector `' + selector + '`is invalid');
	      return false;
	    } else {
	      var args = check.match.slice(1);

	      // let the token populate the selector object in currentQuery
	      var ret = check.expr.populate(self, currentQuery, args);

	      if (ret === false) {
	        return false; // exit if population failed
	      } else if (ret != null) {
	        currentQuery = ret; // change the current query to be filled if the expr specifies
	      }
	    }

	    remaining = check.remaining;

	    // we're done when there's nothing left to parse
	    if (remaining.match(/^\s*$/)) {
	      break;
	    }
	  }

	  // adjust references for subject
	  for (var j = 0; j < self.length; j++) {
	    var query = self[j];

	    if (query.subject != null) {
	      // go up the tree until we reach the subject
	      for (;;) {
	        if (query.subject === query) {
	          break;
	        } // done if subject is self

	        if (query.parent != null) {
	          // swap parent/child reference
	          var parent = query.parent;
	          var child = query;

	          child.parent = null;
	          parent.child = child;

	          query = parent; // go up the tree
	        } else if (query.ancestor != null) {
	          // swap ancestor/descendant
	          var ancestor = query.ancestor;
	          var descendant = query;

	          descendant.ancestor = null;
	          ancestor.descendant = descendant;

	          query = ancestor; // go up the tree
	        } else if (query.source || query.target || query.connectedNodes) {
	          util.error('The selector `' + self.text() + '` can not contain a subject selector that applies to the source or target of an edge selector');
	          return false;
	        } else {
	          util.error('When adjusting references for the selector `' + self.text() + '`, neither parent nor ancestor was found');
	          return false;
	        }
	      } // for

	      self[j] = query.subject; // subject should be the root query
	    } // if
	  } // for

	  return true; // success
	};

	module.exports = { parse: parse };

	/***/ }),
	/* 50 */
	/***/ (function(module, exports, __webpack_require__) {


	var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

	var _require = __webpack_require__(15),
	    stateSelectorRegex = _require.stateSelectorRegex;

	var tokens = __webpack_require__(51);
	var util = __webpack_require__(1);
	var newQuery = __webpack_require__(10);

	// when a token like a variable has escaped meta characters, we need to clean the backslashes out
	// so that values get compared properly in Selector.filter()
	var cleanMetaChars = function cleanMetaChars(str) {
	  return str.replace(new RegExp('\\\\(' + tokens.metaChar + ')', 'g'), function (match, $1) {
	    return $1;
	  });
	};

	var replaceLastQuery = function replaceLastQuery(selector, examiningQuery, replacementQuery) {
	  if (examiningQuery === selector[selector.length - 1]) {
	    selector[selector.length - 1] = replacementQuery;
	  }
	};

	// NOTE: add new expression syntax here to have it recognised by the parser;
	// - a query contains all adjacent (i.e. no separator in between) expressions;
	// - the current query is stored in selector[i] --- you can use the reference to `this` in the populate function;
	// - you need to check the query objects in Selector.filter() for it actually filter properly, but that's pretty straight forward
	// - when you add something here, also add to Selector.toString()
	var exprs = [{
	  name: 'group',
	  query: true,
	  regex: '(' + tokens.group + ')',
	  populate: function populate(selector, query, _ref) {
	    var _ref2 = _slicedToArray(_ref, 1),
	        group = _ref2[0];

	    query.group = group === '*' ? group : group + 's';
	  }
	}, {
	  name: 'state',
	  query: true,
	  regex: stateSelectorRegex,
	  populate: function populate(selector, query, _ref3) {
	    var _ref4 = _slicedToArray(_ref3, 1),
	        state = _ref4[0];

	    query.colonSelectors.push(state);
	  }
	}, {
	  name: 'id',
	  query: true,
	  regex: '\\#(' + tokens.id + ')',
	  populate: function populate(selector, query, _ref5) {
	    var _ref6 = _slicedToArray(_ref5, 1),
	        id = _ref6[0];

	    query.ids.push(cleanMetaChars(id));
	  }
	}, {
	  name: 'className',
	  query: true,
	  regex: '\\.(' + tokens.className + ')',
	  populate: function populate(selector, query, _ref7) {
	    var _ref8 = _slicedToArray(_ref7, 1),
	        className = _ref8[0];

	    query.classes.push(cleanMetaChars(className));
	  }
	}, {
	  name: 'dataExists',
	  query: true,
	  regex: '\\[\\s*(' + tokens.variable + ')\\s*\\]',
	  populate: function populate(selector, query, _ref9) {
	    var _ref10 = _slicedToArray(_ref9, 1),
	        variable = _ref10[0];

	    query.data.push({
	      field: cleanMetaChars(variable)
	    });
	  }
	}, {
	  name: 'dataCompare',
	  query: true,
	  regex: '\\[\\s*(' + tokens.variable + ')\\s*(' + tokens.comparatorOp + ')\\s*(' + tokens.value + ')\\s*\\]',
	  populate: function populate(selector, query, _ref11) {
	    var _ref12 = _slicedToArray(_ref11, 3),
	        variable = _ref12[0],
	        comparatorOp = _ref12[1],
	        value = _ref12[2];

	    var valueIsString = new RegExp('^' + tokens.string + '$').exec(value) != null;

	    if (valueIsString) {
	      value = value.substring(1, value.length - 1);
	    } else {
	      value = parseFloat(value);
	    }

	    query.data.push({
	      field: cleanMetaChars(variable),
	      operator: comparatorOp,
	      value: value
	    });
	  }
	}, {
	  name: 'dataBool',
	  query: true,
	  regex: '\\[\\s*(' + tokens.boolOp + ')\\s*(' + tokens.variable + ')\\s*\\]',
	  populate: function populate(selector, query, _ref13) {
	    var _ref14 = _slicedToArray(_ref13, 2),
	        boolOp = _ref14[0],
	        variable = _ref14[1];

	    query.data.push({
	      field: cleanMetaChars(variable),
	      operator: boolOp
	    });
	  }
	}, {
	  name: 'metaCompare',
	  query: true,
	  regex: '\\[\\[\\s*(' + tokens.meta + ')\\s*(' + tokens.comparatorOp + ')\\s*(' + tokens.number + ')\\s*\\]\\]',
	  populate: function populate(selector, query, _ref15) {
	    var _ref16 = _slicedToArray(_ref15, 3),
	        meta = _ref16[0],
	        comparatorOp = _ref16[1],
	        number = _ref16[2];

	    query.meta.push({
	      field: cleanMetaChars(meta),
	      operator: comparatorOp,
	      value: parseFloat(number)
	    });
	  }
	}, {
	  name: 'nextQuery',
	  separator: true,
	  regex: tokens.separator,
	  populate: function populate(selector) {
	    // go on to next query
	    var nextQuery = selector[selector.length++] = newQuery();
	    selector.currentSubject = null;

	    return nextQuery;
	  }
	}, {
	  name: 'directedEdge',
	  separator: true,
	  regex: tokens.directedEdge,
	  populate: function populate(selector, query) {
	    var edgeQuery = newQuery();
	    var source = query;
	    var target = newQuery();

	    edgeQuery.group = 'edges';
	    edgeQuery.target = target;
	    edgeQuery.source = source;
	    edgeQuery.subject = selector.currentSubject;

	    // the query in the selector should be the edge rather than the source
	    replaceLastQuery(selector, query, edgeQuery);

	    // we're now populating the target query with expressions that follow
	    return target;
	  }
	}, {
	  name: 'undirectedEdge',
	  separator: true,
	  regex: tokens.undirectedEdge,
	  populate: function populate(selector, query) {
	    var edgeQuery = newQuery();
	    var source = query;
	    var target = newQuery();

	    edgeQuery.group = 'edges';
	    edgeQuery.connectedNodes = [source, target];
	    edgeQuery.subject = selector.currentSubject;

	    // the query in the selector should be the edge rather than the source
	    replaceLastQuery(selector, query, edgeQuery);

	    // we're now populating the target query with expressions that follow
	    return target;
	  }
	}, {
	  name: 'child',
	  separator: true,
	  regex: tokens.child,
	  populate: function populate(selector, query) {
	    // this query is the parent of the following query
	    var childQuery = newQuery();
	    childQuery.parent = query;
	    childQuery.subject = selector.currentSubject;

	    // it's cheaper to compare children first and go up so replace the parent
	    replaceLastQuery(selector, query, childQuery);

	    // we're now populating the child query with expressions that follow
	    return childQuery;
	  }
	}, {
	  name: 'descendant',
	  separator: true,
	  regex: tokens.descendant,
	  populate: function populate(selector, query) {
	    // this query is the ancestor of the following query
	    var descendantQuery = newQuery();
	    descendantQuery.ancestor = query;
	    descendantQuery.subject = selector.currentSubject;

	    // it's cheaper to compare descendants first and go up so replace the ancestor
	    replaceLastQuery(selector, query, descendantQuery);

	    // we're now populating the descendant query with expressions that follow
	    return descendantQuery;
	  }
	}, {
	  name: 'subject',
	  modifier: true,
	  regex: tokens.subject,
	  populate: function populate(selector, query) {
	    if (selector.currentSubject != null && query.subject != query) {
	      util.error('Redefinition of subject in selector `' + selector.toString() + '`');
	      return false;
	    }

	    selector.currentSubject = query;
	    query.subject = query;
	    selector[selector.length - 1].subject = query;
	  }
	}];

	exprs.forEach(function (e) {
	  return e.regexObj = new RegExp('^' + e.regex);
	});

	module.exports = exprs;

	/***/ }),
	/* 51 */
	/***/ (function(module, exports, __webpack_require__) {


	var util = __webpack_require__(1);

	// tokens in the query language
	var tokens = {
	  metaChar: '[\\!\\"\\#\\$\\%\\&\\\'\\(\\)\\*\\+\\,\\.\\/\\:\\;\\<\\=\\>\\?\\@\\[\\]\\^\\`\\{\\|\\}\\~]', // chars we need to escape in let names, etc
	  comparatorOp: '=|\\!=|>|>=|<|<=|\\$=|\\^=|\\*=', // binary comparison op (used in data selectors)
	  boolOp: '\\?|\\!|\\^', // boolean (unary) operators (used in data selectors)
	  string: '"(?:\\\\"|[^"])*"' + '|' + "'(?:\\\\'|[^'])*'", // string literals (used in data selectors) -- doublequotes | singlequotes
	  number: util.regex.number, // number literal (used in data selectors) --- e.g. 0.1234, 1234, 12e123
	  meta: 'degree|indegree|outdegree', // allowed metadata fields (i.e. allowed functions to use from Collection)
	  separator: '\\s*,\\s*', // queries are separated by commas, e.g. edge[foo = 'bar'], node.someClass
	  descendant: '\\s+',
	  child: '\\s+>\\s+',
	  subject: '\\$',
	  group: 'node|edge|\\*',
	  directedEdge: '\\s+->\\s+',
	  undirectedEdge: '\\s+<->\\s+'
	};
	tokens.variable = '(?:[\\w-]|(?:\\\\' + tokens.metaChar + '))+'; // a variable name
	tokens.value = tokens.string + '|' + tokens.number; // a value literal, either a string or number
	tokens.className = tokens.variable; // a class name (follows variable conventions)
	tokens.id = tokens.variable; // an element id (follows variable conventions)

	(function () {
	  var ops = void 0,
	      op = void 0,
	      i = void 0;

	  // add @ variants to comparatorOp
	  ops = tokens.comparatorOp.split('|');
	  for (i = 0; i < ops.length; i++) {
	    op = ops[i];
	    tokens.comparatorOp += '|@' + op;
	  }

	  // add ! variants to comparatorOp
	  ops = tokens.comparatorOp.split('|');
	  for (i = 0; i < ops.length; i++) {
	    op = ops[i];

	    if (op.indexOf('!') >= 0) {
	      continue;
	    } // skip ops that explicitly contain !
	    if (op === '=') {
	      continue;
	    } // skip = b/c != is explicitly defined

	    tokens.comparatorOp += '|\\!' + op;
	  }
	})();

	module.exports = tokens;

	/***/ }),
	/* 52 */
	/***/ (function(module, exports, __webpack_require__) {


	var _require = __webpack_require__(15),
	    stateSelectorMatches = _require.stateSelectorMatches;

	var is = __webpack_require__(0);

	// generic checking for data/metadata
	var operandsMatch = function operandsMatch(query, params) {
	  var allDataMatches = true;
	  for (var k = 0; k < query[params.name].length; k++) {
	    var data = query[params.name][k];
	    var operator = data.operator;
	    var value = data.value;
	    var field = data.field;
	    var _matches = void 0;
	    var fieldVal = params.fieldValue(field);

	    if (operator != null && value != null) {
	      var fieldStr = !is.string(fieldVal) && !is.number(fieldVal) ? '' : '' + fieldVal;
	      var valStr = '' + value;

	      var caseInsensitive = false;
	      if (operator.indexOf('@') >= 0) {
	        fieldStr = fieldStr.toLowerCase();
	        valStr = valStr.toLowerCase();

	        operator = operator.replace('@', '');
	        caseInsensitive = true;
	      }

	      var notExpr = false;
	      if (operator.indexOf('!') >= 0) {
	        operator = operator.replace('!', '');
	        notExpr = true;
	      }

	      // if we're doing a case insensitive comparison, then we're using a STRING comparison
	      // even if we're comparing numbers
	      if (caseInsensitive) {
	        value = valStr.toLowerCase();
	        fieldVal = fieldStr.toLowerCase();
	      }

	      var isIneqCmp = false;

	      switch (operator) {
	        case '*=':
	          _matches = fieldStr.indexOf(valStr) >= 0;
	          break;
	        case '$=':
	          _matches = fieldStr.indexOf(valStr, fieldStr.length - valStr.length) >= 0;
	          break;
	        case '^=':
	          _matches = fieldStr.indexOf(valStr) === 0;
	          break;
	        case '=':
	          _matches = fieldVal === value;
	          break;
	        case '>':
	          isIneqCmp = true;
	          _matches = fieldVal > value;
	          break;
	        case '>=':
	          isIneqCmp = true;
	          _matches = fieldVal >= value;
	          break;
	        case '<':
	          isIneqCmp = true;
	          _matches = fieldVal < value;
	          break;
	        case '<=':
	          isIneqCmp = true;
	          _matches = fieldVal <= value;
	          break;
	        default:
	          _matches = false;
	          break;
	      }

	      // apply the not op, but null vals for inequalities should always stay non-matching
	      if (notExpr && (fieldVal != null || !isIneqCmp)) {
	        _matches = !_matches;
	      }
	    } else if (operator != null) {
	      switch (operator) {
	        case '?':
	          _matches = fieldVal ? true : false;
	          break;
	        case '!':
	          _matches = fieldVal ? false : true;
	          break;
	        case '^':
	          _matches = fieldVal === undefined;
	          break;
	      }
	    } else {
	      _matches = fieldVal !== undefined;
	    }

	    if (!_matches) {
	      allDataMatches = false;
	      break;
	    }
	  } // for

	  return allDataMatches;
	}; // operandsMatch

	// check parent/child relations
	var confirmRelations = function confirmRelations(query, isNecessary, eles) {
	  if (query != null) {
	    var _matches2 = false;

	    if (!isNecessary) {
	      return false;
	    }

	    eles = eles(); // save cycles if query == null

	    // query must match for at least one element (may be recursive)
	    for (var i = 0; i < eles.length; i++) {
	      if (queryMatches(query, eles[i])) {
	        _matches2 = true;
	        break;
	      }
	    }

	    return _matches2;
	  } else {
	    return true;
	  }
	};

	var queryMatches = function queryMatches(query, ele) {
	  // make single group-only selectors really cheap to check since they're the most common ones
	  if (query.groupOnly) {
	    return query.group === '*' || query.group === ele.group();
	  }

	  // check group
	  if (query.group != null && query.group != '*' && query.group != ele.group()) {
	    return false;
	  }

	  var cy = ele.cy();
	  var k = void 0;

	  // check colon selectors
	  var allColonSelectorsMatch = true;
	  for (k = 0; k < query.colonSelectors.length; k++) {
	    var sel = query.colonSelectors[k];

	    allColonSelectorsMatch = stateSelectorMatches(sel, ele);

	    if (!allColonSelectorsMatch) break;
	  }
	  if (!allColonSelectorsMatch) return false;

	  // check id
	  var allIdsMatch = true;
	  for (k = 0; k < query.ids.length; k++) {
	    var id = query.ids[k];
	    var actualId = ele.id();

	    allIdsMatch = allIdsMatch && id == actualId;

	    if (!allIdsMatch) break;
	  }
	  if (!allIdsMatch) return false;

	  // check classes
	  var allClassesMatch = true;
	  for (k = 0; k < query.classes.length; k++) {
	    var cls = query.classes[k];

	    allClassesMatch = allClassesMatch && ele.hasClass(cls);

	    if (!allClassesMatch) break;
	  }
	  if (!allClassesMatch) return false;

	  // check data matches
	  var allDataMatches = operandsMatch(query, {
	    name: 'data',
	    fieldValue: function fieldValue(field) {
	      return ele.data(field);
	    }
	  });

	  if (!allDataMatches) {
	    return false;
	  }

	  // check metadata matches
	  var allMetaMatches = operandsMatch(query, {
	    name: 'meta',
	    fieldValue: function fieldValue(field) {
	      return ele[field]();
	    }
	  });

	  if (!allMetaMatches) {
	    return false;
	  }

	  // check collection
	  if (query.collection != null) {
	    var matchesAny = query.collection.hasElementWithId(ele.id());

	    if (!matchesAny) {
	      return false;
	    }
	  }

	  // check filter function
	  if (query.filter != null && ele.collection().some(query.filter)) {
	    return false;
	  }

	  var isCompound = cy.hasCompoundNodes();
	  var getSource = function getSource() {
	    return ele.source();
	  };
	  var getTarget = function getTarget() {
	    return ele.target();
	  };

	  if (!confirmRelations(query.parent, isCompound, function () {
	    return ele.parent();
	  })) {
	    return false;
	  }

	  if (!confirmRelations(query.ancestor, isCompound, function () {
	    return ele.parents();
	  })) {
	    return false;
	  }

	  if (!confirmRelations(query.child, isCompound, function () {
	    return ele.children();
	  })) {
	    return false;
	  }

	  if (!confirmRelations(query.descendant, isCompound, function () {
	    return ele.descendants();
	  })) {
	    return false;
	  }

	  if (!confirmRelations(query.source, true, getSource)) {
	    return false;
	  }

	  if (!confirmRelations(query.target, true, getTarget)) {
	    return false;
	  }

	  if (query.connectedNodes) {
	    var q0 = query.connectedNodes[0];
	    var q1 = query.connectedNodes[1];

	    if (confirmRelations(q0, true, getSource) && confirmRelations(q1, true, getTarget)) ; else if (confirmRelations(q0, true, getTarget) && confirmRelations(q1, true, getSource)) ; else {
	      return false;
	    }
	  }

	  // we've reached the end, so we've matched everything for this query
	  return true;
	}; // queryMatches

	// filter an existing collection
	var filter = function filter(collection) {
	  var self = this;
	  var cy = collection.cy();

	  // don't bother trying if it's invalid
	  if (self.invalid()) {
	    return cy.collection();
	  }

	  // for 1 id #foo queries, just get the element
	  if (self.length === 1 && self[0].length === 1 && self[0].ids.length === 1) {
	    return collection.getElementById(self[0].ids[0]).collection();
	  }

	  var selectorFunction = function selectorFunction(element) {
	    for (var j = 0; j < self.length; j++) {
	      var query = self[j];

	      if (queryMatches(query, element)) {
	        return true;
	      }
	    }

	    return false;
	  };

	  if (self.text() == null) {
	    selectorFunction = function selectorFunction() {
	      return true;
	    };
	  }

	  var filteredCollection = collection.filter(selectorFunction);

	  return filteredCollection;
	}; // filter

	// does selector match a single element?
	var matches = function matches(ele) {
	  var self = this;

	  // don't bother trying if it's invalid
	  if (self.invalid()) {
	    return false;
	  }

	  for (var j = 0; j < self.length; j++) {
	    var query = self[j];

	    if (queryMatches(query, ele)) {
	      return true;
	    }
	  }

	  return false;
	}; // filter

	module.exports = { matches: matches, filter: filter };

	/***/ }),
	/* 53 */
	/***/ (function(module, exports, __webpack_require__) {


	var Set = __webpack_require__(8);

	var elesfn = {
	  parent: function parent(selector) {
	    var parents = [];

	    // optimisation for single ele call
	    if (this.length === 1) {
	      var parent = this[0]._private.parent;

	      if (parent) {
	        return parent;
	      }
	    }

	    for (var i = 0; i < this.length; i++) {
	      var ele = this[i];
	      var _parent = ele._private.parent;

	      if (_parent) {
	        parents.push(_parent);
	      }
	    }

	    return this.spawn(parents, { unique: true }).filter(selector);
	  },

	  parents: function parents(selector) {
	    var parents = [];

	    var eles = this.parent();
	    while (eles.nonempty()) {
	      for (var i = 0; i < eles.length; i++) {
	        var ele = eles[i];
	        parents.push(ele);
	      }

	      eles = eles.parent();
	    }

	    return this.spawn(parents, { unique: true }).filter(selector);
	  },

	  commonAncestors: function commonAncestors(selector) {
	    var ancestors = void 0;

	    for (var i = 0; i < this.length; i++) {
	      var ele = this[i];
	      var parents = ele.parents();

	      ancestors = ancestors || parents;

	      ancestors = ancestors.intersect(parents); // current list must be common with current ele parents set
	    }

	    return ancestors.filter(selector);
	  },

	  orphans: function orphans(selector) {
	    return this.stdFilter(function (ele) {
	      return ele.isOrphan();
	    }).filter(selector);
	  },

	  nonorphans: function nonorphans(selector) {
	    return this.stdFilter(function (ele) {
	      return ele.isChild();
	    }).filter(selector);
	  },

	  children: function children(selector) {
	    var children = [];

	    for (var i = 0; i < this.length; i++) {
	      var ele = this[i];
	      children = children.concat(ele._private.children);
	    }

	    return this.spawn(children, { unique: true }).filter(selector);
	  },

	  siblings: function siblings(selector) {
	    return this.parent().children().not(this).filter(selector);
	  },

	  isParent: function isParent() {
	    var ele = this[0];

	    if (ele) {
	      return ele.isNode() && ele._private.children.length !== 0;
	    }
	  },

	  isChildless: function isChildless() {
	    var ele = this[0];

	    if (ele) {
	      return ele.isNode() && ele._private.children.length === 0;
	    }
	  },

	  isChild: function isChild() {
	    var ele = this[0];

	    if (ele) {
	      return ele.isNode() && ele._private.parent != null;
	    }
	  },

	  isOrphan: function isOrphan() {
	    var ele = this[0];

	    if (ele) {
	      return ele.isNode() && ele._private.parent == null;
	    }
	  },

	  descendants: function descendants(selector) {
	    var elements = [];

	    function add(eles) {
	      for (var i = 0; i < eles.length; i++) {
	        var ele = eles[i];

	        elements.push(ele);

	        if (ele.children().nonempty()) {
	          add(ele.children());
	        }
	      }
	    }

	    add(this.children());

	    return this.spawn(elements, { unique: true }).filter(selector);
	  }
	};

	function forEachCompound(eles, fn, includeSelf, recursiveStep) {
	  var q = [];
	  var did = new Set();
	  var cy = eles.cy();
	  var hasCompounds = cy.hasCompoundNodes();

	  for (var i = 0; i < eles.length; i++) {
	    var ele = eles[i];

	    if (includeSelf) {
	      q.push(ele);
	    } else if (hasCompounds) {
	      recursiveStep(q, did, ele);
	    }
	  }

	  while (q.length > 0) {
	    var _ele = q.shift();

	    fn(_ele);

	    did.add(_ele.id());

	    if (hasCompounds) {
	      recursiveStep(q, did, _ele);
	    }
	  }

	  return eles;
	}

	function addChildren(q, did, ele) {
	  if (ele.isParent()) {
	    var children = ele._private.children;

	    for (var i = 0; i < children.length; i++) {
	      var child = children[i];

	      if (!did.has(child.id())) {
	        q.push(child);
	      }
	    }
	  }
	}

	// very efficient version of eles.add( eles.descendants() ).forEach()
	// for internal use
	elesfn.forEachDown = function (fn) {
	  var includeSelf = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

	  return forEachCompound(this, fn, includeSelf, addChildren);
	};

	function addParent(q, did, ele) {
	  if (ele.isChild()) {
	    var parent = ele._private.parent;

	    if (!did.has(parent.id())) {
	      q.push(parent);
	    }
	  }
	}

	elesfn.forEachUp = function (fn) {
	  var includeSelf = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

	  return forEachCompound(this, fn, includeSelf, addParent);
	};

	function addParentAndChildren(q, did, ele) {
	  addParent(q, did, ele);
	  addChildren(q, did, ele);
	}

	elesfn.forEachUpAndDown = function (fn) {
	  var includeSelf = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

	  return forEachCompound(this, fn, includeSelf, addParentAndChildren);
	};

	// aliases
	elesfn.ancestors = elesfn.parents;

	module.exports = elesfn;

	/***/ }),
	/* 54 */
	/***/ (function(module, exports, __webpack_require__) {


	var define = __webpack_require__(4);
	var fn = void 0,
	    elesfn = void 0;

	fn = elesfn = {

	  data: define.data({
	    field: 'data',
	    bindingEvent: 'data',
	    allowBinding: true,
	    allowSetting: true,
	    settingEvent: 'data',
	    settingTriggersEvent: true,
	    triggerFnName: 'trigger',
	    allowGetting: true,
	    immutableKeys: {
	      'id': true,
	      'source': true,
	      'target': true,
	      'parent': true
	    },
	    updateStyle: true
	  }),

	  removeData: define.removeData({
	    field: 'data',
	    event: 'data',
	    triggerFnName: 'trigger',
	    triggerEvent: true,
	    immutableKeys: {
	      'id': true,
	      'source': true,
	      'target': true,
	      'parent': true
	    },
	    updateStyle: true
	  }),

	  scratch: define.data({
	    field: 'scratch',
	    bindingEvent: 'scratch',
	    allowBinding: true,
	    allowSetting: true,
	    settingEvent: 'scratch',
	    settingTriggersEvent: true,
	    triggerFnName: 'trigger',
	    allowGetting: true,
	    updateStyle: true
	  }),

	  removeScratch: define.removeData({
	    field: 'scratch',
	    event: 'scratch',
	    triggerFnName: 'trigger',
	    triggerEvent: true,
	    updateStyle: true
	  }),

	  rscratch: define.data({
	    field: 'rscratch',
	    allowBinding: false,
	    allowSetting: true,
	    settingTriggersEvent: false,
	    allowGetting: true
	  }),

	  removeRscratch: define.removeData({
	    field: 'rscratch',
	    triggerEvent: false
	  }),

	  id: function id() {
	    var ele = this[0];

	    if (ele) {
	      return ele._private.data.id;
	    }
	  }

	};

	// aliases
	fn.attr = fn.data;
	fn.removeAttr = fn.removeData;

	module.exports = elesfn;

	/***/ }),
	/* 55 */
	/***/ (function(module, exports, __webpack_require__) {


	var util = __webpack_require__(1);

	var elesfn = {};

	function defineDegreeFunction(callback) {
	  return function (includeLoops) {
	    var self = this;

	    if (includeLoops === undefined) {
	      includeLoops = true;
	    }

	    if (self.length === 0) {
	      return;
	    }

	    if (self.isNode() && !self.removed()) {
	      var degree = 0;
	      var node = self[0];
	      var connectedEdges = node._private.edges;

	      for (var i = 0; i < connectedEdges.length; i++) {
	        var edge = connectedEdges[i];

	        if (!includeLoops && edge.isLoop()) {
	          continue;
	        }

	        degree += callback(node, edge);
	      }

	      return degree;
	    } else {
	      return;
	    }
	  };
	}

	util.extend(elesfn, {
	  degree: defineDegreeFunction(function (node, edge) {
	    if (edge.source().same(edge.target())) {
	      return 2;
	    } else {
	      return 1;
	    }
	  }),

	  indegree: defineDegreeFunction(function (node, edge) {
	    if (edge.target().same(node)) {
	      return 1;
	    } else {
	      return 0;
	    }
	  }),

	  outdegree: defineDegreeFunction(function (node, edge) {
	    if (edge.source().same(node)) {
	      return 1;
	    } else {
	      return 0;
	    }
	  })
	});

	function defineDegreeBoundsFunction(degreeFn, callback) {
	  return function (includeLoops) {
	    var ret = void 0;
	    var nodes = this.nodes();

	    for (var i = 0; i < nodes.length; i++) {
	      var ele = nodes[i];
	      var degree = ele[degreeFn](includeLoops);
	      if (degree !== undefined && (ret === undefined || callback(degree, ret))) {
	        ret = degree;
	      }
	    }

	    return ret;
	  };
	}

	util.extend(elesfn, {
	  minDegree: defineDegreeBoundsFunction('degree', function (degree, min) {
	    return degree < min;
	  }),

	  maxDegree: defineDegreeBoundsFunction('degree', function (degree, max) {
	    return degree > max;
	  }),

	  minIndegree: defineDegreeBoundsFunction('indegree', function (degree, min) {
	    return degree < min;
	  }),

	  maxIndegree: defineDegreeBoundsFunction('indegree', function (degree, max) {
	    return degree > max;
	  }),

	  minOutdegree: defineDegreeBoundsFunction('outdegree', function (degree, min) {
	    return degree < min;
	  }),

	  maxOutdegree: defineDegreeBoundsFunction('outdegree', function (degree, max) {
	    return degree > max;
	  })
	});

	util.extend(elesfn, {
	  totalDegree: function totalDegree(includeLoops) {
	    var total = 0;
	    var nodes = this.nodes();

	    for (var i = 0; i < nodes.length; i++) {
	      total += nodes[i].degree(includeLoops);
	    }

	    return total;
	  }
	});

	module.exports = elesfn;

	/***/ }),
	/* 56 */
	/***/ (function(module, exports, __webpack_require__) {


	var util = __webpack_require__(1);
	var position = __webpack_require__(57);
	var bounds = __webpack_require__(58);
	var widthHeight = __webpack_require__(59);
	var edgePoints = __webpack_require__(60);

	module.exports = util.assign({}, position, bounds, widthHeight, edgePoints);

	/***/ }),
	/* 57 */
	/***/ (function(module, exports, __webpack_require__) {


	var define = __webpack_require__(4);
	var is = __webpack_require__(0);
	var math = __webpack_require__(2);
	var fn = void 0,
	    elesfn = void 0;

	var beforePositionSet = function beforePositionSet(eles, newPos) {
	  for (var i = 0; i < eles.length; i++) {
	    var ele = eles[i];

	    if (ele.isParent() && !ele.locked()) {
	      var oldPos = ele._private.position;
	      var delta = {
	        x: newPos.x - oldPos.x,
	        y: newPos.y - oldPos.y
	      };

	      eles.children().shift(delta);
	    }
	  }
	};

	fn = elesfn = {

	  position: define.data({
	    field: 'position',
	    bindingEvent: 'position',
	    allowBinding: true,
	    allowSetting: true,
	    settingEvent: 'position',
	    settingTriggersEvent: true,
	    triggerFnName: 'emitAndNotify',
	    allowGetting: true,
	    validKeys: ['x', 'y'],
	    beforeGet: function beforeGet(ele) {
	      ele.updateCompoundBounds();
	    },
	    beforeSet: beforePositionSet,
	    onSet: function onSet(eles) {
	      eles.dirtyCompoundBoundsCache();
	    },
	    canSet: function canSet(ele) {
	      return !ele.locked();
	    }
	  }),

	  // position but no notification to renderer
	  silentPosition: define.data({
	    field: 'position',
	    bindingEvent: 'position',
	    allowBinding: false,
	    allowSetting: true,
	    settingEvent: 'position',
	    settingTriggersEvent: false,
	    triggerFnName: 'trigger',
	    allowGetting: false,
	    validKeys: ['x', 'y'],
	    beforeSet: beforePositionSet,
	    onSet: function onSet(eles) {
	      eles.dirtyCompoundBoundsCache();
	    },
	    canSet: function canSet(ele) {
	      return !ele.locked();
	    }
	  }),

	  positions: function positions(pos, silent) {
	    if (is.plainObject(pos)) {
	      if (silent) {
	        this.silentPosition(pos);
	      } else {
	        this.position(pos);
	      }
	    } else if (is.fn(pos)) {
	      var _fn = pos;
	      var cy = this.cy();

	      cy.startBatch();

	      for (var i = 0; i < this.length; i++) {
	        var ele = this[i];
	        var _pos = void 0;

	        if (_pos = _fn(ele, i)) {
	          if (silent) {
	            ele.silentPosition(_pos);
	          } else {
	            ele.position(_pos);
	          }
	        }
	      }

	      cy.endBatch();
	    }

	    return this; // chaining
	  },

	  silentPositions: function silentPositions(pos) {
	    return this.positions(pos, true);
	  },

	  shift: function shift(dim, val) {
	    var delta = void 0;

	    if (is.plainObject(dim)) {
	      delta = dim;
	    } else if (is.string(dim) && is.number(val)) {
	      delta = { x: 0, y: 0 };

	      delta[dim] = val;
	    }

	    if (delta != null) {
	      for (var i = 0; i < this.length; i++) {
	        var ele = this[i];
	        var pos = ele.position();

	        ele.position({
	          x: pos.x + delta.x,
	          y: pos.y + delta.y
	        });
	      }
	    }

	    return this;
	  },

	  // get/set the rendered (i.e. on screen) positon of the element
	  renderedPosition: function renderedPosition(dim, val) {
	    var ele = this[0];
	    var cy = this.cy();
	    var zoom = cy.zoom();
	    var pan = cy.pan();
	    var rpos = is.plainObject(dim) ? dim : undefined;
	    var setting = rpos !== undefined || val !== undefined && is.string(dim);

	    if (ele && ele.isNode()) {
	      // must have an element and must be a node to return position
	      if (setting) {
	        for (var i = 0; i < this.length; i++) {
	          var _ele = this[i];

	          if (val !== undefined) {
	            // set one dimension
	            _ele.position(dim, (val - pan[dim]) / zoom);
	          } else if (rpos !== undefined) {
	            // set whole position
	            _ele.position(math.renderedToModelPosition(rpos, zoom, pan));
	          }
	        }
	      } else {
	        // getting
	        var pos = ele.position();
	        rpos = math.modelToRenderedPosition(pos, zoom, pan);

	        if (dim === undefined) {
	          // then return the whole rendered position
	          return rpos;
	        } else {
	          // then return the specified dimension
	          return rpos[dim];
	        }
	      }
	    } else if (!setting) {
	      return undefined; // for empty collection case
	    }

	    return this; // chaining
	  },

	  // get/set the position relative to the parent
	  relativePosition: function relativePosition(dim, val) {
	    var ele = this[0];
	    var cy = this.cy();
	    var ppos = is.plainObject(dim) ? dim : undefined;
	    var setting = ppos !== undefined || val !== undefined && is.string(dim);
	    var hasCompoundNodes = cy.hasCompoundNodes();

	    if (ele && ele.isNode()) {
	      // must have an element and must be a node to return position
	      if (setting) {
	        for (var i = 0; i < this.length; i++) {
	          var _ele2 = this[i];
	          var parent = hasCompoundNodes ? _ele2.parent() : null;
	          var hasParent = parent && parent.length > 0;
	          var relativeToParent = hasParent;

	          if (hasParent) {
	            parent = parent[0];
	          }

	          var origin = relativeToParent ? parent.position() : { x: 0, y: 0 };

	          if (val !== undefined) {
	            // set one dimension
	            _ele2.position(dim, val + origin[dim]);
	          } else if (ppos !== undefined) {
	            // set whole position
	            _ele2.position({
	              x: ppos.x + origin.x,
	              y: ppos.y + origin.y
	            });
	          }
	        }
	      } else {
	        // getting
	        var pos = ele.position();
	        var _parent = hasCompoundNodes ? ele.parent() : null;
	        var _hasParent = _parent && _parent.length > 0;
	        var _relativeToParent = _hasParent;

	        if (_hasParent) {
	          _parent = _parent[0];
	        }

	        var _origin = _relativeToParent ? _parent.position() : { x: 0, y: 0 };

	        ppos = {
	          x: pos.x - _origin.x,
	          y: pos.y - _origin.y
	        };

	        if (dim === undefined) {
	          // then return the whole rendered position
	          return ppos;
	        } else {
	          // then return the specified dimension
	          return ppos[dim];
	        }
	      }
	    } else if (!setting) {
	      return undefined; // for empty collection case
	    }

	    return this; // chaining
	  }
	};

	// aliases
	fn.modelPosition = fn.point = fn.position;
	fn.modelPositions = fn.points = fn.positions;
	fn.renderedPoint = fn.renderedPosition;
	fn.relativePoint = fn.relativePosition;

	module.exports = elesfn;

	/***/ }),
	/* 58 */
	/***/ (function(module, exports, __webpack_require__) {


	var is = __webpack_require__(0);
	var util = __webpack_require__(1);
	var math = __webpack_require__(2);
	var fn = void 0,
	    elesfn = void 0;

	fn = elesfn = {};

	elesfn.renderedBoundingBox = function (options) {
	  var bb = this.boundingBox(options);
	  var cy = this.cy();
	  var zoom = cy.zoom();
	  var pan = cy.pan();

	  var x1 = bb.x1 * zoom + pan.x;
	  var x2 = bb.x2 * zoom + pan.x;
	  var y1 = bb.y1 * zoom + pan.y;
	  var y2 = bb.y2 * zoom + pan.y;

	  return {
	    x1: x1,
	    x2: x2,
	    y1: y1,
	    y2: y2,
	    w: x2 - x1,
	    h: y2 - y1
	  };
	};

	elesfn.dirtyCompoundBoundsCache = function () {
	  var cy = this.cy();

	  if (!cy.styleEnabled() || !cy.hasCompoundNodes()) {
	    return this;
	  }

	  this.forEachUp(function (ele) {
	    ele._private.compoundBoundsClean = false;

	    if (ele.isParent()) {
	      ele.emit('bounds');
	    }
	  });

	  return this;
	};

	elesfn.updateCompoundBounds = function () {
	  var cy = this.cy();

	  // save cycles for non compound graphs or when style disabled
	  if (!cy.styleEnabled() || !cy.hasCompoundNodes()) {
	    return this;
	  }

	  // save cycles when batching -- but bounds will be stale (or not exist yet)
	  if (cy.batching()) {
	    return this;
	  }

	  function update(parent) {
	    if (!parent.isParent()) {
	      return;
	    }

	    var _p = parent._private;
	    var children = parent.children();
	    var includeLabels = parent.pstyle('compound-sizing-wrt-labels').value === 'include';

	    var min = {
	      width: {
	        val: parent.pstyle('min-width').pfValue,
	        left: parent.pstyle('min-width-bias-left'),
	        right: parent.pstyle('min-width-bias-right')
	      },
	      height: {
	        val: parent.pstyle('min-height').pfValue,
	        top: parent.pstyle('min-height-bias-top'),
	        bottom: parent.pstyle('min-height-bias-bottom')
	      }
	    };

	    var bb = children.boundingBox({
	      includeLabels: includeLabels,
	      includeOverlays: false,

	      // updating the compound bounds happens outside of the regular
	      // cache cycle (i.e. before fired events)
	      useCache: false
	    });
	    var pos = _p.position;

	    // if children take up zero area then keep position and fall back on stylesheet w/h
	    if (bb.w === 0 || bb.h === 0) {
	      bb = {
	        w: parent.pstyle('width').pfValue,
	        h: parent.pstyle('height').pfValue
	      };

	      bb.x1 = pos.x - bb.w / 2;
	      bb.x2 = pos.x + bb.w / 2;
	      bb.y1 = pos.y - bb.h / 2;
	      bb.y2 = pos.y + bb.h / 2;
	    }

	    function computeBiasValues(propDiff, propBias, propBiasComplement) {
	      var biasDiff = 0;
	      var biasComplementDiff = 0;
	      var biasTotal = propBias + propBiasComplement;

	      if (propDiff > 0 && biasTotal > 0) {
	        biasDiff = propBias / biasTotal * propDiff;
	        biasComplementDiff = propBiasComplement / biasTotal * propDiff;
	      }
	      return {
	        biasDiff: biasDiff,
	        biasComplementDiff: biasComplementDiff
	      };
	    }

	    function computePaddingValues(width, height, paddingObject, relativeTo) {
	      // Assuming percentage is number from 0 to 1
	      if (paddingObject.units === '%') {
	        switch (relativeTo) {
	          case 'width':
	            return width > 0 ? paddingObject.pfValue * width : 0;
	          case 'height':
	            return height > 0 ? paddingObject.pfValue * height : 0;
	          case 'average':
	            return width > 0 && height > 0 ? paddingObject.pfValue * (width + height) / 2 : 0;
	          case 'min':
	            return width > 0 && height > 0 ? width > height ? paddingObject.pfValue * height : paddingObject.pfValue * width : 0;
	          case 'max':
	            return width > 0 && height > 0 ? width > height ? paddingObject.pfValue * width : paddingObject.pfValue * height : 0;
	          default:
	            return 0;
	        }
	      } else if (paddingObject.units === 'px') {
	        return paddingObject.pfValue;
	      } else {
	        return 0;
	      }
	    }

	    var leftVal = min.width.left.value;
	    if (min.width.left.units === 'px' && min.width.val > 0) {
	      leftVal = leftVal * 100 / min.width.val;
	    }
	    var rightVal = min.width.right.value;
	    if (min.width.right.units === 'px' && min.width.val > 0) {
	      rightVal = rightVal * 100 / min.width.val;
	    }

	    var topVal = min.height.top.value;
	    if (min.height.top.units === 'px' && min.height.val > 0) {
	      topVal = topVal * 100 / min.height.val;
	    }

	    var bottomVal = min.height.bottom.value;
	    if (min.height.bottom.units === 'px' && min.height.val > 0) {
	      bottomVal = bottomVal * 100 / min.height.val;
	    }

	    var widthBiasDiffs = computeBiasValues(min.width.val - bb.w, leftVal, rightVal);
	    var diffLeft = widthBiasDiffs.biasDiff;
	    var diffRight = widthBiasDiffs.biasComplementDiff;

	    var heightBiasDiffs = computeBiasValues(min.height.val - bb.h, topVal, bottomVal);
	    var diffTop = heightBiasDiffs.biasDiff;
	    var diffBottom = heightBiasDiffs.biasComplementDiff;

	    _p.autoPadding = computePaddingValues(bb.w, bb.h, parent.pstyle('padding'), parent.pstyle('padding-relative-to').value);

	    _p.autoWidth = Math.max(bb.w, min.width.val);
	    pos.x = (-diffLeft + bb.x1 + bb.x2 + diffRight) / 2;

	    _p.autoHeight = Math.max(bb.h, min.height.val);
	    pos.y = (-diffTop + bb.y1 + bb.y2 + diffBottom) / 2;
	  }

	  for (var i = 0; i < this.length; i++) {
	    var ele = this[i];
	    var _p = ele._private;

	    if (!_p.compoundBoundsClean) {
	      update(ele);

	      if (!cy._private.batchingStyle) {
	        _p.compoundBoundsClean = true;
	      }
	    }
	  }

	  return this;
	};

	var noninf = function noninf(x) {
	  if (x === Infinity || x === -Infinity) {
	    return 0;
	  }

	  return x;
	};

	var updateBounds = function updateBounds(b, x1, y1, x2, y2) {
	  // don't update with zero area boxes
	  if (x2 - x1 === 0 || y2 - y1 === 0) {
	    return;
	  }

	  // don't update with null dim
	  if (x1 == null || y1 == null || x2 == null || y2 == null) {
	    return;
	  }

	  b.x1 = x1 < b.x1 ? x1 : b.x1;
	  b.x2 = x2 > b.x2 ? x2 : b.x2;
	  b.y1 = y1 < b.y1 ? y1 : b.y1;
	  b.y2 = y2 > b.y2 ? y2 : b.y2;
	};

	var updateBoundsFromBox = function updateBoundsFromBox(b, b2) {
	  return updateBounds(b, b2.x1, b2.y1, b2.x2, b2.y2);
	};

	var prefixedProperty = function prefixedProperty(obj, field, prefix) {
	  return util.getPrefixedProperty(obj, field, prefix);
	};

	var updateBoundsFromArrow = function updateBoundsFromArrow(bounds, ele, prefix) {
	  if (ele.cy().headless()) {
	    return;
	  }

	  var _p = ele._private;
	  var rstyle = _p.rstyle;
	  var halfArW = rstyle.arrowWidth / 2;
	  var arrowType = ele.pstyle(prefix + '-arrow-shape').value;
	  var x = void 0;
	  var y = void 0;

	  if (arrowType !== 'none') {
	    if (prefix === 'source') {
	      x = rstyle.srcX;
	      y = rstyle.srcY;
	    } else if (prefix === 'target') {
	      x = rstyle.tgtX;
	      y = rstyle.tgtY;
	    } else {
	      x = rstyle.midX;
	      y = rstyle.midY;
	    }

	    updateBounds(bounds, x - halfArW, y - halfArW, x + halfArW, y + halfArW);
	  }
	};

	var updateBoundsFromLabel = function updateBoundsFromLabel(bounds, ele, prefix) {
	  if (ele.cy().headless()) {
	    return;
	  }

	  var prefixDash = void 0;

	  if (prefix) {
	    prefixDash = prefix + '-';
	  } else {
	    prefixDash = '';
	  }

	  var _p = ele._private;
	  var rstyle = _p.rstyle;
	  var label = ele.pstyle(prefixDash + 'label').strValue;

	  if (label) {
	    var halign = ele.pstyle('text-halign');
	    var valign = ele.pstyle('text-valign');
	    var labelWidth = prefixedProperty(rstyle, 'labelWidth', prefix);
	    var labelHeight = prefixedProperty(rstyle, 'labelHeight', prefix);
	    var labelX = prefixedProperty(rstyle, 'labelX', prefix);
	    var labelY = prefixedProperty(rstyle, 'labelY', prefix);
	    var marginX = ele.pstyle(prefixDash + 'text-margin-x').pfValue;
	    var marginY = ele.pstyle(prefixDash + 'text-margin-y').pfValue;
	    var isEdge = ele.isEdge();
	    var rotation = ele.pstyle(prefixDash + 'text-rotation');
	    var outlineWidth = ele.pstyle('text-outline-width').pfValue;
	    var borderWidth = ele.pstyle('text-border-width').pfValue;
	    var halfBorderWidth = borderWidth / 2;
	    var padding = ele.pstyle('text-background-padding').pfValue;

	    var lh = labelHeight + 2 * padding;
	    var lw = labelWidth + 2 * padding;
	    var lw_2 = lw / 2;
	    var lh_2 = lh / 2;
	    var lx1 = void 0,
	        lx2 = void 0,
	        ly1 = void 0,
	        ly2 = void 0;

	    if (isEdge) {
	      lx1 = labelX - lw_2;
	      lx2 = labelX + lw_2;
	      ly1 = labelY - lh_2;
	      ly2 = labelY + lh_2;
	    } else {
	      switch (halign.value) {
	        case 'left':
	          lx1 = labelX - lw;
	          lx2 = labelX;
	          break;

	        case 'center':
	          lx1 = labelX - lw_2;
	          lx2 = labelX + lw_2;
	          break;

	        case 'right':
	          lx1 = labelX;
	          lx2 = labelX + lw;
	          break;
	      }

	      switch (valign.value) {
	        case 'top':
	          ly1 = labelY - lh;
	          ly2 = labelY;
	          break;

	        case 'center':
	          ly1 = labelY - lh_2;
	          ly2 = labelY + lh_2;
	          break;

	        case 'bottom':
	          ly1 = labelY;
	          ly2 = labelY + lh;
	          break;
	      }
	    }

	    var isAutorotate = isEdge && rotation.strValue === 'autorotate';
	    var isPfValue = rotation.pfValue != null && rotation.pfValue !== 0;

	    if (isAutorotate || isPfValue) {
	      var theta = isAutorotate ? prefixedProperty(_p.rstyle, 'labelAngle', prefix) : rotation.pfValue;
	      var cos = Math.cos(theta);
	      var sin = Math.sin(theta);

	      var rotate = function rotate(x, y) {
	        x = x - labelX;
	        y = y - labelY;

	        return {
	          x: x * cos - y * sin + labelX,
	          y: x * sin + y * cos + labelY
	        };
	      };

	      var px1y1 = rotate(lx1, ly1);
	      var px1y2 = rotate(lx1, ly2);
	      var px2y1 = rotate(lx2, ly1);
	      var px2y2 = rotate(lx2, ly2);

	      lx1 = Math.min(px1y1.x, px1y2.x, px2y1.x, px2y2.x);
	      lx2 = Math.max(px1y1.x, px1y2.x, px2y1.x, px2y2.x);
	      ly1 = Math.min(px1y1.y, px1y2.y, px2y1.y, px2y2.y);
	      ly2 = Math.max(px1y1.y, px1y2.y, px2y1.y, px2y2.y);
	    }

	    lx1 += marginX - Math.max(outlineWidth, halfBorderWidth);
	    lx2 += marginX + Math.max(outlineWidth, halfBorderWidth);
	    ly1 += marginY - Math.max(outlineWidth, halfBorderWidth);
	    ly2 += marginY + Math.max(outlineWidth, halfBorderWidth);

	    updateBounds(bounds, lx1, ly1, lx2, ly2);
	  }

	  return bounds;
	};

	// get the bounding box of the elements (in raw model position)
	var boundingBoxImpl = function boundingBoxImpl(ele, options) {
	  var cy = ele._private.cy;
	  var styleEnabled = cy.styleEnabled();
	  var headless = cy.headless();

	  var bounds = {
	    x1: Infinity,
	    y1: Infinity,
	    x2: -Infinity,
	    y2: -Infinity
	  };

	  var _p = ele._private;
	  var display = styleEnabled ? ele.pstyle('display').value : 'element';
	  var isNode = ele.isNode();
	  var isEdge = ele.isEdge();
	  var ex1 = void 0,
	      ex2 = void 0,
	      ey1 = void 0,
	      ey2 = void 0; // extrema of body / lines
	  var x = void 0,
	      y = void 0; // node pos
	  var displayed = display !== 'none';

	  if (displayed) {
	    var overlayOpacity = 0;
	    var overlayPadding = 0;

	    if (styleEnabled && options.includeOverlays) {
	      overlayOpacity = ele.pstyle('overlay-opacity').value;

	      if (overlayOpacity !== 0) {
	        overlayPadding = ele.pstyle('overlay-padding').value;
	      }
	    }

	    var w = 0;
	    var wHalf = 0;

	    if (styleEnabled) {
	      w = ele.pstyle('width').pfValue;
	      wHalf = w / 2;
	    }

	    if (isNode && options.includeNodes) {
	      var pos = ele.position();
	      x = pos.x;
	      y = pos.y;
	      var _w = ele.outerWidth();
	      var halfW = _w / 2;
	      var h = ele.outerHeight();
	      var halfH = h / 2;

	      // handle node dimensions
	      /////////////////////////

	      ex1 = x - halfW - overlayPadding;
	      ex2 = x + halfW + overlayPadding;
	      ey1 = y - halfH - overlayPadding;
	      ey2 = y + halfH + overlayPadding;

	      updateBounds(bounds, ex1, ey1, ex2, ey2);
	    } else if (isEdge && options.includeEdges) {
	      var rstyle = _p.rstyle || {};

	      // handle edge dimensions (rough box estimate)
	      //////////////////////////////////////////////
	      if (styleEnabled && !headless) {
	        ex1 = Math.min(rstyle.srcX, rstyle.midX, rstyle.tgtX);
	        ex2 = Math.max(rstyle.srcX, rstyle.midX, rstyle.tgtX);
	        ey1 = Math.min(rstyle.srcY, rstyle.midY, rstyle.tgtY);
	        ey2 = Math.max(rstyle.srcY, rstyle.midY, rstyle.tgtY);

	        // take into account edge width
	        ex1 -= wHalf;
	        ex2 += wHalf;
	        ey1 -= wHalf;
	        ey2 += wHalf;

	        updateBounds(bounds, ex1, ey1, ex2, ey2);
	      }

	      // precise haystacks
	      ////////////////////
	      if (styleEnabled && !headless && ele.pstyle('curve-style').strValue === 'haystack') {
	        var hpts = rstyle.haystackPts || [];

	        ex1 = hpts[0].x;
	        ey1 = hpts[0].y;
	        ex2 = hpts[1].x;
	        ey2 = hpts[1].y;

	        if (ex1 > ex2) {
	          var temp = ex1;
	          ex1 = ex2;
	          ex2 = temp;
	        }

	        if (ey1 > ey2) {
	          var _temp = ey1;
	          ey1 = ey2;
	          ey2 = _temp;
	        }

	        updateBounds(bounds, ex1 - wHalf, ey1 - wHalf, ex2 + wHalf, ey2 + wHalf);

	        // handle points along edge
	        ///////////////////////////
	      } else {
	        var pts = rstyle.bezierPts || rstyle.linePts || [];

	        for (var j = 0; j < pts.length; j++) {
	          var pt = pts[j];

	          ex1 = pt.x - wHalf;
	          ex2 = pt.x + wHalf;
	          ey1 = pt.y - wHalf;
	          ey2 = pt.y + wHalf;

	          updateBounds(bounds, ex1, ey1, ex2, ey2);
	        }

	        // fallback on source and target positions
	        //////////////////////////////////////////
	        if (pts.length === 0) {
	          var n1 = ele.source();
	          var n1pos = n1.position();

	          var n2 = ele.target();
	          var n2pos = n2.position();

	          ex1 = n1pos.x;
	          ex2 = n2pos.x;
	          ey1 = n1pos.y;
	          ey2 = n2pos.y;

	          if (ex1 > ex2) {
	            var _temp2 = ex1;
	            ex1 = ex2;
	            ex2 = _temp2;
	          }

	          if (ey1 > ey2) {
	            var _temp3 = ey1;
	            ey1 = ey2;
	            ey2 = _temp3;
	          }

	          // take into account edge width
	          ex1 -= wHalf;
	          ex2 += wHalf;
	          ey1 -= wHalf;
	          ey2 += wHalf;

	          updateBounds(bounds, ex1, ey1, ex2, ey2);
	        }
	      }
	    } // edges


	    // handle edge arrow size
	    /////////////////////////

	    if (styleEnabled && options.includeEdges && isEdge) {
	      updateBoundsFromArrow(bounds, ele, 'mid-source', options);
	      updateBoundsFromArrow(bounds, ele, 'mid-target', options);
	      updateBoundsFromArrow(bounds, ele, 'source', options);
	      updateBoundsFromArrow(bounds, ele, 'target', options);
	    }

	    // ghost
	    ////////

	    if (styleEnabled) {
	      var ghost = ele.pstyle('ghost').value === 'yes';

	      if (ghost) {
	        var gx = ele.pstyle('ghost-offset-x').pfValue;
	        var gy = ele.pstyle('ghost-offset-y').pfValue;

	        updateBounds(bounds, bounds.x1 + gx, bounds.y1 + gy, bounds.x2 + gx, bounds.y2 + gy);
	      }
	    }

	    // overlay
	    //////////

	    if (styleEnabled) {

	      ex1 = bounds.x1;
	      ex2 = bounds.x2;
	      ey1 = bounds.y1;
	      ey2 = bounds.y2;

	      updateBounds(bounds, ex1 - overlayPadding, ey1 - overlayPadding, ex2 + overlayPadding, ey2 + overlayPadding);
	    }

	    // handle label dimensions
	    //////////////////////////

	    if (styleEnabled && options.includeLabels) {
	      updateBoundsFromLabel(bounds, ele, null, options);

	      if (isEdge) {
	        updateBoundsFromLabel(bounds, ele, 'source', options);
	        updateBoundsFromLabel(bounds, ele, 'target', options);
	      }
	    } // style enabled for labels
	  } // if displayed

	  bounds.x1 = noninf(bounds.x1);
	  bounds.y1 = noninf(bounds.y1);
	  bounds.x2 = noninf(bounds.x2);
	  bounds.y2 = noninf(bounds.y2);
	  bounds.w = noninf(bounds.x2 - bounds.x1);
	  bounds.h = noninf(bounds.y2 - bounds.y1);

	  // expand bounds by 1 because antialiasing can increase the visual/effective size by 1 on all sides
	  if (bounds.w > 0 && bounds.h > 0 && displayed) {
	    math.expandBoundingBox(bounds, 1);
	  }

	  return bounds;
	};

	var tf = function tf(val) {
	  if (val) {
	    return 't';
	  } else {
	    return 'f';
	  }
	};

	var getKey = function getKey(opts) {
	  var key = '';

	  key += tf(opts.incudeNodes);
	  key += tf(opts.includeEdges);
	  key += tf(opts.includeLabels);
	  key += tf(opts.includeOverlays);

	  return key;
	};

	var cachedBoundingBoxImpl = function cachedBoundingBoxImpl(ele, opts) {
	  var _p = ele._private;
	  var bb = void 0;
	  var headless = ele.cy().headless();
	  var key = opts === defBbOpts ? defBbOptsKey : getKey(opts);

	  if (!opts.useCache || headless || !_p.bbCache || !_p.bbCache[key]) {
	    bb = boundingBoxImpl(ele, opts);

	    if (!headless) {
	      _p.bbCache = _p.bbCache || {};
	      _p.bbCache[key] = bb;
	    }
	  } else {
	    bb = _p.bbCache[key];
	  }

	  return bb;
	};

	var defBbOpts = {
	  includeNodes: true,
	  includeEdges: true,
	  includeLabels: true,
	  includeOverlays: true,
	  useCache: true
	};

	var defBbOptsKey = getKey(defBbOpts);

	function filledBbOpts(options) {
	  return {
	    includeNodes: util.default(options.includeNodes, defBbOpts.includeNodes),
	    includeEdges: util.default(options.includeEdges, defBbOpts.includeEdges),
	    includeLabels: util.default(options.includeLabels, defBbOpts.includeLabels),
	    includeOverlays: util.default(options.includeOverlays, defBbOpts.includeOverlays),
	    useCache: util.default(options.useCache, defBbOpts.useCache)
	  };
	}

	elesfn.boundingBox = function (options) {
	  // the main usecase is ele.boundingBox() for a single element with no/def options
	  // specified s.t. the cache is used, so check for this case to make it faster by
	  // avoiding the overhead of the rest of the function
	  if (this.length === 1 && this[0]._private.bbCache && (options === undefined || options.useCache === undefined || options.useCache === true)) {
	    if (options === undefined) {
	      options = defBbOpts;
	    } else {
	      options = filledBbOpts(options);
	    }

	    return cachedBoundingBoxImpl(this[0], options);
	  }

	  var bounds = {
	    x1: Infinity,
	    y1: Infinity,
	    x2: -Infinity,
	    y2: -Infinity
	  };

	  options = options || util.staticEmptyObject();

	  var opts = filledBbOpts(options);

	  var eles = this;
	  var cy = eles.cy();
	  var styleEnabled = cy.styleEnabled();

	  if (styleEnabled) {
	    this.recalculateRenderedStyle(opts.useCache);
	  }

	  this.updateCompoundBounds();

	  var updatedEdge = {}; // use to avoid duplicated edge updates

	  for (var i = 0; i < eles.length; i++) {
	    var ele = eles[i];

	    if (styleEnabled && ele.isEdge() && ele.pstyle('curve-style').strValue === 'bezier' && !updatedEdge[ele.id()]) {
	      var edges = ele.parallelEdges();

	      for (var j = 0; j < edges.length; j++) {
	        // make all as updated
	        updatedEdge[edges[j].id()] = true;
	      }

	      edges.recalculateRenderedStyle(opts.useCache); // n.b. ele.parallelEdges() single is cached
	    }

	    updateBoundsFromBox(bounds, cachedBoundingBoxImpl(ele, opts));
	  }

	  bounds.x1 = noninf(bounds.x1);
	  bounds.y1 = noninf(bounds.y1);
	  bounds.x2 = noninf(bounds.x2);
	  bounds.y2 = noninf(bounds.y2);
	  bounds.w = noninf(bounds.x2 - bounds.x1);
	  bounds.h = noninf(bounds.y2 - bounds.y1);

	  return bounds;
	};

	// private helper to get bounding box for custom node positions
	// - good for perf in certain cases but currently requires dirtying the rendered style
	// - would be better to not modify the nodes but the nodes are read directly everywhere in the renderer...
	// - try to use for only things like discrete layouts where the node position would change anyway
	elesfn.boundingBoxAt = function (fn) {
	  var nodes = this.nodes();

	  if (is.plainObject(fn)) {
	    var obj = fn;

	    fn = function fn() {
	      return obj;
	    };
	  }

	  // save the current position and set the new one, per node
	  for (var i = 0; i < nodes.length; i++) {
	    var n = nodes[i];
	    var _p = n._private;
	    var pos = _p.position;
	    var newPos = fn.call(n, n, i);

	    _p.bbAtOldPos = { x: pos.x, y: pos.y };

	    if (newPos) {
	      pos.x = newPos.x;
	      pos.y = newPos.y;
	    }
	  }

	  this.emit('dirty'); // let the renderer know we've manually dirtied rendered dim calcs

	  nodes.dirtyCompoundBoundsCache().updateCompoundBounds();

	  var bb = this.boundingBox({ useCache: false });

	  // restore the original position, per node
	  for (var _i = 0; _i < nodes.length; _i++) {
	    var _n = nodes[_i];
	    var _p2 = _n._private;
	    var _pos = _n._private.position;
	    var old = _p2.bbAtOldPos;

	    _pos.x = old.x;
	    _pos.y = old.y;
	  }

	  nodes.dirtyCompoundBoundsCache();

	  this.emit('dirty'); // let the renderer know we've manually dirtied rendered dim calcs

	  return bb;
	};

	fn.boundingbox = fn.boundingBox;
	fn.renderedBoundingbox = fn.renderedBoundingBox;

	module.exports = elesfn;

	/***/ }),
	/* 59 */
	/***/ (function(module, exports, __webpack_require__) {


	var util = __webpack_require__(1);
	var fn = void 0,
	    elesfn = void 0;

	fn = elesfn = {};

	var defineDimFns = function defineDimFns(opts) {
	  opts.uppercaseName = util.capitalize(opts.name);
	  opts.autoName = 'auto' + opts.uppercaseName;
	  opts.labelName = 'label' + opts.uppercaseName;
	  opts.outerName = 'outer' + opts.uppercaseName;
	  opts.uppercaseOuterName = util.capitalize(opts.outerName);

	  fn[opts.name] = function dimImpl() {
	    var ele = this[0];
	    var _p = ele._private;
	    var cy = _p.cy;
	    var styleEnabled = cy._private.styleEnabled;

	    if (ele) {
	      if (styleEnabled) {
	        if (ele.isParent()) {
	          ele.updateCompoundBounds();

	          return _p[opts.autoName] || 0;
	        }

	        var d = ele.pstyle(opts.name);

	        switch (d.strValue) {
	          case 'label':
	            ele.recalculateRenderedStyle();

	            return _p.rstyle[opts.labelName] || 0;

	          default:
	            return d.pfValue;
	        }
	      } else {
	        return 1;
	      }
	    }
	  };

	  fn['outer' + opts.uppercaseName] = function outerDimImpl() {
	    var ele = this[0];
	    var _p = ele._private;
	    var cy = _p.cy;
	    var styleEnabled = cy._private.styleEnabled;

	    if (ele) {
	      if (styleEnabled) {
	        var dim = ele[opts.name]();
	        var border = ele.pstyle('border-width').pfValue; // n.b. 1/2 each side
	        var padding = 2 * ele.padding();

	        return dim + border + padding;
	      } else {
	        return 1;
	      }
	    }
	  };

	  fn['rendered' + opts.uppercaseName] = function renderedDimImpl() {
	    var ele = this[0];

	    if (ele) {
	      var d = ele[opts.name]();
	      return d * this.cy().zoom();
	    }
	  };

	  fn['rendered' + opts.uppercaseOuterName] = function renderedOuterDimImpl() {
	    var ele = this[0];

	    if (ele) {
	      var od = ele[opts.outerName]();
	      return od * this.cy().zoom();
	    }
	  };
	};

	defineDimFns({
	  name: 'width'
	});

	defineDimFns({
	  name: 'height'
	});

	elesfn.padding = function () {
	  var ele = this[0];
	  var _p = ele._private;
	  if (ele.isParent()) {
	    ele.updateCompoundBounds();

	    if (_p.autoPadding !== undefined) {
	      return _p.autoPadding;
	    } else {
	      return ele.pstyle('padding').pfValue;
	    }
	  } else {
	    return ele.pstyle('padding').pfValue;
	  }
	};

	module.exports = elesfn;

	/***/ }),
	/* 60 */
	/***/ (function(module, exports, __webpack_require__) {


	var ifEdge = function ifEdge(self, then) {
	  if (self.isEdge()) {
	    return then(self.renderer());
	  }
	};

	module.exports = {
	  controlPoints: function controlPoints() {
	    var _this = this;

	    return ifEdge(this, function (renderer) {
	      return renderer.getControlPoints(_this);
	    });
	  },
	  segmentPoints: function segmentPoints() {
	    var _this2 = this;

	    return ifEdge(this, function (renderer) {
	      return renderer.getSegmentPoints(_this2);
	    });
	  },
	  sourceEndpoint: function sourceEndpoint() {
	    var _this3 = this;

	    return ifEdge(this, function (renderer) {
	      return renderer.getSourceEndpoint(_this3);
	    });
	  },
	  targetEndpoint: function targetEndpoint() {
	    var _this4 = this;

	    return ifEdge(this, function (renderer) {
	      return renderer.getTargetEndpoint(_this4);
	    });
	  },
	  midpoint: function midpoint() {
	    var _this5 = this;

	    return ifEdge(this, function (renderer) {
	      return renderer.getEdgeMidpoint(_this5);
	    });
	  }
	};

	/***/ }),
	/* 61 */
	/***/ (function(module, exports, __webpack_require__) {


	var Emitter = __webpack_require__(11);
	var define = __webpack_require__(4);
	var is = __webpack_require__(0);
	var util = __webpack_require__(1);
	var Selector = __webpack_require__(6);

	var emitterOptions = {
	  qualifierCompare: function qualifierCompare(selector1, selector2) {
	    if (selector1 == null || selector2 == null) {
	      return selector1 == null && selector2 == null;
	    } else {
	      return selector1.sameText(selector2);
	    }
	  },
	  eventMatches: function eventMatches(ele, listener, eventObj) {
	    var selector = listener.qualifier;

	    if (selector != null) {
	      return ele !== eventObj.target && is.element(eventObj.target) && selector.matches(eventObj.target);
	    }

	    return true;
	  },
	  eventFields: function eventFields(ele) {
	    return {
	      cy: ele.cy(),
	      target: ele
	    };
	  },
	  callbackContext: function callbackContext(ele, listener, eventObj) {
	    return listener.qualifier != null ? eventObj.target : ele;
	  },
	  beforeEmit: function beforeEmit(context, listener /*, eventObj*/) {
	    if (listener.conf && listener.conf.once) {
	      listener.conf.onceCollection.removeListener(listener.event, listener.qualifier, listener.callback);
	    }
	  },
	  bubble: function bubble() {
	    return true;
	  },
	  parent: function parent(ele) {
	    return ele.isChild() ? ele.parent() : ele.cy();
	  }
	};

	var argSelector = function argSelector(arg) {
	  if (is.string(arg)) {
	    return new Selector(arg);
	  } else {
	    return arg;
	  }
	};

	var elesfn = {
	  createEmitter: function createEmitter() {
	    for (var i = 0; i < this.length; i++) {
	      var ele = this[i];
	      var _p = ele._private;

	      if (!_p.emitter) {
	        _p.emitter = new Emitter(util.assign({
	          context: ele
	        }, emitterOptions));
	      }
	    }

	    return this;
	  },

	  emitter: function emitter() {
	    return this._private.emitter;
	  },

	  on: function on(events, selector, callback) {
	    for (var i = 0; i < this.length; i++) {
	      var ele = this[i];

	      ele.emitter().on(events, argSelector(selector), callback);
	    }

	    return this;
	  },

	  removeListener: function removeListener(events, selector, callback) {
	    for (var i = 0; i < this.length; i++) {
	      var ele = this[i];

	      ele.emitter().removeListener(events, argSelector(selector), callback);
	    }

	    return this;
	  },

	  one: function one(events, selector, callback) {
	    for (var i = 0; i < this.length; i++) {
	      var ele = this[i];

	      ele.emitter().one(events, argSelector(selector), callback);
	    }

	    return this;
	  },

	  once: function once(events, selector, callback) {
	    for (var i = 0; i < this.length; i++) {
	      var ele = this[i];

	      ele.emitter().on(events, argSelector(selector), callback, {
	        once: true,
	        onceCollection: this
	      });
	    }
	  },

	  emit: function emit(events, extraParams) {
	    for (var i = 0; i < this.length; i++) {
	      var ele = this[i];

	      ele.emitter().emit(events, extraParams);
	    }

	    return this;
	  },

	  emitAndNotify: function emitAndNotify(event, extraParams) {
	    // for internal use only
	    if (this.length === 0) {
	      return;
	    } // empty collections don't need to notify anything

	    // notify renderer
	    this.cy().notify({
	      type: event,
	      eles: this
	    });

	    this.emit(event, extraParams);

	    return this;
	  }
	};

	define.eventAliasesOn(elesfn);

	module.exports = elesfn;

	/***/ }),
	/* 62 */
	/***/ (function(module, exports, __webpack_require__) {


	var is = __webpack_require__(0);
	var Selector = __webpack_require__(6);

	var elesfn = {
	  nodes: function nodes(selector) {
	    return this.filter(function (ele) {
	      return ele.isNode();
	    }).filter(selector);
	  },

	  edges: function edges(selector) {
	    return this.filter(function (ele) {
	      return ele.isEdge();
	    }).filter(selector);
	  },

	  filter: function filter(_filter, thisArg) {
	    if (_filter === undefined) {
	      // check this first b/c it's the most common/performant case
	      return this;
	    } else if (is.string(_filter) || is.elementOrCollection(_filter)) {
	      return new Selector(_filter).filter(this);
	    } else if (is.fn(_filter)) {
	      var filterEles = this.spawn();
	      var eles = this;

	      for (var i = 0; i < eles.length; i++) {
	        var ele = eles[i];
	        var include = thisArg ? _filter.apply(thisArg, [ele, i, eles]) : _filter(ele, i, eles);

	        if (include) {
	          filterEles.merge(ele);
	        }
	      }

	      return filterEles;
	    }

	    return this.spawn(); // if not handled by above, give 'em an empty collection
	  },

	  not: function not(toRemove) {
	    if (!toRemove) {
	      return this;
	    } else {

	      if (is.string(toRemove)) {
	        toRemove = this.filter(toRemove);
	      }

	      var elements = [];
	      var rMap = toRemove._private.map;

	      for (var i = 0; i < this.length; i++) {
	        var element = this[i];

	        var remove = rMap.has(element.id());
	        if (!remove) {
	          elements.push(element);
	        }
	      }

	      return this.spawn(elements);
	    }
	  },

	  absoluteComplement: function absoluteComplement() {
	    var cy = this.cy();

	    return cy.mutableElements().not(this);
	  },

	  intersect: function intersect(other) {
	    // if a selector is specified, then filter by it instead
	    if (is.string(other)) {
	      var selector = other;
	      return this.filter(selector);
	    }

	    var elements = [];
	    var col1 = this;
	    var col2 = other;
	    var col1Smaller = this.length < other.length;
	    var map2 = col1Smaller ? col2._private.map : col1._private.map;
	    var col = col1Smaller ? col1 : col2;

	    for (var i = 0; i < col.length; i++) {
	      var id = col[i]._private.data.id;
	      var entry = map2.get(id);

	      if (entry) {
	        elements.push(entry.ele);
	      }
	    }

	    return this.spawn(elements);
	  },

	  xor: function xor(other) {
	    var cy = this._private.cy;

	    if (is.string(other)) {
	      other = cy.$(other);
	    }

	    var elements = [];
	    var col1 = this;
	    var col2 = other;

	    var add = function add(col, other) {
	      for (var i = 0; i < col.length; i++) {
	        var ele = col[i];
	        var id = ele._private.data.id;
	        var inOther = other.hasElementWithId(id);

	        if (!inOther) {
	          elements.push(ele);
	        }
	      }
	    };

	    add(col1, col2);
	    add(col2, col1);

	    return this.spawn(elements);
	  },

	  diff: function diff(other) {
	    var cy = this._private.cy;

	    if (is.string(other)) {
	      other = cy.$(other);
	    }

	    var left = [];
	    var right = [];
	    var both = [];
	    var col1 = this;
	    var col2 = other;

	    var add = function add(col, other, retEles) {

	      for (var i = 0; i < col.length; i++) {
	        var ele = col[i];
	        var id = ele._private.data.id;
	        var inOther = other.hasElementWithId(id);

	        if (inOther) {
	          both.push(ele);
	        } else {
	          retEles.push(ele);
	        }
	      }
	    };

	    add(col1, col2, left);
	    add(col2, col1, right);

	    return {
	      left: this.spawn(left, { unique: true }),
	      right: this.spawn(right, { unique: true }),
	      both: this.spawn(both, { unique: true })
	    };
	  },

	  add: function add(toAdd) {
	    var cy = this._private.cy;

	    if (!toAdd) {
	      return this;
	    }

	    if (is.string(toAdd)) {
	      var selector = toAdd;
	      toAdd = cy.mutableElements().filter(selector);
	    }

	    var elements = [];

	    for (var i = 0; i < this.length; i++) {
	      elements.push(this[i]);
	    }

	    var map = this._private.map;

	    for (var _i = 0; _i < toAdd.length; _i++) {

	      var add = !map.has(toAdd[_i].id());
	      if (add) {
	        elements.push(toAdd[_i]);
	      }
	    }

	    return this.spawn(elements);
	  },

	  // in place merge on calling collection
	  merge: function merge(toAdd) {
	    var _p = this._private;
	    var cy = _p.cy;

	    if (!toAdd) {
	      return this;
	    }

	    if (toAdd && is.string(toAdd)) {
	      var selector = toAdd;
	      toAdd = cy.mutableElements().filter(selector);
	    }

	    var map = _p.map;

	    for (var i = 0; i < toAdd.length; i++) {
	      var toAddEle = toAdd[i];
	      var id = toAddEle._private.data.id;
	      var add = !map.has(id);

	      if (add) {
	        var index = this.length++;

	        this[index] = toAddEle;

	        map.set(id, { ele: toAddEle, index: index });
	      } else {
	        // replace
	        var _index = map.get(id).index;

	        this[_index] = toAddEle;
	        map.set(id, { ele: toAddEle, index: _index });
	      }
	    }

	    return this; // chaining
	  },

	  // remove single ele in place in calling collection
	  unmergeOne: function unmergeOne(ele) {
	    ele = ele[0];

	    var _p = this._private;
	    var id = ele._private.data.id;
	    var map = _p.map;
	    var entry = map.get(id);

	    if (!entry) {
	      return this; // no need to remove
	    }

	    var i = entry.index;

	    // remove ele
	    this[i] = undefined;
	    map.delete(id);

	    var unmergedLastEle = i === this.length - 1;

	    // replace empty spot with last ele in collection
	    if (this.length > 1 && !unmergedLastEle) {
	      var lastEleI = this.length - 1;
	      var lastEle = this[lastEleI];
	      var lastEleId = lastEle._private.data.id;

	      this[lastEleI] = undefined;
	      this[i] = lastEle;
	      map.set(lastEleId, { ele: lastEle, index: i });
	    }

	    // the collection is now 1 ele smaller
	    this.length--;

	    return this;
	  },

	  // remove eles in place on calling collection
	  unmerge: function unmerge(toRemove) {
	    var cy = this._private.cy;

	    if (!toRemove) {
	      return this;
	    }

	    if (toRemove && is.string(toRemove)) {
	      var selector = toRemove;
	      toRemove = cy.mutableElements().filter(selector);
	    }

	    for (var i = 0; i < toRemove.length; i++) {
	      this.unmergeOne(toRemove[i]);
	    }

	    return this; // chaining
	  },

	  map: function map(mapFn, thisArg) {
	    var arr = [];
	    var eles = this;

	    for (var i = 0; i < eles.length; i++) {
	      var ele = eles[i];
	      var ret = thisArg ? mapFn.apply(thisArg, [ele, i, eles]) : mapFn(ele, i, eles);

	      arr.push(ret);
	    }

	    return arr;
	  },

	  reduce: function reduce(fn, initialValue) {
	    var val = initialValue;
	    var eles = this;

	    for (var i = 0; i < eles.length; i++) {
	      val = fn(val, eles[i], i, eles);
	    }

	    return val;
	  },

	  max: function max(valFn, thisArg) {
	    var max = -Infinity;
	    var maxEle = void 0;
	    var eles = this;

	    for (var i = 0; i < eles.length; i++) {
	      var ele = eles[i];
	      var val = thisArg ? valFn.apply(thisArg, [ele, i, eles]) : valFn(ele, i, eles);

	      if (val > max) {
	        max = val;
	        maxEle = ele;
	      }
	    }

	    return {
	      value: max,
	      ele: maxEle
	    };
	  },

	  min: function min(valFn, thisArg) {
	    var min = Infinity;
	    var minEle = void 0;
	    var eles = this;

	    for (var i = 0; i < eles.length; i++) {
	      var ele = eles[i];
	      var val = thisArg ? valFn.apply(thisArg, [ele, i, eles]) : valFn(ele, i, eles);

	      if (val < min) {
	        min = val;
	        minEle = ele;
	      }
	    }

	    return {
	      value: min,
	      ele: minEle
	    };
	  }
	};

	// aliases
	var fn = elesfn;
	fn['u'] = fn['|'] = fn['+'] = fn.union = fn.or = fn.add;
	fn['\\'] = fn['!'] = fn['-'] = fn.difference = fn.relativeComplement = fn.subtract = fn.not;
	fn['n'] = fn['&'] = fn['.'] = fn.and = fn.intersection = fn.intersect;
	fn['^'] = fn['(+)'] = fn['(-)'] = fn.symmetricDifference = fn.symdiff = fn.xor;
	fn.fnFilter = fn.filterFn = fn.stdFilter = fn.filter;
	fn.complement = fn.abscomp = fn.absoluteComplement;

	module.exports = elesfn;

	/***/ }),
	/* 63 */
	/***/ (function(module, exports, __webpack_require__) {


	var elesfn = {
	  isNode: function isNode() {
	    return this.group() === 'nodes';
	  },

	  isEdge: function isEdge() {
	    return this.group() === 'edges';
	  },

	  isLoop: function isLoop() {
	    return this.isEdge() && this.source().id() === this.target().id();
	  },

	  isSimple: function isSimple() {
	    return this.isEdge() && this.source().id() !== this.target().id();
	  },

	  group: function group() {
	    var ele = this[0];

	    if (ele) {
	      return ele._private.group;
	    }
	  }
	};

	module.exports = elesfn;

	/***/ }),
	/* 64 */
	/***/ (function(module, exports, __webpack_require__) {


	var is = __webpack_require__(0);
	var zIndexSort = __webpack_require__(17);
	var util = __webpack_require__(1);

	var elesfn = {
	  forEach: function forEach(fn, thisArg) {
	    if (is.fn(fn)) {

	      for (var i = 0; i < this.length; i++) {
	        var ele = this[i];
	        var ret = thisArg ? fn.apply(thisArg, [ele, i, this]) : fn(ele, i, this);

	        if (ret === false) {
	          break;
	        } // exit each early on return false
	      }
	    }

	    return this;
	  },

	  toArray: function toArray() {
	    var array = [];

	    for (var i = 0; i < this.length; i++) {
	      array.push(this[i]);
	    }

	    return array;
	  },

	  slice: function slice(start, end) {
	    var array = [];
	    var thisSize = this.length;

	    if (end == null) {
	      end = thisSize;
	    }

	    if (start == null) {
	      start = 0;
	    }

	    if (start < 0) {
	      start = thisSize + start;
	    }

	    if (end < 0) {
	      end = thisSize + end;
	    }

	    for (var i = start; i >= 0 && i < end && i < thisSize; i++) {
	      array.push(this[i]);
	    }

	    return this.spawn(array);
	  },

	  size: function size() {
	    return this.length;
	  },

	  eq: function eq(i) {
	    return this[i] || this.spawn();
	  },

	  first: function first() {
	    return this[0] || this.spawn();
	  },

	  last: function last() {
	    return this[this.length - 1] || this.spawn();
	  },

	  empty: function empty() {
	    return this.length === 0;
	  },

	  nonempty: function nonempty() {
	    return !this.empty();
	  },

	  sort: function sort(sortFn) {
	    if (!is.fn(sortFn)) {
	      return this;
	    }

	    var sorted = this.toArray().sort(sortFn);

	    return this.spawn(sorted);
	  },

	  sortByZIndex: function sortByZIndex() {
	    return this.sort(zIndexSort);
	  },

	  zDepth: function zDepth() {
	    var ele = this[0];
	    if (!ele) {
	      return undefined;
	    }

	    // let cy = ele.cy();
	    var _p = ele._private;
	    var group = _p.group;

	    if (group === 'nodes') {
	      var depth = _p.data.parent ? ele.parents().size() : 0;

	      if (!ele.isParent()) {
	        return util.MAX_INT - 1; // childless nodes always on top
	      }

	      return depth;
	    } else {
	      var src = _p.source;
	      var tgt = _p.target;
	      var srcDepth = src.zDepth();
	      var tgtDepth = tgt.zDepth();

	      return Math.max(srcDepth, tgtDepth, 0); // depth of deepest parent
	    }
	  }
	};

	elesfn.each = elesfn.forEach;

	module.exports = elesfn;

	/***/ }),
	/* 65 */
	/***/ (function(module, exports, __webpack_require__) {


	var is = __webpack_require__(0);
	var util = __webpack_require__(1);
	var Promise = __webpack_require__(5);
	var math = __webpack_require__(2);

	var elesfn = {
	  // Calculates and returns node dimensions { x, y } based on options given
	  layoutDimensions: function layoutDimensions(options) {
	    options = util.assign({
	      nodeDimensionsIncludeLabels: true
	    }, options);

	    if (options.nodeDimensionsIncludeLabels) {
	      var bbDim = this.boundingBox();
	      return {
	        w: bbDim.w,
	        h: bbDim.h
	      };
	    } else {
	      return {
	        w: this.outerWidth(),
	        h: this.outerHeight()
	      };
	    }
	  },

	  // using standard layout options, apply position function (w/ or w/o animation)
	  layoutPositions: function layoutPositions(layout, options, fn) {
	    var nodes = this.nodes();
	    var cy = this.cy();
	    var layoutEles = options.eles; // nodes & edges
	    var getMemoizeKey = function getMemoizeKey(node, i) {
	      return node.id() + '$' + i;
	    };
	    var fnMem = util.memoize(fn, getMemoizeKey); // memoized version of position function

	    layout.emit({ type: 'layoutstart', layout: layout });

	    layout.animations = [];

	    var calculateSpacing = function calculateSpacing(spacing, nodesBb, pos) {
	      var center = {
	        x: nodesBb.x1 + nodesBb.w / 2,
	        y: nodesBb.y1 + nodesBb.h / 2
	      };

	      var spacingVector = { // scale from center of bounding box (not necessarily 0,0)
	        x: (pos.x - center.x) * spacing,
	        y: (pos.y - center.y) * spacing
	      };

	      return {
	        x: center.x + spacingVector.x,
	        y: center.y + spacingVector.y
	      };
	    };

	    var useSpacingFactor = options.spacingFactor && options.spacingFactor !== 1;

	    var spacingBb = function spacingBb() {
	      if (!useSpacingFactor) {
	        return null;
	      }

	      var bb = math.makeBoundingBox();

	      for (var i = 0; i < nodes.length; i++) {
	        var node = nodes[i];
	        var pos = fnMem(node, i);

	        math.expandBoundingBoxByPoint(bb, pos.x, pos.y);
	      }

	      return bb;
	    };

	    var bb = spacingBb();

	    var getFinalPos = util.memoize(function (node, i) {
	      var newPos = fnMem(node, i);
	      var pos = node.position();

	      if (!is.number(pos.x) || !is.number(pos.y)) {
	        node.silentPosition({ x: 0, y: 0 });
	      }

	      if (useSpacingFactor) {
	        var spacing = Math.abs(options.spacingFactor);

	        newPos = calculateSpacing(spacing, bb, newPos);
	      }

	      if (options.transform != null) {
	        newPos = options.transform(node, newPos);
	      }

	      return newPos;
	    }, getMemoizeKey);

	    if (options.animate) {
	      for (var i = 0; i < nodes.length; i++) {
	        var node = nodes[i];
	        var newPos = getFinalPos(node, i);
	        var animateNode = options.animateFilter == null || options.animateFilter(node, i);

	        if (animateNode) {
	          var ani = node.animation({
	            position: newPos,
	            duration: options.animationDuration,
	            easing: options.animationEasing
	          });

	          layout.animations.push(ani);

	          ani.play();
	        } else {
	          node.position(newPos);
	        }
	      }

	      if (options.fit) {
	        var fitAni = cy.animation({
	          fit: {
	            boundingBox: layoutEles.boundingBoxAt(getFinalPos),
	            padding: options.padding
	          },
	          duration: options.animationDuration,
	          easing: options.animationEasing
	        });

	        layout.animations.push(fitAni);

	        fitAni.play();
	      } else if (options.zoom !== undefined && options.pan !== undefined) {
	        var zoomPanAni = cy.animation({
	          zoom: options.zoom,
	          pan: options.pan,
	          duration: options.animationDuration,
	          easing: options.animationEasing
	        });

	        layout.animations.push(zoomPanAni);

	        zoomPanAni.play();
	      }

	      layout.one('layoutready', options.ready);
	      layout.emit({ type: 'layoutready', layout: layout });

	      Promise.all(layout.animations.map(function (ani) {
	        return ani.promise();
	      })).then(function () {
	        layout.one('layoutstop', options.stop);
	        layout.emit({ type: 'layoutstop', layout: layout });
	      });
	    } else {

	      nodes.positions(getFinalPos);

	      if (options.fit) {
	        cy.fit(options.eles, options.padding);
	      }

	      if (options.zoom != null) {
	        cy.zoom(options.zoom);
	      }

	      if (options.pan) {
	        cy.pan(options.pan);
	      }

	      layout.one('layoutready', options.ready);
	      layout.emit({ type: 'layoutready', layout: layout });

	      layout.one('layoutstop', options.stop);
	      layout.emit({ type: 'layoutstop', layout: layout });
	    }

	    return this; // chaining
	  },

	  layout: function layout(options) {
	    var cy = this.cy();

	    return cy.makeLayout(util.extend({}, options, {
	      eles: this
	    }));
	  }

	};

	// aliases:
	elesfn.createLayout = elesfn.makeLayout = elesfn.layout;

	module.exports = elesfn;

	/***/ }),
	/* 66 */
	/***/ (function(module, exports, __webpack_require__) {


	var is = __webpack_require__(0);

	function styleCache(key, fn, ele) {
	  var _p = ele._private;
	  var cache = _p.styleCache = _p.styleCache || {};
	  var val;

	  if ((val = cache[key]) != null) {
	    return val;
	  } else {
	    val = cache[key] = fn(ele);

	    return val;
	  }
	}

	function cacheStyleFunction(key, fn) {
	  return function cachedStyleFunction(ele) {
	    return styleCache(key, fn, ele);
	  };
	}

	function cachePrototypeStyleFunction(key, fn) {
	  var selfFn = function selfFn(ele) {
	    return fn.call(ele);
	  };

	  return function cachedPrototypeStyleFunction() {
	    var ele = this[0];

	    if (ele) {
	      return styleCache(key, selfFn, ele);
	    }
	  };
	}

	var elesfn = {

	  recalculateRenderedStyle: function recalculateRenderedStyle(useCache) {
	    var cy = this.cy();
	    var renderer = cy.renderer();
	    var styleEnabled = cy.styleEnabled();

	    if (renderer && styleEnabled) {
	      renderer.recalculateRenderedStyle(this, useCache);
	    }

	    return this;
	  },

	  dirtyStyleCache: function dirtyStyleCache() {
	    var cy = this.cy();
	    var dirty = function dirty(ele) {
	      return ele._private.styleCache = {};
	    };

	    if (cy.hasCompoundNodes()) {
	      var eles = void 0;

	      eles = this.spawnSelf().merge(this.descendants()).merge(this.parents());

	      eles.merge(eles.connectedEdges());

	      eles.forEach(dirty);
	    } else {
	      this.forEach(function (ele) {
	        dirty(ele);

	        ele.connectedEdges().forEach(dirty);
	      });
	    }

	    return this;
	  },

	  // fully updates (recalculates) the style for the elements
	  updateStyle: function updateStyle(notifyRenderer) {
	    var cy = this._private.cy;

	    if (!cy.styleEnabled()) {
	      return this;
	    }

	    if (cy._private.batchingStyle) {
	      var bEles = cy._private.batchStyleEles;

	      bEles.merge(this);

	      return this; // chaining and exit early when batching
	    }

	    var hasCompounds = cy.hasCompoundNodes();
	    var style = cy.style();
	    var updatedEles = this;

	    notifyRenderer = notifyRenderer || notifyRenderer === undefined ? true : false;

	    if (hasCompounds) {
	      // then add everything up and down for compound selector checks
	      updatedEles = this.spawnSelf().merge(this.descendants()).merge(this.parents());
	    }

	    var changedEles = style.apply(updatedEles);

	    changedEles.dirtyStyleCache();
	    changedEles.dirtyCompoundBoundsCache();

	    if (notifyRenderer) {
	      changedEles.emitAndNotify('style'); // let renderer know we changed style
	    } else {
	      changedEles.emit('style'); // just fire the event
	    }

	    return this; // chaining
	  },

	  // just update the mappers in the elements' styles; cheaper than eles.updateStyle()
	  updateMappers: function updateMappers(notifyRenderer) {
	    var cy = this._private.cy;
	    var style = cy.style();
	    notifyRenderer = notifyRenderer || notifyRenderer === undefined ? true : false;

	    if (!cy.styleEnabled()) {
	      return this;
	    }

	    var changedEles = style.updateMappers(this);

	    changedEles.dirtyStyleCache();
	    changedEles.dirtyCompoundBoundsCache();

	    if (notifyRenderer) {
	      changedEles.emitAndNotify('style'); // let renderer know we changed style
	    } else {
	      changedEles.emit('style'); // just fire the event
	    }
	    return this; // chaining
	  },

	  // get the internal parsed style object for the specified property
	  parsedStyle: function parsedStyle(property) {
	    var ele = this[0];
	    var cy = ele.cy();

	    if (!cy.styleEnabled()) {
	      return;
	    }

	    if (ele) {
	      return ele._private.style[property] || cy.style().getDefaultProperty(property);
	    }
	  },

	  numericStyle: function numericStyle(property) {
	    var ele = this[0];

	    if (!ele.cy().styleEnabled()) {
	      return;
	    }

	    if (ele) {
	      var pstyle = ele.pstyle(property);

	      return pstyle.pfValue !== undefined ? pstyle.pfValue : pstyle.value;
	    }
	  },

	  numericStyleUnits: function numericStyleUnits(property) {
	    var ele = this[0];

	    if (!ele.cy().styleEnabled()) {
	      return;
	    }

	    if (ele) {
	      return ele.pstyle(property).units;
	    }
	  },

	  // get the specified css property as a rendered value (i.e. on-screen value)
	  // or get the whole rendered style if no property specified (NB doesn't allow setting)
	  renderedStyle: function renderedStyle(property) {
	    var cy = this.cy();
	    if (!cy.styleEnabled()) {
	      return this;
	    }

	    var ele = this[0];

	    if (ele) {
	      return cy.style().getRenderedStyle(ele, property);
	    }
	  },

	  // read the calculated css style of the element or override the style (via a bypass)
	  style: function style(name, value) {
	    var cy = this.cy();

	    if (!cy.styleEnabled()) {
	      return this;
	    }

	    var updateTransitions = false;
	    var style = cy.style();

	    if (is.plainObject(name)) {
	      // then extend the bypass
	      var props = name;
	      style.applyBypass(this, props, updateTransitions);

	      this.dirtyStyleCache();
	      this.dirtyCompoundBoundsCache();

	      this.emitAndNotify('style'); // let the renderer know we've updated style
	    } else if (is.string(name)) {

	      if (value === undefined) {
	        // then get the property from the style
	        var ele = this[0];

	        if (ele) {
	          return style.getStylePropertyValue(ele, name);
	        } else {
	          // empty collection => can't get any value
	          return;
	        }
	      } else {
	        // then set the bypass with the property value
	        style.applyBypass(this, name, value, updateTransitions);

	        this.dirtyStyleCache();
	        this.dirtyCompoundBoundsCache();

	        this.emitAndNotify('style'); // let the renderer know we've updated style
	      }
	    } else if (name === undefined) {
	      var _ele = this[0];

	      if (_ele) {
	        return style.getRawStyle(_ele);
	      } else {
	        // empty collection => can't get any value
	        return;
	      }
	    }

	    return this; // chaining
	  },

	  removeStyle: function removeStyle(names) {
	    var cy = this.cy();

	    if (!cy.styleEnabled()) {
	      return this;
	    }

	    var updateTransitions = false;
	    var style = cy.style();
	    var eles = this;

	    if (names === undefined) {
	      for (var i = 0; i < eles.length; i++) {
	        var ele = eles[i];

	        style.removeAllBypasses(ele, updateTransitions);
	      }
	    } else {
	      names = names.split(/\s+/);

	      for (var _i = 0; _i < eles.length; _i++) {
	        var _ele2 = eles[_i];

	        style.removeBypasses(_ele2, names, updateTransitions);
	      }
	    }

	    this.dirtyStyleCache();
	    this.dirtyCompoundBoundsCache();

	    this.emitAndNotify('style'); // let the renderer know we've updated style

	    return this; // chaining
	  },

	  show: function show() {
	    this.css('display', 'element');
	    return this; // chaining
	  },

	  hide: function hide() {
	    this.css('display', 'none');
	    return this; // chaining
	  },

	  effectiveOpacity: function effectiveOpacity() {
	    var cy = this.cy();
	    if (!cy.styleEnabled()) {
	      return 1;
	    }

	    var hasCompoundNodes = cy.hasCompoundNodes();
	    var ele = this[0];

	    if (ele) {
	      var _p = ele._private;
	      var parentOpacity = ele.pstyle('opacity').value;

	      if (!hasCompoundNodes) {
	        return parentOpacity;
	      }

	      var parents = !_p.data.parent ? null : ele.parents();

	      if (parents) {
	        for (var i = 0; i < parents.length; i++) {
	          var parent = parents[i];
	          var opacity = parent.pstyle('opacity').value;

	          parentOpacity = opacity * parentOpacity;
	        }
	      }

	      return parentOpacity;
	    }
	  },

	  transparent: function transparent() {
	    var cy = this.cy();
	    if (!cy.styleEnabled()) {
	      return false;
	    }

	    var ele = this[0];
	    var hasCompoundNodes = ele.cy().hasCompoundNodes();

	    if (ele) {
	      if (!hasCompoundNodes) {
	        return ele.pstyle('opacity').value === 0;
	      } else {
	        return ele.effectiveOpacity() === 0;
	      }
	    }
	  },

	  backgrounding: function backgrounding() {
	    var cy = this.cy();
	    if (!cy.styleEnabled()) {
	      return false;
	    }

	    var ele = this[0];

	    return ele._private.backgrounding ? true : false;
	  }

	};

	function checkCompound(ele, parentOk) {
	  var _p = ele._private;
	  var parents = _p.data.parent ? ele.parents() : null;

	  if (parents) {
	    for (var i = 0; i < parents.length; i++) {
	      var parent = parents[i];

	      if (!parentOk(parent)) {
	        return false;
	      }
	    }
	  }

	  return true;
	}

	function defineDerivedStateFunction(specs) {
	  var ok = specs.ok;
	  var edgeOkViaNode = specs.edgeOkViaNode || specs.ok;
	  var parentOk = specs.parentOk || specs.ok;

	  return function () {
	    var cy = this.cy();
	    if (!cy.styleEnabled()) {
	      return true;
	    }

	    var ele = this[0];
	    var hasCompoundNodes = cy.hasCompoundNodes();

	    if (ele) {
	      var _p = ele._private;

	      if (!ok(ele)) {
	        return false;
	      }

	      if (ele.isNode()) {
	        return !hasCompoundNodes || checkCompound(ele, parentOk);
	      } else {
	        var src = _p.source;
	        var tgt = _p.target;

	        return edgeOkViaNode(src) && (!hasCompoundNodes || checkCompound(src, edgeOkViaNode)) && (src === tgt || edgeOkViaNode(tgt) && (!hasCompoundNodes || checkCompound(tgt, edgeOkViaNode)));
	      }
	    }
	  };
	}

	var eleTakesUpSpace = cacheStyleFunction('eleTakesUpSpace', function (ele) {
	  return ele.pstyle('display').value === 'element' && ele.width() !== 0 && (ele.isNode() ? ele.height() !== 0 : true);
	});

	elesfn.takesUpSpace = cachePrototypeStyleFunction('takesUpSpace', defineDerivedStateFunction({
	  ok: eleTakesUpSpace
	}));

	var eleInteractive = cacheStyleFunction('eleInteractive', function (ele) {
	  return ele.pstyle('events').value === 'yes' && ele.pstyle('visibility').value === 'visible' && eleTakesUpSpace(ele);
	});

	var parentInteractive = cacheStyleFunction('parentInteractive', function (parent) {
	  return parent.pstyle('visibility').value === 'visible' && eleTakesUpSpace(parent);
	});

	elesfn.interactive = cachePrototypeStyleFunction('interactive', defineDerivedStateFunction({
	  ok: eleInteractive,
	  parentOk: parentInteractive,
	  edgeOkViaNode: eleTakesUpSpace
	}));

	elesfn.noninteractive = function () {
	  var ele = this[0];

	  if (ele) {
	    return !ele.interactive();
	  }
	};

	var eleVisible = cacheStyleFunction('eleVisible', function (ele) {
	  return ele.pstyle('visibility').value === 'visible' && ele.pstyle('opacity').pfValue !== 0 && eleTakesUpSpace(ele);
	});

	var edgeVisibleViaNode = eleTakesUpSpace;

	elesfn.visible = cachePrototypeStyleFunction('visible', defineDerivedStateFunction({
	  ok: eleVisible,
	  edgeOkViaNode: edgeVisibleViaNode
	}));

	elesfn.hidden = function () {
	  var ele = this[0];

	  if (ele) {
	    return !ele.visible();
	  }
	};

	elesfn.bypass = elesfn.css = elesfn.style;
	elesfn.renderedCss = elesfn.renderedStyle;
	elesfn.removeBypass = elesfn.removeCss = elesfn.removeStyle;
	elesfn.pstyle = elesfn.parsedStyle;

	module.exports = elesfn;

	/***/ }),
	/* 67 */
	/***/ (function(module, exports, __webpack_require__) {


	var elesfn = {};

	function defineSwitchFunction(params) {
	  return function () {
	    var args = arguments;
	    var changedEles = [];

	    // e.g. cy.nodes().select( data, handler )
	    if (args.length === 2) {
	      var data = args[0];
	      var handler = args[1];
	      this.on(params.event, data, handler);
	    }

	    // e.g. cy.nodes().select( handler )
	    else if (args.length === 1) {
	        var _handler = args[0];
	        this.on(params.event, _handler);
	      }

	      // e.g. cy.nodes().select()
	      else if (args.length === 0) {
	          for (var i = 0; i < this.length; i++) {
	            var ele = this[i];
	            var able = !params.ableField || ele._private[params.ableField];
	            var changed = ele._private[params.field] != params.value;

	            if (params.overrideAble) {
	              var overrideAble = params.overrideAble(ele);

	              if (overrideAble !== undefined) {
	                able = overrideAble;

	                if (!overrideAble) {
	                  return this;
	                } // to save cycles assume not able for all on override
	              }
	            }

	            if (able) {
	              ele._private[params.field] = params.value;

	              if (changed) {
	                changedEles.push(ele);
	              }
	            }
	          }

	          var changedColl = this.spawn(changedEles);
	          changedColl.updateStyle(); // change of state => possible change of style
	          changedColl.emit(params.event);
	        }

	    return this;
	  };
	}

	function defineSwitchSet(params) {
	  elesfn[params.field] = function () {
	    var ele = this[0];

	    if (ele) {
	      if (params.overrideField) {
	        var val = params.overrideField(ele);

	        if (val !== undefined) {
	          return val;
	        }
	      }

	      return ele._private[params.field];
	    }
	  };

	  elesfn[params.on] = defineSwitchFunction({
	    event: params.on,
	    field: params.field,
	    ableField: params.ableField,
	    overrideAble: params.overrideAble,
	    value: true
	  });

	  elesfn[params.off] = defineSwitchFunction({
	    event: params.off,
	    field: params.field,
	    ableField: params.ableField,
	    overrideAble: params.overrideAble,
	    value: false
	  });
	}

	defineSwitchSet({
	  field: 'locked',
	  overrideField: function overrideField(ele) {
	    return ele.cy().autolock() ? true : undefined;
	  },
	  on: 'lock',
	  off: 'unlock'
	});

	defineSwitchSet({
	  field: 'grabbable',
	  overrideField: function overrideField(ele) {
	    return ele.cy().autoungrabify() ? false : undefined;
	  },
	  on: 'grabify',
	  off: 'ungrabify'
	});

	defineSwitchSet({
	  field: 'selected',
	  ableField: 'selectable',
	  overrideAble: function overrideAble(ele) {
	    return ele.cy().autounselectify() ? false : undefined;
	  },
	  on: 'select',
	  off: 'unselect'
	});

	defineSwitchSet({
	  field: 'selectable',
	  overrideField: function overrideField(ele) {
	    return ele.cy().autounselectify() ? false : undefined;
	  },
	  on: 'selectify',
	  off: 'unselectify'
	});

	elesfn.deselect = elesfn.unselect;

	elesfn.grabbed = function () {
	  var ele = this[0];
	  if (ele) {
	    return ele._private.grabbed;
	  }
	};

	defineSwitchSet({
	  field: 'active',
	  on: 'activate',
	  off: 'unactivate'
	});

	elesfn.inactive = function () {
	  var ele = this[0];
	  if (ele) {
	    return !ele._private.active;
	  }
	};

	module.exports = elesfn;

	/***/ }),
	/* 68 */
	/***/ (function(module, exports, __webpack_require__) {


	var util = __webpack_require__(1);
	var is = __webpack_require__(0);

	var elesfn = {};

	var cache = function cache(fn, name) {
	  return function traversalCache(arg1, arg2, arg3, arg4) {
	    var selectorOrEles = arg1;
	    var eles = this;
	    var key = void 0;

	    if (selectorOrEles == null) {
	      key = 'null';
	    } else if (is.elementOrCollection(selectorOrEles) && selectorOrEles.length === 1) {
	      key = '#' + selectorOrEles.id();
	    }

	    if (eles.length === 1 && key) {
	      var _p = eles[0]._private;
	      var tch = _p.traversalCache = _p.traversalCache || {};
	      var ch = tch[name] = tch[name] || {};
	      var cacheHit = ch[key];

	      if (cacheHit) {
	        return cacheHit;
	      } else {
	        return ch[key] = fn.call(eles, arg1, arg2, arg3, arg4);
	      }
	    } else {
	      return fn.call(eles, arg1, arg2, arg3, arg4);
	    }
	  };
	};

	// DAG functions
	////////////////

	var defineDagExtremity = function defineDagExtremity(params) {
	  return function dagExtremityImpl(selector) {
	    var eles = this;
	    var ret = [];

	    for (var i = 0; i < eles.length; i++) {
	      var ele = eles[i];
	      if (!ele.isNode()) {
	        continue;
	      }

	      var disqualified = false;
	      var edges = ele.connectedEdges();

	      for (var j = 0; j < edges.length; j++) {
	        var edge = edges[j];
	        var src = edge.source();
	        var tgt = edge.target();

	        if (params.noIncomingEdges && tgt === ele && src !== ele || params.noOutgoingEdges && src === ele && tgt !== ele) {
	          disqualified = true;
	          break;
	        }
	      }

	      if (!disqualified) {
	        ret.push(ele);
	      }
	    }

	    return this.spawn(ret, { unique: true }).filter(selector);
	  };
	};

	var defineDagOneHop = function defineDagOneHop(params) {
	  return function (selector) {
	    var eles = this;
	    var oEles = [];

	    for (var i = 0; i < eles.length; i++) {
	      var ele = eles[i];

	      if (!ele.isNode()) {
	        continue;
	      }

	      var edges = ele.connectedEdges();
	      for (var j = 0; j < edges.length; j++) {
	        var edge = edges[j];
	        var src = edge.source();
	        var tgt = edge.target();

	        if (params.outgoing && src === ele) {
	          oEles.push(edge);
	          oEles.push(tgt);
	        } else if (params.incoming && tgt === ele) {
	          oEles.push(edge);
	          oEles.push(src);
	        }
	      }
	    }

	    return this.spawn(oEles, { unique: true }).filter(selector);
	  };
	};

	var defineDagAllHops = function defineDagAllHops(params) {
	  return function (selector) {
	    var eles = this;
	    var sEles = [];
	    var sElesIds = {};

	    for (;;) {
	      var next = params.outgoing ? eles.outgoers() : eles.incomers();

	      if (next.length === 0) {
	        break;
	      } // done if none left

	      var newNext = false;
	      for (var i = 0; i < next.length; i++) {
	        var n = next[i];
	        var nid = n.id();

	        if (!sElesIds[nid]) {
	          sElesIds[nid] = true;
	          sEles.push(n);
	          newNext = true;
	        }
	      }

	      if (!newNext) {
	        break;
	      } // done if touched all outgoers already

	      eles = next;
	    }

	    return this.spawn(sEles, { unique: true }).filter(selector);
	  };
	};

	elesfn.clearTraversalCache = function () {
	  for (var i = 0; i < this.length; i++) {
	    this[i]._private.traversalCache = null;
	  }
	};

	util.extend(elesfn, {
	  // get the root nodes in the DAG
	  roots: defineDagExtremity({ noIncomingEdges: true }),

	  // get the leaf nodes in the DAG
	  leaves: defineDagExtremity({ noOutgoingEdges: true }),

	  // normally called children in graph theory
	  // these nodes =edges=> outgoing nodes
	  outgoers: cache(defineDagOneHop({ outgoing: true }), 'outgoers'),

	  // aka DAG descendants
	  successors: defineDagAllHops({ outgoing: true }),

	  // normally called parents in graph theory
	  // these nodes <=edges= incoming nodes
	  incomers: cache(defineDagOneHop({ incoming: true }), 'incomers'),

	  // aka DAG ancestors
	  predecessors: defineDagAllHops({ incoming: true })
	});

	// Neighbourhood functions
	//////////////////////////

	util.extend(elesfn, {
	  neighborhood: cache(function (selector) {
	    var elements = [];
	    var nodes = this.nodes();

	    for (var i = 0; i < nodes.length; i++) {
	      // for all nodes
	      var node = nodes[i];
	      var connectedEdges = node.connectedEdges();

	      // for each connected edge, add the edge and the other node
	      for (var j = 0; j < connectedEdges.length; j++) {
	        var edge = connectedEdges[j];
	        var src = edge.source();
	        var tgt = edge.target();
	        var otherNode = node === src ? tgt : src;

	        // need check in case of loop
	        if (otherNode.length > 0) {
	          elements.push(otherNode[0]); // add node 1 hop away
	        }

	        // add connected edge
	        elements.push(edge[0]);
	      }
	    }

	    return this.spawn(elements, { unique: true }).filter(selector);
	  }, 'neighborhood'),

	  closedNeighborhood: function closedNeighborhood(selector) {
	    return this.neighborhood().add(this).filter(selector);
	  },

	  openNeighborhood: function openNeighborhood(selector) {
	    return this.neighborhood(selector);
	  }
	});

	// aliases
	elesfn.neighbourhood = elesfn.neighborhood;
	elesfn.closedNeighbourhood = elesfn.closedNeighborhood;
	elesfn.openNeighbourhood = elesfn.openNeighborhood;

	// Edge functions
	/////////////////

	util.extend(elesfn, {
	  source: cache(function sourceImpl(selector) {
	    var ele = this[0];
	    var src = void 0;

	    if (ele) {
	      src = ele._private.source || ele.cy().collection();
	    }

	    return src && selector ? src.filter(selector) : src;
	  }, 'source'),

	  target: cache(function targetImpl(selector) {
	    var ele = this[0];
	    var tgt = void 0;

	    if (ele) {
	      tgt = ele._private.target || ele.cy().collection();
	    }

	    return tgt && selector ? tgt.filter(selector) : tgt;
	  }, 'target'),

	  sources: defineSourceFunction({
	    attr: 'source'
	  }),

	  targets: defineSourceFunction({
	    attr: 'target'
	  })
	});

	function defineSourceFunction(params) {
	  return function sourceImpl(selector) {
	    var sources = [];

	    for (var i = 0; i < this.length; i++) {
	      var ele = this[i];
	      var src = ele._private[params.attr];

	      if (src) {
	        sources.push(src);
	      }
	    }

	    return this.spawn(sources, { unique: true }).filter(selector);
	  };
	}

	util.extend(elesfn, {
	  edgesWith: cache(defineEdgesWithFunction(), 'edgesWith'),

	  edgesTo: cache(defineEdgesWithFunction({
	    thisIsSrc: true
	  }), 'edgesTo')
	});

	function defineEdgesWithFunction(params) {

	  return function edgesWithImpl(otherNodes) {
	    var elements = [];
	    var cy = this._private.cy;
	    var p = params || {};

	    // get elements if a selector is specified
	    if (is.string(otherNodes)) {
	      otherNodes = cy.$(otherNodes);
	    }

	    for (var h = 0; h < otherNodes.length; h++) {
	      var edges = otherNodes[h]._private.edges;

	      for (var i = 0; i < edges.length; i++) {
	        var edge = edges[i];
	        var edgeData = edge._private.data;
	        var thisToOther = this.hasElementWithId(edgeData.source) && otherNodes.hasElementWithId(edgeData.target);
	        var otherToThis = otherNodes.hasElementWithId(edgeData.source) && this.hasElementWithId(edgeData.target);
	        var edgeConnectsThisAndOther = thisToOther || otherToThis;

	        if (!edgeConnectsThisAndOther) {
	          continue;
	        }

	        if (p.thisIsSrc || p.thisIsTgt) {
	          if (p.thisIsSrc && !thisToOther) {
	            continue;
	          }

	          if (p.thisIsTgt && !otherToThis) {
	            continue;
	          }
	        }

	        elements.push(edge);
	      }
	    }

	    return this.spawn(elements, { unique: true });
	  };
	}

	util.extend(elesfn, {
	  connectedEdges: cache(function (selector) {
	    var retEles = [];

	    var eles = this;
	    for (var i = 0; i < eles.length; i++) {
	      var node = eles[i];
	      if (!node.isNode()) {
	        continue;
	      }

	      var edges = node._private.edges;

	      for (var j = 0; j < edges.length; j++) {
	        var edge = edges[j];
	        retEles.push(edge);
	      }
	    }

	    return this.spawn(retEles, { unique: true }).filter(selector);
	  }, 'connectedEdges'),

	  connectedNodes: cache(function (selector) {
	    var retEles = [];

	    var eles = this;
	    for (var i = 0; i < eles.length; i++) {
	      var edge = eles[i];
	      if (!edge.isEdge()) {
	        continue;
	      }

	      retEles.push(edge.source()[0]);
	      retEles.push(edge.target()[0]);
	    }

	    return this.spawn(retEles, { unique: true }).filter(selector);
	  }, 'connectedNodes'),

	  parallelEdges: cache(defineParallelEdgesFunction(), 'parallelEdges'),

	  codirectedEdges: cache(defineParallelEdgesFunction({
	    codirected: true
	  }), 'codirectedEdges')
	});

	function defineParallelEdgesFunction(params) {
	  var defaults = {
	    codirected: false
	  };
	  params = util.extend({}, defaults, params);

	  return function parallelEdgesImpl(selector) {
	    // micro-optimised for renderer
	    var elements = [];
	    var edges = this.edges();
	    var p = params;

	    // look at all the edges in the collection
	    for (var i = 0; i < edges.length; i++) {
	      var edge1 = edges[i];
	      var edge1_p = edge1._private;
	      var src1 = edge1_p.source;
	      var srcid1 = src1._private.data.id;
	      var tgtid1 = edge1_p.data.target;
	      var srcEdges1 = src1._private.edges;

	      // look at edges connected to the src node of this edge
	      for (var j = 0; j < srcEdges1.length; j++) {
	        var edge2 = srcEdges1[j];
	        var edge2data = edge2._private.data;
	        var tgtid2 = edge2data.target;
	        var srcid2 = edge2data.source;

	        var codirected = tgtid2 === tgtid1 && srcid2 === srcid1;
	        var oppdirected = srcid1 === tgtid2 && tgtid1 === srcid2;

	        if (p.codirected && codirected || !p.codirected && (codirected || oppdirected)) {
	          elements.push(edge2);
	        }
	      }
	    }

	    return this.spawn(elements, { unique: true }).filter(selector);
	  };
	}

	// Misc functions
	/////////////////

	util.extend(elesfn, {
	  components: function components() {
	    var self = this;
	    var cy = self.cy();
	    var visited = self.spawn();
	    var unvisited = self.nodes().spawnSelf();
	    var components = [];

	    var visitInComponent = function visitInComponent(node, component) {
	      visited.merge(node);
	      unvisited.unmerge(node);
	      component.merge(node);
	    };

	    if (unvisited.empty()) {
	      return self.spawn();
	    }

	    var _loop = function _loop() {
	      var component = cy.collection();
	      components.push(component);

	      var root = unvisited[0];
	      visitInComponent(root, component);

	      self.bfs({
	        directed: false,
	        roots: root,
	        visit: function visit(v, e, u, i, depth) {
	          visitInComponent(v, component);
	        }
	      });
	    };

	    do {
	      _loop();
	    } while (unvisited.length > 0);

	    return components.map(function (component) {
	      var connectedEdges = component.connectedEdges().stdFilter(function (edge) {
	        return component.anySame(edge.source()) && component.anySame(edge.target());
	      });

	      return component.union(connectedEdges);
	    });
	  }
	});

	module.exports = elesfn;

	/***/ }),
	/* 69 */
	/***/ (function(module, exports, __webpack_require__) {


	var is = __webpack_require__(0);
	var util = __webpack_require__(1);
	var Collection = __webpack_require__(7);
	var Element = __webpack_require__(14);

	var corefn = {
	  add: function add(opts) {

	    var elements = void 0;
	    var cy = this;

	    // add the elements
	    if (is.elementOrCollection(opts)) {
	      var eles = opts;

	      if (eles._private.cy === cy) {
	        // same instance => just restore
	        elements = eles.restore();
	      } else {
	        // otherwise, copy from json
	        var jsons = [];

	        for (var i = 0; i < eles.length; i++) {
	          var ele = eles[i];
	          jsons.push(ele.json());
	        }

	        elements = new Collection(cy, jsons);
	      }
	    }

	    // specify an array of options
	    else if (is.array(opts)) {
	        var _jsons = opts;

	        elements = new Collection(cy, _jsons);
	      }

	      // specify via opts.nodes and opts.edges
	      else if (is.plainObject(opts) && (is.array(opts.nodes) || is.array(opts.edges))) {
	          var elesByGroup = opts;
	          var _jsons2 = [];

	          var grs = ['nodes', 'edges'];
	          for (var _i = 0, il = grs.length; _i < il; _i++) {
	            var group = grs[_i];
	            var elesArray = elesByGroup[group];

	            if (is.array(elesArray)) {

	              for (var j = 0, jl = elesArray.length; j < jl; j++) {
	                var json = util.extend({ group: group }, elesArray[j]);

	                _jsons2.push(json);
	              }
	            }
	          }

	          elements = new Collection(cy, _jsons2);
	        }

	        // specify options for one element
	        else {
	            var _json = opts;
	            elements = new Element(cy, _json).collection();
	          }

	    return elements;
	  },

	  remove: function remove(collection) {
	    if (is.elementOrCollection(collection)) ; else if (is.string(collection)) {
	      var selector = collection;
	      collection = this.$(selector);
	    }

	    return collection.remove();
	  }
	};

	module.exports = corefn;

	/***/ }),
	/* 70 */
	/***/ (function(module, exports, __webpack_require__) {


	var define = __webpack_require__(4);
	var util = __webpack_require__(1);
	var stepAll = __webpack_require__(71);

	var corefn = {

	  // pull in animation functions
	  animate: define.animate(),
	  animation: define.animation(),
	  animated: define.animated(),
	  clearQueue: define.clearQueue(),
	  delay: define.delay(),
	  delayAnimation: define.delayAnimation(),
	  stop: define.stop(),

	  addToAnimationPool: function addToAnimationPool(eles) {
	    var cy = this;

	    if (!cy.styleEnabled()) {
	      return;
	    } // save cycles when no style used

	    cy._private.aniEles.merge(eles);
	  },

	  stopAnimationLoop: function stopAnimationLoop() {
	    this._private.animationsRunning = false;
	  },

	  startAnimationLoop: function startAnimationLoop() {
	    var cy = this;

	    cy._private.animationsRunning = true;

	    if (!cy.styleEnabled()) {
	      return;
	    } // save cycles when no style used

	    // NB the animation loop will exec in headless environments if style enabled
	    // and explicit cy.destroy() is necessary to stop the loop

	    function headlessStep() {
	      if (!cy._private.animationsRunning) {
	        return;
	      }

	      util.requestAnimationFrame(function animationStep(now) {
	        stepAll(now, cy);
	        headlessStep();
	      });
	    }

	    var renderer = cy.renderer();

	    if (renderer && renderer.beforeRender) {
	      // let the renderer schedule animations
	      renderer.beforeRender(function rendererAnimationStep(willDraw, now) {
	        stepAll(now, cy);
	      }, renderer.beforeRenderPriorities.animations);
	    } else {
	      // manage the animation loop ourselves
	      headlessStep(); // first call
	    }
	  }

	};

	module.exports = corefn;

	/***/ }),
	/* 71 */
	/***/ (function(module, exports, __webpack_require__) {


	var step = __webpack_require__(72);
	var startAnimation = __webpack_require__(77);

	function stepAll(now, cy) {
	  var eles = cy._private.aniEles;
	  var doneEles = [];

	  function stepOne(ele, isCore) {
	    var _p = ele._private;
	    var current = _p.animation.current;
	    var queue = _p.animation.queue;
	    var ranAnis = false;

	    // cancel all animations on display:none ele
	    if (!isCore && ele.pstyle('display').value === 'none') {
	      // put all current and queue animations in this tick's current list
	      // and empty the lists for the element
	      current = current.splice(0, current.length).concat(queue.splice(0, queue.length));

	      // stop all animations
	      for (var i = 0; i < current.length; i++) {
	        current[i].stop();
	      }
	    }

	    // if nothing currently animating, get something from the queue
	    if (current.length === 0) {
	      var next = queue.shift();

	      if (next) {
	        current.push(next);
	      }
	    }

	    var callbacks = function callbacks(_callbacks) {
	      for (var j = _callbacks.length - 1; j >= 0; j--) {
	        var cb = _callbacks[j];

	        cb();
	      }

	      _callbacks.splice(0, _callbacks.length);
	    };

	    // step and remove if done
	    for (var _i = current.length - 1; _i >= 0; _i--) {
	      var ani = current[_i];
	      var ani_p = ani._private;

	      if (ani_p.stopped) {
	        current.splice(_i, 1);

	        ani_p.hooked = false;
	        ani_p.playing = false;
	        ani_p.started = false;

	        callbacks(ani_p.frames);

	        continue;
	      }

	      if (!ani_p.playing && !ani_p.applying) {
	        continue;
	      }

	      // an apply() while playing shouldn't do anything
	      if (ani_p.playing && ani_p.applying) {
	        ani_p.applying = false;
	      }

	      if (!ani_p.started) {
	        startAnimation(ele, ani, now, isCore);
	      }

	      step(ele, ani, now, isCore);

	      if (ani_p.applying) {
	        ani_p.applying = false;
	      }

	      callbacks(ani_p.frames);

	      if (ani_p.step != null) {
	        ani_p.step(now);
	      }

	      if (ani.completed()) {
	        current.splice(_i, 1);

	        ani_p.hooked = false;
	        ani_p.playing = false;
	        ani_p.started = false;

	        callbacks(ani_p.completes);
	      }

	      ranAnis = true;
	    }

	    if (!isCore && current.length === 0 && queue.length === 0) {
	      doneEles.push(ele);
	    }

	    return ranAnis;
	  } // stepElement

	  // handle all eles
	  var ranEleAni = false;
	  for (var e = 0; e < eles.length; e++) {
	    var ele = eles[e];
	    var handledThisEle = stepOne(ele);

	    ranEleAni = ranEleAni || handledThisEle;
	  } // each element

	  var ranCoreAni = stepOne(cy, true);

	  // notify renderer
	  if (ranEleAni || ranCoreAni) {
	    if (eles.length > 0) {
	      eles.dirtyCompoundBoundsCache();

	      cy.notify({
	        type: 'draw',
	        eles: eles
	      });
	    } else {
	      cy.notify({
	        type: 'draw'
	      });
	    }
	  }

	  // remove elements from list of currently animating if its queues are empty
	  eles.unmerge(doneEles);

	  cy.emit('step');
	} // stepAll

	module.exports = stepAll;

	/***/ }),
	/* 72 */
	/***/ (function(module, exports, __webpack_require__) {


	var easings = __webpack_require__(73);
	var ease = __webpack_require__(76);
	var is = __webpack_require__(0);

	function step(self, ani, now, isCore) {
	  var isEles = !isCore;
	  var _p = self._private;
	  var ani_p = ani._private;
	  var pEasing = ani_p.easing;
	  var startTime = ani_p.startTime;
	  var cy = isCore ? self : self.cy();
	  var style = cy.style();

	  if (!ani_p.easingImpl) {

	    if (pEasing == null) {
	      // use default
	      ani_p.easingImpl = easings['linear'];
	    } else {
	      // then define w/ name
	      var easingVals = void 0;

	      if (is.string(pEasing)) {
	        var easingProp = style.parse('transition-timing-function', pEasing);

	        easingVals = easingProp.value;
	      } else {
	        // then assume preparsed array
	        easingVals = pEasing;
	      }

	      var name = void 0,
	          args = void 0;

	      if (is.string(easingVals)) {
	        name = easingVals;
	        args = [];
	      } else {
	        name = easingVals[1];
	        args = easingVals.slice(2).map(function (n) {
	          return +n;
	        });
	      }

	      if (args.length > 0) {
	        // create with args
	        if (name === 'spring') {
	          args.push(ani_p.duration); // need duration to generate spring
	        }

	        ani_p.easingImpl = easings[name].apply(null, args);
	      } else {
	        // static impl by name
	        ani_p.easingImpl = easings[name];
	      }
	    }
	  }

	  var easing = ani_p.easingImpl;
	  var percent = void 0;

	  if (ani_p.duration === 0) {
	    percent = 1;
	  } else {
	    percent = (now - startTime) / ani_p.duration;
	  }

	  if (ani_p.applying) {
	    percent = ani_p.progress;
	  }

	  if (percent < 0) {
	    percent = 0;
	  } else if (percent > 1) {
	    percent = 1;
	  }

	  if (ani_p.delay == null) {
	    // then update

	    var startPos = ani_p.startPosition;
	    var endPos = ani_p.position;

	    if (endPos && isEles && !self.locked()) {
	      var pos = self.position();

	      if (valid(startPos.x, endPos.x)) {
	        pos.x = ease(startPos.x, endPos.x, percent, easing);
	      }

	      if (valid(startPos.y, endPos.y)) {
	        pos.y = ease(startPos.y, endPos.y, percent, easing);
	      }

	      self.emit('position');
	    }

	    var startPan = ani_p.startPan;
	    var endPan = ani_p.pan;
	    var pan = _p.pan;
	    var animatingPan = endPan != null && isCore;
	    if (animatingPan) {
	      if (valid(startPan.x, endPan.x)) {
	        pan.x = ease(startPan.x, endPan.x, percent, easing);
	      }

	      if (valid(startPan.y, endPan.y)) {
	        pan.y = ease(startPan.y, endPan.y, percent, easing);
	      }

	      self.emit('pan');
	    }

	    var startZoom = ani_p.startZoom;
	    var endZoom = ani_p.zoom;
	    var animatingZoom = endZoom != null && isCore;
	    if (animatingZoom) {
	      if (valid(startZoom, endZoom)) {
	        _p.zoom = ease(startZoom, endZoom, percent, easing);
	      }

	      self.emit('zoom');
	    }

	    if (animatingPan || animatingZoom) {
	      self.emit('viewport');
	    }

	    var props = ani_p.style;
	    if (props && props.length > 0 && isEles) {
	      for (var i = 0; i < props.length; i++) {
	        var prop = props[i];
	        var _name = prop.name;
	        var end = prop;
	        var start = ani_p.startStyle[_name];
	        var propSpec = style.properties[start.name];
	        var easedVal = ease(start, end, percent, easing, propSpec);

	        style.overrideBypass(self, _name, easedVal);
	      } // for props

	      self.emit('style');
	    } // if
	  }

	  ani_p.progress = percent;

	  return percent;
	}

	function valid(start, end) {
	  if (start == null || end == null) {
	    return false;
	  }

	  if (is.number(start) && is.number(end)) {
	    return true;
	  } else if (start && end) {
	    return true;
	  }

	  return false;
	}

	module.exports = step;

	/***/ }),
	/* 73 */
	/***/ (function(module, exports, __webpack_require__) {


	var generateCubicBezier = __webpack_require__(74);
	var generateSpringRK4 = __webpack_require__(75);

	var cubicBezier = function cubicBezier(t1, p1, t2, p2) {
	  var bezier = generateCubicBezier(t1, p1, t2, p2);

	  return function (start, end, percent) {
	    return start + (end - start) * bezier(percent);
	  };
	};

	var easings = {
	  'linear': function linear(start, end, percent) {
	    return start + (end - start) * percent;
	  },

	  // default easings
	  'ease': cubicBezier(0.25, 0.1, 0.25, 1),
	  'ease-in': cubicBezier(0.42, 0, 1, 1),
	  'ease-out': cubicBezier(0, 0, 0.58, 1),
	  'ease-in-out': cubicBezier(0.42, 0, 0.58, 1),

	  // sine
	  'ease-in-sine': cubicBezier(0.47, 0, 0.745, 0.715),
	  'ease-out-sine': cubicBezier(0.39, 0.575, 0.565, 1),
	  'ease-in-out-sine': cubicBezier(0.445, 0.05, 0.55, 0.95),

	  // quad
	  'ease-in-quad': cubicBezier(0.55, 0.085, 0.68, 0.53),
	  'ease-out-quad': cubicBezier(0.25, 0.46, 0.45, 0.94),
	  'ease-in-out-quad': cubicBezier(0.455, 0.03, 0.515, 0.955),

	  // cubic
	  'ease-in-cubic': cubicBezier(0.55, 0.055, 0.675, 0.19),
	  'ease-out-cubic': cubicBezier(0.215, 0.61, 0.355, 1),
	  'ease-in-out-cubic': cubicBezier(0.645, 0.045, 0.355, 1),

	  // quart
	  'ease-in-quart': cubicBezier(0.895, 0.03, 0.685, 0.22),
	  'ease-out-quart': cubicBezier(0.165, 0.84, 0.44, 1),
	  'ease-in-out-quart': cubicBezier(0.77, 0, 0.175, 1),

	  // quint
	  'ease-in-quint': cubicBezier(0.755, 0.05, 0.855, 0.06),
	  'ease-out-quint': cubicBezier(0.23, 1, 0.32, 1),
	  'ease-in-out-quint': cubicBezier(0.86, 0, 0.07, 1),

	  // expo
	  'ease-in-expo': cubicBezier(0.95, 0.05, 0.795, 0.035),
	  'ease-out-expo': cubicBezier(0.19, 1, 0.22, 1),
	  'ease-in-out-expo': cubicBezier(1, 0, 0, 1),

	  // circ
	  'ease-in-circ': cubicBezier(0.6, 0.04, 0.98, 0.335),
	  'ease-out-circ': cubicBezier(0.075, 0.82, 0.165, 1),
	  'ease-in-out-circ': cubicBezier(0.785, 0.135, 0.15, 0.86),

	  // user param easings...

	  'spring': function spring(tension, friction, duration) {
	    if (duration === 0) {
	      // can't get a spring w/ duration 0
	      return easings.linear; // duration 0 => jump to end so impl doesn't matter
	    }

	    var spring = generateSpringRK4(tension, friction, duration);

	    return function (start, end, percent) {
	      return start + (end - start) * spring(percent);
	    };
	  },

	  'cubic-bezier': cubicBezier
	};

	module.exports = easings;

	/***/ }),
	/* 74 */
	/***/ (function(module, exports, __webpack_require__) {


	/* global Float32Array */

	/*! Bezier curve function generator. Copyright Gaetan Renaudeau. MIT License: http://en.wikipedia.org/wiki/MIT_License */
	function generateCubicBezier(mX1, mY1, mX2, mY2) {
	  var NEWTON_ITERATIONS = 4,
	      NEWTON_MIN_SLOPE = 0.001,
	      SUBDIVISION_PRECISION = 0.0000001,
	      SUBDIVISION_MAX_ITERATIONS = 10,
	      kSplineTableSize = 11,
	      kSampleStepSize = 1.0 / (kSplineTableSize - 1.0),
	      float32ArraySupported = typeof Float32Array !== 'undefined';

	  /* Must contain four arguments. */
	  if (arguments.length !== 4) {
	    return false;
	  }

	  /* Arguments must be numbers. */
	  for (var i = 0; i < 4; ++i) {
	    if (typeof arguments[i] !== "number" || isNaN(arguments[i]) || !isFinite(arguments[i])) {
	      return false;
	    }
	  }

	  /* X values must be in the [0, 1] range. */
	  mX1 = Math.min(mX1, 1);
	  mX2 = Math.min(mX2, 1);
	  mX1 = Math.max(mX1, 0);
	  mX2 = Math.max(mX2, 0);

	  var mSampleValues = float32ArraySupported ? new Float32Array(kSplineTableSize) : new Array(kSplineTableSize);

	  function A(aA1, aA2) {
	    return 1.0 - 3.0 * aA2 + 3.0 * aA1;
	  }

	  function B(aA1, aA2) {
	    return 3.0 * aA2 - 6.0 * aA1;
	  }

	  function C(aA1) {
	    return 3.0 * aA1;
	  }

	  function calcBezier(aT, aA1, aA2) {
	    return ((A(aA1, aA2) * aT + B(aA1, aA2)) * aT + C(aA1)) * aT;
	  }

	  function getSlope(aT, aA1, aA2) {
	    return 3.0 * A(aA1, aA2) * aT * aT + 2.0 * B(aA1, aA2) * aT + C(aA1);
	  }

	  function newtonRaphsonIterate(aX, aGuessT) {
	    for (var _i = 0; _i < NEWTON_ITERATIONS; ++_i) {
	      var currentSlope = getSlope(aGuessT, mX1, mX2);

	      if (currentSlope === 0.0) {
	        return aGuessT;
	      }

	      var currentX = calcBezier(aGuessT, mX1, mX2) - aX;
	      aGuessT -= currentX / currentSlope;
	    }

	    return aGuessT;
	  }

	  function calcSampleValues() {
	    for (var _i2 = 0; _i2 < kSplineTableSize; ++_i2) {
	      mSampleValues[_i2] = calcBezier(_i2 * kSampleStepSize, mX1, mX2);
	    }
	  }

	  function binarySubdivide(aX, aA, aB) {
	    var currentX = void 0,
	        currentT = void 0,
	        i = 0;

	    do {
	      currentT = aA + (aB - aA) / 2.0;
	      currentX = calcBezier(currentT, mX1, mX2) - aX;
	      if (currentX > 0.0) {
	        aB = currentT;
	      } else {
	        aA = currentT;
	      }
	    } while (Math.abs(currentX) > SUBDIVISION_PRECISION && ++i < SUBDIVISION_MAX_ITERATIONS);

	    return currentT;
	  }

	  function getTForX(aX) {
	    var intervalStart = 0.0,
	        currentSample = 1,
	        lastSample = kSplineTableSize - 1;

	    for (; currentSample !== lastSample && mSampleValues[currentSample] <= aX; ++currentSample) {
	      intervalStart += kSampleStepSize;
	    }

	    --currentSample;

	    var dist = (aX - mSampleValues[currentSample]) / (mSampleValues[currentSample + 1] - mSampleValues[currentSample]),
	        guessForT = intervalStart + dist * kSampleStepSize,
	        initialSlope = getSlope(guessForT, mX1, mX2);

	    if (initialSlope >= NEWTON_MIN_SLOPE) {
	      return newtonRaphsonIterate(aX, guessForT);
	    } else if (initialSlope === 0.0) {
	      return guessForT;
	    } else {
	      return binarySubdivide(aX, intervalStart, intervalStart + kSampleStepSize);
	    }
	  }

	  var _precomputed = false;

	  function precompute() {
	    _precomputed = true;
	    if (mX1 !== mY1 || mX2 !== mY2) {
	      calcSampleValues();
	    }
	  }

	  var f = function f(aX) {
	    if (!_precomputed) {
	      precompute();
	    }
	    if (mX1 === mY1 && mX2 === mY2) {
	      return aX;
	    }
	    if (aX === 0) {
	      return 0;
	    }
	    if (aX === 1) {
	      return 1;
	    }

	    return calcBezier(getTForX(aX), mY1, mY2);
	  };

	  f.getControlPoints = function () {
	    return [{
	      x: mX1,
	      y: mY1
	    }, {
	      x: mX2,
	      y: mY2
	    }];
	  };

	  var str = "generateBezier(" + [mX1, mY1, mX2, mY2] + ")";
	  f.toString = function () {
	    return str;
	  };

	  return f;
	}

	module.exports = generateCubicBezier;

	/***/ }),
	/* 75 */
	/***/ (function(module, exports, __webpack_require__) {


	/*! Runge-Kutta spring physics function generator. Adapted from Framer.js, copyright Koen Bok. MIT License: http://en.wikipedia.org/wiki/MIT_License */
	/* Given a tension, friction, and duration, a simulation at 60FPS will first run without a defined duration in order to calculate the full path. A second pass
	   then adjusts the time delta -- using the relation between actual time and duration -- to calculate the path for the duration-constrained animation. */
	var generateSpringRK4 = function () {
	  function springAccelerationForState(state) {
	    return -state.tension * state.x - state.friction * state.v;
	  }

	  function springEvaluateStateWithDerivative(initialState, dt, derivative) {
	    var state = {
	      x: initialState.x + derivative.dx * dt,
	      v: initialState.v + derivative.dv * dt,
	      tension: initialState.tension,
	      friction: initialState.friction
	    };

	    return { dx: state.v, dv: springAccelerationForState(state) };
	  }

	  function springIntegrateState(state, dt) {
	    var a = {
	      dx: state.v,
	      dv: springAccelerationForState(state)
	    },
	        b = springEvaluateStateWithDerivative(state, dt * 0.5, a),
	        c = springEvaluateStateWithDerivative(state, dt * 0.5, b),
	        d = springEvaluateStateWithDerivative(state, dt, c),
	        dxdt = 1.0 / 6.0 * (a.dx + 2.0 * (b.dx + c.dx) + d.dx),
	        dvdt = 1.0 / 6.0 * (a.dv + 2.0 * (b.dv + c.dv) + d.dv);

	    state.x = state.x + dxdt * dt;
	    state.v = state.v + dvdt * dt;

	    return state;
	  }

	  return function springRK4Factory(tension, friction, duration) {

	    var initState = {
	      x: -1,
	      v: 0,
	      tension: null,
	      friction: null
	    },
	        path = [0],
	        time_lapsed = 0,
	        tolerance = 1 / 10000,
	        DT = 16 / 1000,
	        have_duration = void 0,
	        dt = void 0,
	        last_state = void 0;

	    tension = parseFloat(tension) || 500;
	    friction = parseFloat(friction) || 20;
	    duration = duration || null;

	    initState.tension = tension;
	    initState.friction = friction;

	    have_duration = duration !== null;

	    /* Calculate the actual time it takes for this animation to complete with the provided conditions. */
	    if (have_duration) {
	      /* Run the simulation without a duration. */
	      time_lapsed = springRK4Factory(tension, friction);
	      /* Compute the adjusted time delta. */
	      dt = time_lapsed / duration * DT;
	    } else {
	      dt = DT;
	    }

	    for (;;) {
	      /* Next/step function .*/
	      last_state = springIntegrateState(last_state || initState, dt);
	      /* Store the position. */
	      path.push(1 + last_state.x);
	      time_lapsed += 16;
	      /* If the change threshold is reached, break. */
	      if (!(Math.abs(last_state.x) > tolerance && Math.abs(last_state.v) > tolerance)) {
	        break;
	      }
	    }

	    /* If duration is not defined, return the actual time required for completing this animation. Otherwise, return a closure that holds the
	       computed path and returns a snapshot of the position according to a given percentComplete. */
	    return !have_duration ? time_lapsed : function (percentComplete) {
	      return path[percentComplete * (path.length - 1) | 0];
	    };
	  };
	}();

	module.exports = generateSpringRK4;

	/***/ }),
	/* 76 */
	/***/ (function(module, exports, __webpack_require__) {


	var is = __webpack_require__(0);

	function getEasedValue(type, start, end, percent, easingFn) {
	  if (percent === 1) {
	    return end;
	  }

	  var val = easingFn(start, end, percent);

	  if (type == null) {
	    return val;
	  }

	  if (type.roundValue || type.color) {
	    val = Math.round(val);
	  }

	  if (type.min !== undefined) {
	    val = Math.max(val, type.min);
	  }

	  if (type.max !== undefined) {
	    val = Math.min(val, type.max);
	  }

	  return val;
	}

	function getValue(prop, spec) {
	  if (prop.pfValue != null || prop.value != null) {
	    if (prop.pfValue != null && (spec == null || spec.type.units !== '%')) {
	      return prop.pfValue;
	    } else {
	      return prop.value;
	    }
	  } else {
	    return prop;
	  }
	}

	function ease(startProp, endProp, percent, easingFn, propSpec) {
	  var type = propSpec != null ? propSpec.type : null;

	  if (percent < 0) {
	    percent = 0;
	  } else if (percent > 1) {
	    percent = 1;
	  }

	  var start = getValue(startProp, propSpec);
	  var end = getValue(endProp, propSpec);

	  if (is.number(start) && is.number(end)) {
	    return getEasedValue(type, start, end, percent, easingFn);
	  } else if (is.array(start) && is.array(end)) {
	    var easedArr = [];

	    for (var i = 0; i < end.length; i++) {
	      var si = start[i];
	      var ei = end[i];

	      if (si != null && ei != null) {
	        var val = getEasedValue(type, si, ei, percent, easingFn);

	        easedArr.push(val);
	      } else {
	        easedArr.push(ei);
	      }
	    }

	    return easedArr;
	  }

	  return undefined;
	}

	module.exports = ease;

	/***/ }),
	/* 77 */
	/***/ (function(module, exports, __webpack_require__) {


	function startAnimation(self, ani, now, isCore) {
	  var isEles = !isCore;
	  var ele = self;
	  var ani_p = ani._private;
	  var cy = isCore ? self : self.cy();
	  var style = cy.style();

	  if (isEles) {
	    var pos = ele.position();

	    ani_p.startPosition = ani_p.startPosition || {
	      x: pos.x,
	      y: pos.y
	    };

	    ani_p.startStyle = ani_p.startStyle || style.getAnimationStartStyle(ele, ani_p.style);
	  }

	  if (isCore) {
	    var pan = cy._private.pan;

	    ani_p.startPan = ani_p.startPan || {
	      x: pan.x,
	      y: pan.y
	    };

	    ani_p.startZoom = ani_p.startZoom != null ? ani_p.startZoom : cy._private.zoom;
	  }

	  ani_p.started = true;
	  ani_p.startTime = now - ani_p.progress * ani_p.duration;
	}

	module.exports = startAnimation;

	/***/ }),
	/* 78 */
	/***/ (function(module, exports, __webpack_require__) {


	var Emitter = __webpack_require__(11);
	var define = __webpack_require__(4);
	var is = __webpack_require__(0);
	var util = __webpack_require__(1);
	var Selector = __webpack_require__(6);

	var emitterOptions = {
	  qualifierCompare: function qualifierCompare(selector1, selector2) {
	    if (selector1 == null || selector2 == null) {
	      return selector1 == null && selector2 == null;
	    } else {
	      return selector1.sameText(selector2);
	    }
	  },
	  eventMatches: function eventMatches(cy, listener, eventObj) {
	    var selector = listener.qualifier;

	    if (selector != null) {
	      return cy !== eventObj.target && is.element(eventObj.target) && selector.matches(eventObj.target);
	    }

	    return true;
	  },
	  eventFields: function eventFields(cy) {
	    return {
	      cy: cy,
	      target: cy
	    };
	  },
	  callbackContext: function callbackContext(cy, listener, eventObj) {
	    return listener.qualifier != null ? eventObj.target : cy;
	  }
	};

	var argSelector = function argSelector(arg) {
	  if (is.string(arg)) {
	    return new Selector(arg);
	  } else {
	    return arg;
	  }
	};

	var elesfn = {
	  createEmitter: function createEmitter() {
	    var _p = this._private;

	    if (!_p.emitter) {
	      _p.emitter = new Emitter(util.assign({
	        context: this
	      }, emitterOptions));
	    }

	    return this;
	  },

	  emitter: function emitter() {
	    return this._private.emitter;
	  },

	  on: function on(events, selector, callback) {
	    this.emitter().on(events, argSelector(selector), callback);

	    return this;
	  },

	  removeListener: function removeListener(events, selector, callback) {
	    this.emitter().removeListener(events, argSelector(selector), callback);

	    return this;
	  },

	  one: function one(events, selector, callback) {
	    this.emitter().one(events, argSelector(selector), callback);

	    return this;
	  },

	  once: function once(events, selector, callback) {
	    this.emitter().one(events, argSelector(selector), callback);

	    return this;
	  },

	  emit: function emit(events, extraParams) {
	    this.emitter().emit(events, extraParams);

	    return this;
	  }
	};

	define.eventAliasesOn(elesfn);

	module.exports = elesfn;

	/***/ }),
	/* 79 */
	/***/ (function(module, exports, __webpack_require__) {


	var corefn = {

	  png: function png(options) {
	    var renderer = this._private.renderer;
	    options = options || {};

	    return renderer.png(options);
	  },

	  jpg: function jpg(options) {
	    var renderer = this._private.renderer;
	    options = options || {};

	    options.bg = options.bg || '#fff';

	    return renderer.jpg(options);
	  }

	};

	corefn.jpeg = corefn.jpg;

	module.exports = corefn;

	/***/ }),
	/* 80 */
	/***/ (function(module, exports, __webpack_require__) {


	var util = __webpack_require__(1);
	var is = __webpack_require__(0);

	var corefn = {

	  layout: function layout(options) {
	    var cy = this;

	    if (options == null) {
	      util.error('Layout options must be specified to make a layout');
	      return;
	    }

	    if (options.name == null) {
	      util.error('A `name` must be specified to make a layout');
	      return;
	    }

	    var name = options.name;
	    var Layout = cy.extension('layout', name);

	    if (Layout == null) {
	      util.error('Can not apply layout: No such layout `' + name + '` found; did you include its JS file?');
	      return;
	    }

	    var eles = void 0;
	    if (is.string(options.eles)) {
	      eles = cy.$(options.eles);
	    } else {
	      eles = options.eles != null ? options.eles : cy.$();
	    }

	    var layout = new Layout(util.extend({}, options, {
	      cy: cy,
	      eles: eles
	    }));

	    return layout;
	  }

	};

	corefn.createLayout = corefn.makeLayout = corefn.layout;

	module.exports = corefn;

	/***/ }),
	/* 81 */
	/***/ (function(module, exports, __webpack_require__) {


	var corefn = {
	  notify: function notify(params) {
	    var _p = this._private;

	    if (_p.batchingNotify) {
	      var bEles = _p.batchNotifyEles;
	      var bTypes = _p.batchNotifyTypes;

	      if (params.eles) {
	        bEles.merge(params.eles);
	      }

	      if (!bTypes.ids[params.type]) {
	        bTypes.push(params.type);
	        bTypes.ids[params.type] = true;
	      }

	      return; // notifications are disabled during batching
	    }

	    if (!_p.notificationsEnabled) {
	      return;
	    } // exit on disabled

	    var renderer = this.renderer();

	    // exit if destroy() called on core or renderer in between frames #1499 #1528
	    if (this.isDestroyed() || !renderer) {
	      return;
	    }

	    renderer.notify(params);
	  },

	  notifications: function notifications(bool) {
	    var p = this._private;

	    if (bool === undefined) {
	      return p.notificationsEnabled;
	    } else {
	      p.notificationsEnabled = bool ? true : false;
	    }
	  },

	  noNotifications: function noNotifications(callback) {
	    this.notifications(false);
	    callback();
	    this.notifications(true);
	  },

	  batching: function batching() {
	    return this._private.batchCount > 0;
	  },

	  startBatch: function startBatch() {
	    var _p = this._private;

	    if (_p.batchCount == null) {
	      _p.batchCount = 0;
	    }

	    if (_p.batchCount === 0) {
	      _p.batchingStyle = _p.batchingNotify = true;
	      _p.batchStyleEles = this.collection();
	      _p.batchNotifyEles = this.collection();
	      _p.batchNotifyTypes = [];
	      _p.batchNotifyTypes.ids = {};
	    }

	    _p.batchCount++;

	    return this;
	  },

	  endBatch: function endBatch() {
	    var _p = this._private;

	    _p.batchCount--;

	    if (_p.batchCount === 0) {
	      // update style for dirty eles
	      _p.batchingStyle = false;
	      _p.batchStyleEles.updateStyle();

	      // notify the renderer of queued eles and event types
	      _p.batchingNotify = false;
	      this.notify({
	        type: _p.batchNotifyTypes,
	        eles: _p.batchNotifyEles
	      });
	    }

	    return this;
	  },

	  batch: function batch(callback) {
	    this.startBatch();
	    callback();
	    this.endBatch();

	    return this;
	  },

	  // for backwards compatibility
	  batchData: function batchData(map) {
	    var cy = this;

	    return this.batch(function () {
	      var ids = Object.keys(map);

	      for (var i = 0; i < ids.length; i++) {
	        var id = ids[i];
	        var data = map[id];
	        var ele = cy.getElementById(id);

	        ele.data(data);
	      }
	    });
	  }
	};

	module.exports = corefn;

	/***/ }),
	/* 82 */
	/***/ (function(module, exports, __webpack_require__) {


	var util = __webpack_require__(1);

	var corefn = {

	  renderTo: function renderTo(context, zoom, pan, pxRatio) {
	    var r = this._private.renderer;

	    r.renderTo(context, zoom, pan, pxRatio);
	    return this;
	  },

	  renderer: function renderer() {
	    return this._private.renderer;
	  },

	  forceRender: function forceRender() {
	    this.notify({
	      type: 'draw'
	    });

	    return this;
	  },

	  resize: function resize() {
	    this.invalidateSize();

	    this.notify({
	      type: 'resize'
	    });

	    this.emit('resize');

	    return this;
	  },

	  initRenderer: function initRenderer(options) {
	    var cy = this;

	    var RendererProto = cy.extension('renderer', options.name);
	    if (RendererProto == null) {
	      util.error('Can not initialise: No such renderer `%s` found; did you include its JS file?', options.name);
	      return;
	    }

	    cy._private.renderer = new RendererProto(util.extend({}, options, { cy: cy }));

	    this.notify({ type: 'init' });
	  },

	  destroyRenderer: function destroyRenderer() {
	    var cy = this;

	    cy.notify({ type: 'destroy' }); // destroy the renderer

	    var domEle = cy.container();
	    if (domEle) {
	      domEle._cyreg = null;

	      while (domEle.childNodes.length > 0) {
	        domEle.removeChild(domEle.childNodes[0]);
	      }
	    }

	    cy._private.renderer = null; // to be extra safe, remove the ref
	  },

	  onRender: function onRender(fn) {
	    return this.on('render', fn);
	  },

	  offRender: function offRender(fn) {
	    return this.off('render', fn);
	  }

	};

	corefn.invalidateDimensions = corefn.resize;

	module.exports = corefn;

	/***/ }),
	/* 83 */
	/***/ (function(module, exports, __webpack_require__) {


	var is = __webpack_require__(0);
	var Collection = __webpack_require__(7);

	var corefn = {

	  // get a collection
	  // - empty collection on no args
	  // - collection of elements in the graph on selector arg
	  // - guarantee a returned collection when elements or collection specified
	  collection: function collection(eles, opts) {

	    if (is.string(eles)) {
	      return this.$(eles);
	    } else if (is.elementOrCollection(eles)) {
	      return eles.collection();
	    } else if (is.array(eles)) {
	      return new Collection(this, eles, opts);
	    }

	    return new Collection(this);
	  },

	  nodes: function nodes(selector) {
	    var nodes = this.$(function (ele) {
	      return ele.isNode();
	    });

	    if (selector) {
	      return nodes.filter(selector);
	    }

	    return nodes;
	  },

	  edges: function edges(selector) {
	    var edges = this.$(function (ele) {
	      return ele.isEdge();
	    });

	    if (selector) {
	      return edges.filter(selector);
	    }

	    return edges;
	  },

	  // search the graph like jQuery
	  $: function $(selector) {
	    var eles = this._private.elements;

	    if (selector) {
	      return eles.filter(selector);
	    } else {
	      return eles.spawnSelf();
	    }
	  },

	  mutableElements: function mutableElements() {
	    return this._private.elements;
	  }

	};

	// aliases
	corefn.elements = corefn.filter = corefn.$;

	module.exports = corefn;

	/***/ }),
	/* 84 */
	/***/ (function(module, exports, __webpack_require__) {


	var is = __webpack_require__(0);
	var Style = __webpack_require__(18);

	var corefn = {

	  style: function style(newStyle) {
	    if (newStyle) {
	      var s = this.setStyle(newStyle);

	      s.update();
	    }

	    return this._private.style;
	  },

	  setStyle: function setStyle(style) {
	    var _p = this._private;

	    if (is.stylesheet(style)) {
	      _p.style = style.generateStyle(this);
	    } else if (is.array(style)) {
	      _p.style = Style.fromJson(this, style);
	    } else if (is.string(style)) {
	      _p.style = Style.fromString(this, style);
	    } else {
	      _p.style = Style(this);
	    }

	    return _p.style;
	  }
	};

	module.exports = corefn;

	/***/ }),
	/* 85 */
	/***/ (function(module, exports, __webpack_require__) {


	var util = __webpack_require__(1);
	var is = __webpack_require__(0);
	var Promise = __webpack_require__(5);

	var styfn = {};

	// (potentially expensive calculation)
	// apply the style to the element based on
	// - its bypass
	// - what selectors match it
	styfn.apply = function (eles) {
	  var self = this;
	  var _p = self._private;
	  var cy = _p.cy;
	  var updatedEles = cy.collection();

	  if (_p.newStyle) {
	    // clear style caches
	    _p.contextStyles = {};
	    _p.propDiffs = {};

	    self.cleanElements(eles, true);
	  }

	  for (var ie = 0; ie < eles.length; ie++) {
	    var ele = eles[ie];

	    var cxtMeta = self.getContextMeta(ele);

	    if (cxtMeta.empty) {
	      continue;
	    } else {
	      updatedEles.merge(ele);
	    }

	    var cxtStyle = self.getContextStyle(cxtMeta);
	    var app = self.applyContextStyle(cxtMeta, cxtStyle, ele);

	    if (!_p.newStyle) {
	      self.updateTransitions(ele, app.diffProps);
	    }

	    self.updateStyleHints(ele);
	  } // for elements

	  _p.newStyle = false;

	  return updatedEles;
	};

	styfn.getPropertiesDiff = function (oldCxtKey, newCxtKey) {
	  var self = this;
	  var cache = self._private.propDiffs = self._private.propDiffs || {};
	  var dualCxtKey = oldCxtKey + '-' + newCxtKey;
	  var cachedVal = cache[dualCxtKey];

	  if (cachedVal) {
	    return cachedVal;
	  }

	  var diffProps = [];
	  var addedProp = {};

	  for (var i = 0; i < self.length; i++) {
	    var cxt = self[i];
	    var oldHasCxt = oldCxtKey[i] === 't';
	    var newHasCxt = newCxtKey[i] === 't';
	    var cxtHasDiffed = oldHasCxt !== newHasCxt;
	    var cxtHasMappedProps = cxt.mappedProperties.length > 0;

	    if (cxtHasDiffed || cxtHasMappedProps) {
	      var props = void 0;

	      if (cxtHasDiffed && cxtHasMappedProps) {
	        props = cxt.properties; // suffices b/c mappedProperties is a subset of properties
	      } else if (cxtHasDiffed) {
	        props = cxt.properties; // need to check them all
	      } else if (cxtHasMappedProps) {
	        props = cxt.mappedProperties; // only need to check mapped
	      }

	      for (var j = 0; j < props.length; j++) {
	        var prop = props[j];
	        var name = prop.name;

	        // if a later context overrides this property, then the fact that this context has switched/diffed doesn't matter
	        // (semi expensive check since it makes this function O(n^2) on context length, but worth it since overall result
	        // is cached)
	        var laterCxtOverrides = false;
	        for (var k = i + 1; k < self.length; k++) {
	          var laterCxt = self[k];
	          var hasLaterCxt = newCxtKey[k] === 't';

	          if (!hasLaterCxt) {
	            continue;
	          } // can't override unless the context is active

	          laterCxtOverrides = laterCxt.properties[prop.name] != null;

	          if (laterCxtOverrides) {
	            break;
	          } // exit early as long as one later context overrides
	        }

	        if (!addedProp[name] && !laterCxtOverrides) {
	          addedProp[name] = true;
	          diffProps.push(name);
	        }
	      } // for props
	    } // if
	  } // for contexts

	  cache[dualCxtKey] = diffProps;
	  return diffProps;
	};

	styfn.getContextMeta = function (ele) {
	  var self = this;
	  var cxtKey = '';
	  var diffProps = void 0;
	  var prevKey = ele._private.styleCxtKey || '';

	  if (self._private.newStyle) {
	    prevKey = ''; // since we need to apply all style if a fresh stylesheet
	  }

	  // get the cxt key
	  for (var i = 0; i < self.length; i++) {
	    var context = self[i];
	    var contextSelectorMatches = context.selector && context.selector.matches(ele); // NB: context.selector may be null for 'core'

	    if (contextSelectorMatches) {
	      cxtKey += 't';
	    } else {
	      cxtKey += 'f';
	    }
	  } // for context

	  diffProps = self.getPropertiesDiff(prevKey, cxtKey);

	  ele._private.styleCxtKey = cxtKey;

	  return {
	    key: cxtKey,
	    diffPropNames: diffProps,
	    empty: diffProps.length === 0
	  };
	};

	// gets a computed ele style object based on matched contexts
	styfn.getContextStyle = function (cxtMeta) {
	  var cxtKey = cxtMeta.key;
	  var self = this;
	  var cxtStyles = this._private.contextStyles = this._private.contextStyles || {};

	  // if already computed style, returned cached copy
	  if (cxtStyles[cxtKey]) {
	    return cxtStyles[cxtKey];
	  }

	  var style = {
	    _private: {
	      key: cxtKey
	    }
	  };

	  for (var i = 0; i < self.length; i++) {
	    var cxt = self[i];
	    var hasCxt = cxtKey[i] === 't';

	    if (!hasCxt) {
	      continue;
	    }

	    for (var j = 0; j < cxt.properties.length; j++) {
	      var prop = cxt.properties[j];

	      style[prop.name] = prop;
	    }
	  }

	  cxtStyles[cxtKey] = style;
	  return style;
	};

	styfn.applyContextStyle = function (cxtMeta, cxtStyle, ele) {
	  var self = this;
	  var diffProps = cxtMeta.diffPropNames;
	  var retDiffProps = {};

	  for (var i = 0; i < diffProps.length; i++) {
	    var diffPropName = diffProps[i];
	    var cxtProp = cxtStyle[diffPropName];
	    var eleProp = ele.pstyle(diffPropName);

	    if (!cxtProp) {
	      // no context prop means delete
	      if (!eleProp) {
	        continue; // no existing prop means nothing needs to be removed
	        // nb affects initial application on mapped values like control-point-distances
	      } else if (eleProp.bypass) {
	        cxtProp = { name: diffPropName, deleteBypassed: true };
	      } else {
	        cxtProp = { name: diffPropName, delete: true };
	      }
	    }

	    // save cycles when the context prop doesn't need to be applied
	    if (eleProp === cxtProp) {
	      continue;
	    }

	    var retDiffProp = retDiffProps[diffPropName] = {
	      prev: eleProp
	    };

	    self.applyParsedProperty(ele, cxtProp);

	    retDiffProp.next = ele.pstyle(diffPropName);

	    if (retDiffProp.next && retDiffProp.next.bypass) {
	      retDiffProp.next = retDiffProp.next.bypassed;
	    }
	  }

	  return {
	    diffProps: retDiffProps
	  };
	};

	styfn.updateStyleHints = function (ele) {
	  var _p = ele._private;
	  var self = this;

	  if (ele.removed()) {
	    return;
	  }

	  // set whether has pie or not; for greater efficiency
	  var hasPie = false;
	  if (_p.group === 'nodes') {
	    for (var i = 1; i <= self.pieBackgroundN; i++) {
	      // 1..N
	      var _size = ele.pstyle('pie-' + i + '-background-size').value;

	      if (_size > 0) {
	        hasPie = true;
	        break;
	      }
	    }
	  }

	  _p.hasPie = hasPie;

	  var transform = ele.pstyle('text-transform').strValue;
	  var content = ele.pstyle('label').strValue;
	  var srcContent = ele.pstyle('source-label').strValue;
	  var tgtContent = ele.pstyle('target-label').strValue;
	  var fStyle = ele.pstyle('font-style').strValue;
	  var size = ele.pstyle('font-size').pfValue + 'px';
	  var family = ele.pstyle('font-family').strValue;
	  // let letiant = style['font-letiant'].strValue;
	  var weight = ele.pstyle('font-weight').strValue;
	  var valign = ele.pstyle('text-valign').strValue;
	  var halign = ele.pstyle('text-valign').strValue;
	  var oWidth = ele.pstyle('text-outline-width').pfValue;
	  var wrap = ele.pstyle('text-wrap').strValue;
	  var wrapW = ele.pstyle('text-max-width').pfValue;
	  var labelStyleKey = fStyle + '$' + size + '$' + family + '$' + weight + '$' + transform + '$' + valign + '$' + halign + '$' + oWidth + '$' + wrap + '$' + wrapW;
	  _p.labelStyleKey = labelStyleKey;
	  _p.sourceLabelKey = labelStyleKey + '$' + srcContent;
	  _p.targetLabelKey = labelStyleKey + '$' + tgtContent;
	  _p.labelKey = labelStyleKey + '$' + content;
	  _p.fontKey = fStyle + '$' + weight + '$' + size + '$' + family;

	  _p.styleKey = Date.now();
	};

	// apply a property to the style (for internal use)
	// returns whether application was successful
	//
	// now, this function flattens the property, and here's how:
	//
	// for parsedProp:{ bypass: true, deleteBypass: true }
	// no property is generated, instead the bypass property in the
	// element's style is replaced by what's pointed to by the `bypassed`
	// field in the bypass property (i.e. restoring the property the
	// bypass was overriding)
	//
	// for parsedProp:{ mapped: truthy }
	// the generated flattenedProp:{ mapping: prop }
	//
	// for parsedProp:{ bypass: true }
	// the generated flattenedProp:{ bypassed: parsedProp }
	styfn.applyParsedProperty = function (ele, parsedProp) {
	  var self = this;
	  var prop = parsedProp;
	  var style = ele._private.style;
	  var flatProp = void 0;
	  var types = self.types;
	  var type = self.properties[prop.name].type;
	  var propIsBypass = prop.bypass;
	  var origProp = style[prop.name];
	  var origPropIsBypass = origProp && origProp.bypass;
	  var _p = ele._private;
	  var flatPropMapping = 'mapping';

	  var checkZOrder = function checkZOrder() {
	    self.checkZOrderTrigger(ele, prop.name, origProp ? origProp.value : null, prop.value);
	  };

	  // edges connected to compound nodes can not be haystacks
	  if (parsedProp.name === 'curve-style' && parsedProp.value === 'haystack' && ele.isEdge() && (ele.isLoop() || ele.source().isParent() || ele.target().isParent())) {
	    prop = parsedProp = this.parse(parsedProp.name, 'bezier', propIsBypass);
	  }

	  if (prop.delete) {
	    // delete the property and use the default value on falsey value
	    style[prop.name] = undefined;

	    checkZOrder();

	    return true;
	  }

	  if (prop.deleteBypassed) {
	    // delete the property that the
	    if (!origProp) {
	      checkZOrder();

	      return true; // can't delete if no prop
	    } else if (origProp.bypass) {
	      // delete bypassed
	      origProp.bypassed = undefined;

	      checkZOrder();

	      return true;
	    } else {
	      return false; // we're unsuccessful deleting the bypassed
	    }
	  }

	  // check if we need to delete the current bypass
	  if (prop.deleteBypass) {
	    // then this property is just here to indicate we need to delete
	    if (!origProp) {
	      checkZOrder();

	      return true; // property is already not defined
	    } else if (origProp.bypass) {
	      // then replace the bypass property with the original
	      // because the bypassed property was already applied (and therefore parsed), we can just replace it (no reapplying necessary)
	      style[prop.name] = origProp.bypassed;

	      checkZOrder();

	      return true;
	    } else {
	      return false; // we're unsuccessful deleting the bypass
	    }
	  }

	  var printMappingErr = function printMappingErr() {
	    util.error('Do not assign mappings to elements without corresponding data (e.g. ele `' + ele.id() + '` for property `' + prop.name + '` with data field `' + prop.field + '`); try a `[' + prop.field + ']` selector to limit scope to elements with `' + prop.field + '` defined');
	  };

	  // put the property in the style objects
	  switch (prop.mapped) {// flatten the property if mapped
	    case types.mapData:
	      {
	        // flatten the field (e.g. data.foo.bar)
	        var fields = prop.field.split('.');
	        var _fieldVal = _p.data;

	        for (var i = 0; i < fields.length && _fieldVal; i++) {
	          var field = fields[i];
	          _fieldVal = _fieldVal[field];
	        }

	        var percent = void 0;
	        if (!is.number(_fieldVal)) {
	          // then keep the mapping but assume 0% for now
	          percent = 0;
	        } else {
	          percent = (_fieldVal - prop.fieldMin) / (prop.fieldMax - prop.fieldMin);
	        }

	        // make sure to bound percent value
	        if (percent < 0) {
	          percent = 0;
	        } else if (percent > 1) {
	          percent = 1;
	        }

	        if (type.color) {
	          var r1 = prop.valueMin[0];
	          var r2 = prop.valueMax[0];
	          var g1 = prop.valueMin[1];
	          var g2 = prop.valueMax[1];
	          var b1 = prop.valueMin[2];
	          var b2 = prop.valueMax[2];
	          var a1 = prop.valueMin[3] == null ? 1 : prop.valueMin[3];
	          var a2 = prop.valueMax[3] == null ? 1 : prop.valueMax[3];

	          var clr = [Math.round(r1 + (r2 - r1) * percent), Math.round(g1 + (g2 - g1) * percent), Math.round(b1 + (b2 - b1) * percent), Math.round(a1 + (a2 - a1) * percent)];

	          flatProp = { // colours are simple, so just create the flat property instead of expensive string parsing
	            bypass: prop.bypass, // we're a bypass if the mapping property is a bypass
	            name: prop.name,
	            value: clr,
	            strValue: 'rgb(' + clr[0] + ', ' + clr[1] + ', ' + clr[2] + ')'
	          };
	        } else if (type.number) {
	          var calcValue = prop.valueMin + (prop.valueMax - prop.valueMin) * percent;
	          flatProp = this.parse(prop.name, calcValue, prop.bypass, flatPropMapping);
	        } else {
	          return false; // can only map to colours and numbers
	        }

	        if (!flatProp) {
	          // if we can't flatten the property, then use the origProp so we still keep the mapping itself
	          flatProp = this.parse(prop.name, origProp.strValue, prop.bypass, flatPropMapping);
	        }

	        if (!flatProp) {
	          printMappingErr();
	        }
	        flatProp.mapping = prop; // keep a reference to the mapping
	        prop = flatProp; // the flattened (mapped) property is the one we want

	        break;
	      }

	    // direct mapping
	    case types.data:
	      {
	        // flatten the field (e.g. data.foo.bar)
	        var _fields = prop.field.split('.');
	        var _fieldVal2 = _p.data;

	        if (_fieldVal2) {
	          for (var _i = 0; _i < _fields.length; _i++) {
	            var _field = _fields[_i];
	            _fieldVal2 = _fieldVal2[_field];
	          }
	        }

	        flatProp = this.parse(prop.name, _fieldVal2, prop.bypass, flatPropMapping);

	        if (!flatProp) {
	          // if we can't flatten the property, then use the origProp so we still keep the mapping itself
	          var flatPropVal = origProp ? origProp.strValue : '';

	          flatProp = this.parse(prop.name, flatPropVal, prop.bypass, flatPropMapping);
	        }

	        if (!flatProp) {
	          printMappingErr();
	        }
	        flatProp.mapping = prop; // keep a reference to the mapping
	        prop = flatProp; // the flattened (mapped) property is the one we want

	        break;
	      }

	    case types.fn:
	      {
	        var fn = prop.value;
	        var fnRetVal = fn(ele);

	        flatProp = this.parse(prop.name, fnRetVal, prop.bypass, flatPropMapping);
	        flatProp.mapping = prop; // keep a reference to the mapping
	        prop = flatProp; // the flattened (mapped) property is the one we want

	        break;
	      }

	    case undefined:
	      break; // just set the property

	    default:
	      return false; // not a valid mapping
	  }

	  // if the property is a bypass property, then link the resultant property to the original one
	  if (propIsBypass) {
	    if (origPropIsBypass) {
	      // then this bypass overrides the existing one
	      prop.bypassed = origProp.bypassed; // steal bypassed prop from old bypass
	    } else {
	      // then link the orig prop to the new bypass
	      prop.bypassed = origProp;
	    }

	    style[prop.name] = prop; // and set
	  } else {
	    // prop is not bypass
	    if (origPropIsBypass) {
	      // then keep the orig prop (since it's a bypass) and link to the new prop
	      origProp.bypassed = prop;
	    } else {
	      // then just replace the old prop with the new one
	      style[prop.name] = prop;
	    }
	  }

	  checkZOrder();

	  return true;
	};

	styfn.cleanElements = function (eles, keepBypasses) {
	  var self = this;
	  var props = self.properties;

	  for (var i = 0; i < eles.length; i++) {
	    var ele = eles[i];

	    if (!keepBypasses) {
	      ele._private.style = {};
	    } else {
	      var style = ele._private.style;

	      for (var j = 0; j < props.length; j++) {
	        var prop = props[j];
	        var eleProp = style[prop.name];

	        if (eleProp) {
	          if (eleProp.bypass) {
	            eleProp.bypassed = null;
	          } else {
	            style[prop.name] = null;
	          }
	        }
	      }
	    }
	  }
	};

	// updates the visual style for all elements (useful for manual style modification after init)
	styfn.update = function () {
	  var cy = this._private.cy;
	  var eles = cy.mutableElements();

	  eles.updateStyle();
	};

	// just update the functional properties (i.e. mappings) in the elements'
	// styles (less expensive than recalculation)
	styfn.updateMappers = function (eles) {
	  var self = this;
	  var cy = this._private.cy;
	  var updatedEles = cy.collection();

	  for (var i = 0; i < eles.length; i++) {
	    // for each ele
	    var ele = eles[i];
	    var style = ele._private.style;
	    var updatedEle = false;

	    for (var j = 0; j < self.properties.length; j++) {
	      // for each prop
	      var prop = self.properties[j];
	      var propInStyle = style[prop.name];

	      if (propInStyle && propInStyle.mapping) {
	        var mapping = propInStyle.mapping;

	        this.applyParsedProperty(ele, mapping); // reapply the mapping property

	        updatedEle = true;
	      }
	    }

	    if (updatedEle) {
	      this.updateStyleHints(ele);

	      updatedEles.merge(ele);
	    }
	  }

	  return updatedEles;
	};

	// diffProps : { name => { prev, next } }
	styfn.updateTransitions = function (ele, diffProps, isBypass) {
	  var self = this;
	  var _p = ele._private;
	  var props = ele.pstyle('transition-property').value;
	  var duration = ele.pstyle('transition-duration').pfValue;
	  var delay = ele.pstyle('transition-delay').pfValue;

	  if (props.length > 0 && duration > 0) {

	    var style = {};

	    // build up the style to animate towards
	    var anyPrev = false;
	    for (var i = 0; i < props.length; i++) {
	      var prop = props[i];
	      var styProp = ele.pstyle(prop);
	      var diffProp = diffProps[prop];

	      if (!diffProp) {
	        continue;
	      }

	      var prevProp = diffProp.prev;
	      var fromProp = prevProp;
	      var toProp = diffProp.next != null ? diffProp.next : styProp;
	      var diff = false;
	      var initVal = void 0;
	      var initDt = 0.000001; // delta time % value for initVal (allows animating out of init zero opacity)

	      if (!fromProp) {
	        continue;
	      }

	      // consider px values
	      if (is.number(fromProp.pfValue) && is.number(toProp.pfValue)) {
	        diff = toProp.pfValue - fromProp.pfValue; // nonzero is truthy
	        initVal = fromProp.pfValue + initDt * diff;

	        // consider numerical values
	      } else if (is.number(fromProp.value) && is.number(toProp.value)) {
	        diff = toProp.value - fromProp.value; // nonzero is truthy
	        initVal = fromProp.value + initDt * diff;

	        // consider colour values
	      } else if (is.array(fromProp.value) && is.array(toProp.value)) {
	        diff = fromProp.value[0] !== toProp.value[0] || fromProp.value[1] !== toProp.value[1] || fromProp.value[2] !== toProp.value[2];

	        initVal = fromProp.strValue;
	      }

	      // the previous value is good for an animation only if it's different
	      if (diff) {
	        style[prop] = toProp.strValue; // to val
	        this.applyBypass(ele, prop, initVal); // from val
	        anyPrev = true;
	      }
	    } // end if props allow ani

	    // can't transition if there's nothing previous to transition from
	    if (!anyPrev) {
	      return;
	    }

	    _p.transitioning = true;

	    new Promise(function (resolve) {
	      if (delay > 0) {
	        ele.delayAnimation(delay).play().promise().then(resolve);
	      } else {
	        resolve();
	      }
	    }).then(function () {
	      return ele.animation({
	        style: style,
	        duration: duration,
	        easing: ele.pstyle('transition-timing-function').value,
	        queue: false
	      }).play().promise();
	    }).then(function () {
	      // if( !isBypass ){
	      self.removeBypasses(ele, props);
	      ele.emitAndNotify('style');
	      // }

	      _p.transitioning = false;
	    });
	  } else if (_p.transitioning) {
	    this.removeBypasses(ele, props);
	    ele.emitAndNotify('style');

	    _p.transitioning = false;
	  }
	};

	styfn.checkZOrderTrigger = function (ele, name, fromValue, toValue) {
	  var prop = this.properties[name];

	  if (prop.triggersZOrder != null && (fromValue == null || prop.triggersZOrder(fromValue, toValue))) {
	    this._private.cy.notify({
	      type: 'zorder',
	      eles: ele
	    });
	  }
	};

	module.exports = styfn;

	/***/ }),
	/* 86 */
	/***/ (function(module, exports, __webpack_require__) {


	var is = __webpack_require__(0);
	var util = __webpack_require__(1);

	var styfn = {};

	// bypasses are applied to an existing style on an element, and just tacked on temporarily
	// returns true iff application was successful for at least 1 specified property
	styfn.applyBypass = function (eles, name, value, updateTransitions) {
	  var self = this;
	  var props = [];
	  var isBypass = true;

	  // put all the properties (can specify one or many) in an array after parsing them
	  if (name === '*' || name === '**') {
	    // apply to all property names

	    if (value !== undefined) {
	      for (var i = 0; i < self.properties.length; i++) {
	        var prop = self.properties[i];
	        var _name = prop.name;

	        var parsedProp = this.parse(_name, value, true);

	        if (parsedProp) {
	          props.push(parsedProp);
	        }
	      }
	    }
	  } else if (is.string(name)) {
	    // then parse the single property
	    var _parsedProp = this.parse(name, value, true);

	    if (_parsedProp) {
	      props.push(_parsedProp);
	    }
	  } else if (is.plainObject(name)) {
	    // then parse each property
	    var specifiedProps = name;
	    updateTransitions = value;

	    var names = Object.keys(specifiedProps);

	    for (var _i = 0; _i < names.length; _i++) {
	      var _name2 = names[_i];
	      var _prop = self.properties[_name2];
	      var _value = specifiedProps[_name2];

	      if (_value === undefined) {
	        // try camel case name too
	        _value = specifiedProps[util.dash2camel(_name2)];
	      }

	      if (_value !== undefined) {
	        var _parsedProp2 = this.parse(_name2, _value, true);

	        if (_parsedProp2) {
	          props.push(_parsedProp2);
	        }
	      }
	    }
	  } else {
	    // can't do anything without well defined properties
	    return false;
	  }

	  // we've failed if there are no valid properties
	  if (props.length === 0) {
	    return false;
	  }

	  // now, apply the bypass properties on the elements
	  var ret = false; // return true if at least one succesful bypass applied
	  for (var _i2 = 0; _i2 < eles.length; _i2++) {
	    // for each ele
	    var ele = eles[_i2];
	    var diffProps = {};
	    var diffProp = void 0;

	    for (var j = 0; j < props.length; j++) {
	      // for each prop
	      var _prop2 = props[j];

	      if (updateTransitions) {
	        var prevProp = ele.pstyle(_prop2.name);
	        diffProp = diffProps[_prop2.name] = { prev: prevProp };
	      }

	      ret = this.applyParsedProperty(ele, _prop2) || ret;

	      if (updateTransitions) {
	        diffProp.next = ele.pstyle(_prop2.name);
	      }
	    } // for props

	    if (ret) {
	      this.updateStyleHints(ele);
	    }

	    if (updateTransitions) {
	      this.updateTransitions(ele, diffProps, isBypass);
	    }
	  } // for eles

	  return ret;
	};

	// only useful in specific cases like animation
	styfn.overrideBypass = function (eles, name, value) {
	  name = util.camel2dash(name);

	  for (var i = 0; i < eles.length; i++) {
	    var ele = eles[i];
	    var prop = ele._private.style[name];
	    var type = this.properties[name].type;
	    var isColor = type.color;
	    var isMulti = type.mutiple;

	    if (!prop || !prop.bypass) {
	      // need a bypass if one doesn't exist
	      this.applyBypass(ele, name, value);
	      continue;
	    }

	    var oldValue = prop.pfValue != null ? prop.pfValue : prop.value;

	    prop.value = value;

	    if (prop.pfValue != null) {
	      prop.pfValue = value;
	    }

	    if (isColor) {
	      prop.strValue = 'rgb(' + value.join(',') + ')';
	    } else if (isMulti) {
	      prop.strValue = value.join(' ');
	    } else {
	      prop.strValue = '' + value;
	    }

	    this.checkZOrderTrigger(ele, name, oldValue, value);
	  }
	};

	styfn.removeAllBypasses = function (eles, updateTransitions) {
	  return this.removeBypasses(eles, this.propertyNames, updateTransitions);
	};

	styfn.removeBypasses = function (eles, props, updateTransitions) {
	  var isBypass = true;

	  for (var j = 0; j < eles.length; j++) {
	    var ele = eles[j];
	    var diffProps = {};

	    for (var i = 0; i < props.length; i++) {
	      var name = props[i];
	      var prop = this.properties[name];
	      var prevProp = ele.pstyle(prop.name);

	      if (!prevProp || !prevProp.bypass) {
	        // if a bypass doesn't exist for the prop, nothing needs to be removed
	        continue;
	      }

	      var value = ''; // empty => remove bypass
	      var parsedProp = this.parse(name, value, true);
	      var diffProp = diffProps[prop.name] = { prev: prevProp };

	      this.applyParsedProperty(ele, parsedProp);

	      diffProp.next = ele.pstyle(prop.name);
	    } // for props

	    this.updateStyleHints(ele);

	    if (updateTransitions) {
	      this.updateTransitions(ele, diffProps, isBypass);
	    }
	  } // for eles
	};

	module.exports = styfn;

	/***/ }),
	/* 87 */
	/***/ (function(module, exports, __webpack_require__) {


	var window = __webpack_require__(3);

	var styfn = {};

	// gets what an em size corresponds to in pixels relative to a dom element
	styfn.getEmSizeInPixels = function () {
	  var px = this.containerCss('font-size');

	  if (px != null) {
	    return parseFloat(px);
	  } else {
	    return 1; // for headless
	  }
	};

	// gets css property from the core container
	styfn.containerCss = function (propName) {
	  var cy = this._private.cy;
	  var domElement = cy.container();

	  if (window && domElement && window.getComputedStyle) {
	    return window.getComputedStyle(domElement).getPropertyValue(propName);
	  }
	};

	module.exports = styfn;

	/***/ }),
	/* 88 */
	/***/ (function(module, exports, __webpack_require__) {


	var util = __webpack_require__(1);
	var is = __webpack_require__(0);

	var styfn = {};

	// gets the rendered style for an element
	styfn.getRenderedStyle = function (ele, prop) {
	  if (prop) {
	    return this.getStylePropertyValue(ele, prop, true);
	  } else {
	    return this.getRawStyle(ele, true);
	  }
	};

	// gets the raw style for an element
	styfn.getRawStyle = function (ele, isRenderedVal) {
	  var self = this;

	  ele = ele[0]; // insure it's an element

	  if (ele) {
	    var rstyle = {};

	    for (var i = 0; i < self.properties.length; i++) {
	      var prop = self.properties[i];
	      var val = self.getStylePropertyValue(ele, prop.name, isRenderedVal);

	      if (val != null) {
	        rstyle[prop.name] = val;
	        rstyle[util.dash2camel(prop.name)] = val;
	      }
	    }

	    return rstyle;
	  }
	};

	styfn.getIndexedStyle = function (ele, property, subproperty, index) {
	  var pstyle = ele.pstyle(property)[subproperty][index];
	  return pstyle != null ? pstyle : ele.cy().style().getDefaultProperty(property)[subproperty][0];
	};

	styfn.getStylePropertyValue = function (ele, propName, isRenderedVal) {
	  var self = this;

	  ele = ele[0]; // insure it's an element

	  if (ele) {
	    var prop = self.properties[propName];

	    if (prop.alias) {
	      prop = prop.pointsTo;
	    }

	    var type = prop.type;
	    var styleProp = ele.pstyle(prop.name);

	    if (styleProp) {
	      var value = styleProp.value,
	          units = styleProp.units,
	          strValue = styleProp.strValue;


	      if (isRenderedVal && type.number && value != null && is.number(value)) {
	        var zoom = ele.cy().zoom();
	        var getRenderedValue = function getRenderedValue(val) {
	          return val * zoom;
	        };
	        var getValueStringWithUnits = function getValueStringWithUnits(val, units) {
	          return getRenderedValue(val) + units;
	        };
	        var isArrayValue = is.array(value);
	        var haveUnits = isArrayValue ? units.every(function (u) {
	          return u != null;
	        }) : units != null;

	        if (haveUnits) {
	          if (isArrayValue) {
	            return value.map(function (v, i) {
	              return getValueStringWithUnits(v, units[i]);
	            }).join(' ');
	          } else {
	            return getValueStringWithUnits(value, units);
	          }
	        } else {
	          if (isArrayValue) {
	            return value.map(function (v) {
	              return is.string(v) ? v : '' + getRenderedValue(v);
	            }).join(' ');
	          } else {
	            return '' + getRenderedValue(value);
	          }
	        }
	      } else if (strValue != null) {
	        return strValue;
	      }
	    }

	    return null;
	  }
	};

	styfn.getAnimationStartStyle = function (ele, aniProps) {
	  var rstyle = {};

	  for (var i = 0; i < aniProps.length; i++) {
	    var aniProp = aniProps[i];
	    var name = aniProp.name;

	    var styleProp = ele.pstyle(name);

	    if (styleProp !== undefined) {
	      // then make a prop of it
	      if (is.plainObject(styleProp)) {
	        styleProp = this.parse(name, styleProp.strValue);
	      } else {
	        styleProp = this.parse(name, styleProp);
	      }
	    }

	    if (styleProp) {
	      rstyle[name] = styleProp;
	    }
	  }

	  return rstyle;
	};

	styfn.getPropsList = function (propsObj) {
	  var self = this;
	  var rstyle = [];
	  var style = propsObj;
	  var props = self.properties;

	  if (style) {
	    var names = Object.keys(style);

	    for (var i = 0; i < names.length; i++) {
	      var name = names[i];
	      var val = style[name];
	      var prop = props[name] || props[util.camel2dash(name)];
	      var styleProp = this.parse(prop.name, val);

	      if (styleProp) {
	        rstyle.push(styleProp);
	      }
	    }
	  }

	  return rstyle;
	};

	module.exports = styfn;

	/***/ }),
	/* 89 */
	/***/ (function(module, exports, __webpack_require__) {


	var styfn = {};

	styfn.appendFromJson = function (json) {
	  var style = this;

	  for (var i = 0; i < json.length; i++) {
	    var context = json[i];
	    var selector = context.selector;
	    var props = context.style || context.css;
	    var names = Object.keys(props);

	    style.selector(selector); // apply selector

	    for (var j = 0; j < names.length; j++) {
	      var name = names[j];
	      var value = props[name];

	      style.css(name, value); // apply property
	    }
	  }

	  return style;
	};

	// accessible cy.style() function
	styfn.fromJson = function (json) {
	  var style = this;

	  style.resetToDefault();
	  style.appendFromJson(json);

	  return style;
	};

	// get json from cy.style() api
	styfn.json = function () {
	  var json = [];

	  for (var i = this.defaultLength; i < this.length; i++) {
	    var cxt = this[i];
	    var selector = cxt.selector;
	    var props = cxt.properties;
	    var css = {};

	    for (var j = 0; j < props.length; j++) {
	      var prop = props[j];
	      css[prop.name] = prop.strValue;
	    }

	    json.push({
	      selector: !selector ? 'core' : selector.toString(),
	      style: css
	    });
	  }

	  return json;
	};

	module.exports = styfn;

	/***/ }),
	/* 90 */
	/***/ (function(module, exports, __webpack_require__) {


	var util = __webpack_require__(1);
	var Selector = __webpack_require__(6);

	var styfn = {};

	styfn.appendFromString = function (string) {
	  var self = this;
	  var style = this;
	  var remaining = '' + string;
	  var selAndBlockStr = void 0;
	  var blockRem = void 0;
	  var propAndValStr = void 0;

	  // remove comments from the style string
	  remaining = remaining.replace(/[/][*](\s|.)+?[*][/]/g, '');

	  function removeSelAndBlockFromRemaining() {
	    // remove the parsed selector and block from the remaining text to parse
	    if (remaining.length > selAndBlockStr.length) {
	      remaining = remaining.substr(selAndBlockStr.length);
	    } else {
	      remaining = '';
	    }
	  }

	  function removePropAndValFromRem() {
	    // remove the parsed property and value from the remaining block text to parse
	    if (blockRem.length > propAndValStr.length) {
	      blockRem = blockRem.substr(propAndValStr.length);
	    } else {
	      blockRem = '';
	    }
	  }

	  while (true) {
	    var nothingLeftToParse = remaining.match(/^\s*$/);
	    if (nothingLeftToParse) {
	      break;
	    }

	    var selAndBlock = remaining.match(/^\s*((?:.|\s)+?)\s*\{((?:.|\s)+?)\}/);

	    if (!selAndBlock) {
	      util.error('Halting stylesheet parsing: String stylesheet contains more to parse but no selector and block found in: ' + remaining);
	      break;
	    }

	    selAndBlockStr = selAndBlock[0];

	    // parse the selector
	    var selectorStr = selAndBlock[1];
	    if (selectorStr !== 'core') {
	      var selector = new Selector(selectorStr);
	      if (selector._private.invalid) {
	        util.error('Skipping parsing of block: Invalid selector found in string stylesheet: ' + selectorStr);

	        // skip this selector and block
	        removeSelAndBlockFromRemaining();
	        continue;
	      }
	    }

	    // parse the block of properties and values
	    var blockStr = selAndBlock[2];
	    var invalidBlock = false;
	    blockRem = blockStr;
	    var props = [];

	    while (true) {
	      var _nothingLeftToParse = blockRem.match(/^\s*$/);
	      if (_nothingLeftToParse) {
	        break;
	      }

	      var propAndVal = blockRem.match(/^\s*(.+?)\s*:\s*(.+?)\s*;/);

	      if (!propAndVal) {
	        util.error('Skipping parsing of block: Invalid formatting of style property and value definitions found in:' + blockStr);
	        invalidBlock = true;
	        break;
	      }

	      propAndValStr = propAndVal[0];
	      var propStr = propAndVal[1];
	      var valStr = propAndVal[2];

	      var prop = self.properties[propStr];
	      if (!prop) {
	        util.error('Skipping property: Invalid property name in: ' + propAndValStr);

	        // skip this property in the block
	        removePropAndValFromRem();
	        continue;
	      }

	      var parsedProp = style.parse(propStr, valStr);

	      if (!parsedProp) {
	        util.error('Skipping property: Invalid property definition in: ' + propAndValStr);

	        // skip this property in the block
	        removePropAndValFromRem();
	        continue;
	      }

	      props.push({
	        name: propStr,
	        val: valStr
	      });
	      removePropAndValFromRem();
	    }

	    if (invalidBlock) {
	      removeSelAndBlockFromRemaining();
	      break;
	    }

	    // put the parsed block in the style
	    style.selector(selectorStr);
	    for (var i = 0; i < props.length; i++) {
	      var _prop = props[i];
	      style.css(_prop.name, _prop.val);
	    }

	    removeSelAndBlockFromRemaining();
	  }

	  return style;
	};

	styfn.fromString = function (string) {
	  var style = this;

	  style.resetToDefault();
	  style.appendFromString(string);

	  return style;
	};

	module.exports = styfn;

	/***/ }),
	/* 91 */
	/***/ (function(module, exports, __webpack_require__) {


	var util = __webpack_require__(1);
	var is = __webpack_require__(0);

	var styfn = {};

	(function () {
	  var number = util.regex.number;
	  var rgba = util.regex.rgbaNoBackRefs;
	  var hsla = util.regex.hslaNoBackRefs;
	  var hex3 = util.regex.hex3;
	  var hex6 = util.regex.hex6;
	  var data = function data(prefix) {
	    return '^' + prefix + '\\s*\\(\\s*([\\w\\.]+)\\s*\\)$';
	  };
	  var mapData = function mapData(prefix) {
	    var mapArg = number + '|\\w+|' + rgba + '|' + hsla + '|' + hex3 + '|' + hex6;
	    return '^' + prefix + '\\s*\\(([\\w\\.]+)\\s*\\,\\s*(' + number + ')\\s*\\,\\s*(' + number + ')\\s*,\\s*(' + mapArg + ')\\s*\\,\\s*(' + mapArg + ')\\)$';
	  };
	  var urlRegexes = ['^url\\s*\\(\\s*[\'"]?(.+?)[\'"]?\\s*\\)$', '^(none)$', '^(.+)$'];

	  // each visual style property has a type and needs to be validated according to it
	  styfn.types = {
	    time: { number: true, min: 0, units: 's|ms', implicitUnits: 'ms' },
	    percent: { number: true, min: 0, max: 100, units: '%', implicitUnits: '%' },
	    zeroOneNumber: { number: true, min: 0, max: 1, unitless: true },
	    zeroOneNumbers: { number: true, min: 0, max: 1, unitless: true, multiple: true },
	    nOneOneNumber: { number: true, min: -1, max: 1, unitless: true },
	    nonNegativeInt: { number: true, min: 0, integer: true, unitless: true },
	    position: { enums: ['parent', 'origin'] },
	    nodeSize: { number: true, min: 0, enums: ['label'] },
	    number: { number: true, unitless: true },
	    numbers: { number: true, unitless: true, multiple: true },
	    positiveNumber: { number: true, unitless: true, min: 0, strictMin: true },
	    size: { number: true, min: 0 },
	    bidirectionalSize: { number: true }, // allows negative
	    bidirectionalSizes: { number: true, multiple: true }, // allows negative
	    sizeMaybePercent: { number: true, min: 0, allowPercent: true },
	    paddingRelativeTo: { enums: ['width', 'height', 'average', 'min', 'max'] },
	    bgWH: { number: true, min: 0, allowPercent: true, enums: ['auto'], multiple: true },
	    bgPos: { number: true, allowPercent: true, multiple: true },
	    bgRelativeTo: { enums: ['inner', 'include-padding'], multiple: true },
	    bgRepeat: { enums: ['repeat', 'repeat-x', 'repeat-y', 'no-repeat'], multiple: true },
	    bgFit: { enums: ['none', 'contain', 'cover'], multiple: true },
	    bgCrossOrigin: { enums: ['anonymous', 'use-credentials'], multiple: true },
	    bgClip: { enums: ['none', 'node'] },
	    color: { color: true },
	    bool: { enums: ['yes', 'no'] },
	    lineStyle: { enums: ['solid', 'dotted', 'dashed'] },
	    borderStyle: { enums: ['solid', 'dotted', 'dashed', 'double'] },
	    curveStyle: { enums: ['bezier', 'unbundled-bezier', 'haystack', 'segments'] },
	    fontFamily: { regex: '^([\\w- \\"]+(?:\\s*,\\s*[\\w- \\"]+)*)$' },
	    fontletiant: { enums: ['small-caps', 'normal'] },
	    fontStyle: { enums: ['italic', 'normal', 'oblique'] },
	    fontWeight: { enums: ['normal', 'bold', 'bolder', 'lighter', '100', '200', '300', '400', '500', '600', '800', '900', 100, 200, 300, 400, 500, 600, 700, 800, 900] },
	    textDecoration: { enums: ['none', 'underline', 'overline', 'line-through'] },
	    textTransform: { enums: ['none', 'uppercase', 'lowercase'] },
	    textWrap: { enums: ['none', 'wrap', 'ellipsis'] },
	    textBackgroundShape: { enums: ['rectangle', 'roundrectangle'] },
	    nodeShape: { enums: ['rectangle', 'roundrectangle', 'cutrectangle', 'bottomroundrectangle', 'barrel', 'ellipse', 'triangle', 'square', 'pentagon', 'hexagon', 'concavehexagon', 'heptagon', 'octagon', 'tag', 'star', 'diamond', 'vee', 'rhomboid', 'polygon'] },
	    compoundIncludeLabels: { enums: ['include', 'exclude'] },
	    arrowShape: { enums: ['tee', 'triangle', 'triangle-tee', 'triangle-cross', 'triangle-backcurve', 'half-triangle-overshot', 'vee', 'square', 'circle', 'diamond', 'none'] },
	    arrowFill: { enums: ['filled', 'hollow'] },
	    display: { enums: ['element', 'none'] },
	    visibility: { enums: ['hidden', 'visible'] },
	    zCompoundDepth: { enums: ['bottom', 'orphan', 'auto', 'top'] },
	    zIndexCompare: { enums: ['auto', 'manual'] },
	    valign: { enums: ['top', 'center', 'bottom'] },
	    halign: { enums: ['left', 'center', 'right'] },
	    text: { string: true },
	    data: { mapping: true, regex: data('data') },
	    layoutData: { mapping: true, regex: data('layoutData') },
	    scratch: { mapping: true, regex: data('scratch') },
	    mapData: { mapping: true, regex: mapData('mapData') },
	    mapLayoutData: { mapping: true, regex: mapData('mapLayoutData') },
	    mapScratch: { mapping: true, regex: mapData('mapScratch') },
	    fn: { mapping: true, fn: true },
	    url: { regexes: urlRegexes, singleRegexMatchValue: true },
	    urls: { regexes: urlRegexes, singleRegexMatchValue: true, multiple: true },
	    propList: { propList: true },
	    angle: { number: true, units: 'deg|rad', implicitUnits: 'rad' },
	    textRotation: { number: true, units: 'deg|rad', implicitUnits: 'rad', enums: ['none', 'autorotate'] },
	    polygonPointList: { number: true, multiple: true, evenMultiple: true, min: -1, max: 1, unitless: true },
	    edgeDistances: { enums: ['intersection', 'node-position'] },
	    edgeEndpoint: {
	      number: true, multiple: true, units: '%|px|em|deg|rad', implicitUnits: 'px',
	      enums: ['inside-to-node', 'outside-to-node', 'outside-to-line'], singleEnum: true,
	      validate: function validate(valArr, unitsArr) {
	        switch (valArr.length) {
	          case 2:
	            // can be % or px only
	            return unitsArr[0] !== 'deg' && unitsArr[0] !== 'rad' && unitsArr[1] !== 'deg' && unitsArr[1] !== 'rad';
	          case 1:
	            // can be enum, deg, or rad only
	            return is.string(valArr[0]) || unitsArr[0] === 'deg' || unitsArr[0] === 'rad';
	          default:
	            return false;
	        }
	      }
	    },
	    easing: {
	      regexes: ['^(spring)\\s*\\(\\s*(' + number + ')\\s*,\\s*(' + number + ')\\s*\\)$', '^(cubic-bezier)\\s*\\(\\s*(' + number + ')\\s*,\\s*(' + number + ')\\s*,\\s*(' + number + ')\\s*,\\s*(' + number + ')\\s*\\)$'],
	      enums: ['linear', 'ease', 'ease-in', 'ease-out', 'ease-in-out', 'ease-in-sine', 'ease-out-sine', 'ease-in-out-sine', 'ease-in-quad', 'ease-out-quad', 'ease-in-out-quad', 'ease-in-cubic', 'ease-out-cubic', 'ease-in-out-cubic', 'ease-in-quart', 'ease-out-quart', 'ease-in-out-quart', 'ease-in-quint', 'ease-out-quint', 'ease-in-out-quint', 'ease-in-expo', 'ease-out-expo', 'ease-in-out-expo', 'ease-in-circ', 'ease-out-circ', 'ease-in-out-circ']
	    }
	  };

	  var zOrderDiff = {
	    zeroNonZero: function zeroNonZero(val1, val2) {
	      if (val1 === 0 && val2 !== 0) {
	        return true;
	      } else if (val1 !== 0 && val2 === 0) {
	        return true;
	      } else {
	        return false;
	      }
	    },
	    anyDiff: function anyDiff(val1, val2) {
	      return val1 !== val2;
	    }
	  };

	  var zd = zOrderDiff;

	  // define visual style properties
	  var t = styfn.types;
	  var props = styfn.properties = [
	  // main label
	  { name: 'label', type: t.text }, { name: 'text-rotation', type: t.textRotation }, { name: 'text-margin-x', type: t.bidirectionalSize }, { name: 'text-margin-y', type: t.bidirectionalSize },

	  // source label
	  { name: 'source-label', type: t.text }, { name: 'source-text-rotation', type: t.textRotation }, { name: 'source-text-margin-x', type: t.bidirectionalSize }, { name: 'source-text-margin-y', type: t.bidirectionalSize }, { name: 'source-text-offset', type: t.size },

	  // target label
	  { name: 'target-label', type: t.text }, { name: 'target-text-rotation', type: t.textRotation }, { name: 'target-text-margin-x', type: t.bidirectionalSize }, { name: 'target-text-margin-y', type: t.bidirectionalSize }, { name: 'target-text-offset', type: t.size },

	  // common label style
	  { name: 'text-valign', type: t.valign }, { name: 'text-halign', type: t.halign }, { name: 'color', type: t.color }, { name: 'text-outline-color', type: t.color }, { name: 'text-outline-width', type: t.size }, { name: 'text-outline-opacity', type: t.zeroOneNumber }, { name: 'text-opacity', type: t.zeroOneNumber }, { name: 'text-background-color', type: t.color }, { name: 'text-background-opacity', type: t.zeroOneNumber }, { name: 'text-background-padding', type: t.size }, { name: 'text-border-opacity', type: t.zeroOneNumber }, { name: 'text-border-color', type: t.color }, { name: 'text-border-width', type: t.size }, { name: 'text-border-style', type: t.borderStyle }, { name: 'text-background-shape', type: t.textBackgroundShape },
	  // { name: 'text-decoration', type: t.textDecoration }, // not supported in canvas
	  { name: 'text-transform', type: t.textTransform }, { name: 'text-wrap', type: t.textWrap }, { name: 'text-max-width', type: t.size }, { name: 'text-events', type: t.bool }, { name: 'font-family', type: t.fontFamily }, { name: 'font-style', type: t.fontStyle },
	  // { name: 'font-letiant', type: t.fontletiant }, // not useful
	  { name: 'font-weight', type: t.fontWeight }, { name: 'font-size', type: t.size }, { name: 'min-zoomed-font-size', type: t.size },

	  // behaviour
	  { name: 'events', type: t.bool },

	  // visibility
	  { name: 'display', type: t.display, triggersZOrder: zd.anyDiff }, { name: 'visibility', type: t.visibility, triggersZOrder: zd.anyDiff }, { name: 'opacity', type: t.zeroOneNumber, triggersZOrder: zd.zeroNonZero }, { name: 'z-compound-depth', type: t.zCompoundDepth, triggersZOrder: zd.anyDiff }, { name: 'z-index-compare', type: t.zIndexCompare, triggersZOrder: zd.anyDiff }, { name: 'z-index', type: t.nonNegativeInt, triggersZOrder: zd.anyDiff },

	  // overlays
	  { name: 'overlay-padding', type: t.size }, { name: 'overlay-color', type: t.color }, { name: 'overlay-opacity', type: t.zeroOneNumber },

	  // transition anis
	  { name: 'transition-property', type: t.propList }, { name: 'transition-duration', type: t.time }, { name: 'transition-delay', type: t.time }, { name: 'transition-timing-function', type: t.easing },

	  // node body
	  { name: 'height', type: t.nodeSize }, { name: 'width', type: t.nodeSize }, { name: 'shape', type: t.nodeShape }, { name: 'shape-polygon-points', type: t.polygonPointList }, { name: 'background-color', type: t.color }, { name: 'background-opacity', type: t.zeroOneNumber }, { name: 'background-blacken', type: t.nOneOneNumber }, { name: 'padding', type: t.sizeMaybePercent }, { name: 'padding-relative-to', type: t.paddingRelativeTo },

	  // node border
	  { name: 'border-color', type: t.color }, { name: 'border-opacity', type: t.zeroOneNumber }, { name: 'border-width', type: t.size }, { name: 'border-style', type: t.borderStyle },

	  // node background images
	  { name: 'background-image', type: t.urls }, { name: 'background-image-crossorigin', type: t.bgCrossOrigin }, { name: 'background-image-opacity', type: t.zeroOneNumbers }, { name: 'background-position-x', type: t.bgPos }, { name: 'background-position-y', type: t.bgPos }, { name: 'background-width-relative-to', type: t.bgRelativeTo }, { name: 'background-height-relative-to', type: t.bgRelativeTo }, { name: 'background-repeat', type: t.bgRepeat }, { name: 'background-fit', type: t.bgFit }, { name: 'background-clip', type: t.bgClip }, { name: 'background-width', type: t.bgWH }, { name: 'background-height', type: t.bgWH },

	  // compound props
	  { name: 'position', type: t.position }, { name: 'compound-sizing-wrt-labels', type: t.compoundIncludeLabels }, { name: 'min-width', type: t.size }, { name: 'min-width-bias-left', type: t.sizeMaybePercent }, { name: 'min-width-bias-right', type: t.sizeMaybePercent }, { name: 'min-height', type: t.size }, { name: 'min-height-bias-top', type: t.sizeMaybePercent }, { name: 'min-height-bias-bottom', type: t.sizeMaybePercent },

	  // edge line
	  { name: 'line-style', type: t.lineStyle }, { name: 'line-color', type: t.color }, { name: 'curve-style', type: t.curveStyle }, { name: 'haystack-radius', type: t.zeroOneNumber }, { name: 'source-endpoint', type: t.edgeEndpoint }, { name: 'target-endpoint', type: t.edgeEndpoint }, { name: 'control-point-step-size', type: t.size }, { name: 'control-point-distances', type: t.bidirectionalSizes }, { name: 'control-point-weights', type: t.numbers }, { name: 'segment-distances', type: t.bidirectionalSizes }, { name: 'segment-weights', type: t.numbers }, { name: 'edge-distances', type: t.edgeDistances }, { name: 'arrow-scale', type: t.positiveNumber }, { name: 'loop-direction', type: t.angle }, { name: 'loop-sweep', type: t.angle }, { name: 'source-distance-from-node', type: t.size }, { name: 'target-distance-from-node', type: t.size },

	  // ghost properties
	  { name: 'ghost', type: t.bool }, { name: 'ghost-offset-x', type: t.bidirectionalSize }, { name: 'ghost-offset-y', type: t.bidirectionalSize }, { name: 'ghost-opacity', type: t.zeroOneNumber },

	  // these are just for the core
	  { name: 'selection-box-color', type: t.color }, { name: 'selection-box-opacity', type: t.zeroOneNumber }, { name: 'selection-box-border-color', type: t.color }, { name: 'selection-box-border-width', type: t.size }, { name: 'active-bg-color', type: t.color }, { name: 'active-bg-opacity', type: t.zeroOneNumber }, { name: 'active-bg-size', type: t.size }, { name: 'outside-texture-bg-color', type: t.color }, { name: 'outside-texture-bg-opacity', type: t.zeroOneNumber }];

	  // define aliases
	  var aliases = styfn.aliases = [{ name: 'content', pointsTo: 'label' }, { name: 'control-point-distance', pointsTo: 'control-point-distances' }, { name: 'control-point-weight', pointsTo: 'control-point-weights' }, { name: 'edge-text-rotation', pointsTo: 'text-rotation' }, { name: 'padding-left', pointsTo: 'padding' }, { name: 'padding-right', pointsTo: 'padding' }, { name: 'padding-top', pointsTo: 'padding' }, { name: 'padding-bottom', pointsTo: 'padding' }];

	  // pie backgrounds for nodes
	  styfn.pieBackgroundN = 16; // because the pie properties are numbered, give access to a constant N (for renderer use)
	  props.push({ name: 'pie-size', type: t.sizeMaybePercent });
	  for (var i = 1; i <= styfn.pieBackgroundN; i++) {
	    props.push({ name: 'pie-' + i + '-background-color', type: t.color });
	    props.push({ name: 'pie-' + i + '-background-size', type: t.percent });
	    props.push({ name: 'pie-' + i + '-background-opacity', type: t.zeroOneNumber });
	  }

	  // edge arrows
	  var arrowPrefixes = styfn.arrowPrefixes = ['source', 'mid-source', 'target', 'mid-target'];
	  [{ name: 'arrow-shape', type: t.arrowShape }, { name: 'arrow-color', type: t.color }, { name: 'arrow-fill', type: t.arrowFill }].forEach(function (prop) {
	    arrowPrefixes.forEach(function (prefix) {
	      var name = prefix + '-' + prop.name;
	      var type = prop.type;

	      props.push({ name: name, type: type });
	    });
	  }, {});

	  // list of property names
	  styfn.propertyNames = props.map(function (p) {
	    return p.name;
	  });

	  // allow access of properties by name ( e.g. style.properties.height )
	  for (var _i = 0; _i < props.length; _i++) {
	    var prop = props[_i];

	    props[prop.name] = prop; // allow lookup by name
	  }

	  // map aliases
	  for (var _i2 = 0; _i2 < aliases.length; _i2++) {
	    var alias = aliases[_i2];
	    var pointsToProp = props[alias.pointsTo];
	    var aliasProp = {
	      name: alias.name,
	      alias: true,
	      pointsTo: pointsToProp
	    };

	    // add alias prop for parsing
	    props.push(aliasProp);

	    props[alias.name] = aliasProp; // allow lookup by name
	  }
	})();

	styfn.getDefaultProperty = function (name) {
	  return this.getDefaultProperties()[name];
	};

	styfn.getDefaultProperties = util.memoize(function () {
	  var rawProps = util.extend({
	    // common node/edge props
	    'events': 'yes',
	    'text-events': 'no',
	    'text-valign': 'top',
	    'text-halign': 'center',
	    'color': '#000',
	    'text-outline-color': '#000',
	    'text-outline-width': 0,
	    'text-outline-opacity': 1,
	    'text-opacity': 1,
	    'text-decoration': 'none',
	    'text-transform': 'none',
	    'text-wrap': 'none',
	    'text-max-width': 9999,
	    'text-background-color': '#000',
	    'text-background-opacity': 0,
	    'text-background-shape': 'rectangle',
	    'text-background-padding': 0,
	    'text-border-opacity': 0,
	    'text-border-width': 0,
	    'text-border-style': 'solid',
	    'text-border-color': '#000',
	    'font-family': 'Helvetica Neue, Helvetica, sans-serif',
	    'font-style': 'normal',
	    // 'font-letiant': fontletiant,
	    'font-weight': 'normal',
	    'font-size': 16,
	    'min-zoomed-font-size': 0,
	    'text-rotation': 'none',
	    'source-text-rotation': 'none',
	    'target-text-rotation': 'none',
	    'visibility': 'visible',
	    'display': 'element',
	    'opacity': 1,
	    'z-compound-depth': 'auto',
	    'z-index-compare': 'auto',
	    'z-index': 0,
	    'label': '',
	    'text-margin-x': 0,
	    'text-margin-y': 0,
	    'source-label': '',
	    'source-text-offset': 0,
	    'source-text-margin-x': 0,
	    'source-text-margin-y': 0,
	    'target-label': '',
	    'target-text-offset': 0,
	    'target-text-margin-x': 0,
	    'target-text-margin-y': 0,
	    'overlay-opacity': 0,
	    'overlay-color': '#000',
	    'overlay-padding': 10,
	    'transition-property': 'none',
	    'transition-duration': 0,
	    'transition-delay': 0,
	    'transition-timing-function': 'linear',

	    // node props
	    'background-blacken': 0,
	    'background-color': '#999',
	    'background-opacity': 1,
	    'background-image': 'none',
	    'background-image-crossorigin': 'anonymous',
	    'background-image-opacity': 1,
	    'background-position-x': '50%',
	    'background-position-y': '50%',
	    'background-width-relative-to': 'include-padding',
	    'background-height-relative-to': 'include-padding',
	    'background-repeat': 'no-repeat',
	    'background-fit': 'none',
	    'background-clip': 'node',
	    'background-width': 'auto',
	    'background-height': 'auto',
	    'border-color': '#000',
	    'border-opacity': 1,
	    'border-width': 0,
	    'border-style': 'solid',
	    'height': 30,
	    'width': 30,
	    'shape': 'ellipse',
	    'shape-polygon-points': '-1, -1,   1, -1,   1, 1,   -1, 1',

	    // ghost props
	    'ghost': 'no',
	    'ghost-offset-y': 0,
	    'ghost-offset-x': 0,
	    'ghost-opacity': 0,

	    // compound props
	    'padding': 0,
	    'padding-relative-to': 'width',
	    'position': 'origin',
	    'compound-sizing-wrt-labels': 'include',
	    'min-width': 0,
	    'min-width-bias-left': 0,
	    'min-width-bias-right': 0,
	    'min-height': 0,
	    'min-height-bias-top': 0,
	    'min-height-bias-bottom': 0
	  }, {
	    // node pie bg
	    'pie-size': '100%'
	  }, [{ name: 'pie-{{i}}-background-color', value: 'black' }, { name: 'pie-{{i}}-background-size', value: '0%' }, { name: 'pie-{{i}}-background-opacity', value: 1 }].reduce(function (css, prop) {
	    for (var i = 1; i <= styfn.pieBackgroundN; i++) {
	      var name = prop.name.replace('{{i}}', i);
	      var val = prop.value;

	      css[name] = val;
	    }

	    return css;
	  }, {}), {
	    // edge props
	    'line-style': 'solid',
	    'line-color': '#999',
	    'control-point-step-size': 40,
	    'control-point-weights': 0.5,
	    'segment-weights': 0.5,
	    'segment-distances': 20,
	    'edge-distances': 'intersection',
	    'curve-style': 'bezier',
	    'haystack-radius': 0,
	    'arrow-scale': 1,
	    'loop-direction': '-45deg',
	    'loop-sweep': '-90deg',
	    'source-distance-from-node': 0,
	    'target-distance-from-node': 0,
	    'source-endpoint': 'outside-to-node',
	    'target-endpoint': 'outside-to-node'
	  }, [{ name: 'arrow-shape', value: 'none' }, { name: 'arrow-color', value: '#999' }, { name: 'arrow-fill', value: 'filled' }].reduce(function (css, prop) {
	    styfn.arrowPrefixes.forEach(function (prefix) {
	      var name = prefix + '-' + prop.name;
	      var val = prop.value;

	      css[name] = val;
	    });

	    return css;
	  }, {}));

	  var parsedProps = {};

	  for (var i = 0; i < this.properties.length; i++) {
	    var prop = this.properties[i];

	    if (prop.pointsTo) {
	      continue;
	    }

	    var name = prop.name;
	    var val = rawProps[name];
	    var parsedProp = this.parse(name, val);

	    parsedProps[name] = parsedProp;
	  }

	  return parsedProps;
	});

	styfn.addDefaultStylesheet = function () {
	  this.selector('$node > node') // compound (parent) node properties
	  .css({
	    'shape': 'rectangle',
	    'padding': 10,
	    'background-color': '#eee',
	    'border-color': '#ccc',
	    'border-width': 1
	  }).selector('edge') // just edge properties
	  .css({
	    'width': 3,
	    'curve-style': 'haystack'
	  }).selector(':parent <-> node').css({
	    'curve-style': 'bezier',
	    'source-endpoint': 'outside-to-line',
	    'target-endpoint': 'outside-to-line'
	  }).selector(':selected').css({
	    'background-color': '#0169D9',
	    'line-color': '#0169D9',
	    'source-arrow-color': '#0169D9',
	    'target-arrow-color': '#0169D9',
	    'mid-source-arrow-color': '#0169D9',
	    'mid-target-arrow-color': '#0169D9'
	  }).selector('node:parent:selected').css({
	    'background-color': '#CCE1F9',
	    'border-color': '#aec8e5'
	  }).selector(':active').css({
	    'overlay-color': 'black',
	    'overlay-padding': 10,
	    'overlay-opacity': 0.25
	  }).selector('core') // just core properties
	  .css({
	    'selection-box-color': '#ddd',
	    'selection-box-opacity': 0.65,
	    'selection-box-border-color': '#aaa',
	    'selection-box-border-width': 1,
	    'active-bg-color': 'black',
	    'active-bg-opacity': 0.15,
	    'active-bg-size': 30,
	    'outside-texture-bg-color': '#000',
	    'outside-texture-bg-opacity': 0.125
	  });

	  this.defaultLength = this.length;
	};

	module.exports = styfn;

	/***/ }),
	/* 92 */
	/***/ (function(module, exports, __webpack_require__) {


	var util = __webpack_require__(1);
	var is = __webpack_require__(0);
	var math = __webpack_require__(2);

	var styfn = {};

	// a caching layer for property parsing
	styfn.parse = function (name, value, propIsBypass, propIsFlat) {
	  var self = this;

	  // function values can't be cached in all cases, and there isn't much benefit of caching them anyway
	  if (is.fn(value)) {
	    return self.parseImplWarn(name, value, propIsBypass, propIsFlat);
	  }

	  var flatKey = propIsFlat === 'mapping' || propIsFlat === true || propIsFlat === false || propIsFlat == null ? 'dontcare' : propIsFlat;
	  var argHash = [name, value, propIsBypass, flatKey].join('$');
	  var propCache = self.propCache = self.propCache || {};
	  var ret = void 0;

	  if (!(ret = propCache[argHash])) {
	    ret = propCache[argHash] = self.parseImplWarn(name, value, propIsBypass, propIsFlat);
	  }

	  // - bypasses can't be shared b/c the value can be changed by animations or otherwise overridden
	  // - mappings can't be shared b/c mappings are per-element
	  if (propIsBypass || propIsFlat === 'mapping') {
	    // need a copy since props are mutated later in their lifecycles
	    ret = util.copy(ret);

	    if (ret) {
	      ret.value = util.copy(ret.value); // because it could be an array, e.g. colour
	    }
	  }

	  return ret;
	};

	styfn.parseImplWarn = function (name, value, propIsBypass, propIsFlat) {
	  var prop = this.parseImpl(name, value, propIsBypass, propIsFlat);

	  if (!prop && value != null) {
	    util.error('The style property `%s: %s` is invalid', name, value);
	  }

	  return prop;
	};

	// parse a property; return null on invalid; return parsed property otherwise
	// fields :
	// - name : the name of the property
	// - value : the parsed, native-typed value of the property
	// - strValue : a string value that represents the property value in valid css
	// - bypass : true iff the property is a bypass property
	styfn.parseImpl = function (name, value, propIsBypass, propIsFlat) {
	  var self = this;

	  name = util.camel2dash(name); // make sure the property name is in dash form (e.g. 'property-name' not 'propertyName')

	  var property = self.properties[name];
	  var passedValue = value;
	  var types = self.types;

	  if (!property) {
	    return null;
	  } // return null on property of unknown name
	  if (value === undefined) {
	    return null;
	  } // can't assign undefined

	  // the property may be an alias
	  if (property.alias) {
	    property = property.pointsTo;
	    name = property.name;
	  }

	  var valueIsString = is.string(value);
	  if (valueIsString) {
	    // trim the value to make parsing easier
	    value = value.trim();
	  }

	  var type = property.type;
	  if (!type) {
	    return null;
	  } // no type, no luck

	  // check if bypass is null or empty string (i.e. indication to delete bypass property)
	  if (propIsBypass && (value === '' || value === null)) {
	    return {
	      name: name,
	      value: value,
	      bypass: true,
	      deleteBypass: true
	    };
	  }

	  // check if value is a function used as a mapper
	  if (is.fn(value)) {
	    return {
	      name: name,
	      value: value,
	      strValue: 'fn',
	      mapped: types.fn,
	      bypass: propIsBypass
	    };
	  }

	  // check if value is mapped
	  var data = void 0,
	      mapData = void 0;
	  if (!valueIsString || propIsFlat) ; else if (data = new RegExp(types.data.regex).exec(value)) {
	    if (propIsBypass) {
	      return false;
	    } // mappers not allowed in bypass

	    var mapped = types.data;

	    return {
	      name: name,
	      value: data,
	      strValue: '' + value,
	      mapped: mapped,
	      field: data[1],
	      bypass: propIsBypass
	    };
	  } else if (mapData = new RegExp(types.mapData.regex).exec(value)) {
	    if (propIsBypass) {
	      return false;
	    } // mappers not allowed in bypass
	    if (type.multiple) {
	      return false;
	    } // impossible to map to num

	    var _mapped = types.mapData;

	    // we can map only if the type is a colour or a number
	    if (!(type.color || type.number)) {
	      return false;
	    }

	    var valueMin = this.parse(name, mapData[4]); // parse to validate
	    if (!valueMin || valueMin.mapped) {
	      return false;
	    } // can't be invalid or mapped

	    var valueMax = this.parse(name, mapData[5]); // parse to validate
	    if (!valueMax || valueMax.mapped) {
	      return false;
	    } // can't be invalid or mapped

	    // check if valueMin and valueMax are the same
	    if (valueMin.value === valueMax.value) {
	      return false; // can't make much of a mapper without a range
	    } else if (type.color) {
	      var c1 = valueMin.value;
	      var c2 = valueMax.value;

	      var same = c1[0] === c2[0] // red
	      && c1[1] === c2[1] // green
	      && c1[2] === c2[2] // blue
	      && ( // optional alpha
	      c1[3] === c2[3] // same alpha outright
	      || (c1[3] == null || c1[3] === 1) && ( // full opacity for colour 1?
	      c2[3] == null || c2[3] === 1) // full opacity for colour 2?
	      );

	      if (same) {
	        return false;
	      } // can't make a mapper without a range
	    }

	    return {
	      name: name,
	      value: mapData,
	      strValue: '' + value,
	      mapped: _mapped,
	      field: mapData[1],
	      fieldMin: parseFloat(mapData[2]), // min & max are numeric
	      fieldMax: parseFloat(mapData[3]),
	      valueMin: valueMin.value,
	      valueMax: valueMax.value,
	      bypass: propIsBypass
	    };
	  }

	  if (type.multiple && propIsFlat !== 'multiple') {
	    var vals = void 0;

	    if (valueIsString) {
	      vals = value.split(/\s+/);
	    } else if (is.array(value)) {
	      vals = value;
	    } else {
	      vals = [value];
	    }

	    if (type.evenMultiple && vals.length % 2 !== 0) {
	      return null;
	    }

	    var valArr = [];
	    var unitsArr = [];
	    var pfValArr = [];
	    var hasEnum = false;

	    for (var i = 0; i < vals.length; i++) {
	      var p = self.parse(name, vals[i], propIsBypass, 'multiple');

	      hasEnum = hasEnum || is.string(p.value);

	      valArr.push(p.value);
	      pfValArr.push(p.pfValue != null ? p.pfValue : p.value);
	      unitsArr.push(p.units);
	    }

	    if (type.validate && !type.validate(valArr, unitsArr)) {
	      return null;
	    }

	    if (type.singleEnum && hasEnum) {
	      if (valArr.length === 1 && is.string(valArr[0])) {
	        return {
	          name: name,
	          value: valArr[0],
	          strValue: valArr[0],
	          bypass: propIsBypass
	        };
	      } else {
	        return null;
	      }
	    }

	    return {
	      name: name,
	      value: valArr,
	      pfValue: pfValArr,
	      strValue: valArr.map(function (val, i) {
	        return val + (unitsArr[i] || '');
	      }).join(' '),
	      bypass: propIsBypass,
	      units: unitsArr
	    };
	  }

	  // several types also allow enums
	  var checkEnums = function checkEnums() {
	    for (var _i = 0; _i < type.enums.length; _i++) {
	      var en = type.enums[_i];

	      if (en === value) {
	        return {
	          name: name,
	          value: value,
	          strValue: '' + value,
	          bypass: propIsBypass
	        };
	      }
	    }

	    return null;
	  };

	  // check the type and return the appropriate object
	  if (type.number) {
	    var units = void 0;
	    var implicitUnits = 'px'; // not set => px

	    if (type.units) {
	      // use specified units if set
	      units = type.units;
	    }

	    if (type.implicitUnits) {
	      implicitUnits = type.implicitUnits;
	    }

	    if (!type.unitless) {
	      if (valueIsString) {
	        var unitsRegex = 'px|em' + (type.allowPercent ? '|\\%' : '');
	        if (units) {
	          unitsRegex = units;
	        } // only allow explicit units if so set
	        var match = value.match('^(' + util.regex.number + ')(' + unitsRegex + ')?' + '$');

	        if (match) {
	          value = match[1];
	          units = match[2] || implicitUnits;
	        }
	      } else if (!units || type.implicitUnits) {
	        units = implicitUnits; // implicitly px if unspecified
	      }
	    }

	    value = parseFloat(value);

	    // if not a number and enums not allowed, then the value is invalid
	    if (isNaN(value) && type.enums === undefined) {
	      return null;
	    }

	    // check if this number type also accepts special keywords in place of numbers
	    // (i.e. `left`, `auto`, etc)
	    if (isNaN(value) && type.enums !== undefined) {
	      value = passedValue;

	      return checkEnums();
	    }

	    // check if value must be an integer
	    if (type.integer && !is.integer(value)) {
	      return null;
	    }

	    // check value is within range
	    if (type.min !== undefined && (value < type.min || type.strictMin && value === type.min) || type.max !== undefined && (value > type.max || type.strictMax && value === type.max)) {
	      return null;
	    }

	    var ret = {
	      name: name,
	      value: value,
	      strValue: '' + value + (units ? units : ''),
	      units: units,
	      bypass: propIsBypass
	    };

	    // normalise value in pixels
	    if (type.unitless || units !== 'px' && units !== 'em') {
	      ret.pfValue = value;
	    } else {
	      ret.pfValue = units === 'px' || !units ? value : this.getEmSizeInPixels() * value;
	    }

	    // normalise value in ms
	    if (units === 'ms' || units === 's') {
	      ret.pfValue = units === 'ms' ? value : 1000 * value;
	    }

	    // normalise value in rad
	    if (units === 'deg' || units === 'rad') {
	      ret.pfValue = units === 'rad' ? value : math.deg2rad(value);
	    }

	    // normalize value in %
	    if (units === '%') {
	      ret.pfValue = value / 100;
	    }

	    return ret;
	  } else if (type.propList) {

	    var props = [];
	    var propsStr = '' + value;

	    if (propsStr === 'none') ; else {
	      // go over each prop

	      var propsSplit = propsStr.split(',');
	      for (var _i2 = 0; _i2 < propsSplit.length; _i2++) {
	        var propName = propsSplit[_i2].trim();

	        if (self.properties[propName]) {
	          props.push(propName);
	        }
	      }

	      if (props.length === 0) {
	        return null;
	      }
	    }

	    return {
	      name: name,
	      value: props,
	      strValue: props.length === 0 ? 'none' : props.join(', '),
	      bypass: propIsBypass
	    };
	  } else if (type.color) {
	    var tuple = util.color2tuple(value);

	    if (!tuple) {
	      return null;
	    }

	    return {
	      name: name,
	      value: tuple,
	      pfValue: tuple,
	      strValue: '' + value,
	      bypass: propIsBypass
	    };
	  } else if (type.regex || type.regexes) {

	    // first check enums
	    if (type.enums) {
	      var enumProp = checkEnums();

	      if (enumProp) {
	        return enumProp;
	      }
	    }

	    var regexes = type.regexes ? type.regexes : [type.regex];

	    for (var _i3 = 0; _i3 < regexes.length; _i3++) {
	      var regex = new RegExp(regexes[_i3]); // make a regex from the type string
	      var m = regex.exec(value);

	      if (m) {
	        // regex matches
	        return {
	          name: name,
	          value: type.singleRegexMatchValue ? m[1] : m,
	          strValue: '' + value,
	          bypass: propIsBypass
	        };
	      }
	    }

	    return null; // didn't match any
	  } else if (type.string) {
	    // just return
	    return {
	      name: name,
	      value: '' + value,
	      strValue: '' + value,
	      bypass: propIsBypass
	    };
	  } else if (type.enums) {
	    // check enums last because it's a combo type in others
	    return checkEnums();
	  } else {
	    return null; // not a type we can handle
	  }
	};

	module.exports = styfn;

	/***/ }),
	/* 93 */
	/***/ (function(module, exports, __webpack_require__) {


	var is = __webpack_require__(0);
	var window = __webpack_require__(3);
	var math = __webpack_require__(2);

	var corefn = {

	  autolock: function autolock(bool) {
	    if (bool !== undefined) {
	      this._private.autolock = bool ? true : false;
	    } else {
	      return this._private.autolock;
	    }

	    return this; // chaining
	  },

	  autoungrabify: function autoungrabify(bool) {
	    if (bool !== undefined) {
	      this._private.autoungrabify = bool ? true : false;
	    } else {
	      return this._private.autoungrabify;
	    }

	    return this; // chaining
	  },

	  autounselectify: function autounselectify(bool) {
	    if (bool !== undefined) {
	      this._private.autounselectify = bool ? true : false;
	    } else {
	      return this._private.autounselectify;
	    }

	    return this; // chaining
	  },

	  panningEnabled: function panningEnabled(bool) {
	    if (bool !== undefined) {
	      this._private.panningEnabled = bool ? true : false;
	    } else {
	      return this._private.panningEnabled;
	    }

	    return this; // chaining
	  },

	  userPanningEnabled: function userPanningEnabled(bool) {
	    if (bool !== undefined) {
	      this._private.userPanningEnabled = bool ? true : false;
	    } else {
	      return this._private.userPanningEnabled;
	    }

	    return this; // chaining
	  },

	  zoomingEnabled: function zoomingEnabled(bool) {
	    if (bool !== undefined) {
	      this._private.zoomingEnabled = bool ? true : false;
	    } else {
	      return this._private.zoomingEnabled;
	    }

	    return this; // chaining
	  },

	  userZoomingEnabled: function userZoomingEnabled(bool) {
	    if (bool !== undefined) {
	      this._private.userZoomingEnabled = bool ? true : false;
	    } else {
	      return this._private.userZoomingEnabled;
	    }

	    return this; // chaining
	  },

	  boxSelectionEnabled: function boxSelectionEnabled(bool) {
	    if (bool !== undefined) {
	      this._private.boxSelectionEnabled = bool ? true : false;
	    } else {
	      return this._private.boxSelectionEnabled;
	    }

	    return this; // chaining
	  },

	  pan: function pan() {
	    var args = arguments;
	    var pan = this._private.pan;
	    var dim = void 0,
	        val = void 0,
	        dims = void 0,
	        x = void 0,
	        y = void 0;

	    switch (args.length) {
	      case 0:
	        // .pan()
	        return pan;

	      case 1:

	        if (is.string(args[0])) {
	          // .pan('x')
	          dim = args[0];
	          return pan[dim];
	        } else if (is.plainObject(args[0])) {
	          // .pan({ x: 0, y: 100 })
	          if (!this._private.panningEnabled) {
	            return this;
	          }

	          dims = args[0];
	          x = dims.x;
	          y = dims.y;

	          if (is.number(x)) {
	            pan.x = x;
	          }

	          if (is.number(y)) {
	            pan.y = y;
	          }

	          this.emit('pan viewport');
	        }
	        break;

	      case 2:
	        // .pan('x', 100)
	        if (!this._private.panningEnabled) {
	          return this;
	        }

	        dim = args[0];
	        val = args[1];

	        if ((dim === 'x' || dim === 'y') && is.number(val)) {
	          pan[dim] = val;
	        }

	        this.emit('pan viewport');
	        break;

	      default:
	        break; // invalid
	    }

	    this.notify({ // notify the renderer that the viewport changed
	      type: 'viewport'
	    });

	    return this; // chaining
	  },

	  panBy: function panBy(arg0, arg1) {
	    var args = arguments;
	    var pan = this._private.pan;
	    var dim = void 0,
	        val = void 0,
	        dims = void 0,
	        x = void 0,
	        y = void 0;

	    if (!this._private.panningEnabled) {
	      return this;
	    }

	    switch (args.length) {
	      case 1:

	        if (is.plainObject(arg0)) {
	          // .panBy({ x: 0, y: 100 })
	          dims = args[0];
	          x = dims.x;
	          y = dims.y;

	          if (is.number(x)) {
	            pan.x += x;
	          }

	          if (is.number(y)) {
	            pan.y += y;
	          }

	          this.emit('pan viewport');
	        }
	        break;

	      case 2:
	        // .panBy('x', 100)
	        dim = arg0;
	        val = arg1;

	        if ((dim === 'x' || dim === 'y') && is.number(val)) {
	          pan[dim] += val;
	        }

	        this.emit('pan viewport');
	        break;

	      default:
	        break; // invalid
	    }

	    this.notify({ // notify the renderer that the viewport changed
	      type: 'viewport'
	    });

	    return this; // chaining
	  },

	  fit: function fit(elements, padding) {
	    var viewportState = this.getFitViewport(elements, padding);

	    if (viewportState) {
	      var _p = this._private;
	      _p.zoom = viewportState.zoom;
	      _p.pan = viewportState.pan;

	      this.emit('pan zoom viewport');

	      this.notify({ // notify the renderer that the viewport changed
	        type: 'viewport'
	      });
	    }

	    return this; // chaining
	  },

	  getFitViewport: function getFitViewport(elements, padding) {
	    if (is.number(elements) && padding === undefined) {
	      // elements is optional
	      padding = elements;
	      elements = undefined;
	    }

	    if (!this._private.panningEnabled || !this._private.zoomingEnabled) {
	      return;
	    }

	    var bb = void 0;

	    if (is.string(elements)) {
	      var sel = elements;
	      elements = this.$(sel);
	    } else if (is.boundingBox(elements)) {
	      // assume bb
	      var bbe = elements;
	      bb = {
	        x1: bbe.x1,
	        y1: bbe.y1,
	        x2: bbe.x2,
	        y2: bbe.y2
	      };

	      bb.w = bb.x2 - bb.x1;
	      bb.h = bb.y2 - bb.y1;
	    } else if (!is.elementOrCollection(elements)) {
	      elements = this.mutableElements();
	    }

	    if (is.elementOrCollection(elements) && elements.empty()) {
	      return;
	    } // can't fit to nothing

	    bb = bb || elements.boundingBox();

	    var w = this.width();
	    var h = this.height();
	    var zoom = void 0;
	    padding = is.number(padding) ? padding : 0;

	    if (!isNaN(w) && !isNaN(h) && w > 0 && h > 0 && !isNaN(bb.w) && !isNaN(bb.h) && bb.w > 0 && bb.h > 0) {
	      zoom = Math.min((w - 2 * padding) / bb.w, (h - 2 * padding) / bb.h);

	      // crop zoom
	      zoom = zoom > this._private.maxZoom ? this._private.maxZoom : zoom;
	      zoom = zoom < this._private.minZoom ? this._private.minZoom : zoom;

	      var pan = { // now pan to middle
	        x: (w - zoom * (bb.x1 + bb.x2)) / 2,
	        y: (h - zoom * (bb.y1 + bb.y2)) / 2
	      };

	      return {
	        zoom: zoom,
	        pan: pan
	      };
	    }

	    return;
	  },

	  minZoom: function minZoom(zoom) {
	    if (zoom === undefined) {
	      return this._private.minZoom;
	    } else if (is.number(zoom)) {
	      this._private.minZoom = zoom;
	    }

	    return this;
	  },

	  maxZoom: function maxZoom(zoom) {
	    if (zoom === undefined) {
	      return this._private.maxZoom;
	    } else if (is.number(zoom)) {
	      this._private.maxZoom = zoom;
	    }

	    return this;
	  },

	  getZoomedViewport: function getZoomedViewport(params) {
	    var _p = this._private;
	    var currentPan = _p.pan;
	    var currentZoom = _p.zoom;
	    var pos = void 0; // in rendered px
	    var zoom = void 0;
	    var bail = false;

	    if (!_p.zoomingEnabled) {
	      // zooming disabled
	      bail = true;
	    }

	    if (is.number(params)) {
	      // then set the zoom
	      zoom = params;
	    } else if (is.plainObject(params)) {
	      // then zoom about a point
	      zoom = params.level;

	      if (params.position != null) {
	        pos = math.modelToRenderedPosition(params.position, currentZoom, currentPan);
	      } else if (params.renderedPosition != null) {
	        pos = params.renderedPosition;
	      }

	      if (pos != null && !_p.panningEnabled) {
	        // panning disabled
	        bail = true;
	      }
	    }

	    // crop zoom
	    zoom = zoom > _p.maxZoom ? _p.maxZoom : zoom;
	    zoom = zoom < _p.minZoom ? _p.minZoom : zoom;

	    // can't zoom with invalid params
	    if (bail || !is.number(zoom) || zoom === currentZoom || pos != null && (!is.number(pos.x) || !is.number(pos.y))) {
	      return null;
	    }

	    if (pos != null) {
	      // set zoom about position
	      var pan1 = currentPan;
	      var zoom1 = currentZoom;
	      var zoom2 = zoom;

	      var pan2 = {
	        x: -zoom2 / zoom1 * (pos.x - pan1.x) + pos.x,
	        y: -zoom2 / zoom1 * (pos.y - pan1.y) + pos.y
	      };

	      return {
	        zoomed: true,
	        panned: true,
	        zoom: zoom2,
	        pan: pan2
	      };
	    } else {
	      // just set the zoom
	      return {
	        zoomed: true,
	        panned: false,
	        zoom: zoom,
	        pan: currentPan
	      };
	    }
	  },

	  zoom: function zoom(params) {
	    if (params === undefined) {
	      // get
	      return this._private.zoom;
	    } else {
	      // set
	      var vp = this.getZoomedViewport(params);
	      var _p = this._private;

	      if (vp == null || !vp.zoomed) {
	        return this;
	      }

	      _p.zoom = vp.zoom;

	      if (vp.panned) {
	        _p.pan.x = vp.pan.x;
	        _p.pan.y = vp.pan.y;
	      }

	      this.emit('zoom' + (vp.panned ? ' pan' : '') + ' viewport');

	      this.notify({ // notify the renderer that the viewport changed
	        type: 'viewport'
	      });

	      return this; // chaining
	    }
	  },

	  viewport: function viewport(opts) {
	    var _p = this._private;
	    var zoomDefd = true;
	    var panDefd = true;
	    var events = []; // to trigger
	    var zoomFailed = false;
	    var panFailed = false;

	    if (!opts) {
	      return this;
	    }
	    if (!is.number(opts.zoom)) {
	      zoomDefd = false;
	    }
	    if (!is.plainObject(opts.pan)) {
	      panDefd = false;
	    }
	    if (!zoomDefd && !panDefd) {
	      return this;
	    }

	    if (zoomDefd) {
	      var z = opts.zoom;

	      if (z < _p.minZoom || z > _p.maxZoom || !_p.zoomingEnabled) {
	        zoomFailed = true;
	      } else {
	        _p.zoom = z;

	        events.push('zoom');
	      }
	    }

	    if (panDefd && (!zoomFailed || !opts.cancelOnFailedZoom) && _p.panningEnabled) {
	      var p = opts.pan;

	      if (is.number(p.x)) {
	        _p.pan.x = p.x;
	        panFailed = false;
	      }

	      if (is.number(p.y)) {
	        _p.pan.y = p.y;
	        panFailed = false;
	      }

	      if (!panFailed) {
	        events.push('pan');
	      }
	    }

	    if (events.length > 0) {
	      events.push('viewport');
	      this.emit(events.join(' '));

	      this.notify({
	        type: 'viewport'
	      });
	    }

	    return this; // chaining
	  },

	  center: function center(elements) {
	    var pan = this.getCenterPan(elements);

	    if (pan) {
	      this._private.pan = pan;

	      this.emit('pan viewport');

	      this.notify({ // notify the renderer that the viewport changed
	        type: 'viewport'
	      });
	    }

	    return this; // chaining
	  },

	  getCenterPan: function getCenterPan(elements, zoom) {
	    if (!this._private.panningEnabled) {
	      return;
	    }

	    if (is.string(elements)) {
	      var selector = elements;
	      elements = this.mutableElements().filter(selector);
	    } else if (!is.elementOrCollection(elements)) {
	      elements = this.mutableElements();
	    }

	    if (elements.length === 0) {
	      return;
	    } // can't centre pan to nothing

	    var bb = elements.boundingBox();
	    var w = this.width();
	    var h = this.height();
	    zoom = zoom === undefined ? this._private.zoom : zoom;

	    var pan = { // middle
	      x: (w - zoom * (bb.x1 + bb.x2)) / 2,
	      y: (h - zoom * (bb.y1 + bb.y2)) / 2
	    };

	    return pan;
	  },

	  reset: function reset() {
	    if (!this._private.panningEnabled || !this._private.zoomingEnabled) {
	      return this;
	    }

	    this.viewport({
	      pan: { x: 0, y: 0 },
	      zoom: 1
	    });

	    return this; // chaining
	  },

	  invalidateSize: function invalidateSize() {
	    this._private.sizeCache = null;
	  },

	  size: function size() {
	    var _p = this._private;
	    var container = _p.container;

	    return _p.sizeCache = _p.sizeCache || (container ? function () {
	      var style = window.getComputedStyle(container);
	      var val = function val(name) {
	        return parseFloat(style.getPropertyValue(name));
	      };

	      return {
	        width: container.clientWidth - val('padding-left') - val('padding-right'),
	        height: container.clientHeight - val('padding-top') - val('padding-bottom')
	      };
	    }() : { // fallback if no container (not 0 b/c can be used for dividing etc)
	      width: 1,
	      height: 1
	    });
	  },

	  width: function width() {
	    return this.size().width;
	  },

	  height: function height() {
	    return this.size().height;
	  },

	  extent: function extent() {
	    var pan = this._private.pan;
	    var zoom = this._private.zoom;
	    var rb = this.renderedExtent();

	    var b = {
	      x1: (rb.x1 - pan.x) / zoom,
	      x2: (rb.x2 - pan.x) / zoom,
	      y1: (rb.y1 - pan.y) / zoom,
	      y2: (rb.y2 - pan.y) / zoom
	    };

	    b.w = b.x2 - b.x1;
	    b.h = b.y2 - b.y1;

	    return b;
	  },

	  renderedExtent: function renderedExtent() {
	    var width = this.width();
	    var height = this.height();

	    return {
	      x1: 0,
	      y1: 0,
	      x2: width,
	      y2: height,
	      w: width,
	      h: height
	    };
	  }
	};

	// aliases
	corefn.centre = corefn.center;

	// backwards compatibility
	corefn.autolockNodes = corefn.autolock;
	corefn.autoungrabifyNodes = corefn.autoungrabify;

	module.exports = corefn;

	/***/ }),
	/* 94 */
	/***/ (function(module, exports, __webpack_require__) {


	var util = __webpack_require__(1);
	var define = __webpack_require__(4);
	var Collection = __webpack_require__(7);
	var Core = __webpack_require__(12);
	var incExts = __webpack_require__(95);
	var is = __webpack_require__(0);
	var Emitter = __webpack_require__(11);

	// registered extensions to cytoscape, indexed by name
	var extensions = {};

	// registered modules for extensions, indexed by name
	var modules = {};

	function setExtension(type, name, registrant) {

	  var ext = registrant;

	  var overrideErr = function overrideErr(field) {
	    util.error('Can not register `' + name + '` for `' + type + '` since `' + field + '` already exists in the prototype and can not be overridden');
	  };

	  if (type === 'core') {
	    if (Core.prototype[name]) {
	      return overrideErr(name);
	    } else {
	      Core.prototype[name] = registrant;
	    }
	  } else if (type === 'collection') {
	    if (Collection.prototype[name]) {
	      return overrideErr(name);
	    } else {
	      Collection.prototype[name] = registrant;
	    }
	  } else if (type === 'layout') {
	    // fill in missing layout functions in the prototype

	    var Layout = function Layout(options) {
	      this.options = options;

	      registrant.call(this, options);

	      // make sure layout has _private for use w/ std apis like .on()
	      if (!is.plainObject(this._private)) {
	        this._private = {};
	      }

	      this._private.cy = options.cy;
	      this._private.listeners = [];

	      this.createEmitter();
	    };

	    var layoutProto = Layout.prototype = Object.create(registrant.prototype);

	    var optLayoutFns = [];

	    for (var i = 0; i < optLayoutFns.length; i++) {
	      var fnName = optLayoutFns[i];

	      layoutProto[fnName] = layoutProto[fnName] || function () {
	        return this;
	      };
	    }

	    // either .start() or .run() is defined, so autogen the other
	    if (layoutProto.start && !layoutProto.run) {
	      layoutProto.run = function () {
	        this.start();return this;
	      };
	    } else if (!layoutProto.start && layoutProto.run) {
	      layoutProto.start = function () {
	        this.run();return this;
	      };
	    }

	    var regStop = registrant.prototype.stop;
	    layoutProto.stop = function () {
	      var opts = this.options;

	      if (opts && opts.animate) {
	        var anis = this.animations;

	        if (anis) {
	          for (var _i = 0; _i < anis.length; _i++) {
	            anis[_i].stop();
	          }
	        }
	      }

	      if (regStop) {
	        regStop.call(this);
	      } else {
	        this.emit('layoutstop');
	      }

	      return this;
	    };

	    if (!layoutProto.destroy) {
	      layoutProto.destroy = function () {
	        return this;
	      };
	    }

	    layoutProto.cy = function () {
	      return this._private.cy;
	    };

	    var getCy = function getCy(layout) {
	      return layout._private.cy;
	    };

	    util.assign(layoutProto, {
	      createEmitter: function createEmitter() {
	        this._private.emitter = new Emitter({
	          eventFields: function eventFields(layout) {
	            return {
	              layout: layout,
	              cy: getCy(layout),
	              target: layout
	            };
	          },
	          bubble: function bubble() {
	            return true;
	          },
	          parent: function parent(layout) {
	            return getCy(layout);
	          },
	          context: this
	        });

	        return this;
	      },
	      emitter: function emitter() {
	        return this._private.emitter;
	      },
	      on: function on(evt, cb) {
	        this.emitter().on(evt, cb);return this;
	      },
	      one: function one(evt, cb) {
	        this.emitter().one(evt, cb);return this;
	      },
	      once: function once(evt, cb) {
	        this.emitter().one(evt, cb);return this;
	      },
	      removeListener: function removeListener(evt, cb) {
	        this.emitter().removeListener(evt, cb);return this;
	      },
	      emit: function emit(evt, params) {
	        this.emitter().emit(evt, params);return this;
	      }
	    });

	    define.eventAliasesOn(layoutProto);

	    ext = Layout; // replace with our wrapped layout
	  } else if (type === 'renderer' && name !== 'null' && name !== 'base') {
	    // user registered renderers inherit from base

	    var BaseRenderer = getExtension('renderer', 'base');
	    var bProto = BaseRenderer.prototype;
	    var RegistrantRenderer = registrant;
	    var rProto = registrant.prototype;

	    var Renderer = function Renderer() {
	      BaseRenderer.apply(this, arguments);
	      RegistrantRenderer.apply(this, arguments);
	    };

	    var proto = Renderer.prototype;

	    for (var pName in bProto) {
	      var pVal = bProto[pName];
	      var existsInR = rProto[pName] != null;

	      if (existsInR) {
	        return overrideErr(pName);
	      }

	      proto[pName] = pVal; // take impl from base
	    }

	    for (var _pName in rProto) {
	      proto[_pName] = rProto[_pName]; // take impl from registrant
	    }

	    bProto.clientFunctions.forEach(function (name) {
	      proto[name] = proto[name] || function () {
	        util.error('Renderer does not implement `renderer.' + name + '()` on its prototype');
	      };
	    });

	    ext = Renderer;
	  }

	  return util.setMap({
	    map: extensions,
	    keys: [type, name],
	    value: ext
	  });
	}

	function getExtension(type, name) {
	  return util.getMap({
	    map: extensions,
	    keys: [type, name]
	  });
	}

	function setModule(type, name, moduleType, moduleName, registrant) {
	  return util.setMap({
	    map: modules,
	    keys: [type, name, moduleType, moduleName],
	    value: registrant
	  });
	}

	function getModule(type, name, moduleType, moduleName) {
	  return util.getMap({
	    map: modules,
	    keys: [type, name, moduleType, moduleName]
	  });
	}

	var extension = function extension() {
	  // e.g. extension('renderer', 'svg')
	  if (arguments.length === 2) {
	    return getExtension.apply(null, arguments);
	  }

	  // e.g. extension('renderer', 'svg', { ... })
	  else if (arguments.length === 3) {
	      return setExtension.apply(null, arguments);
	    }

	    // e.g. extension('renderer', 'svg', 'nodeShape', 'ellipse')
	    else if (arguments.length === 4) {
	        return getModule.apply(null, arguments);
	      }

	      // e.g. extension('renderer', 'svg', 'nodeShape', 'ellipse', { ... })
	      else if (arguments.length === 5) {
	          return setModule.apply(null, arguments);
	        } else {
	          util.error('Invalid extension access syntax');
	        }
	};

	// allows a core instance to access extensions internally
	Core.prototype.extension = extension;

	// included extensions
	incExts.forEach(function (group) {
	  group.extensions.forEach(function (ext) {
	    setExtension(group.type, ext.name, ext.impl);
	  });
	});

	module.exports = extension;

	/***/ }),
	/* 95 */
	/***/ (function(module, exports, __webpack_require__) {


	module.exports = [{
	  type: 'layout',
	  extensions: __webpack_require__(96)
	}, {
	  type: 'renderer',
	  extensions: __webpack_require__(105)
	}];

	/***/ }),
	/* 96 */
	/***/ (function(module, exports, __webpack_require__) {


	module.exports = [{ name: 'breadthfirst', impl: __webpack_require__(97) }, { name: 'circle', impl: __webpack_require__(98) }, { name: 'concentric', impl: __webpack_require__(99) }, { name: 'cose', impl: __webpack_require__(100) }, { name: 'grid', impl: __webpack_require__(101) }, { name: 'null', impl: __webpack_require__(102) }, { name: 'preset', impl: __webpack_require__(103) }, { name: 'random', impl: __webpack_require__(104) }];

	/***/ }),
	/* 97 */
	/***/ (function(module, exports, __webpack_require__) {


	var util = __webpack_require__(1);
	var math = __webpack_require__(2);
	var is = __webpack_require__(0);

	var defaults = {
	  fit: true, // whether to fit the viewport to the graph
	  directed: false, // whether the tree is directed downwards (or edges can point in any direction if false)
	  padding: 30, // padding on fit
	  circle: false, // put depths in concentric circles if true, put depths top down if false
	  spacingFactor: 1.75, // positive spacing factor, larger => more space between nodes (N.B. n/a if causes overlap)
	  boundingBox: undefined, // constrain layout bounds; { x1, y1, x2, y2 } or { x1, y1, w, h }
	  avoidOverlap: true, // prevents node overlap, may overflow boundingBox if not enough space
	  nodeDimensionsIncludeLabels: false, // Excludes the label when calculating node bounding boxes for the layout algorithm
	  roots: undefined, // the roots of the trees
	  maximalAdjustments: 0, // how many times to try to position the nodes in a maximal way (i.e. no backtracking)
	  animate: false, // whether to transition the node positions
	  animationDuration: 500, // duration of animation in ms if enabled
	  animationEasing: undefined, // easing of animation if enabled,
	  animateFilter: function animateFilter(node, i) {
	    return true;
	  }, // a function that determines whether the node should be animated.  All nodes animated by default on animate enabled.  Non-animated nodes are positioned immediately when the layout starts
	  ready: undefined, // callback on layoutready
	  stop: undefined, // callback on layoutstop
	  transform: function transform(node, position) {
	    return position;
	  } // transform a given node position. Useful for changing flow direction in discrete layouts
	};

	function BreadthFirstLayout(options) {
	  this.options = util.extend({}, defaults, options);
	}

	BreadthFirstLayout.prototype.run = function () {
	  var params = this.options;
	  var options = params;

	  var cy = params.cy;
	  var eles = options.eles;
	  var nodes = eles.nodes().not(':parent');
	  var graph = eles;

	  var bb = math.makeBoundingBox(options.boundingBox ? options.boundingBox : {
	    x1: 0, y1: 0, w: cy.width(), h: cy.height()
	  });

	  var roots = void 0;
	  if (is.elementOrCollection(options.roots)) {
	    roots = options.roots;
	  } else if (is.array(options.roots)) {
	    var rootsArray = [];

	    for (var i = 0; i < options.roots.length; i++) {
	      var id = options.roots[i];
	      var ele = cy.getElementById(id);
	      rootsArray.push(ele);
	    }

	    roots = cy.collection(rootsArray);
	  } else if (is.string(options.roots)) {
	    roots = cy.$(options.roots);
	  } else {
	    if (options.directed) {
	      roots = nodes.roots();
	    } else {
	      var components = [];
	      var unhandledNodes = nodes;

	      var _loop = function _loop() {
	        var currComp = cy.collection();

	        eles.bfs({
	          roots: unhandledNodes[0],
	          visit: function visit(node, edge, pNode, i, depth) {
	            currComp = currComp.add(node);
	          },
	          directed: false
	        });

	        unhandledNodes = unhandledNodes.not(currComp);
	        components.push(currComp);
	      };

	      while (unhandledNodes.length > 0) {
	        _loop();
	      }

	      roots = cy.collection();

	      var _loop2 = function _loop2(_i) {
	        var comp = components[_i];
	        var maxDegree = comp.maxDegree(false);
	        var compRoots = comp.filter(function (ele) {
	          return ele.degree(false) === maxDegree;
	        });

	        roots = roots.add(compRoots);
	      };

	      for (var _i = 0; _i < components.length; _i++) {
	        _loop2(_i);
	      }
	    }
	  }

	  var depths = [];
	  var foundByBfs = {};
	  var id2depth = {};
	  var successors = {};

	  // find the depths of the nodes
	  graph.bfs({
	    roots: roots,
	    directed: options.directed,
	    visit: function visit(node, edge, pNode, i, depth) {
	      var ele = node[0];
	      var id = ele.id();

	      if (!depths[depth]) {
	        depths[depth] = [];
	      }

	      depths[depth].push(ele);
	      foundByBfs[id] = true;
	      id2depth[id] = depth;

	      if (pNode) {
	        var prevId = pNode.id();
	        var succ = successors[prevId] = successors[prevId] || [];

	        succ.push(node);
	      }
	    }
	  });

	  // check for nodes not found by bfs
	  var orphanNodes = [];
	  for (var _i2 = 0; _i2 < nodes.length; _i2++) {
	    var _ele = nodes[_i2];

	    if (foundByBfs[_ele.id()]) {
	      continue;
	    } else {
	      orphanNodes.push(_ele);
	    }
	  }

	  // assign orphan nodes a depth from their neighborhood
	  var maxChecks = orphanNodes.length * 3;
	  var checks = 0;
	  while (orphanNodes.length !== 0 && checks < maxChecks) {
	    var node = orphanNodes.shift();
	    var neighbors = node.neighborhood().nodes();
	    var assignedDepth = false;

	    for (var _i3 = 0; _i3 < neighbors.length; _i3++) {
	      var depth = id2depth[neighbors[_i3].id()];

	      if (depth !== undefined) {
	        depths[depth].push(node);
	        assignedDepth = true;
	        break;
	      }
	    }

	    if (!assignedDepth) {
	      orphanNodes.push(node);
	    }

	    checks++;
	  }

	  // assign orphan nodes that are still left to the depth of their subgraph
	  while (orphanNodes.length !== 0) {
	    var _node = orphanNodes.shift();
	    //let subgraph = graph.bfs( node ).path;
	    var _assignedDepth = false;

	    // for( let i = 0; i < subgraph.length; i++ ){
	    //   let depth = id2depth[ subgraph[i].id() ];

	    //   if( depth !== undefined ){
	    //     depths[depth].push( node );
	    //     assignedDepth = true;
	    //     break;
	    //   }
	    // }

	    if (!_assignedDepth) {
	      // worst case if the graph really isn't tree friendly, then just dump it in 0
	      if (depths.length === 0) {
	        depths.push([]);
	      }

	      depths[0].push(_node);
	    }
	  }

	  // assign the nodes a depth and index
	  var assignDepthsToEles = function assignDepthsToEles() {
	    for (var _i4 = 0; _i4 < depths.length; _i4++) {
	      var _eles = depths[_i4];

	      for (var j = 0; j < _eles.length; j++) {
	        var _ele2 = _eles[j];

	        if (_ele2 == null) {
	          _eles.splice(j, 1);
	          j--;
	          continue;
	        }

	        _ele2._private.scratch.breadthfirst = {
	          depth: _i4,
	          index: j
	        };
	      }
	    }
	  };
	  assignDepthsToEles();

	  var intersectsDepth = function intersectsDepth(node) {
	    // returns true if has edges pointing in from a higher depth
	    var edges = node.connectedEdges(function (ele) {
	      return ele.data('target') === node.id();
	    });
	    var thisInfo = node._private.scratch.breadthfirst;
	    var highestDepthOfOther = 0;
	    var highestOther = void 0;
	    for (var _i5 = 0; _i5 < edges.length; _i5++) {
	      var edge = edges[_i5];
	      var otherNode = edge.source()[0];
	      var otherInfo = otherNode._private.scratch.breadthfirst;

	      if (thisInfo.depth <= otherInfo.depth && highestDepthOfOther < otherInfo.depth) {
	        highestDepthOfOther = otherInfo.depth;
	        highestOther = otherNode;
	      }
	    }

	    return highestOther;
	  };

	  // make maximal if so set by adjusting depths
	  for (var adj = 0; adj < options.maximalAdjustments; adj++) {

	    var nDepths = depths.length;
	    var elesToMove = [];
	    for (var _i6 = 0; _i6 < nDepths; _i6++) {
	      var _depth = depths[_i6];

	      var nDepth = _depth.length;
	      for (var j = 0; j < nDepth; j++) {
	        var _ele3 = _depth[j];
	        var info = _ele3._private.scratch.breadthfirst;
	        var intEle = intersectsDepth(_ele3);

	        if (intEle) {
	          info.intEle = intEle;
	          elesToMove.push(_ele3);
	        }
	      }
	    }

	    for (var _i7 = 0; _i7 < elesToMove.length; _i7++) {
	      var _ele4 = elesToMove[_i7];
	      var _info = _ele4._private.scratch.breadthfirst;
	      var _intEle = _info.intEle;
	      var intInfo = _intEle._private.scratch.breadthfirst;

	      depths[_info.depth][_info.index] = null; // remove from old depth & index (create hole to be cleaned)

	      // add to end of new depth
	      var newDepth = intInfo.depth + 1;
	      while (newDepth > depths.length - 1) {
	        depths.push([]);
	      }
	      depths[newDepth].push(_ele4);

	      _info.depth = newDepth;
	      _info.index = depths[newDepth].length - 1;
	    }

	    assignDepthsToEles();
	  }

	  // find min distance we need to leave between nodes
	  var minDistance = 0;
	  if (options.avoidOverlap) {
	    for (var _i8 = 0; _i8 < nodes.length; _i8++) {
	      var n = nodes[_i8];
	      var nbb = n.layoutDimensions(options);
	      var w = nbb.w;
	      var h = nbb.h;

	      minDistance = Math.max(minDistance, w, h);
	    }
	  }

	  // get the weighted percent for an element based on its connectivity to other levels
	  var cachedWeightedPercent = {};
	  var getWeightedPercent = function getWeightedPercent(ele) {
	    if (cachedWeightedPercent[ele.id()]) {
	      return cachedWeightedPercent[ele.id()];
	    }

	    var eleDepth = ele._private.scratch.breadthfirst.depth;
	    var neighbors = ele.neighborhood().nodes().not(':parent').intersection(nodes);
	    var percent = 0;
	    var samples = 0;

	    for (var _i9 = 0; _i9 < neighbors.length; _i9++) {
	      var neighbor = neighbors[_i9];
	      var bf = neighbor._private.scratch.breadthfirst;
	      var index = bf.index;
	      var _depth2 = bf.depth;
	      var _nDepth = depths[_depth2].length;

	      if (eleDepth > _depth2 || eleDepth === 0) {
	        // only get influenced by elements above
	        percent += index / _nDepth;
	        samples++;
	      }
	    }

	    samples = Math.max(1, samples);
	    percent = percent / samples;

	    if (samples === 0) {
	      // so lone nodes have a "don't care" state in sorting
	      percent = undefined;
	    }

	    cachedWeightedPercent[ele.id()] = percent;
	    return percent;
	  };

	  // rearrange the indices in each depth level based on connectivity

	  var sortFn = function sortFn(a, b) {
	    var apct = getWeightedPercent(a);
	    var bpct = getWeightedPercent(b);

	    return apct - bpct;
	  };

	  for (var times = 0; times < 3; times++) {
	    // do it a few times b/c the depths are dynamic and we want a more stable result

	    for (var _i10 = 0; _i10 < depths.length; _i10++) {
	      depths[_i10] = depths[_i10].sort(sortFn);
	    }
	    assignDepthsToEles(); // and update
	  }

	  var biggestDepthSize = 0;
	  for (var _i11 = 0; _i11 < depths.length; _i11++) {
	    biggestDepthSize = Math.max(depths[_i11].length, biggestDepthSize);
	  }

	  var center = {
	    x: bb.x1 + bb.w / 2,
	    y: bb.x1 + bb.h / 2
	  };

	  var getPosition = function getPosition(ele, isBottomDepth) {
	    var info = ele._private.scratch.breadthfirst;
	    var depth = info.depth;
	    var index = info.index;
	    var depthSize = depths[depth].length;

	    var distanceX = Math.max(bb.w / (depthSize + 1), minDistance);
	    var distanceY = Math.max(bb.h / (depths.length + 1), minDistance);
	    var radiusStepSize = Math.min(bb.w / 2 / depths.length, bb.h / 2 / depths.length);
	    radiusStepSize = Math.max(radiusStepSize, minDistance);

	    if (!options.circle) {

	      var epos = {
	        x: center.x + (index + 1 - (depthSize + 1) / 2) * distanceX,
	        y: (depth + 1) * distanceY
	      };

	      if (isBottomDepth) {
	        return epos;
	      }

	      // let succs = successors[ ele.id() ];
	      // if( succs ){
	      //   epos.x = 0;
	      //
	      //   for( let i = 0 ; i < succs.length; i++ ){
	      //     let spos = pos[ succs[i].id() ];
	      //
	      //     epos.x += spos.x;
	      //   }
	      //
	      //   epos.x /= succs.length;
	      // } else {
	      //   //debugger;
	      // }

	      return epos;
	    } else {
	      if (options.circle) {
	        var radius = radiusStepSize * depth + radiusStepSize - (depths.length > 0 && depths[0].length <= 3 ? radiusStepSize / 2 : 0);
	        var theta = 2 * Math.PI / depths[depth].length * index;

	        if (depth === 0 && depths[0].length === 1) {
	          radius = 1;
	        }

	        return {
	          x: center.x + radius * Math.cos(theta),
	          y: center.y + radius * Math.sin(theta)
	        };
	      } else {
	        return {
	          x: center.x + (index + 1 - (depthSize + 1) / 2) * distanceX,
	          y: (depth + 1) * distanceY
	        };
	      }
	    }
	  };

	  // get positions in reverse depth order
	  var pos = {};
	  for (var _i12 = depths.length - 1; _i12 >= 0; _i12--) {
	    var _depth3 = depths[_i12];

	    for (var _j = 0; _j < _depth3.length; _j++) {
	      var _node2 = _depth3[_j];

	      pos[_node2.id()] = getPosition(_node2, _i12 === depths.length - 1);
	    }
	  }

	  nodes.layoutPositions(this, options, function (node) {
	    return pos[node.id()];
	  });

	  return this; // chaining
	};

	module.exports = BreadthFirstLayout;

	/***/ }),
	/* 98 */
	/***/ (function(module, exports, __webpack_require__) {


	var util = __webpack_require__(1);
	var math = __webpack_require__(2);
	var is = __webpack_require__(0);

	var defaults = {
	  fit: true, // whether to fit the viewport to the graph
	  padding: 30, // the padding on fit
	  boundingBox: undefined, // constrain layout bounds; { x1, y1, x2, y2 } or { x1, y1, w, h }
	  avoidOverlap: true, // prevents node overlap, may overflow boundingBox and radius if not enough space
	  nodeDimensionsIncludeLabels: false, // Excludes the label when calculating node bounding boxes for the layout algorithm
	  spacingFactor: undefined, // Applies a multiplicative factor (>0) to expand or compress the overall area that the nodes take up
	  radius: undefined, // the radius of the circle
	  startAngle: 3 / 2 * Math.PI, // where nodes start in radians
	  sweep: undefined, // how many radians should be between the first and last node (defaults to full circle)
	  clockwise: true, // whether the layout should go clockwise (true) or counterclockwise/anticlockwise (false)
	  sort: undefined, // a sorting function to order the nodes; e.g. function(a, b){ return a.data('weight') - b.data('weight') }
	  animate: false, // whether to transition the node positions
	  animationDuration: 500, // duration of animation in ms if enabled
	  animationEasing: undefined, // easing of animation if enabled
	  animateFilter: function animateFilter(node, i) {
	    return true;
	  }, // a function that determines whether the node should be animated.  All nodes animated by default on animate enabled.  Non-animated nodes are positioned immediately when the layout starts
	  ready: undefined, // callback on layoutready
	  stop: undefined, // callback on layoutstop
	  transform: function transform(node, position) {
	    return position;
	  } // transform a given node position. Useful for changing flow direction in discrete layouts 

	};

	function CircleLayout(options) {
	  this.options = util.extend({}, defaults, options);
	}

	CircleLayout.prototype.run = function () {
	  var params = this.options;
	  var options = params;

	  var cy = params.cy;
	  var eles = options.eles;

	  var clockwise = options.counterclockwise !== undefined ? !options.counterclockwise : options.clockwise;

	  var nodes = eles.nodes().not(':parent');

	  if (options.sort) {
	    nodes = nodes.sort(options.sort);
	  }

	  var bb = math.makeBoundingBox(options.boundingBox ? options.boundingBox : {
	    x1: 0, y1: 0, w: cy.width(), h: cy.height()
	  });

	  var center = {
	    x: bb.x1 + bb.w / 2,
	    y: bb.y1 + bb.h / 2
	  };

	  var sweep = options.sweep === undefined ? 2 * Math.PI - 2 * Math.PI / nodes.length : options.sweep;
	  var dTheta = sweep / Math.max(1, nodes.length - 1);
	  var r = void 0;

	  var minDistance = 0;
	  for (var i = 0; i < nodes.length; i++) {
	    var n = nodes[i];
	    var nbb = n.layoutDimensions(options);
	    var w = nbb.w;
	    var h = nbb.h;

	    minDistance = Math.max(minDistance, w, h);
	  }

	  if (is.number(options.radius)) {
	    r = options.radius;
	  } else if (nodes.length <= 1) {
	    r = 0;
	  } else {
	    r = Math.min(bb.h, bb.w) / 2 - minDistance;
	  }

	  // calculate the radius
	  if (nodes.length > 1 && options.avoidOverlap) {
	    // but only if more than one node (can't overlap)
	    minDistance *= 1.75; // just to have some nice spacing

	    var dcos = Math.cos(dTheta) - Math.cos(0);
	    var dsin = Math.sin(dTheta) - Math.sin(0);
	    var rMin = Math.sqrt(minDistance * minDistance / (dcos * dcos + dsin * dsin)); // s.t. no nodes overlapping
	    r = Math.max(rMin, r);
	  }

	  var getPos = function getPos(ele, i) {
	    var theta = options.startAngle + i * dTheta * (clockwise ? 1 : -1);

	    var rx = r * Math.cos(theta);
	    var ry = r * Math.sin(theta);
	    var pos = {
	      x: center.x + rx,
	      y: center.y + ry
	    };

	    return pos;
	  };

	  nodes.layoutPositions(this, options, getPos);

	  return this; // chaining
	};

	module.exports = CircleLayout;

	/***/ }),
	/* 99 */
	/***/ (function(module, exports, __webpack_require__) {


	var util = __webpack_require__(1);
	var math = __webpack_require__(2);

	var defaults = {
	  fit: true, // whether to fit the viewport to the graph
	  padding: 30, // the padding on fit
	  startAngle: 3 / 2 * Math.PI, // where nodes start in radians
	  sweep: undefined, // how many radians should be between the first and last node (defaults to full circle)
	  clockwise: true, // whether the layout should go clockwise (true) or counterclockwise/anticlockwise (false)
	  equidistant: false, // whether levels have an equal radial distance betwen them, may cause bounding box overflow
	  minNodeSpacing: 10, // min spacing between outside of nodes (used for radius adjustment)
	  boundingBox: undefined, // constrain layout bounds; { x1, y1, x2, y2 } or { x1, y1, w, h }
	  avoidOverlap: true, // prevents node overlap, may overflow boundingBox if not enough space
	  nodeDimensionsIncludeLabels: false, // Excludes the label when calculating node bounding boxes for the layout algorithm
	  height: undefined, // height of layout area (overrides container height)
	  width: undefined, // width of layout area (overrides container width)
	  spacingFactor: undefined, // Applies a multiplicative factor (>0) to expand or compress the overall area that the nodes take up
	  concentric: function concentric(node) {
	    // returns numeric value for each node, placing higher nodes in levels towards the centre
	    return node.degree();
	  },
	  levelWidth: function levelWidth(nodes) {
	    // the letiation of concentric values in each level
	    return nodes.maxDegree() / 4;
	  },
	  animate: false, // whether to transition the node positions
	  animationDuration: 500, // duration of animation in ms if enabled
	  animationEasing: undefined, // easing of animation if enabled
	  animateFilter: function animateFilter(node, i) {
	    return true;
	  }, // a function that determines whether the node should be animated.  All nodes animated by default on animate enabled.  Non-animated nodes are positioned immediately when the layout starts
	  ready: undefined, // callback on layoutready
	  stop: undefined, // callback on layoutstop
	  transform: function transform(node, position) {
	    return position;
	  } // transform a given node position. Useful for changing flow direction in discrete layouts 
	};

	function ConcentricLayout(options) {
	  this.options = util.extend({}, defaults, options);
	}

	ConcentricLayout.prototype.run = function () {
	  var params = this.options;
	  var options = params;

	  var clockwise = options.counterclockwise !== undefined ? !options.counterclockwise : options.clockwise;

	  var cy = params.cy;

	  var eles = options.eles;
	  var nodes = eles.nodes().not(':parent');

	  var bb = math.makeBoundingBox(options.boundingBox ? options.boundingBox : {
	    x1: 0, y1: 0, w: cy.width(), h: cy.height()
	  });

	  var center = {
	    x: bb.x1 + bb.w / 2,
	    y: bb.y1 + bb.h / 2
	  };

	  var nodeValues = []; // { node, value }
	  var theta = options.startAngle;
	  var maxNodeSize = 0;

	  for (var i = 0; i < nodes.length; i++) {
	    var node = nodes[i];
	    var value = void 0;

	    // calculate the node value
	    value = options.concentric(node);
	    nodeValues.push({
	      value: value,
	      node: node
	    });

	    // for style mapping
	    node._private.scratch.concentric = value;
	  }

	  // in case we used the `concentric` in style
	  nodes.updateStyle();

	  // calculate max size now based on potentially updated mappers
	  for (var _i = 0; _i < nodes.length; _i++) {
	    var _node = nodes[_i];
	    var nbb = _node.layoutDimensions(options);

	    maxNodeSize = Math.max(maxNodeSize, nbb.w, nbb.h);
	  }

	  // sort node values in descreasing order
	  nodeValues.sort(function (a, b) {
	    return b.value - a.value;
	  });

	  var levelWidth = options.levelWidth(nodes);

	  // put the values into levels
	  var levels = [[]];
	  var currentLevel = levels[0];
	  for (var _i2 = 0; _i2 < nodeValues.length; _i2++) {
	    var val = nodeValues[_i2];

	    if (currentLevel.length > 0) {
	      var diff = Math.abs(currentLevel[0].value - val.value);

	      if (diff >= levelWidth) {
	        currentLevel = [];
	        levels.push(currentLevel);
	      }
	    }

	    currentLevel.push(val);
	  }

	  // create positions from levels

	  var minDist = maxNodeSize + options.minNodeSpacing; // min dist between nodes

	  if (!options.avoidOverlap) {
	    // then strictly constrain to bb
	    var firstLvlHasMulti = levels.length > 0 && levels[0].length > 1;
	    var maxR = Math.min(bb.w, bb.h) / 2 - minDist;
	    var rStep = maxR / (levels.length + firstLvlHasMulti ? 1 : 0);

	    minDist = Math.min(minDist, rStep);
	  }

	  // find the metrics for each level
	  var r = 0;
	  for (var _i3 = 0; _i3 < levels.length; _i3++) {
	    var level = levels[_i3];
	    var sweep = options.sweep === undefined ? 2 * Math.PI - 2 * Math.PI / level.length : options.sweep;
	    var dTheta = level.dTheta = sweep / Math.max(1, level.length - 1);

	    // calculate the radius
	    if (level.length > 1 && options.avoidOverlap) {
	      // but only if more than one node (can't overlap)
	      var dcos = Math.cos(dTheta) - Math.cos(0);
	      var dsin = Math.sin(dTheta) - Math.sin(0);
	      var rMin = Math.sqrt(minDist * minDist / (dcos * dcos + dsin * dsin)); // s.t. no nodes overlapping

	      r = Math.max(rMin, r);
	    }

	    level.r = r;

	    r += minDist;
	  }

	  if (options.equidistant) {
	    var rDeltaMax = 0;
	    var _r = 0;

	    for (var _i4 = 0; _i4 < levels.length; _i4++) {
	      var _level = levels[_i4];
	      var rDelta = _level.r - _r;

	      rDeltaMax = Math.max(rDeltaMax, rDelta);
	    }

	    _r = 0;
	    for (var _i5 = 0; _i5 < levels.length; _i5++) {
	      var _level2 = levels[_i5];

	      if (_i5 === 0) {
	        _r = _level2.r;
	      }

	      _level2.r = _r;

	      _r += rDeltaMax;
	    }
	  }

	  // calculate the node positions
	  var pos = {}; // id => position
	  for (var _i6 = 0; _i6 < levels.length; _i6++) {
	    var _level3 = levels[_i6];
	    var _dTheta = _level3.dTheta;
	    var _r2 = _level3.r;

	    for (var j = 0; j < _level3.length; j++) {
	      var _val = _level3[j];
	      var _theta = options.startAngle + (clockwise ? 1 : -1) * _dTheta * j;

	      var p = {
	        x: center.x + _r2 * Math.cos(_theta),
	        y: center.y + _r2 * Math.sin(_theta)
	      };

	      pos[_val.node.id()] = p;
	    }
	  }

	  // position the nodes
	  nodes.layoutPositions(this, options, function (ele) {
	    var id = ele.id();

	    return pos[id];
	  });

	  return this; // chaining
	};

	module.exports = ConcentricLayout;

	/***/ }),
	/* 100 */
	/***/ (function(module, exports, __webpack_require__) {


	/*
	The CoSE layout was written by Gerardo Huck.
	https://www.linkedin.com/in/gerardohuck/

	Based on the following article:
	http://dl.acm.org/citation.cfm?id=1498047

	Modifications tracked on Github.
	*/

	var util = __webpack_require__(1);
	var math = __webpack_require__(2);
	var is = __webpack_require__(0);
	var Promise = __webpack_require__(5);

	var DEBUG;

	/**
	 * @brief :  default layout options
	 */
	var defaults = {
	  // Called on `layoutready`
	  ready: function ready() {},

	  // Called on `layoutstop`
	  stop: function stop() {},

	  // Whether to animate while running the layout
	  // true : Animate continuously as the layout is running
	  // false : Just show the end result
	  // 'end' : Animate with the end result, from the initial positions to the end positions
	  animate: true,

	  // Easing of the animation for animate:'end'
	  animationEasing: undefined,

	  // The duration of the animation for animate:'end'
	  animationDuration: undefined,

	  // A function that determines whether the node should be animated
	  // All nodes animated by default on animate enabled
	  // Non-animated nodes are positioned immediately when the layout starts
	  animateFilter: function animateFilter(node, i) {
	    return true;
	  },

	  // The layout animates only after this many milliseconds for animate:true
	  // (prevents flashing on fast runs)
	  animationThreshold: 250,

	  // Number of iterations between consecutive screen positions update
	  // (0 -> only updated on the end)
	  refresh: 20,

	  // Whether to fit the network view after when done
	  fit: true,

	  // Padding on fit
	  padding: 30,

	  // Constrain layout bounds; { x1, y1, x2, y2 } or { x1, y1, w, h }
	  boundingBox: undefined,

	  // Excludes the label when calculating node bounding boxes for the layout algorithm
	  nodeDimensionsIncludeLabels: false,

	  // Randomize the initial positions of the nodes (true) or use existing positions (false)
	  randomize: false,

	  // Extra spacing between components in non-compound graphs
	  componentSpacing: 40,

	  // Node repulsion (non overlapping) multiplier
	  nodeRepulsion: function nodeRepulsion(node) {
	    return 2048;
	  },

	  // Node repulsion (overlapping) multiplier
	  nodeOverlap: 4,

	  // Ideal edge (non nested) length
	  idealEdgeLength: function idealEdgeLength(edge) {
	    return 32;
	  },

	  // Divisor to compute edge forces
	  edgeElasticity: function edgeElasticity(edge) {
	    return 32;
	  },

	  // Nesting factor (multiplier) to compute ideal edge length for nested edges
	  nestingFactor: 1.2,

	  // Gravity force (constant)
	  gravity: 1,

	  // Maximum number of iterations to perform
	  numIter: 1000,

	  // Initial temperature (maximum node displacement)
	  initialTemp: 1000,

	  // Cooling factor (how the temperature is reduced between consecutive iterations
	  coolingFactor: 0.99,

	  // Lower temperature threshold (below this point the layout will end)
	  minTemp: 1.0,

	  // Pass a reference to weaver to use threads for calculations
	  weaver: false
	};

	/**
	 * @brief       : constructor
	 * @arg options : object containing layout options
	 */
	function CoseLayout(options) {
	  this.options = util.extend({}, defaults, options);

	  this.options.layout = this;
	}

	/**
	 * @brief : runs the layout
	 */
	CoseLayout.prototype.run = function () {
	  var options = this.options;
	  var cy = options.cy;
	  var layout = this;
	  var thread = this.thread;
	  var Thread = options.weaver ? options.weaver.Thread : null;

	  var falseThread = { // use false thread as polyfill
	    listeners: [],
	    on: function on(e, cb) {
	      this.listeners.push({ event: e, callback: cb });

	      return this;
	    },
	    trigger: function trigger(e) {
	      if (is.string(e)) {
	        e = { type: e };
	      }

	      var matchesEvent = function matchesEvent(l) {
	        return l.event === e.type;
	      };
	      var trigger = function trigger(l) {
	        l.callback(e);
	      };

	      this.listeners.filter(matchesEvent).forEach(trigger);

	      return this;
	    },
	    pass: function pass(data) {
	      this.pass = data;

	      return this;
	    },
	    run: function run(cb) {
	      var pass = this.pass;

	      return new Promise(function (resolve) {
	        resolve(cb(pass));
	      });
	    },
	    stop: function stop() {
	      return this;
	    },
	    stopped: function stopped() {
	      return true;
	    }
	  };

	  function broadcast(message) {
	    // for false thread
	    var e = { type: 'message', message: message };

	    falseThread.trigger(e);
	  }

	  if (!thread || thread.stopped()) {
	    thread = this.thread = Thread ? new Thread() : falseThread;
	  }

	  layout.stopped = false;

	  if (options.animate === true || options.animate === false) {
	    layout.emit({ type: 'layoutstart', layout: layout });
	  }

	  // Set DEBUG - Global variable
	  if (true === options.debug) {
	    DEBUG = true;
	  } else {
	    DEBUG = false;
	  }

	  // Initialize layout info
	  var layoutInfo = createLayoutInfo(cy, layout, options);

	  // Show LayoutInfo contents if debugging
	  if (DEBUG) {
	    printLayoutInfo(layoutInfo);
	  }

	  // If required, randomize node positions
	  if (options.randomize) {
	    randomizePositions(layoutInfo, cy);
	  }

	  var startTime = Date.now();
	  var refreshRequested = false;
	  var refresh = function refresh(rOpts) {
	    rOpts = rOpts || {};

	    if (refreshRequested && !rOpts.next) {
	      return;
	    }

	    if (!rOpts.force && Date.now() - startTime < options.animationThreshold) {
	      return;
	    }

	    refreshRequested = true;

	    util.requestAnimationFrame(function () {
	      refreshPositions(layoutInfo, cy, options);

	      // Fit the graph if necessary
	      if (true === options.fit) {
	        cy.fit(options.padding);
	      }

	      refreshRequested = false;

	      if (rOpts.next) {
	        rOpts.next();
	      }
	    });
	  };

	  thread.on('message', function (e) {
	    var layoutNodes = e.message;

	    layoutInfo.layoutNodes = layoutNodes;
	    refresh();
	  });

	  thread.pass({
	    layoutInfo: layoutInfo,
	    options: {
	      animate: options.animate,
	      refresh: options.refresh,
	      componentSpacing: options.componentSpacing,
	      nodeOverlap: options.nodeOverlap,
	      nestingFactor: options.nestingFactor,
	      gravity: options.gravity,
	      numIter: options.numIter,
	      initialTemp: options.initialTemp,
	      coolingFactor: options.coolingFactor,
	      minTemp: options.minTemp
	    }
	  }).run(function (pass) {
	    var layoutInfo = pass.layoutInfo;
	    var options = pass.options;

	    /**
	     * @brief          : Performs one iteration of the physical simulation
	     * @arg layoutInfo : LayoutInfo object already initialized
	     * @arg cy         : Cytoscape object
	     * @arg options    : Layout options
	     */
	    var step = function step(layoutInfo, options, _step) {
	      // var s = "\n\n###############################";
	      // s += "\nSTEP: " + step;
	      // s += "\n###############################\n";
	      // logDebug(s);

	      // Calculate node repulsions
	      calculateNodeForces(layoutInfo, options);
	      // Calculate edge forces
	      calculateEdgeForces(layoutInfo, options);
	      // Calculate gravity forces
	      calculateGravityForces(layoutInfo, options);
	      // Propagate forces from parent to child
	      propagateForces(layoutInfo, options);
	      // Update positions based on calculated forces
	      updatePositions(layoutInfo, options);
	    };

	    /**
	     * @brief : Computes the node repulsion forces
	     */
	    var calculateNodeForces = function calculateNodeForces(layoutInfo, options) {
	      // Go through each of the graphs in graphSet
	      // Nodes only repel each other if they belong to the same graph
	      // var s = 'calculateNodeForces';
	      // logDebug(s);
	      for (var i = 0; i < layoutInfo.graphSet.length; i++) {
	        var graph = layoutInfo.graphSet[i];
	        var numNodes = graph.length;

	        // s = "Set: " + graph.toString();
	        // logDebug(s);

	        // Now get all the pairs of nodes
	        // Only get each pair once, (A, B) = (B, A)
	        for (var j = 0; j < numNodes; j++) {
	          var node1 = layoutInfo.layoutNodes[layoutInfo.idToIndex[graph[j]]];

	          for (var k = j + 1; k < numNodes; k++) {
	            var node2 = layoutInfo.layoutNodes[layoutInfo.idToIndex[graph[k]]];

	            nodeRepulsion(node1, node2, layoutInfo, options);
	          }
	        }
	      }
	    };

	    var randomDistance = function randomDistance(max) {
	      return -max + 2 * max * Math.random();
	    };

	    /**
	     * @brief : Compute the node repulsion forces between a pair of nodes
	     */
	    var nodeRepulsion = function nodeRepulsion(node1, node2, layoutInfo, options) {
	      // var s = "Node repulsion. Node1: " + node1.id + " Node2: " + node2.id;

	      var cmptId1 = node1.cmptId;
	      var cmptId2 = node2.cmptId;

	      if (cmptId1 !== cmptId2 && !layoutInfo.isCompound) {
	        return;
	      }

	      // Get direction of line connecting both node centers
	      var directionX = node2.positionX - node1.positionX;
	      var directionY = node2.positionY - node1.positionY;
	      var maxRandDist = 1;
	      // s += "\ndirectionX: " + directionX + ", directionY: " + directionY;

	      // If both centers are the same, apply a random force
	      if (0 === directionX && 0 === directionY) {
	        directionX = randomDistance(maxRandDist);
	        directionY = randomDistance(maxRandDist);
	      }

	      var overlap = nodesOverlap(node1, node2, directionX, directionY);

	      if (overlap > 0) {
	        // s += "\nNodes DO overlap.";
	        // s += "\nOverlap: " + overlap;
	        // If nodes overlap, repulsion force is proportional
	        // to the overlap
	        var force = options.nodeOverlap * overlap;

	        // Compute the module and components of the force vector
	        var distance = Math.sqrt(directionX * directionX + directionY * directionY);
	        // s += "\nDistance: " + distance;
	        var forceX = force * directionX / distance;
	        var forceY = force * directionY / distance;
	      } else {
	        // s += "\nNodes do NOT overlap.";
	        // If there's no overlap, force is inversely proportional
	        // to squared distance

	        // Get clipping points for both nodes
	        var point1 = findClippingPoint(node1, directionX, directionY);
	        var point2 = findClippingPoint(node2, -1 * directionX, -1 * directionY);

	        // Use clipping points to compute distance
	        var distanceX = point2.x - point1.x;
	        var distanceY = point2.y - point1.y;
	        var distanceSqr = distanceX * distanceX + distanceY * distanceY;
	        var distance = Math.sqrt(distanceSqr);
	        // s += "\nDistance: " + distance;

	        // Compute the module and components of the force vector
	        var force = (node1.nodeRepulsion + node2.nodeRepulsion) / distanceSqr;
	        var forceX = force * distanceX / distance;
	        var forceY = force * distanceY / distance;
	      }

	      // Apply force
	      if (!node1.isLocked) {
	        node1.offsetX -= forceX;
	        node1.offsetY -= forceY;
	      }

	      if (!node2.isLocked) {
	        node2.offsetX += forceX;
	        node2.offsetY += forceY;
	      }

	      // s += "\nForceX: " + forceX + " ForceY: " + forceY;
	      // logDebug(s);

	      return;
	    };

	    /**
	     * @brief  : Determines whether two nodes overlap or not
	     * @return : Amount of overlapping (0 => no overlap)
	     */
	    var nodesOverlap = function nodesOverlap(node1, node2, dX, dY) {

	      if (dX > 0) {
	        var overlapX = node1.maxX - node2.minX;
	      } else {
	        var overlapX = node2.maxX - node1.minX;
	      }

	      if (dY > 0) {
	        var overlapY = node1.maxY - node2.minY;
	      } else {
	        var overlapY = node2.maxY - node1.minY;
	      }

	      if (overlapX >= 0 && overlapY >= 0) {
	        return Math.sqrt(overlapX * overlapX + overlapY * overlapY);
	      } else {
	        return 0;
	      }
	    };

	    /**
	     * @brief : Finds the point in which an edge (direction dX, dY) intersects
	     *          the rectangular bounding box of it's source/target node
	     */
	    var findClippingPoint = function findClippingPoint(node, dX, dY) {

	      // Shorcuts
	      var X = node.positionX;
	      var Y = node.positionY;
	      var H = node.height || 1;
	      var W = node.width || 1;
	      var dirSlope = dY / dX;
	      var nodeSlope = H / W;

	      // var s = 'Computing clipping point of node ' + node.id +
	      //   " . Height:  " + H + ", Width: " + W +
	      //   "\nDirection " + dX + ", " + dY;
	      //
	      // Compute intersection
	      var res = {};

	      // Case: Vertical direction (up)
	      if (0 === dX && 0 < dY) {
	        res.x = X;
	        // s += "\nUp direction";
	        res.y = Y + H / 2;

	        return res;
	      }

	      // Case: Vertical direction (down)
	      if (0 === dX && 0 > dY) {
	        res.x = X;
	        res.y = Y + H / 2;
	        // s += "\nDown direction";

	        return res;
	      }

	      // Case: Intersects the right border
	      if (0 < dX && -1 * nodeSlope <= dirSlope && dirSlope <= nodeSlope) {
	        res.x = X + W / 2;
	        res.y = Y + W * dY / 2 / dX;
	        // s += "\nRightborder";

	        return res;
	      }

	      // Case: Intersects the left border
	      if (0 > dX && -1 * nodeSlope <= dirSlope && dirSlope <= nodeSlope) {
	        res.x = X - W / 2;
	        res.y = Y - W * dY / 2 / dX;
	        // s += "\nLeftborder";

	        return res;
	      }

	      // Case: Intersects the top border
	      if (0 < dY && (dirSlope <= -1 * nodeSlope || dirSlope >= nodeSlope)) {
	        res.x = X + H * dX / 2 / dY;
	        res.y = Y + H / 2;
	        // s += "\nTop border";

	        return res;
	      }

	      // Case: Intersects the bottom border
	      if (0 > dY && (dirSlope <= -1 * nodeSlope || dirSlope >= nodeSlope)) {
	        res.x = X - H * dX / 2 / dY;
	        res.y = Y - H / 2;
	        // s += "\nBottom border";

	        return res;
	      }

	      // s += "\nClipping point found at " + res.x + ", " + res.y;
	      // logDebug(s);
	      return res;
	    };

	    /**
	     * @brief : Calculates all edge forces
	     */
	    var calculateEdgeForces = function calculateEdgeForces(layoutInfo, options) {
	      // Iterate over all edges
	      for (var i = 0; i < layoutInfo.edgeSize; i++) {
	        // Get edge, source & target nodes
	        var edge = layoutInfo.layoutEdges[i];
	        var sourceIx = layoutInfo.idToIndex[edge.sourceId];
	        var source = layoutInfo.layoutNodes[sourceIx];
	        var targetIx = layoutInfo.idToIndex[edge.targetId];
	        var target = layoutInfo.layoutNodes[targetIx];

	        // Get direction of line connecting both node centers
	        var directionX = target.positionX - source.positionX;
	        var directionY = target.positionY - source.positionY;

	        // If both centers are the same, do nothing.
	        // A random force has already been applied as node repulsion
	        if (0 === directionX && 0 === directionY) {
	          continue;
	        }

	        // Get clipping points for both nodes
	        var point1 = findClippingPoint(source, directionX, directionY);
	        var point2 = findClippingPoint(target, -1 * directionX, -1 * directionY);

	        var lx = point2.x - point1.x;
	        var ly = point2.y - point1.y;
	        var l = Math.sqrt(lx * lx + ly * ly);

	        var force = Math.pow(edge.idealLength - l, 2) / edge.elasticity;

	        if (0 !== l) {
	          var forceX = force * lx / l;
	          var forceY = force * ly / l;
	        } else {
	          var forceX = 0;
	          var forceY = 0;
	        }

	        // Add this force to target and source nodes
	        if (!source.isLocked) {
	          source.offsetX += forceX;
	          source.offsetY += forceY;
	        }

	        if (!target.isLocked) {
	          target.offsetX -= forceX;
	          target.offsetY -= forceY;
	        }

	        // var s = 'Edge force between nodes ' + source.id + ' and ' + target.id;
	        // s += "\nDistance: " + l + " Force: (" + forceX + ", " + forceY + ")";
	        // logDebug(s);
	      }
	    };

	    /**
	     * @brief : Computes gravity forces for all nodes
	     */
	    var calculateGravityForces = function calculateGravityForces(layoutInfo, options) {
	      var distThreshold = 1;

	      // var s = 'calculateGravityForces';
	      // logDebug(s);
	      for (var i = 0; i < layoutInfo.graphSet.length; i++) {
	        var graph = layoutInfo.graphSet[i];
	        var numNodes = graph.length;

	        // s = "Set: " + graph.toString();
	        // logDebug(s);

	        // Compute graph center
	        if (0 === i) {
	          var centerX = layoutInfo.clientHeight / 2;
	          var centerY = layoutInfo.clientWidth / 2;
	        } else {
	          // Get Parent node for this graph, and use its position as center
	          var temp = layoutInfo.layoutNodes[layoutInfo.idToIndex[graph[0]]];
	          var parent = layoutInfo.layoutNodes[layoutInfo.idToIndex[temp.parentId]];
	          var centerX = parent.positionX;
	          var centerY = parent.positionY;
	        }
	        // s = "Center found at: " + centerX + ", " + centerY;
	        // logDebug(s);

	        // Apply force to all nodes in graph
	        for (var j = 0; j < numNodes; j++) {
	          var node = layoutInfo.layoutNodes[layoutInfo.idToIndex[graph[j]]];
	          // s = "Node: " + node.id;

	          if (node.isLocked) {
	            continue;
	          }

	          var dx = centerX - node.positionX;
	          var dy = centerY - node.positionY;
	          var d = Math.sqrt(dx * dx + dy * dy);
	          if (d > distThreshold) {
	            var fx = options.gravity * dx / d;
	            var fy = options.gravity * dy / d;
	            node.offsetX += fx;
	            node.offsetY += fy;
	            // s += ": Applied force: " + fx + ", " + fy;
	          }
	            // s += ": skypped since it's too close to center";

	            // logDebug(s);
	        }
	      }
	    };

	    /**
	     * @brief          : This function propagates the existing offsets from
	     *                   parent nodes to its descendents.
	     * @arg layoutInfo : layoutInfo Object
	     * @arg cy         : cytoscape Object
	     * @arg options    : Layout options
	     */
	    var propagateForces = function propagateForces(layoutInfo, options) {
	      // Inline implementation of a queue, used for traversing the graph in BFS order
	      var queue = [];
	      var start = 0; // Points to the start the queue
	      var end = -1; // Points to the end of the queue

	      // logDebug('propagateForces');

	      // Start by visiting the nodes in the root graph
	      queue.push.apply(queue, layoutInfo.graphSet[0]);
	      end += layoutInfo.graphSet[0].length;

	      // Traverse the graph, level by level,
	      while (start <= end) {
	        // Get the node to visit and remove it from queue
	        var nodeId = queue[start++];
	        var nodeIndex = layoutInfo.idToIndex[nodeId];
	        var node = layoutInfo.layoutNodes[nodeIndex];
	        var children = node.children;

	        // We only need to process the node if it's compound
	        if (0 < children.length && !node.isLocked) {
	          var offX = node.offsetX;
	          var offY = node.offsetY;

	          // var s = "Propagating offset from parent node : " + node.id +
	          //   ". OffsetX: " + offX + ". OffsetY: " + offY;
	          // s += "\n Children: " + children.toString();
	          // logDebug(s);

	          for (var i = 0; i < children.length; i++) {
	            var childNode = layoutInfo.layoutNodes[layoutInfo.idToIndex[children[i]]];
	            // Propagate offset
	            childNode.offsetX += offX;
	            childNode.offsetY += offY;
	            // Add children to queue to be visited
	            queue[++end] = children[i];
	          }

	          // Reset parent offsets
	          node.offsetX = 0;
	          node.offsetY = 0;
	        }
	      }
	    };

	    /**
	     * @brief : Updates the layout model positions, based on
	     *          the accumulated forces
	     */
	    var updatePositions = function updatePositions(layoutInfo, options) {
	      // var s = 'Updating positions';
	      // logDebug(s);

	      // Reset boundaries for compound nodes
	      for (var i = 0; i < layoutInfo.nodeSize; i++) {
	        var n = layoutInfo.layoutNodes[i];
	        if (0 < n.children.length) {
	          // logDebug("Resetting boundaries of compound node: " + n.id);
	          n.maxX = undefined;
	          n.minX = undefined;
	          n.maxY = undefined;
	          n.minY = undefined;
	        }
	      }

	      for (var i = 0; i < layoutInfo.nodeSize; i++) {
	        var n = layoutInfo.layoutNodes[i];
	        if (0 < n.children.length || n.isLocked) {
	          // No need to set compound or locked node position
	          // logDebug("Skipping position update of node: " + n.id);
	          continue;
	        }
	        // s = "Node: " + n.id + " Previous position: (" +
	        // n.positionX + ", " + n.positionY + ").";

	        // Limit displacement in order to improve stability
	        var tempForce = limitForce(n.offsetX, n.offsetY, layoutInfo.temperature);
	        n.positionX += tempForce.x;
	        n.positionY += tempForce.y;
	        n.offsetX = 0;
	        n.offsetY = 0;
	        n.minX = n.positionX - n.width;
	        n.maxX = n.positionX + n.width;
	        n.minY = n.positionY - n.height;
	        n.maxY = n.positionY + n.height;
	        // s += " New Position: (" + n.positionX + ", " + n.positionY + ").";
	        // logDebug(s);

	        // Update ancestry boudaries
	        updateAncestryBoundaries(n, layoutInfo);
	      }

	      // Update size, position of compund nodes
	      for (var i = 0; i < layoutInfo.nodeSize; i++) {
	        var n = layoutInfo.layoutNodes[i];
	        if (0 < n.children.length && !n.isLocked) {
	          n.positionX = (n.maxX + n.minX) / 2;
	          n.positionY = (n.maxY + n.minY) / 2;
	          n.width = n.maxX - n.minX;
	          n.height = n.maxY - n.minY;
	          // s = "Updating position, size of compound node " + n.id;
	          // s += "\nPositionX: " + n.positionX + ", PositionY: " + n.positionY;
	          // s += "\nWidth: " + n.width + ", Height: " + n.height;
	          // logDebug(s);
	        }
	      }
	    };

	    /**
	     * @brief : Limits a force (forceX, forceY) to be not
	     *          greater (in modulo) than max.
	     8          Preserves force direction.
	     */
	    var limitForce = function limitForce(forceX, forceY, max) {
	      // var s = "Limiting force: (" + forceX + ", " + forceY + "). Max: " + max;
	      var force = Math.sqrt(forceX * forceX + forceY * forceY);

	      if (force > max) {
	        var res = {
	          x: max * forceX / force,
	          y: max * forceY / force
	        };
	      } else {
	        var res = {
	          x: forceX,
	          y: forceY
	        };
	      }

	      // s += ".\nResult: (" + res.x + ", " + res.y + ")";
	      // logDebug(s);

	      return res;
	    };

	    /**
	     * @brief : Function used for keeping track of compound node
	     *          sizes, since they should bound all their subnodes.
	     */
	    var updateAncestryBoundaries = function updateAncestryBoundaries(node, layoutInfo) {
	      // var s = "Propagating new position/size of node " + node.id;
	      var parentId = node.parentId;
	      if (null == parentId) {
	        // If there's no parent, we are done
	        // s += ". No parent node.";
	        // logDebug(s);
	        return;
	      }

	      // Get Parent Node
	      var p = layoutInfo.layoutNodes[layoutInfo.idToIndex[parentId]];
	      var flag = false;

	      // MaxX
	      if (null == p.maxX || node.maxX + p.padRight > p.maxX) {
	        p.maxX = node.maxX + p.padRight;
	        flag = true;
	        // s += "\nNew maxX for parent node " + p.id + ": " + p.maxX;
	      }

	      // MinX
	      if (null == p.minX || node.minX - p.padLeft < p.minX) {
	        p.minX = node.minX - p.padLeft;
	        flag = true;
	        // s += "\nNew minX for parent node " + p.id + ": " + p.minX;
	      }

	      // MaxY
	      if (null == p.maxY || node.maxY + p.padBottom > p.maxY) {
	        p.maxY = node.maxY + p.padBottom;
	        flag = true;
	        // s += "\nNew maxY for parent node " + p.id + ": " + p.maxY;
	      }

	      // MinY
	      if (null == p.minY || node.minY - p.padTop < p.minY) {
	        p.minY = node.minY - p.padTop;
	        flag = true;
	        // s += "\nNew minY for parent node " + p.id + ": " + p.minY;
	      }

	      // If updated boundaries, propagate changes upward
	      if (flag) {
	        // logDebug(s);
	        return updateAncestryBoundaries(p, layoutInfo);
	      }

	      // s += ". No changes in boundaries/position of parent node " + p.id;
	      // logDebug(s);
	      return;
	    };

	    var separateComponents = function separateComponents(layutInfo, options) {
	      var nodes = layoutInfo.layoutNodes;
	      var components = [];

	      for (var i = 0; i < nodes.length; i++) {
	        var node = nodes[i];
	        var cid = node.cmptId;
	        var component = components[cid] = components[cid] || [];

	        component.push(node);
	      }

	      var totalA = 0;

	      for (var i = 0; i < components.length; i++) {
	        var c = components[i];

	        if (!c) {
	          continue;
	        }

	        c.x1 = Infinity;
	        c.x2 = -Infinity;
	        c.y1 = Infinity;
	        c.y2 = -Infinity;

	        for (var j = 0; j < c.length; j++) {
	          var n = c[j];

	          c.x1 = Math.min(c.x1, n.positionX - n.width / 2);
	          c.x2 = Math.max(c.x2, n.positionX + n.width / 2);
	          c.y1 = Math.min(c.y1, n.positionY - n.height / 2);
	          c.y2 = Math.max(c.y2, n.positionY + n.height / 2);
	        }

	        c.w = c.x2 - c.x1;
	        c.h = c.y2 - c.y1;

	        totalA += c.w * c.h;
	      }

	      components.sort(function (c1, c2) {
	        return c2.w * c2.h - c1.w * c1.h;
	      });

	      var x = 0;
	      var y = 0;
	      var usedW = 0;
	      var rowH = 0;
	      var maxRowW = Math.sqrt(totalA) * layoutInfo.clientWidth / layoutInfo.clientHeight;

	      for (var i = 0; i < components.length; i++) {
	        var c = components[i];

	        if (!c) {
	          continue;
	        }

	        for (var j = 0; j < c.length; j++) {
	          var n = c[j];

	          if (!n.isLocked) {
	            n.positionX += x;
	            n.positionY += y;
	          }
	        }

	        x += c.w + options.componentSpacing;
	        usedW += c.w + options.componentSpacing;
	        rowH = Math.max(rowH, c.h);

	        if (usedW > maxRowW) {
	          y += rowH + options.componentSpacing;
	          x = 0;
	          usedW = 0;
	          rowH = 0;
	        }
	      }
	    };

	    var mainLoop = function mainLoop(i) {

	      // Do one step in the phisical simulation
	      step(layoutInfo, options, i);

	      // Update temperature
	      layoutInfo.temperature = layoutInfo.temperature * options.coolingFactor;
	      // logDebug("New temperature: " + layoutInfo.temperature);

	      if (layoutInfo.temperature < options.minTemp) {
	        // logDebug("Temperature drop below minimum threshold. Stopping computation in step " + i);
	        return false;
	      }

	      return true;
	    };

	    var i = 0;
	    var loopRet;

	    do {
	      var f = 0;

	      while ((f < options.refresh || options.refresh === 0) && i < options.numIter) {
	        var loopRet = mainLoop(i);
	        if (!loopRet) {
	          break;
	        }

	        f++;
	        i++;
	      }

	      if (options.animate === true) {
	        broadcast(layoutInfo.layoutNodes); // eslint-disable-line no-undef
	      }
	    } while (loopRet && i + 1 < options.numIter);

	    separateComponents(layoutInfo, options);

	    return layoutInfo;
	  }).then(function (layoutInfoUpdated) {
	    layoutInfo.layoutNodes = layoutInfoUpdated.layoutNodes; // get the positions

	    thread.stop();
	    done();
	  });

	  var done = function done() {
	    if (options.animate === true || options.animate === false) {
	      refresh({
	        force: true,
	        next: function next() {
	          // Layout has finished
	          layout.one('layoutstop', options.stop);
	          layout.emit({ type: 'layoutstop', layout: layout });
	        }
	      });
	    } else {
	      options.eles.nodes().layoutPositions(layout, options, function (node) {
	        var lnode = layoutInfo.layoutNodes[layoutInfo.idToIndex[node.data('id')]];

	        return { x: lnode.positionX, y: lnode.positionY };
	      });
	    }
	  };

	  return this; // chaining
	};

	/**
	 * @brief : called on continuous layouts to stop them before they finish
	 */
	CoseLayout.prototype.stop = function () {
	  this.stopped = true;

	  if (this.thread) {
	    this.thread.stop();
	  }

	  this.emit('layoutstop');

	  return this; // chaining
	};

	CoseLayout.prototype.destroy = function () {
	  if (this.thread) {
	    this.thread.stop();
	  }

	  return this; // chaining
	};

	/**
	 * @brief     : Creates an object which is contains all the data
	 *              used in the layout process
	 * @arg cy    : cytoscape.js object
	 * @return    : layoutInfo object initialized
	 */
	var createLayoutInfo = function createLayoutInfo(cy, layout, options) {
	  // Shortcut
	  var edges = options.eles.edges();
	  var nodes = options.eles.nodes();

	  var layoutInfo = {
	    isCompound: cy.hasCompoundNodes(),
	    layoutNodes: [],
	    idToIndex: {},
	    nodeSize: nodes.size(),
	    graphSet: [],
	    indexToGraph: [],
	    layoutEdges: [],
	    edgeSize: edges.size(),
	    temperature: options.initialTemp,
	    clientWidth: cy.width(),
	    clientHeight: cy.width(),
	    boundingBox: math.makeBoundingBox(options.boundingBox ? options.boundingBox : {
	      x1: 0, y1: 0, w: cy.width(), h: cy.height()
	    })
	  };

	  var components = options.eles.components();
	  var id2cmptId = {};

	  for (var i = 0; i < components.length; i++) {
	    var component = components[i];

	    for (var j = 0; j < component.length; j++) {
	      var node = component[j];

	      id2cmptId[node.id()] = i;
	    }
	  }

	  // Iterate over all nodes, creating layout nodes
	  for (var i = 0; i < layoutInfo.nodeSize; i++) {
	    var n = nodes[i];
	    var nbb = n.layoutDimensions(options);

	    var tempNode = {};
	    tempNode.isLocked = n.locked();
	    tempNode.id = n.data('id');
	    tempNode.parentId = n.data('parent');
	    tempNode.cmptId = id2cmptId[n.id()];
	    tempNode.children = [];
	    tempNode.positionX = n.position('x');
	    tempNode.positionY = n.position('y');
	    tempNode.offsetX = 0;
	    tempNode.offsetY = 0;
	    tempNode.height = nbb.w;
	    tempNode.width = nbb.h;
	    tempNode.maxX = tempNode.positionX + tempNode.width / 2;
	    tempNode.minX = tempNode.positionX - tempNode.width / 2;
	    tempNode.maxY = tempNode.positionY + tempNode.height / 2;
	    tempNode.minY = tempNode.positionY - tempNode.height / 2;
	    tempNode.padLeft = parseFloat(n.style('padding'));
	    tempNode.padRight = parseFloat(n.style('padding'));
	    tempNode.padTop = parseFloat(n.style('padding'));
	    tempNode.padBottom = parseFloat(n.style('padding'));

	    // forces
	    tempNode.nodeRepulsion = is.fn(options.nodeRepulsion) ? options.nodeRepulsion(n) : options.nodeRepulsion;

	    // Add new node
	    layoutInfo.layoutNodes.push(tempNode);
	    // Add entry to id-index map
	    layoutInfo.idToIndex[tempNode.id] = i;
	  }

	  // Inline implementation of a queue, used for traversing the graph in BFS order
	  var queue = [];
	  var start = 0; // Points to the start the queue
	  var end = -1; // Points to the end of the queue

	  var tempGraph = [];

	  // Second pass to add child information and
	  // initialize queue for hierarchical traversal
	  for (var i = 0; i < layoutInfo.nodeSize; i++) {
	    var n = layoutInfo.layoutNodes[i];
	    var p_id = n.parentId;
	    // Check if node n has a parent node
	    if (null != p_id) {
	      // Add node Id to parent's list of children
	      layoutInfo.layoutNodes[layoutInfo.idToIndex[p_id]].children.push(n.id);
	    } else {
	      // If a node doesn't have a parent, then it's in the root graph
	      queue[++end] = n.id;
	      tempGraph.push(n.id);
	    }
	  }

	  // Add root graph to graphSet
	  layoutInfo.graphSet.push(tempGraph);

	  // Traverse the graph, level by level,
	  while (start <= end) {
	    // Get the node to visit and remove it from queue
	    var node_id = queue[start++];
	    var node_ix = layoutInfo.idToIndex[node_id];
	    var node = layoutInfo.layoutNodes[node_ix];
	    var children = node.children;
	    if (children.length > 0) {
	      // Add children nodes as a new graph to graph set
	      layoutInfo.graphSet.push(children);
	      // Add children to que queue to be visited
	      for (var i = 0; i < children.length; i++) {
	        queue[++end] = children[i];
	      }
	    }
	  }

	  // Create indexToGraph map
	  for (var i = 0; i < layoutInfo.graphSet.length; i++) {
	    var graph = layoutInfo.graphSet[i];
	    for (var j = 0; j < graph.length; j++) {
	      var index = layoutInfo.idToIndex[graph[j]];
	      layoutInfo.indexToGraph[index] = i;
	    }
	  }

	  // Iterate over all edges, creating Layout Edges
	  for (var i = 0; i < layoutInfo.edgeSize; i++) {
	    var e = edges[i];
	    var tempEdge = {};
	    tempEdge.id = e.data('id');
	    tempEdge.sourceId = e.data('source');
	    tempEdge.targetId = e.data('target');

	    // Compute ideal length
	    var idealLength = is.fn(options.idealEdgeLength) ? options.idealEdgeLength(e) : options.idealEdgeLength;
	    var elasticity = is.fn(options.edgeElasticity) ? options.edgeElasticity(e) : options.edgeElasticity;

	    // Check if it's an inter graph edge
	    var sourceIx = layoutInfo.idToIndex[tempEdge.sourceId];
	    var targetIx = layoutInfo.idToIndex[tempEdge.targetId];
	    var sourceGraph = layoutInfo.indexToGraph[sourceIx];
	    var targetGraph = layoutInfo.indexToGraph[targetIx];

	    if (sourceGraph != targetGraph) {
	      // Find lowest common graph ancestor
	      var lca = findLCA(tempEdge.sourceId, tempEdge.targetId, layoutInfo);

	      // Compute sum of node depths, relative to lca graph
	      var lcaGraph = layoutInfo.graphSet[lca];
	      var depth = 0;

	      // Source depth
	      var tempNode = layoutInfo.layoutNodes[sourceIx];
	      while (-1 === lcaGraph.indexOf(tempNode.id)) {
	        tempNode = layoutInfo.layoutNodes[layoutInfo.idToIndex[tempNode.parentId]];
	        depth++;
	      }

	      // Target depth
	      tempNode = layoutInfo.layoutNodes[targetIx];
	      while (-1 === lcaGraph.indexOf(tempNode.id)) {
	        tempNode = layoutInfo.layoutNodes[layoutInfo.idToIndex[tempNode.parentId]];
	        depth++;
	      }

	      // logDebug('LCA of nodes ' + tempEdge.sourceId + ' and ' + tempEdge.targetId +
	      //  ". Index: " + lca + " Contents: " + lcaGraph.toString() +
	      //  ". Depth: " + depth);

	      // Update idealLength
	      idealLength *= depth * options.nestingFactor;
	    }

	    tempEdge.idealLength = idealLength;
	    tempEdge.elasticity = elasticity;

	    layoutInfo.layoutEdges.push(tempEdge);
	  }

	  // Finally, return layoutInfo object
	  return layoutInfo;
	};

	/**
	 * @brief : This function finds the index of the lowest common
	 *          graph ancestor between 2 nodes in the subtree
	 *          (from the graph hierarchy induced tree) whose
	 *          root is graphIx
	 *
	 * @arg node1: node1's ID
	 * @arg node2: node2's ID
	 * @arg layoutInfo: layoutInfo object
	 *
	 */
	var findLCA = function findLCA(node1, node2, layoutInfo) {
	  // Find their common ancester, starting from the root graph
	  var res = findLCA_aux(node1, node2, 0, layoutInfo);
	  if (2 > res.count) {
	    // If aux function couldn't find the common ancester,
	    // then it is the root graph
	    return 0;
	  } else {
	    return res.graph;
	  }
	};

	/**
	 * @brief          : Auxiliary function used for LCA computation
	 *
	 * @arg node1      : node1's ID
	 * @arg node2      : node2's ID
	 * @arg graphIx    : subgraph index
	 * @arg layoutInfo : layoutInfo object
	 *
	 * @return         : object of the form {count: X, graph: Y}, where:
	 *                   X is the number of ancesters (max: 2) found in
	 *                   graphIx (and it's subgraphs),
	 *                   Y is the graph index of the lowest graph containing
	 *                   all X nodes
	 */
	var findLCA_aux = function findLCA_aux(node1, node2, graphIx, layoutInfo) {
	  var graph = layoutInfo.graphSet[graphIx];
	  // If both nodes belongs to graphIx
	  if (-1 < graph.indexOf(node1) && -1 < graph.indexOf(node2)) {
	    return { count: 2, graph: graphIx };
	  }

	  // Make recursive calls for all subgraphs
	  var c = 0;
	  for (var i = 0; i < graph.length; i++) {
	    var nodeId = graph[i];
	    var nodeIx = layoutInfo.idToIndex[nodeId];
	    var children = layoutInfo.layoutNodes[nodeIx].children;

	    // If the node has no child, skip it
	    if (0 === children.length) {
	      continue;
	    }

	    var childGraphIx = layoutInfo.indexToGraph[layoutInfo.idToIndex[children[0]]];
	    var result = findLCA_aux(node1, node2, childGraphIx, layoutInfo);
	    if (0 === result.count) {
	      // Neither node1 nor node2 are present in this subgraph
	      continue;
	    } else if (1 === result.count) {
	      // One of (node1, node2) is present in this subgraph
	      c++;
	      if (2 === c) {
	        // We've already found both nodes, no need to keep searching
	        break;
	      }
	    } else {
	      // Both nodes are present in this subgraph
	      return result;
	    }
	  }

	  return { count: c, graph: graphIx };
	};

	/**
	 * @brief: printsLayoutInfo into js console
	 *         Only used for debbuging
	 */
	var printLayoutInfo = function printLayoutInfo(layoutInfo) {
	  /* eslint-disable */

	  if (!DEBUG) {
	    return;
	  }
	  console.debug('layoutNodes:');
	  for (var i = 0; i < layoutInfo.nodeSize; i++) {
	    var n = layoutInfo.layoutNodes[i];
	    var s = '\nindex: ' + i + '\nId: ' + n.id + '\nChildren: ' + n.children.toString() + '\nparentId: ' + n.parentId + '\npositionX: ' + n.positionX + '\npositionY: ' + n.positionY + '\nOffsetX: ' + n.offsetX + '\nOffsetY: ' + n.offsetY + '\npadLeft: ' + n.padLeft + '\npadRight: ' + n.padRight + '\npadTop: ' + n.padTop + '\npadBottom: ' + n.padBottom;

	    console.debug(s);
	  }

	  console.debug('idToIndex');
	  for (var i in layoutInfo.idToIndex) {
	    console.debug('Id: ' + i + '\nIndex: ' + layoutInfo.idToIndex[i]);
	  }

	  console.debug('Graph Set');
	  var set = layoutInfo.graphSet;
	  for (var i = 0; i < set.length; i++) {
	    console.debug('Set : ' + i + ': ' + set[i].toString());
	  }

	  var s = 'IndexToGraph';
	  for (var i = 0; i < layoutInfo.indexToGraph.length; i++) {
	    s += '\nIndex : ' + i + ' Graph: ' + layoutInfo.indexToGraph[i];
	  }
	  console.debug(s);

	  s = 'Layout Edges';
	  for (var i = 0; i < layoutInfo.layoutEdges.length; i++) {
	    var e = layoutInfo.layoutEdges[i];
	    s += '\nEdge Index: ' + i + ' ID: ' + e.id + ' SouceID: ' + e.sourceId + ' TargetId: ' + e.targetId + ' Ideal Length: ' + e.idealLength;
	  }
	  console.debug(s);

	  s = 'nodeSize: ' + layoutInfo.nodeSize;
	  s += '\nedgeSize: ' + layoutInfo.edgeSize;
	  s += '\ntemperature: ' + layoutInfo.temperature;
	  console.debug(s);

	  return;
	  /* eslint-enable */
	};

	/**
	 * @brief : Randomizes the position of all nodes
	 */
	var randomizePositions = function randomizePositions(layoutInfo, cy) {
	  var width = layoutInfo.clientWidth;
	  var height = layoutInfo.clientHeight;

	  for (var i = 0; i < layoutInfo.nodeSize; i++) {
	    var n = layoutInfo.layoutNodes[i];

	    // No need to randomize compound nodes or locked nodes
	    if (0 === n.children.length && !n.isLocked) {
	      n.positionX = Math.random() * width;
	      n.positionY = Math.random() * height;
	    }
	  }
	};

	/**
	 * @brief          : Updates the positions of nodes in the network
	 * @arg layoutInfo : LayoutInfo object
	 * @arg cy         : Cytoscape object
	 * @arg options    : Layout options
	 */
	var refreshPositions = function refreshPositions(layoutInfo, cy, options) {
	  // var s = 'Refreshing positions';
	  // logDebug(s);

	  var layout = options.layout;
	  var nodes = options.eles.nodes();
	  var bb = layoutInfo.boundingBox;
	  var coseBB = { x1: Infinity, x2: -Infinity, y1: Infinity, y2: -Infinity };

	  if (options.boundingBox) {
	    nodes.forEach(function (node) {
	      var lnode = layoutInfo.layoutNodes[layoutInfo.idToIndex[node.data('id')]];

	      coseBB.x1 = Math.min(coseBB.x1, lnode.positionX);
	      coseBB.x2 = Math.max(coseBB.x2, lnode.positionX);

	      coseBB.y1 = Math.min(coseBB.y1, lnode.positionY);
	      coseBB.y2 = Math.max(coseBB.y2, lnode.positionY);
	    });

	    coseBB.w = coseBB.x2 - coseBB.x1;
	    coseBB.h = coseBB.y2 - coseBB.y1;
	  }

	  nodes.positions(function (ele, i) {
	    var lnode = layoutInfo.layoutNodes[layoutInfo.idToIndex[ele.data('id')]];
	    // s = "Node: " + lnode.id + ". Refreshed position: (" +
	    // lnode.positionX + ", " + lnode.positionY + ").";
	    // logDebug(s);

	    if (options.boundingBox) {
	      // then add extra bounding box constraint
	      var pctX = (lnode.positionX - coseBB.x1) / coseBB.w;
	      var pctY = (lnode.positionY - coseBB.y1) / coseBB.h;

	      return {
	        x: bb.x1 + pctX * bb.w,
	        y: bb.y1 + pctY * bb.h
	      };
	    } else {
	      return {
	        x: lnode.positionX,
	        y: lnode.positionY
	      };
	    }
	  });

	  // Trigger layoutReady only on first call
	  if (true !== layoutInfo.ready) {
	    // s = 'Triggering layoutready';
	    // logDebug(s);
	    layoutInfo.ready = true;
	    layout.one('layoutready', options.ready);
	    layout.emit({ type: 'layoutready', layout: this });
	  }
	};

	/**
	 * @brief : Logs a debug message in JS console, if DEBUG is ON
	 */
	// var logDebug = function(text) {
	//   if (DEBUG) {
	//     console.debug(text);
	//   }
	// };

	module.exports = CoseLayout;

	/***/ }),
	/* 101 */
	/***/ (function(module, exports, __webpack_require__) {


	var util = __webpack_require__(1);
	var math = __webpack_require__(2);

	var defaults = {
	  fit: true, // whether to fit the viewport to the graph
	  padding: 30, // padding used on fit
	  boundingBox: undefined, // constrain layout bounds; { x1, y1, x2, y2 } or { x1, y1, w, h }
	  avoidOverlap: true, // prevents node overlap, may overflow boundingBox if not enough space
	  avoidOverlapPadding: 10, // extra spacing around nodes when avoidOverlap: true
	  nodeDimensionsIncludeLabels: false, // Excludes the label when calculating node bounding boxes for the layout algorithm
	  spacingFactor: undefined, // Applies a multiplicative factor (>0) to expand or compress the overall area that the nodes take up
	  condense: false, // uses all available space on false, uses minimal space on true
	  rows: undefined, // force num of rows in the grid
	  cols: undefined, // force num of columns in the grid
	  position: function position(node) {}, // returns { row, col } for element
	  sort: undefined, // a sorting function to order the nodes; e.g. function(a, b){ return a.data('weight') - b.data('weight') }
	  animate: false, // whether to transition the node positions
	  animationDuration: 500, // duration of animation in ms if enabled
	  animationEasing: undefined, // easing of animation if enabled
	  animateFilter: function animateFilter(node, i) {
	    return true;
	  }, // a function that determines whether the node should be animated.  All nodes animated by default on animate enabled.  Non-animated nodes are positioned immediately when the layout starts
	  ready: undefined, // callback on layoutready
	  stop: undefined, // callback on layoutstop
	  transform: function transform(node, position) {
	    return position;
	  } // transform a given node position. Useful for changing flow direction in discrete layouts 
	};

	function GridLayout(options) {
	  this.options = util.extend({}, defaults, options);
	}

	GridLayout.prototype.run = function () {
	  var params = this.options;
	  var options = params;

	  var cy = params.cy;
	  var eles = options.eles;
	  var nodes = eles.nodes().not(':parent');

	  if (options.sort) {
	    nodes = nodes.sort(options.sort);
	  }

	  var bb = math.makeBoundingBox(options.boundingBox ? options.boundingBox : {
	    x1: 0, y1: 0, w: cy.width(), h: cy.height()
	  });

	  if (bb.h === 0 || bb.w === 0) {
	    nodes.layoutPositions(this, options, function (ele) {
	      return { x: bb.x1, y: bb.y1 };
	    });
	  } else {

	    // width/height * splits^2 = cells where splits is number of times to split width
	    var cells = nodes.size();
	    var splits = Math.sqrt(cells * bb.h / bb.w);
	    var rows = Math.round(splits);
	    var cols = Math.round(bb.w / bb.h * splits);

	    var small = function small(val) {
	      if (val == null) {
	        return Math.min(rows, cols);
	      } else {
	        var min = Math.min(rows, cols);
	        if (min == rows) {
	          rows = val;
	        } else {
	          cols = val;
	        }
	      }
	    };

	    var large = function large(val) {
	      if (val == null) {
	        return Math.max(rows, cols);
	      } else {
	        var max = Math.max(rows, cols);
	        if (max == rows) {
	          rows = val;
	        } else {
	          cols = val;
	        }
	      }
	    };

	    var oRows = options.rows;
	    var oCols = options.cols != null ? options.cols : options.columns;

	    // if rows or columns were set in options, use those values
	    if (oRows != null && oCols != null) {
	      rows = oRows;
	      cols = oCols;
	    } else if (oRows != null && oCols == null) {
	      rows = oRows;
	      cols = Math.ceil(cells / rows);
	    } else if (oRows == null && oCols != null) {
	      cols = oCols;
	      rows = Math.ceil(cells / cols);
	    }

	    // otherwise use the automatic values and adjust accordingly

	    // if rounding was up, see if we can reduce rows or columns
	    else if (cols * rows > cells) {
	        var sm = small();
	        var lg = large();

	        // reducing the small side takes away the most cells, so try it first
	        if ((sm - 1) * lg >= cells) {
	          small(sm - 1);
	        } else if ((lg - 1) * sm >= cells) {
	          large(lg - 1);
	        }
	      } else {

	        // if rounding was too low, add rows or columns
	        while (cols * rows < cells) {
	          var _sm = small();
	          var _lg = large();

	          // try to add to larger side first (adds less in multiplication)
	          if ((_lg + 1) * _sm >= cells) {
	            large(_lg + 1);
	          } else {
	            small(_sm + 1);
	          }
	        }
	      }

	    var cellWidth = bb.w / cols;
	    var cellHeight = bb.h / rows;

	    if (options.condense) {
	      cellWidth = 0;
	      cellHeight = 0;
	    }

	    if (options.avoidOverlap) {
	      for (var i = 0; i < nodes.length; i++) {
	        var node = nodes[i];
	        var pos = node._private.position;

	        if (pos.x == null || pos.y == null) {
	          // for bb
	          pos.x = 0;
	          pos.y = 0;
	        }

	        var nbb = node.layoutDimensions(options);
	        var p = options.avoidOverlapPadding;

	        var w = nbb.w + p;
	        var h = nbb.h + p;

	        cellWidth = Math.max(cellWidth, w);
	        cellHeight = Math.max(cellHeight, h);
	      }
	    }

	    var cellUsed = {}; // e.g. 'c-0-2' => true

	    var used = function used(row, col) {
	      return cellUsed['c-' + row + '-' + col] ? true : false;
	    };

	    var use = function use(row, col) {
	      cellUsed['c-' + row + '-' + col] = true;
	    };

	    // to keep track of current cell position
	    var row = 0;
	    var col = 0;
	    var moveToNextCell = function moveToNextCell() {
	      col++;
	      if (col >= cols) {
	        col = 0;
	        row++;
	      }
	    };

	    // get a cache of all the manual positions
	    var id2manPos = {};
	    for (var _i = 0; _i < nodes.length; _i++) {
	      var _node = nodes[_i];
	      var rcPos = options.position(_node);

	      if (rcPos && (rcPos.row !== undefined || rcPos.col !== undefined)) {
	        // must have at least row or col def'd
	        var _pos = {
	          row: rcPos.row,
	          col: rcPos.col
	        };

	        if (_pos.col === undefined) {
	          // find unused col
	          _pos.col = 0;

	          while (used(_pos.row, _pos.col)) {
	            _pos.col++;
	          }
	        } else if (_pos.row === undefined) {
	          // find unused row
	          _pos.row = 0;

	          while (used(_pos.row, _pos.col)) {
	            _pos.row++;
	          }
	        }

	        id2manPos[_node.id()] = _pos;
	        use(_pos.row, _pos.col);
	      }
	    }

	    var getPos = function getPos(element, i) {
	      var x = void 0,
	          y = void 0;

	      if (element.locked() || element.isParent()) {
	        return false;
	      }

	      // see if we have a manual position set
	      var rcPos = id2manPos[element.id()];
	      if (rcPos) {
	        x = rcPos.col * cellWidth + cellWidth / 2 + bb.x1;
	        y = rcPos.row * cellHeight + cellHeight / 2 + bb.y1;
	      } else {
	        // otherwise set automatically

	        while (used(row, col)) {
	          moveToNextCell();
	        }

	        x = col * cellWidth + cellWidth / 2 + bb.x1;
	        y = row * cellHeight + cellHeight / 2 + bb.y1;
	        use(row, col);

	        moveToNextCell();
	      }

	      return { x: x, y: y };
	    };

	    nodes.layoutPositions(this, options, getPos);
	  }

	  return this; // chaining
	};

	module.exports = GridLayout;

	/***/ }),
	/* 102 */
	/***/ (function(module, exports, __webpack_require__) {


	var util = __webpack_require__(1);

	// default layout options
	var defaults = {
	  ready: function ready() {}, // on layoutready
	  stop: function stop() {} // on layoutstop
	};

	// constructor
	// options : object containing layout options
	function NullLayout(options) {
	  this.options = util.extend({}, defaults, options);
	}

	// runs the layout
	NullLayout.prototype.run = function () {
	  var options = this.options;
	  var eles = options.eles; // elements to consider in the layout
	  var layout = this;

	  // cy is automatically populated for us in the constructor
	  var cy = options.cy; // jshint ignore:line

	  layout.emit('layoutstart');

	  // puts all nodes at (0, 0)
	  eles.nodes().positions(function () {
	    return {
	      x: 0,
	      y: 0
	    };
	  });

	  // trigger layoutready when each node has had its position set at least once
	  layout.one('layoutready', options.ready);
	  layout.emit('layoutready');

	  // trigger layoutstop when the layout stops (e.g. finishes)
	  layout.one('layoutstop', options.stop);
	  layout.emit('layoutstop');

	  return this; // chaining
	};

	// called on continuous layouts to stop them before they finish
	NullLayout.prototype.stop = function () {
	  return this; // chaining
	};

	module.exports = NullLayout;

	/***/ }),
	/* 103 */
	/***/ (function(module, exports, __webpack_require__) {


	var util = __webpack_require__(1);
	var is = __webpack_require__(0);

	var defaults = {
	  positions: undefined, // map of (node id) => (position obj); or function(node){ return somPos; }
	  zoom: undefined, // the zoom level to set (prob want fit = false if set)
	  pan: undefined, // the pan level to set (prob want fit = false if set)
	  fit: true, // whether to fit to viewport
	  padding: 30, // padding on fit
	  animate: false, // whether to transition the node positions
	  animationDuration: 500, // duration of animation in ms if enabled
	  animationEasing: undefined, // easing of animation if enabled
	  animateFilter: function animateFilter(node, i) {
	    return true;
	  }, // a function that determines whether the node should be animated.  All nodes animated by default on animate enabled.  Non-animated nodes are positioned immediately when the layout starts
	  ready: undefined, // callback on layoutready
	  stop: undefined, // callback on layoutstop
	  transform: function transform(node, position) {
	    return position;
	  } // transform a given node position. Useful for changing flow direction in discrete layouts 
	};

	function PresetLayout(options) {
	  this.options = util.extend({}, defaults, options);
	}

	PresetLayout.prototype.run = function () {
	  var options = this.options;
	  var eles = options.eles;

	  var nodes = eles.nodes();
	  var posIsFn = is.fn(options.positions);

	  function getPosition(node) {
	    if (options.positions == null) {
	      return null;
	    }

	    if (posIsFn) {
	      return options.positions(node);
	    }

	    var pos = options.positions[node._private.data.id];

	    if (pos == null) {
	      return null;
	    }

	    return pos;
	  }

	  nodes.layoutPositions(this, options, function (node, i) {
	    var position = getPosition(node);

	    if (node.locked() || position == null) {
	      return false;
	    }

	    return position;
	  });

	  return this; // chaining
	};

	module.exports = PresetLayout;

	/***/ }),
	/* 104 */
	/***/ (function(module, exports, __webpack_require__) {


	var util = __webpack_require__(1);
	var math = __webpack_require__(2);

	var defaults = {
	  fit: true, // whether to fit to viewport
	  padding: 30, // fit padding
	  boundingBox: undefined, // constrain layout bounds; { x1, y1, x2, y2 } or { x1, y1, w, h }
	  animate: false, // whether to transition the node positions
	  animationDuration: 500, // duration of animation in ms if enabled
	  animationEasing: undefined, // easing of animation if enabled
	  animateFilter: function animateFilter(node, i) {
	    return true;
	  }, // a function that determines whether the node should be animated.  All nodes animated by default on animate enabled.  Non-animated nodes are positioned immediately when the layout starts
	  ready: undefined, // callback on layoutready
	  stop: undefined, // callback on layoutstop
	  transform: function transform(node, position) {
	    return position;
	  } // transform a given node position. Useful for changing flow direction in discrete layouts 
	};

	function RandomLayout(options) {
	  this.options = util.extend({}, defaults, options);
	}

	RandomLayout.prototype.run = function () {
	  var options = this.options;
	  var cy = options.cy;
	  var eles = options.eles;
	  var nodes = eles.nodes().not(':parent');

	  var bb = math.makeBoundingBox(options.boundingBox ? options.boundingBox : {
	    x1: 0, y1: 0, w: cy.width(), h: cy.height()
	  });

	  var getPos = function getPos(node, i) {
	    return {
	      x: bb.x1 + Math.round(Math.random() * bb.w),
	      y: bb.y1 + Math.round(Math.random() * bb.h)
	    };
	  };

	  nodes.layoutPositions(this, options, getPos);

	  return this; // chaining
	};

	module.exports = RandomLayout;

	/***/ }),
	/* 105 */
	/***/ (function(module, exports, __webpack_require__) {


	module.exports = [{ name: 'null', impl: __webpack_require__(106) }, { name: 'base', impl: __webpack_require__(107) }, { name: 'canvas', impl: __webpack_require__(123) }];

	/***/ }),
	/* 106 */
	/***/ (function(module, exports, __webpack_require__) {


	function NullRenderer(options) {
	  this.options = options;
	  this.notifications = 0; // for testing
	}

	var noop = function noop() {};

	NullRenderer.prototype = {
	  recalculateRenderedStyle: noop,
	  notify: function notify() {
	    this.notifications++;
	  },
	  init: noop
	};

	module.exports = NullRenderer;

	/***/ }),
	/* 107 */
	/***/ (function(module, exports, __webpack_require__) {


	var is = __webpack_require__(0);
	var util = __webpack_require__(1);
	var window = __webpack_require__(3);

	var BaseRenderer = function BaseRenderer(options) {
	  this.init(options);
	};
	var BR = BaseRenderer;
	var BRp = BR.prototype;

	BRp.clientFunctions = ['redrawHint', 'render', 'renderTo', 'matchCanvasSize', 'nodeShapeImpl', 'arrowShapeImpl'];

	BRp.init = function (options) {
	  var r = this;

	  r.options = options;

	  r.cy = options.cy;

	  var ctr = r.container = options.cy.container();

	  // prepend a stylesheet in the head such that
	  if (window) {
	    var document = window.document;
	    var head = document.head;
	    var stylesheetId = '__________cytoscape_stylesheet';
	    var className = '__________cytoscape_container';
	    var stylesheetAlreadyExists = document.getElementById(stylesheetId) != null;

	    if (ctr.className.indexOf(className) < 0) {
	      ctr.className = (ctr.className || '') + ' ' + className;
	    }

	    if (!stylesheetAlreadyExists) {
	      var stylesheet = document.createElement('style');

	      stylesheet.id = stylesheetId;
	      stylesheet.innerHTML = '.' + className + ' { position: relative; }';

	      head.insertBefore(stylesheet, head.children[0]); // first so lowest priority
	    }

	    var computedStyle = window.getComputedStyle(ctr);
	    var position = computedStyle.getPropertyValue('position');

	    if (position === 'static') {
	      util.error('A Cytoscape container has style position:static and so can not use UI extensions properly');
	    }
	  }

	  r.selection = [undefined, undefined, undefined, undefined, 0]; // Coordinates for selection box, plus enabled flag

	  r.bezierProjPcts = [0.05, 0.225, 0.4, 0.5, 0.6, 0.775, 0.95];

	  //--Pointer-related data
	  r.hoverData = { down: null, last: null,
	    downTime: null, triggerMode: null,
	    dragging: false,
	    initialPan: [null, null], capture: false };

	  r.dragData = { possibleDragElements: [] };

	  r.touchData = {
	    start: null, capture: false,

	    // These 3 fields related to tap, taphold events
	    startPosition: [null, null, null, null, null, null],
	    singleTouchStartTime: null,
	    singleTouchMoved: true,

	    now: [null, null, null, null, null, null],
	    earlier: [null, null, null, null, null, null]
	  };

	  r.redraws = 0;
	  r.showFps = options.showFps;
	  r.debug = options.debug;

	  r.hideEdgesOnViewport = options.hideEdgesOnViewport;
	  r.hideLabelsOnViewport = options.hideLabelsOnViewport;
	  r.textureOnViewport = options.textureOnViewport;
	  r.wheelSensitivity = options.wheelSensitivity;
	  r.motionBlurEnabled = options.motionBlur; // on by default
	  r.forcedPixelRatio = options.pixelRatio;
	  r.motionBlur = options.motionBlur; // for initial kick off
	  r.motionBlurOpacity = options.motionBlurOpacity;
	  r.motionBlurTransparency = 1 - r.motionBlurOpacity;
	  r.motionBlurPxRatio = 1;
	  r.mbPxRBlurry = 1; //0.8;
	  r.minMbLowQualFrames = 4;
	  r.fullQualityMb = false;
	  r.clearedForMotionBlur = [];
	  r.desktopTapThreshold = options.desktopTapThreshold;
	  r.desktopTapThreshold2 = options.desktopTapThreshold * options.desktopTapThreshold;
	  r.touchTapThreshold = options.touchTapThreshold;
	  r.touchTapThreshold2 = options.touchTapThreshold * options.touchTapThreshold;
	  r.tapholdDuration = 500;

	  r.bindings = [];
	  r.beforeRenderCallbacks = [];
	  r.beforeRenderPriorities = { // higher priority execs before lower one
	    animations: 400,
	    eleCalcs: 300,
	    eleTxrDeq: 200,
	    lyrTxrDeq: 100
	  };

	  r.registerNodeShapes();
	  r.registerArrowShapes();
	  r.registerCalculationListeners();
	};

	BRp.notify = function (params) {
	  var types;
	  var r = this;

	  // the renderer can't be notified after it's destroyed
	  if (this.destroyed) {
	    return;
	  }

	  if (is.array(params.type)) {
	    types = params.type;
	  } else {
	    types = [params.type];
	  }

	  var has = {};
	  for (var i = 0; i < types.length; i++) {
	    var type = types[i];

	    has[type] = true;
	  } // for

	  if (has['init']) {
	    r.load();
	    return;
	  }

	  if (has['destroy']) {
	    r.destroy();
	    return;
	  }

	  if (has['add'] || has['remove'] || has['load'] || has['zorder']) {
	    r.invalidateCachedZSortedEles();
	  }

	  if (has['viewport']) {
	    r.redrawHint('select', true);
	  }

	  if (has['load'] || has['resize']) {
	    r.invalidateContainerClientCoordsCache();
	    r.matchCanvasSize(r.container);
	  }

	  r.redrawHint('eles', true);
	  r.redrawHint('drag', true);

	  this.startRenderLoop();

	  this.redraw();
	};

	BRp.destroy = function () {
	  var r = this;

	  r.destroyed = true;

	  r.cy.stopAnimationLoop();

	  for (var i = 0; i < r.bindings.length; i++) {
	    var binding = r.bindings[i];
	    var b = binding;
	    var tgt = b.target;

	    (tgt.off || tgt.removeEventListener).apply(tgt, b.args);
	  }

	  r.bindings = [];
	  r.beforeRenderCallbacks = [];
	  r.onUpdateEleCalcsFns = [];

	  if (r.removeObserver) {
	    r.removeObserver.disconnect();
	  }

	  if (r.styleObserver) {
	    r.styleObserver.disconnect();
	  }

	  if (r.labelCalcDiv) {
	    try {
	      document.body.removeChild(r.labelCalcDiv); // eslint-disable-line no-undef
	    } catch (e) {
	      // ie10 issue #1014
	    }
	  }
	};

	[__webpack_require__(108), __webpack_require__(109), __webpack_require__(119), __webpack_require__(120), __webpack_require__(121), __webpack_require__(122)].forEach(function (props) {
	  util.extend(BRp, props);
	});

	module.exports = BR;

	/***/ }),
	/* 108 */
	/***/ (function(module, exports, __webpack_require__) {


	var math = __webpack_require__(2);
	var is = __webpack_require__(0);
	var util = __webpack_require__(1);

	var BRp = {};

	BRp.arrowShapeWidth = 0.3;

	BRp.registerArrowShapes = function () {
	  var arrowShapes = this.arrowShapes = {};
	  var renderer = this;

	  // Contract for arrow shapes:
	  // 0, 0 is arrow tip
	  // (0, 1) is direction towards node
	  // (1, 0) is right
	  //
	  // functional api:
	  // collide: check x, y in shape
	  // roughCollide: called before collide, no false negatives
	  // draw: draw
	  // spacing: dist(arrowTip, nodeBoundary)
	  // gap: dist(edgeTip, nodeBoundary), edgeTip may != arrowTip

	  var bbCollide = function bbCollide(x, y, size, angle, translation, edgeWidth, padding) {
	    var x1 = translation.x - size / 2 - padding;
	    var x2 = translation.x + size / 2 + padding;
	    var y1 = translation.y - size / 2 - padding;
	    var y2 = translation.y + size / 2 + padding;

	    var inside = x1 <= x && x <= x2 && y1 <= y && y <= y2;

	    return inside;
	  };

	  var transform = function transform(x, y, size, angle, translation) {
	    var xRotated = x * Math.cos(angle) - y * Math.sin(angle);
	    var yRotated = x * Math.sin(angle) + y * Math.cos(angle);

	    var xScaled = xRotated * size;
	    var yScaled = yRotated * size;

	    var xTranslated = xScaled + translation.x;
	    var yTranslated = yScaled + translation.y;

	    return {
	      x: xTranslated,
	      y: yTranslated
	    };
	  };

	  var transformPoints = function transformPoints(pts, size, angle, translation) {
	    var retPts = [];

	    for (var i = 0; i < pts.length; i += 2) {
	      var x = pts[i];
	      var y = pts[i + 1];

	      retPts.push(transform(x, y, size, angle, translation));
	    }

	    return retPts;
	  };

	  var pointsToArr = function pointsToArr(pts) {
	    var ret = [];

	    for (var i = 0; i < pts.length; i++) {
	      var p = pts[i];

	      ret.push(p.x, p.y);
	    }

	    return ret;
	  };

	  var standardGap = function standardGap(edge) {
	    return edge.pstyle('width').pfValue * edge.pstyle('arrow-scale').pfValue * 2;
	  };

	  var defineArrowShape = function defineArrowShape(name, defn) {
	    if (is.string(defn)) {
	      defn = arrowShapes[defn];
	    }

	    arrowShapes[name] = util.extend({
	      name: name,

	      points: [-0.15, -0.3, 0.15, -0.3, 0.15, 0.3, -0.15, 0.3],

	      collide: function collide(x, y, size, angle, translation, padding) {
	        var points = pointsToArr(transformPoints(this.points, size + 2 * padding, angle, translation));
	        var inside = math.pointInsidePolygonPoints(x, y, points);

	        return inside;
	      },

	      roughCollide: bbCollide,

	      draw: function draw(context, size, angle, translation) {
	        var points = transformPoints(this.points, size, angle, translation);

	        renderer.arrowShapeImpl('polygon')(context, points);
	      },

	      spacing: function spacing(edge) {
	        return 0;
	      },

	      gap: standardGap
	    }, defn);
	  };

	  defineArrowShape('none', {
	    collide: util.falsify,

	    roughCollide: util.falsify,

	    draw: util.noop,

	    spacing: util.zeroify,

	    gap: util.zeroify
	  });

	  defineArrowShape('triangle', {
	    points: [-0.15, -0.3, 0, 0, 0.15, -0.3]
	  });

	  defineArrowShape('arrow', 'triangle');

	  defineArrowShape('triangle-backcurve', {
	    points: arrowShapes['triangle'].points,

	    controlPoint: [0, -0.15],

	    roughCollide: bbCollide,

	    draw: function draw(context, size, angle, translation, edgeWidth) {
	      var ptsTrans = transformPoints(this.points, size, angle, translation);
	      var ctrlPt = this.controlPoint;
	      var ctrlPtTrans = transform(ctrlPt[0], ctrlPt[1], size, angle, translation);

	      renderer.arrowShapeImpl(this.name)(context, ptsTrans, ctrlPtTrans);
	    },

	    gap: function gap(edge) {
	      return standardGap(edge) * 0.8;
	    }
	  });

	  defineArrowShape('triangle-tee', {
	    points: [-0.15, -0.3, 0, 0, 0.15, -0.3, -0.15, -0.3],

	    pointsTee: [-0.15, -0.4, -0.15, -0.5, 0.15, -0.5, 0.15, -0.4],

	    collide: function collide(x, y, size, angle, translation, edgeWidth, padding) {
	      var triPts = pointsToArr(transformPoints(this.points, size + 2 * padding, angle, translation));
	      var teePts = pointsToArr(transformPoints(this.pointsTee, size + 2 * padding, angle, translation));

	      var inside = math.pointInsidePolygonPoints(x, y, triPts) || math.pointInsidePolygonPoints(x, y, teePts);

	      return inside;
	    },

	    draw: function draw(context, size, angle, translation, edgeWidth) {
	      var triPts = transformPoints(this.points, size, angle, translation);
	      var teePts = transformPoints(this.pointsTee, size, angle, translation);

	      renderer.arrowShapeImpl(this.name)(context, triPts, teePts);
	    }
	  });

	  defineArrowShape('triangle-cross', {
	    points: [-0.15, -0.3, 0, 0, 0.15, -0.3, -0.15, -0.3],

	    baseCrossLinePts: [-0.15, -0.4, // first half of the rectangle
	    -0.15, -0.4, 0.15, -0.4, // second half of the rectangle
	    0.15, -0.4],

	    crossLinePts: function crossLinePts(size, edgeWidth) {
	      // shift points so that the distance between the cross points matches edge width
	      var p = this.baseCrossLinePts.slice();
	      var shiftFactor = edgeWidth / size;
	      var y0 = 3;
	      var y1 = 5;

	      p[y0] = p[y0] - shiftFactor;
	      p[y1] = p[y1] - shiftFactor;

	      return p;
	    },

	    collide: function collide(x, y, size, angle, translation, edgeWidth, padding) {
	      var triPts = pointsToArr(transformPoints(this.points, size + 2 * padding, angle, translation));
	      var teePts = pointsToArr(transformPoints(this.crossLinePts(size, edgeWidth), size + 2 * padding, angle, translation));
	      var inside = math.pointInsidePolygonPoints(x, y, triPts) || math.pointInsidePolygonPoints(x, y, teePts);

	      return inside;
	    },

	    draw: function draw(context, size, angle, translation, edgeWidth) {
	      var triPts = transformPoints(this.points, size, angle, translation);
	      var crossLinePts = transformPoints(this.crossLinePts(size, edgeWidth), size, angle, translation);

	      renderer.arrowShapeImpl(this.name)(context, triPts, crossLinePts);
	    }
	  });

	  defineArrowShape('vee', {
	    points: [-0.15, -0.3, 0, 0, 0.15, -0.3, 0, -0.15],

	    gap: function gap(edge) {
	      return standardGap(edge) * 0.525;
	    }
	  });

	  defineArrowShape('circle', {
	    radius: 0.15,

	    collide: function collide(x, y, size, angle, translation, edgeWidth, padding) {
	      var t = translation;
	      var inside = Math.pow(t.x - x, 2) + Math.pow(t.y - y, 2) <= Math.pow((size + 2 * padding) * this.radius, 2);

	      return inside;
	    },

	    draw: function draw(context, size, angle, translation, edgeWidth) {
	      renderer.arrowShapeImpl(this.name)(context, translation.x, translation.y, this.radius * size);
	    },

	    spacing: function spacing(edge) {
	      return renderer.getArrowWidth(edge.pstyle('width').pfValue, edge.pstyle('arrow-scale').value) * this.radius;
	    }
	  });

	  defineArrowShape('tee', {
	    points: [-0.15, 0, -0.15, -0.1, 0.15, -0.1, 0.15, 0],

	    spacing: function spacing(edge) {
	      return 1;
	    },

	    gap: function gap(edge) {
	      return 1;
	    }
	  });

	  defineArrowShape('square', {
	    points: [-0.15, 0.00, 0.15, 0.00, 0.15, -0.3, -0.15, -0.3]
	  });

	  defineArrowShape('diamond', {
	    points: [-0.15, -0.15, 0, -0.3, 0.15, -0.15, 0, 0],

	    gap: function gap(edge) {
	      return edge.pstyle('width').pfValue * edge.pstyle('arrow-scale').value;
	    }
	  });
	};

	module.exports = BRp;

	/***/ }),
	/* 109 */
	/***/ (function(module, exports, __webpack_require__) {


	var util = __webpack_require__(1);

	var BRp = {};

	[__webpack_require__(110), __webpack_require__(111), __webpack_require__(112), __webpack_require__(113), __webpack_require__(114), __webpack_require__(115), __webpack_require__(116), __webpack_require__(117), __webpack_require__(118)].forEach(function (props) {
	  util.extend(BRp, props);
	});

	module.exports = BRp;

	/***/ }),
	/* 110 */
	/***/ (function(module, exports, __webpack_require__) {


	var window = __webpack_require__(3);
	var math = __webpack_require__(2);
	var util = __webpack_require__(1);
	var window = __webpack_require__(3);

	var BRp = {};

	// Project mouse
	BRp.projectIntoViewport = function (clientX, clientY) {
	  var cy = this.cy;
	  var offsets = this.findContainerClientCoords();
	  var offsetLeft = offsets[0];
	  var offsetTop = offsets[1];
	  var scale = offsets[4];
	  var pan = cy.pan();
	  var zoom = cy.zoom();

	  var x = ((clientX - offsetLeft) / scale - pan.x) / zoom;
	  var y = ((clientY - offsetTop) / scale - pan.y) / zoom;

	  return [x, y];
	};

	BRp.findContainerClientCoords = function () {
	  if (this.containerBB) {
	    return this.containerBB;
	  }

	  var container = this.container;
	  var rect = container.getBoundingClientRect();
	  var style = window.getComputedStyle(container);
	  var styleValue = function styleValue(name) {
	    return parseFloat(style.getPropertyValue(name));
	  };

	  var padding = {
	    left: styleValue('padding-left'),
	    right: styleValue('padding-right'),
	    top: styleValue('padding-top'),
	    bottom: styleValue('padding-bottom')
	  };

	  var border = {
	    left: styleValue('border-left-width'),
	    right: styleValue('border-right-width'),
	    top: styleValue('border-top-width'),
	    bottom: styleValue('border-bottom-width')
	  };

	  var clientWidth = container.clientWidth;
	  var clientHeight = container.clientHeight;

	  var paddingHor = padding.left + padding.right;
	  var paddingVer = padding.top + padding.bottom;

	  var borderHor = border.left + border.right;
	  var borderVer = border.top + border.bottom;

	  var scale = rect.width / (clientWidth + borderHor);

	  var unscaledW = clientWidth - paddingHor;
	  var unscaledH = clientHeight - paddingVer;

	  var scaledW = rect.width - (paddingHor + borderHor) * scale;
	  var scaledH = rect.height - (paddingVer + borderVer) * scale;

	  var left = rect.left + padding.left + border.left;
	  var top = rect.top + padding.top + border.top;

	  return this.containerBB = [left, top, unscaledW, unscaledH, scale];
	};

	BRp.invalidateContainerClientCoordsCache = function () {
	  this.containerBB = null;
	};

	BRp.findNearestElement = function (x, y, interactiveElementsOnly, isTouch) {
	  return this.findNearestElements(x, y, interactiveElementsOnly, isTouch)[0];
	};

	BRp.findNearestElements = function (x, y, interactiveElementsOnly, isTouch) {
	  var self = this;
	  var r = this;
	  var eles = r.getCachedZSortedEles();
	  var near = []; // 1 node max, 1 edge max
	  var zoom = r.cy.zoom();
	  var hasCompounds = r.cy.hasCompoundNodes();
	  var edgeThreshold = (isTouch ? 24 : 8) / zoom;
	  var nodeThreshold = (isTouch ? 8 : 2) / zoom;
	  var labelThreshold = (isTouch ? 8 : 2) / zoom;
	  var minSqDist = Infinity;
	  var nearEdge;
	  var nearNode;

	  if (interactiveElementsOnly) {
	    eles = eles.interactive;
	  }

	  function addEle(ele, sqDist) {
	    if (ele.isNode()) {
	      if (nearNode) {
	        return; // can't replace node
	      } else {
	        nearNode = ele;
	        near.push(ele);
	      }
	    }

	    if (ele.isEdge() && (sqDist == null || sqDist < minSqDist)) {
	      if (nearEdge) {
	        // then replace existing edge
	        // can replace only if same z-index
	        if (nearEdge.pstyle('z-compound-depth').value === ele.pstyle('z-compound-depth').value && nearEdge.pstyle('z-compound-depth').value === ele.pstyle('z-compound-depth').value) {
	          for (var i = 0; i < near.length; i++) {
	            if (near[i].isEdge()) {
	              near[i] = ele;
	              nearEdge = ele;
	              minSqDist = sqDist != null ? sqDist : minSqDist;
	              break;
	            }
	          }
	        }
	      } else {
	        near.push(ele);
	        nearEdge = ele;
	        minSqDist = sqDist != null ? sqDist : minSqDist;
	      }
	    }
	  }

	  function checkNode(node) {
	    var width = node.outerWidth() + 2 * nodeThreshold;
	    var height = node.outerHeight() + 2 * nodeThreshold;
	    var hw = width / 2;
	    var hh = height / 2;
	    var pos = node.position();

	    if (pos.x - hw <= x && x <= pos.x + hw // bb check x
	    && pos.y - hh <= y && y <= pos.y + hh // bb check y
	    ) {
	        var shape = r.nodeShapes[self.getNodeShape(node)];

	        if (shape.checkPoint(x, y, 0, width, height, pos.x, pos.y)) {
	          addEle(node, 0);
	          return true;
	        }
	      }
	  }

	  function checkEdge(edge) {
	    var _p = edge._private;

	    var rs = _p.rscratch;
	    var styleWidth = edge.pstyle('width').pfValue;
	    var scale = edge.pstyle('arrow-scale').value;
	    var width = styleWidth / 2 + edgeThreshold; // more like a distance radius from centre
	    var widthSq = width * width;
	    var width2 = width * 2;
	    var src = _p.source;
	    var tgt = _p.target;
	    var inEdgeBB = false;
	    var sqDist;

	    if (rs.edgeType === 'segments' || rs.edgeType === 'straight' || rs.edgeType === 'haystack') {
	      var pts = rs.allpts;

	      for (var i = 0; i + 3 < pts.length; i += 2) {
	        if ((inEdgeBB = math.inLineVicinity(x, y, pts[i], pts[i + 1], pts[i + 2], pts[i + 3], width2)) && widthSq > (sqDist = math.sqdistToFiniteLine(x, y, pts[i], pts[i + 1], pts[i + 2], pts[i + 3]))) {
	          addEle(edge, sqDist);
	          return true;
	        }
	      }
	    } else if (rs.edgeType === 'bezier' || rs.edgeType === 'multibezier' || rs.edgeType === 'self' || rs.edgeType === 'compound') {
	      var pts = rs.allpts;
	      for (var i = 0; i + 5 < rs.allpts.length; i += 4) {
	        if ((inEdgeBB = math.inBezierVicinity(x, y, pts[i], pts[i + 1], pts[i + 2], pts[i + 3], pts[i + 4], pts[i + 5], width2)) && widthSq > (sqDist = math.sqdistToQuadraticBezier(x, y, pts[i], pts[i + 1], pts[i + 2], pts[i + 3], pts[i + 4], pts[i + 5]))) {
	          addEle(edge, sqDist);
	          return true;
	        }
	      }
	    }

	    // if we're close to the edge but didn't hit it, maybe we hit its arrows

	    var src = src || _p.source;
	    var tgt = tgt || _p.target;

	    var arSize = self.getArrowWidth(styleWidth, scale);

	    var arrows = [{ name: 'source', x: rs.arrowStartX, y: rs.arrowStartY, angle: rs.srcArrowAngle }, { name: 'target', x: rs.arrowEndX, y: rs.arrowEndY, angle: rs.tgtArrowAngle }, { name: 'mid-source', x: rs.midX, y: rs.midY, angle: rs.midsrcArrowAngle }, { name: 'mid-target', x: rs.midX, y: rs.midY, angle: rs.midtgtArrowAngle }];

	    for (var i = 0; i < arrows.length; i++) {
	      var ar = arrows[i];
	      var shape = r.arrowShapes[edge.pstyle(ar.name + '-arrow-shape').value];
	      var edgeWidth = edge.pstyle('width').pfValue;
	      if (shape.roughCollide(x, y, arSize, ar.angle, { x: ar.x, y: ar.y }, edgeWidth, edgeThreshold) && shape.collide(x, y, arSize, ar.angle, { x: ar.x, y: ar.y }, edgeWidth, edgeThreshold)) {
	        addEle(edge);
	        return true;
	      }
	    }

	    // for compound graphs, hitting edge may actually want a connected node instead (b/c edge may have greater z-index precedence)
	    if (hasCompounds && near.length > 0) {
	      checkNode(src);
	      checkNode(tgt);
	    }
	  }

	  function preprop(obj, name, pre) {
	    return util.getPrefixedProperty(obj, name, pre);
	  }

	  function checkLabel(ele, prefix) {
	    var _p = ele._private;
	    var th = labelThreshold;

	    var prefixDash;
	    if (prefix) {
	      prefixDash = prefix + '-';
	    } else {
	      prefixDash = '';
	    }

	    var text = ele.pstyle(prefixDash + 'label').value;
	    var eventsEnabled = ele.pstyle('text-events').strValue === 'yes';

	    if (!eventsEnabled || !text) {
	      return;
	    }

	    var rstyle = _p.rstyle;
	    var bw = ele.pstyle('text-border-width').pfValue;
	    var pw = ele.pstyle('text-background-padding').pfValue;
	    var lw = preprop(rstyle, 'labelWidth', prefix) + bw + 2 * th + 2 * pw;
	    var lh = preprop(rstyle, 'labelHeight', prefix) + bw + 2 * th + 2 * pw;
	    var lx = preprop(rstyle, 'labelX', prefix);
	    var ly = preprop(rstyle, 'labelY', prefix);

	    var theta = preprop(_p.rscratch, 'labelAngle', prefix);

	    var lx1 = lx - lw / 2;
	    var lx2 = lx + lw / 2;
	    var ly1 = ly - lh / 2;
	    var ly2 = ly + lh / 2;

	    if (theta) {
	      var cos = Math.cos(theta);
	      var sin = Math.sin(theta);

	      var rotate = function rotate(x, y) {
	        x = x - lx;
	        y = y - ly;

	        return {
	          x: x * cos - y * sin + lx,
	          y: x * sin + y * cos + ly
	        };
	      };

	      var px1y1 = rotate(lx1, ly1);
	      var px1y2 = rotate(lx1, ly2);
	      var px2y1 = rotate(lx2, ly1);
	      var px2y2 = rotate(lx2, ly2);

	      var points = [px1y1.x, px1y1.y, px2y1.x, px2y1.y, px2y2.x, px2y2.y, px1y2.x, px1y2.y];

	      if (math.pointInsidePolygonPoints(x, y, points)) {
	        addEle(ele);
	        return true;
	      }
	    } else {
	      // do a cheaper bb check
	      var bb = {
	        w: lw,
	        h: lh,
	        x1: lx1,
	        x2: lx2,
	        y1: ly1,
	        y2: ly2
	      };

	      if (math.inBoundingBox(bb, x, y)) {
	        addEle(ele);
	        return true;
	      }
	    }
	  }

	  for (var i = eles.length - 1; i >= 0; i--) {
	    // reverse order for precedence
	    var ele = eles[i];

	    if (ele.isNode()) {
	      checkNode(ele) || checkLabel(ele);
	    } else {
	      // then edge
	      checkEdge(ele) || checkLabel(ele) || checkLabel(ele, 'source') || checkLabel(ele, 'target');
	    }
	  }

	  return near;
	};

	// 'Give me everything from this box'
	BRp.getAllInBox = function (x1, y1, x2, y2) {
	  var eles = this.getCachedZSortedEles().interactive;
	  var box = [];

	  var x1c = Math.min(x1, x2);
	  var x2c = Math.max(x1, x2);
	  var y1c = Math.min(y1, y2);
	  var y2c = Math.max(y1, y2);

	  x1 = x1c;
	  x2 = x2c;
	  y1 = y1c;
	  y2 = y2c;

	  var boxBb = math.makeBoundingBox({
	    x1: x1, y1: y1,
	    x2: x2, y2: y2
	  });

	  for (var e = 0; e < eles.length; e++) {
	    var ele = eles[e];

	    if (ele.isNode()) {
	      var node = ele;
	      var nodeBb = node.boundingBox({
	        includeNodes: true,
	        includeEdges: false,
	        includeLabels: false
	      });

	      if (math.boundingBoxesIntersect(boxBb, nodeBb) && !math.boundingBoxInBoundingBox(nodeBb, boxBb)) {
	        box.push(node);
	      }
	    } else {
	      var edge = ele;
	      var _p = edge._private;
	      var rs = _p.rscratch;

	      if (rs.startX != null && rs.startY != null && !math.inBoundingBox(boxBb, rs.startX, rs.startY)) {
	        continue;
	      }
	      if (rs.endX != null && rs.endY != null && !math.inBoundingBox(boxBb, rs.endX, rs.endY)) {
	        continue;
	      }

	      if (rs.edgeType === 'bezier' || rs.edgeType === 'multibezier' || rs.edgeType === 'self' || rs.edgeType === 'compound' || rs.edgeType === 'segments' || rs.edgeType === 'haystack') {

	        var pts = _p.rstyle.bezierPts || _p.rstyle.linePts || _p.rstyle.haystackPts;
	        var allInside = true;

	        for (var i = 0; i < pts.length; i++) {
	          if (!math.pointInBoundingBox(boxBb, pts[i])) {
	            allInside = false;
	            break;
	          }
	        }

	        if (allInside) {
	          box.push(edge);
	        }
	      } else if (rs.edgeType === 'haystack' || rs.edgeType === 'straight') {
	        box.push(edge);
	      }
	    }
	  }

	  return box;
	};

	module.exports = BRp;

	/***/ }),
	/* 111 */
	/***/ (function(module, exports, __webpack_require__) {


	var math = __webpack_require__(2);

	var BRp = {};

	BRp.calculateArrowAngles = function (edge) {
	  var rs = edge._private.rscratch;
	  var isHaystack = rs.edgeType === 'haystack';
	  var isBezier = rs.edgeType === 'bezier';
	  var isMultibezier = rs.edgeType === 'multibezier';
	  var isSegments = rs.edgeType === 'segments';
	  var isCompound = rs.edgeType === 'compound';
	  var isSelf = rs.edgeType === 'self';

	  // Displacement gives direction for arrowhead orientation
	  var dispX, dispY;
	  var startX, startY, endX, endY, midX, midY;

	  if (isHaystack) {
	    startX = rs.haystackPts[0];
	    startY = rs.haystackPts[1];
	    endX = rs.haystackPts[2];
	    endY = rs.haystackPts[3];
	  } else {
	    startX = rs.arrowStartX;
	    startY = rs.arrowStartY;
	    endX = rs.arrowEndX;
	    endY = rs.arrowEndY;
	  }

	  midX = rs.midX;
	  midY = rs.midY;

	  // source
	  //

	  if (isSegments) {
	    dispX = startX - rs.segpts[0];
	    dispY = startY - rs.segpts[1];
	  } else if (isMultibezier || isCompound || isSelf || isBezier) {
	    var pts = rs.allpts;
	    var bX = math.qbezierAt(pts[0], pts[2], pts[4], 0.1);
	    var bY = math.qbezierAt(pts[1], pts[3], pts[5], 0.1);

	    dispX = startX - bX;
	    dispY = startY - bY;
	  } else {
	    dispX = startX - midX;
	    dispY = startY - midY;
	  }

	  rs.srcArrowAngle = math.getAngleFromDisp(dispX, dispY);

	  // mid target
	  //

	  var midX = rs.midX;
	  var midY = rs.midY;

	  if (isHaystack) {
	    midX = (startX + endX) / 2;
	    midY = (startY + endY) / 2;
	  }

	  dispX = endX - startX;
	  dispY = endY - startY;

	  if (isSegments) {
	    var pts = rs.allpts;

	    if (pts.length / 2 % 2 === 0) {
	      var i2 = pts.length / 2;
	      var i1 = i2 - 2;

	      dispX = pts[i2] - pts[i1];
	      dispY = pts[i2 + 1] - pts[i1 + 1];
	    } else {
	      var i2 = pts.length / 2 - 1;
	      var i1 = i2 - 2;
	      var i3 = i2 + 2;

	      dispX = pts[i2] - pts[i1];
	      dispY = pts[i2 + 1] - pts[i1 + 1];
	    }
	  } else if (isMultibezier || isCompound || isSelf) {
	    var pts = rs.allpts;
	    var cpts = rs.ctrlpts;
	    var bp0x, bp0y;
	    var bp1x, bp1y;

	    if (cpts.length / 2 % 2 === 0) {
	      var p0 = pts.length / 2 - 1; // startpt
	      var ic = p0 + 2;
	      var p1 = ic + 2;

	      bp0x = math.qbezierAt(pts[p0], pts[ic], pts[p1], 0.0);
	      bp0y = math.qbezierAt(pts[p0 + 1], pts[ic + 1], pts[p1 + 1], 0.0);

	      bp1x = math.qbezierAt(pts[p0], pts[ic], pts[p1], 0.0001);
	      bp1y = math.qbezierAt(pts[p0 + 1], pts[ic + 1], pts[p1 + 1], 0.0001);
	    } else {
	      var ic = pts.length / 2 - 1; // ctrpt
	      var p0 = ic - 2; // startpt
	      var p1 = ic + 2; // endpt

	      bp0x = math.qbezierAt(pts[p0], pts[ic], pts[p1], 0.4999);
	      bp0y = math.qbezierAt(pts[p0 + 1], pts[ic + 1], pts[p1 + 1], 0.4999);

	      bp1x = math.qbezierAt(pts[p0], pts[ic], pts[p1], 0.5);
	      bp1y = math.qbezierAt(pts[p0 + 1], pts[ic + 1], pts[p1 + 1], 0.5);
	    }

	    dispX = bp1x - bp0x;
	    dispY = bp1y - bp0y;
	  }

	  rs.midtgtArrowAngle = math.getAngleFromDisp(dispX, dispY);

	  rs.midDispX = dispX;
	  rs.midDispY = dispY;

	  // mid source
	  //

	  dispX *= -1;
	  dispY *= -1;

	  if (isSegments) {
	    var pts = rs.allpts;

	    if (pts.length / 2 % 2 === 0) ; else {
	      var i2 = pts.length / 2 - 1;
	      var i3 = i2 + 2;

	      dispX = -(pts[i3] - pts[i2]);
	      dispY = -(pts[i3 + 1] - pts[i2 + 1]);
	    }
	  }

	  rs.midsrcArrowAngle = math.getAngleFromDisp(dispX, dispY);

	  // target
	  //

	  if (isSegments) {
	    dispX = endX - rs.segpts[rs.segpts.length - 2];
	    dispY = endY - rs.segpts[rs.segpts.length - 1];
	  } else if (isMultibezier || isCompound || isSelf || isBezier) {
	    var pts = rs.allpts;
	    var l = pts.length;
	    var bX = math.qbezierAt(pts[l - 6], pts[l - 4], pts[l - 2], 0.9);
	    var bY = math.qbezierAt(pts[l - 5], pts[l - 3], pts[l - 1], 0.9);

	    dispX = endX - bX;
	    dispY = endY - bY;
	  } else {
	    dispX = endX - midX;
	    dispY = endY - midY;
	  }

	  rs.tgtArrowAngle = math.getAngleFromDisp(dispX, dispY);
	};

	BRp.getArrowWidth = BRp.getArrowHeight = function (edgeWidth, scale) {
	  var cache = this.arrowWidthCache = this.arrowWidthCache || {};

	  var cachedVal = cache[edgeWidth + ', ' + scale];
	  if (cachedVal) {
	    return cachedVal;
	  }

	  cachedVal = Math.max(Math.pow(edgeWidth * 13.37, 0.9), 29) * scale;
	  cache[edgeWidth + ', ' + scale] = cachedVal;

	  return cachedVal;
	};

	module.exports = BRp;

	/***/ }),
	/* 112 */
	/***/ (function(module, exports, __webpack_require__) {


	var math = __webpack_require__(2);
	var is = __webpack_require__(0);

	var BRp = {};

	BRp.findEdgeControlPoints = function (edges) {
	  if (!edges || edges.length === 0) {
	    return;
	  }

	  var r = this;
	  var cy = r.cy;
	  var hasCompounds = cy.hasCompoundNodes();
	  var hashTable = {};
	  var pairIds = [];
	  var haystackEdges = [];

	  // create a table of edge (src, tgt) => list of edges between them
	  var pairId;
	  for (var i = 0; i < edges.length; i++) {
	    var edge = edges[i];
	    var _p = edge._private;
	    var data = _p.data;
	    var curveStyle = edge.pstyle('curve-style').value;
	    var edgeIsUnbundled = curveStyle === 'unbundled-bezier' || curveStyle === 'segments';
	    var edgeIsBezier = curveStyle === 'unbundled-bezier' || curveStyle === 'bezier';

	    // ignore edges who are not to be displayed
	    // they shouldn't take up space
	    if (edge.pstyle('display').value === 'none') {
	      continue;
	    }

	    if (curveStyle === 'haystack') {
	      haystackEdges.push(edge);
	      continue;
	    }

	    var srcId = data.source;
	    var tgtId = data.target;

	    pairId = srcId > tgtId ? tgtId + '$-$' + srcId : srcId + '$-$' + tgtId;

	    if (edgeIsUnbundled) {
	      pairId = 'unbundled' + '$-$' + data.id;
	    }

	    var tableEntry = hashTable[pairId];

	    if (tableEntry == null) {
	      tableEntry = hashTable[pairId] = [];
	      pairIds.push(pairId);
	    }

	    tableEntry.push(edge);

	    if (edgeIsUnbundled) {
	      tableEntry.hasUnbundled = true;
	    }

	    if (edgeIsBezier) {
	      tableEntry.hasBezier = true;
	    }
	  }

	  var src, tgt, srcPos, tgtPos, srcW, srcH, tgtW, tgtH, srcShape, tgtShape;
	  var vectorNormInverse;
	  var badBezier;

	  // for each pair (src, tgt), create the ctrl pts
	  // Nested for loop is OK; total number of iterations for both loops = edgeCount
	  for (var p = 0; p < pairIds.length; p++) {
	    pairId = pairIds[p];
	    var pairEdges = hashTable[pairId];

	    // for each pair id, the edges should be sorted by index
	    pairEdges.sort(function (edge1, edge2) {
	      return edge1.poolIndex() - edge2.poolIndex();
	    });

	    src = pairEdges[0]._private.source;
	    tgt = pairEdges[0]._private.target;

	    // make sure src/tgt distinction is consistent for bundled edges
	    if (!pairEdges.hasUnbundled && src.id() > tgt.id()) {
	      var temp = src;
	      src = tgt;
	      tgt = temp;
	    }

	    srcPos = src.position();
	    tgtPos = tgt.position();

	    srcW = src.outerWidth();
	    srcH = src.outerHeight();

	    tgtW = tgt.outerWidth();
	    tgtH = tgt.outerHeight();

	    srcShape = r.nodeShapes[this.getNodeShape(src)];
	    tgtShape = r.nodeShapes[this.getNodeShape(tgt)];

	    badBezier = false;

	    var edge;
	    var edge_p;
	    var rs;

	    var dirCounts = {
	      'north': 0,
	      'west': 0,
	      'south': 0,
	      'east': 0,
	      'northwest': 0,
	      'southwest': 0,
	      'northeast': 0,
	      'southeast': 0
	    };

	    var srcX2 = srcPos.x;
	    var srcY2 = srcPos.y;
	    var srcW2 = srcW;
	    var srcH2 = srcH;

	    var tgtX2 = tgtPos.x;
	    var tgtY2 = tgtPos.y;
	    var tgtW2 = tgtW;
	    var tgtH2 = tgtH;

	    var numEdges2 = pairEdges.length;

	    for (var i = 0; i < pairEdges.length; i++) {
	      edge = pairEdges[i];
	      edge_p = edge._private;
	      rs = edge_p.rscratch;

	      var edgeIndex1 = rs.lastEdgeIndex;
	      var edgeIndex2 = i;

	      var numEdges1 = rs.lastNumEdges;

	      var curveStyle = edge.pstyle('curve-style').value;

	      var edgeIsUnbundled = curveStyle === 'unbundled-bezier' || curveStyle === 'segments';

	      // whether the normalised pair order is the reverse of the edge's src-tgt order
	      var edgeIsSwapped = src.id() !== edge.source().id();

	      var ctrlptDists = edge.pstyle('control-point-distances');
	      var loopDir = edge.pstyle('loop-direction').pfValue;
	      var loopSwp = edge.pstyle('loop-sweep').pfValue;
	      var ctrlptWs = edge.pstyle('control-point-weights');
	      var bezierN = ctrlptDists && ctrlptWs ? Math.min(ctrlptDists.value.length, ctrlptWs.value.length) : 1;
	      var stepSize = edge.pstyle('control-point-step-size').pfValue;
	      var ctrlptDist = ctrlptDists ? ctrlptDists.pfValue[0] : undefined;
	      var ctrlptWeight = ctrlptWs.value[0];
	      var edgeDistances = edge.pstyle('edge-distances').value;
	      var srcDistFNode = edge.pstyle('source-distance-from-node').pfValue;
	      var tgtDistFNode = edge.pstyle('target-distance-from-node').pfValue;
	      var segmentWs = edge.pstyle('segment-weights');
	      var segmentDs = edge.pstyle('segment-distances');
	      var segmentsN = Math.min(segmentWs.pfValue.length, segmentDs.pfValue.length);
	      var srcEndpt = edge.pstyle('source-endpoint').value;
	      var tgtEndpt = edge.pstyle('target-endpoint').value;
	      var srcArrShape = edge.pstyle('source-arrow-shape').value;
	      var tgtArrShape = edge.pstyle('target-arrow-shape').value;
	      var arrowScale = edge.pstyle('arrow-scale').value;
	      var lineWidth = edge.pstyle('width').pfValue;

	      var srcX1 = rs.lastSrcCtlPtX;
	      var srcY1 = rs.lastSrcCtlPtY;
	      var srcW1 = rs.lastSrcCtlPtW;
	      var srcH1 = rs.lastSrcCtlPtH;

	      var tgtX1 = rs.lastTgtCtlPtX;
	      var tgtY1 = rs.lastTgtCtlPtY;
	      var tgtW1 = rs.lastTgtCtlPtW;
	      var tgtH1 = rs.lastTgtCtlPtH;

	      var curveStyle1 = rs.lastCurveStyle;
	      var curveStyle2 = curveStyle;

	      var ctrlptDists1 = rs.lastCtrlptDists;
	      var ctrlptDists2 = ctrlptDists ? ctrlptDists.strValue : null;

	      var ctrlptWs1 = rs.lastCtrlptWs;
	      var ctrlptWs2 = ctrlptWs.strValue;

	      var segmentWs1 = rs.lastSegmentWs;
	      var segmentWs2 = segmentWs.strValue;

	      var segmentDs1 = rs.lastSegmentDs;
	      var segmentDs2 = segmentDs.strValue;

	      var stepSize1 = rs.lastStepSize;
	      var stepSize2 = stepSize;

	      var loopDir1 = rs.lastLoopDir;
	      var loopDir2 = loopDir;

	      var loopSwp1 = rs.lastLoopSwp;
	      var loopSwp2 = loopSwp;

	      var edgeDistances1 = rs.lastEdgeDistances;
	      var edgeDistances2 = edgeDistances;

	      var srcDistFNode1 = rs.lastSrcDistFNode;
	      var srcDistFNode2 = srcDistFNode;

	      var tgtDistFNode1 = rs.lastTgtDistFNode;
	      var tgtDistFNode2 = tgtDistFNode;

	      var srcEndpt1 = rs.lastSrcEndpt;
	      var srcEndpt2 = srcEndpt;

	      var tgtEndpt1 = rs.lastTgtEndpt;
	      var tgtEndpt2 = tgtEndpt;

	      var srcArr1 = rs.lastSrcArr;
	      var srcArr2 = srcArrShape;

	      var tgtArr1 = rs.lastTgtArr;
	      var tgtArr2 = tgtArrShape;

	      var lineW1 = rs.lastLineW;
	      var lineW2 = lineWidth;

	      var arrScl1 = rs.lastArrScl;
	      var arrScl2 = arrowScale;

	      if (badBezier) {
	        rs.badBezier = true;
	      } else {
	        rs.badBezier = false;
	      }

	      var ptCacheHit;

	      if (srcX1 === srcX2 && srcY1 === srcY2 && srcW1 === srcW2 && srcH1 === srcH2 && tgtX1 === tgtX2 && tgtY1 === tgtY2 && tgtW1 === tgtW2 && tgtH1 === tgtH2 && curveStyle1 === curveStyle2 && ctrlptDists1 === ctrlptDists2 && ctrlptWs1 === ctrlptWs2 && segmentWs1 === segmentWs2 && segmentDs1 === segmentDs2 && stepSize1 === stepSize2 && loopDir1 === loopDir2 && loopSwp1 === loopSwp2 && edgeDistances1 === edgeDistances2 && srcDistFNode1 === srcDistFNode2 && tgtDistFNode1 === tgtDistFNode2 && srcEndpt1 === srcEndpt2 && tgtEndpt1 === tgtEndpt2 && srcArr1 === srcArr2 && tgtArr1 === tgtArr2 && lineW1 === lineW2 && arrScl1 === arrScl2 && (edgeIndex1 === edgeIndex2 && numEdges1 === numEdges2 || edgeIsUnbundled)) {
	        ptCacheHit = true; // then the control points haven't changed and we can skip calculating them
	      } else {
	        ptCacheHit = false;

	        rs.lastSrcCtlPtX = srcX2;
	        rs.lastSrcCtlPtY = srcY2;
	        rs.lastSrcCtlPtW = srcW2;
	        rs.lastSrcCtlPtH = srcH2;
	        rs.lastTgtCtlPtX = tgtX2;
	        rs.lastTgtCtlPtY = tgtY2;
	        rs.lastTgtCtlPtW = tgtW2;
	        rs.lastTgtCtlPtH = tgtH2;
	        rs.lastEdgeIndex = edgeIndex2;
	        rs.lastNumEdges = numEdges2;
	        rs.lastCurveStyle = curveStyle2;
	        rs.lastCtrlptDists = ctrlptDists2;
	        rs.lastCtrlptWs = ctrlptWs2;
	        rs.lastSegmentDs = segmentDs2;
	        rs.lastSegmentWs = segmentWs2;
	        rs.lastStepSize = stepSize2;
	        rs.lastLoopDir = loopDir2;
	        rs.lastLoopSwp = loopSwp2;
	        rs.lastEdgeDistances = edgeDistances2;
	        rs.lastSrcDistFNode = srcDistFNode2;
	        rs.lastTgtDistFNode = tgtDistFNode2;
	        rs.lastSrcEndpt = srcEndpt2;
	        rs.lastTgtEndpt = tgtEndpt2;
	        rs.lastSrcArr = srcArr2;
	        rs.lastTgtArr = tgtArr2;
	        rs.lastLineW = lineW2;
	        rs.lastArrScl = arrScl2;
	      }

	      if (!ptCacheHit) {

	        if (!pairEdges.calculatedIntersection && src !== tgt && (pairEdges.hasBezier || pairEdges.hasUnbundled)) {

	          pairEdges.calculatedIntersection = true;

	          // pt outside src shape to calc distance/displacement from src to tgt
	          var srcOutside = srcShape.intersectLine(srcPos.x, srcPos.y, srcW, srcH, tgtPos.x, tgtPos.y, 0);

	          pairEdges.srcIntn = srcOutside;

	          // pt outside tgt shape to calc distance/displacement from src to tgt
	          var tgtOutside = tgtShape.intersectLine(tgtPos.x, tgtPos.y, tgtW, tgtH, srcPos.x, srcPos.y, 0);

	          pairEdges.tgtIntn = tgtOutside;

	          var midptSrcPts = {
	            x1: srcOutside[0],
	            x2: tgtOutside[0],
	            y1: srcOutside[1],
	            y2: tgtOutside[1]
	          };

	          var posPts = {
	            x1: srcPos.x,
	            x2: tgtPos.x,
	            y1: srcPos.y,
	            y2: tgtPos.y
	          };

	          var dy = tgtOutside[1] - srcOutside[1];
	          var dx = tgtOutside[0] - srcOutside[0];
	          var l = Math.sqrt(dx * dx + dy * dy);

	          var vector = {
	            x: dx,
	            y: dy
	          };

	          var vectorNorm = {
	            x: vector.x / l,
	            y: vector.y / l
	          };
	          vectorNormInverse = {
	            x: -vectorNorm.y,
	            y: vectorNorm.x
	          };

	          // if node shapes overlap, then no ctrl pts to draw
	          if (tgtShape.checkPoint(srcOutside[0], srcOutside[1], 0, tgtW, tgtH, tgtPos.x, tgtPos.y) && srcShape.checkPoint(tgtOutside[0], tgtOutside[1], 0, srcW, srcH, srcPos.x, srcPos.y)) {
	            vectorNormInverse = {};
	            badBezier = true;
	          }
	        }

	        if (!edgeIsSwapped) {
	          rs.srcIntn = pairEdges.srcIntn;
	          rs.tgtIntn = pairEdges.tgtIntn;
	        } else {
	          // ensure that the per-edge cached value for intersections are correct for swapped bundled edges
	          rs.srcIntn = pairEdges.tgtIntn;
	          rs.tgtIntn = pairEdges.srcIntn;
	        }

	        if (src === tgt) {
	          // Self-edge

	          rs.edgeType = 'self';

	          var j = i;
	          var loopDist = stepSize;

	          if (edgeIsUnbundled) {
	            j = 0;
	            loopDist = ctrlptDist;
	          }

	          var loopAngle = loopDir - Math.PI / 2;
	          var outAngle = loopAngle - loopSwp / 2;
	          var inAngle = loopAngle + loopSwp / 2;

	          // increase by step size for overlapping loops, keyed on direction and sweep values
	          var dc = String(loopDir + '_' + loopSwp);
	          j = dirCounts[dc] === undefined ? dirCounts[dc] = 0 : ++dirCounts[dc];

	          rs.ctrlpts = [srcPos.x + Math.cos(outAngle) * 1.4 * loopDist * (j / 3 + 1), srcPos.y + Math.sin(outAngle) * 1.4 * loopDist * (j / 3 + 1), srcPos.x + Math.cos(inAngle) * 1.4 * loopDist * (j / 3 + 1), srcPos.y + Math.sin(inAngle) * 1.4 * loopDist * (j / 3 + 1)];
	        } else if (hasCompounds && (src.isParent() || src.isChild() || tgt.isParent() || tgt.isChild()) && (src.parents().anySame(tgt) || tgt.parents().anySame(src))) {
	          // Compound edge

	          rs.edgeType = 'compound';

	          // because the line approximation doesn't apply for compound beziers
	          // (loop/self edges are already elided b/c of cheap src==tgt check)
	          rs.badBezier = false;

	          var j = i;
	          var loopDist = stepSize;

	          if (edgeIsUnbundled) {
	            j = 0;
	            loopDist = ctrlptDist;
	          }

	          var loopW = 50;

	          var loopaPos = {
	            x: srcPos.x - srcW / 2,
	            y: srcPos.y - srcH / 2
	          };

	          var loopbPos = {
	            x: tgtPos.x - tgtW / 2,
	            y: tgtPos.y - tgtH / 2
	          };

	          var loopPos = {
	            x: Math.min(loopaPos.x, loopbPos.x),
	            y: Math.min(loopaPos.y, loopbPos.y)
	          };

	          // avoids cases with impossible beziers
	          var minCompoundStretch = 0.5;
	          var compoundStretchA = Math.max(minCompoundStretch, Math.log(srcW * 0.01));
	          var compoundStretchB = Math.max(minCompoundStretch, Math.log(tgtW * 0.01));

	          rs.ctrlpts = [loopPos.x, loopPos.y - (1 + Math.pow(loopW, 1.12) / 100) * loopDist * (j / 3 + 1) * compoundStretchA, loopPos.x - (1 + Math.pow(loopW, 1.12) / 100) * loopDist * (j / 3 + 1) * compoundStretchB, loopPos.y];
	        } else if (curveStyle === 'segments') {
	          // Segments (multiple straight lines)

	          rs.edgeType = 'segments';
	          rs.segpts = [];

	          for (var s = 0; s < segmentsN; s++) {
	            var w = segmentWs.pfValue[s];
	            var d = segmentDs.pfValue[s];

	            var w1 = 1 - w;
	            var w2 = w;

	            var midptPts = edgeDistances === 'node-position' ? posPts : midptSrcPts;

	            var adjustedMidpt = {
	              x: midptPts.x1 * w1 + midptPts.x2 * w2,
	              y: midptPts.y1 * w1 + midptPts.y2 * w2
	            };

	            rs.segpts.push(adjustedMidpt.x + vectorNormInverse.x * d, adjustedMidpt.y + vectorNormInverse.y * d);
	          }

	          // Straight edge
	        } else if (pairEdges.length % 2 === 1 && i === Math.floor(pairEdges.length / 2) && !edgeIsUnbundled) {

	          rs.edgeType = 'straight';
	        } else {
	          // (Multi)bezier

	          var multi = edgeIsUnbundled;

	          rs.edgeType = multi ? 'multibezier' : 'bezier';
	          rs.ctrlpts = [];

	          for (var b = 0; b < bezierN; b++) {
	            var normctrlptDist = (0.5 - pairEdges.length / 2 + i) * stepSize;
	            var manctrlptDist;
	            var sign = math.signum(normctrlptDist);

	            if (multi) {
	              ctrlptDist = ctrlptDists ? ctrlptDists.pfValue[b] : stepSize; // fall back on step size
	              ctrlptWeight = ctrlptWs.value[b];
	            }

	            if (edgeIsUnbundled) {
	              // multi or single unbundled
	              manctrlptDist = ctrlptDist;
	            } else {
	              manctrlptDist = ctrlptDist !== undefined ? sign * ctrlptDist : undefined;
	            }

	            var distanceFromMidpoint = manctrlptDist !== undefined ? manctrlptDist : normctrlptDist;

	            var w1 = 1 - ctrlptWeight;
	            var w2 = ctrlptWeight;

	            if (edgeIsSwapped) {
	              var temp = w1;
	              w1 = w2;
	              w2 = temp;
	            }

	            var midptPts = edgeDistances === 'node-position' ? posPts : midptSrcPts;

	            var adjustedMidpt = {
	              x: midptPts.x1 * w1 + midptPts.x2 * w2,
	              y: midptPts.y1 * w1 + midptPts.y2 * w2
	            };

	            rs.ctrlpts.push(adjustedMidpt.x + vectorNormInverse.x * distanceFromMidpoint, adjustedMidpt.y + vectorNormInverse.y * distanceFromMidpoint);
	          }
	        }

	        // find endpts for edge
	        this.findEndpoints(edge);

	        var badStart = !is.number(rs.startX) || !is.number(rs.startY);
	        var badAStart = !is.number(rs.arrowStartX) || !is.number(rs.arrowStartY);
	        var badEnd = !is.number(rs.endX) || !is.number(rs.endY);
	        var badAEnd = !is.number(rs.arrowEndX) || !is.number(rs.arrowEndY);

	        var minCpADistFactor = 3;
	        var arrowW = this.getArrowWidth(edge.pstyle('width').pfValue, edge.pstyle('arrow-scale').value) * this.arrowShapeWidth;
	        var minCpADist = minCpADistFactor * arrowW;

	        if (rs.edgeType === 'bezier') {
	          var startACpDist = math.dist({ x: rs.ctrlpts[0], y: rs.ctrlpts[1] }, { x: rs.startX, y: rs.startY });
	          var closeStartACp = startACpDist < minCpADist;
	          var endACpDist = math.dist({ x: rs.ctrlpts[0], y: rs.ctrlpts[1] }, { x: rs.endX, y: rs.endY });
	          var closeEndACp = endACpDist < minCpADist;

	          var overlapping = false;

	          if (badStart || badAStart || closeStartACp) {
	            overlapping = true;

	            // project control point along line from src centre to outside the src shape
	            // (otherwise intersection will yield nothing)
	            var cpD = { // delta
	              x: rs.ctrlpts[0] - srcPos.x,
	              y: rs.ctrlpts[1] - srcPos.y
	            };
	            var cpL = Math.sqrt(cpD.x * cpD.x + cpD.y * cpD.y); // length of line
	            var cpM = { // normalised delta
	              x: cpD.x / cpL,
	              y: cpD.y / cpL
	            };
	            var radius = Math.max(srcW, srcH);
	            var cpProj = { // *2 radius guarantees outside shape
	              x: rs.ctrlpts[0] + cpM.x * 2 * radius,
	              y: rs.ctrlpts[1] + cpM.y * 2 * radius
	            };

	            var srcCtrlPtIntn = srcShape.intersectLine(srcPos.x, srcPos.y, srcW, srcH, cpProj.x, cpProj.y, 0);

	            if (closeStartACp) {
	              rs.ctrlpts[0] = rs.ctrlpts[0] + cpM.x * (minCpADist - startACpDist);
	              rs.ctrlpts[1] = rs.ctrlpts[1] + cpM.y * (minCpADist - startACpDist);
	            } else {
	              rs.ctrlpts[0] = srcCtrlPtIntn[0] + cpM.x * minCpADist;
	              rs.ctrlpts[1] = srcCtrlPtIntn[1] + cpM.y * minCpADist;
	            }
	          }

	          if (badEnd || badAEnd || closeEndACp) {
	            overlapping = true;

	            // project control point along line from tgt centre to outside the tgt shape
	            // (otherwise intersection will yield nothing)
	            var cpD = { // delta
	              x: rs.ctrlpts[0] - tgtPos.x,
	              y: rs.ctrlpts[1] - tgtPos.y
	            };
	            var cpL = Math.sqrt(cpD.x * cpD.x + cpD.y * cpD.y); // length of line
	            var cpM = { // normalised delta
	              x: cpD.x / cpL,
	              y: cpD.y / cpL
	            };
	            var radius = Math.max(srcW, srcH);
	            var cpProj = { // *2 radius guarantees outside shape
	              x: rs.ctrlpts[0] + cpM.x * 2 * radius,
	              y: rs.ctrlpts[1] + cpM.y * 2 * radius
	            };

	            var tgtCtrlPtIntn = tgtShape.intersectLine(tgtPos.x, tgtPos.y, tgtW, tgtH, cpProj.x, cpProj.y, 0);

	            if (closeEndACp) {
	              rs.ctrlpts[0] = rs.ctrlpts[0] + cpM.x * (minCpADist - endACpDist);
	              rs.ctrlpts[1] = rs.ctrlpts[1] + cpM.y * (minCpADist - endACpDist);
	            } else {
	              rs.ctrlpts[0] = tgtCtrlPtIntn[0] + cpM.x * minCpADist;
	              rs.ctrlpts[1] = tgtCtrlPtIntn[1] + cpM.y * minCpADist;
	            }
	          }

	          if (overlapping) {
	            // recalc endpts
	            this.findEndpoints(edge);
	          }
	        }

	        if (rs.edgeType === 'multibezier' || rs.edgeType === 'bezier' || rs.edgeType === 'self' || rs.edgeType === 'compound') {
	          rs.allpts = [];

	          rs.allpts.push(rs.startX, rs.startY);

	          for (var b = 0; b + 1 < rs.ctrlpts.length; b += 2) {
	            // ctrl pt itself
	            rs.allpts.push(rs.ctrlpts[b], rs.ctrlpts[b + 1]);

	            // the midpt between ctrlpts as intermediate destination pts
	            if (b + 3 < rs.ctrlpts.length) {
	              rs.allpts.push((rs.ctrlpts[b] + rs.ctrlpts[b + 2]) / 2, (rs.ctrlpts[b + 1] + rs.ctrlpts[b + 3]) / 2);
	            }
	          }

	          rs.allpts.push(rs.endX, rs.endY);

	          var m, mt;
	          if (rs.ctrlpts.length / 2 % 2 === 0) {
	            m = rs.allpts.length / 2 - 1;

	            rs.midX = rs.allpts[m];
	            rs.midY = rs.allpts[m + 1];
	          } else {
	            m = rs.allpts.length / 2 - 3;
	            mt = 0.5;

	            rs.midX = math.qbezierAt(rs.allpts[m], rs.allpts[m + 2], rs.allpts[m + 4], mt);
	            rs.midY = math.qbezierAt(rs.allpts[m + 1], rs.allpts[m + 3], rs.allpts[m + 5], mt);
	          }
	        } else if (rs.edgeType === 'straight') {
	          // need to calc these after endpts
	          rs.allpts = [rs.startX, rs.startY, rs.endX, rs.endY];

	          // default midpt for labels etc
	          rs.midX = (rs.startX + rs.endX + rs.arrowStartX + rs.arrowEndX) / 4;
	          rs.midY = (rs.startY + rs.endY + rs.arrowStartY + rs.arrowEndY) / 4;
	        } else if (rs.edgeType === 'segments') {
	          rs.allpts = [];
	          rs.allpts.push(rs.startX, rs.startY);
	          rs.allpts.push.apply(rs.allpts, rs.segpts);
	          rs.allpts.push(rs.endX, rs.endY);

	          if (rs.segpts.length % 4 === 0) {
	            var i2 = rs.segpts.length / 2;
	            var i1 = i2 - 2;

	            rs.midX = (rs.segpts[i1] + rs.segpts[i2]) / 2;
	            rs.midY = (rs.segpts[i1 + 1] + rs.segpts[i2 + 1]) / 2;
	          } else {
	            var i1 = rs.segpts.length / 2 - 1;

	            rs.midX = rs.segpts[i1];
	            rs.midY = rs.segpts[i1 + 1];
	          }
	        }

	        this.storeEdgeProjections(edge);
	        this.calculateArrowAngles(edge);
	      } // if point cache miss

	      this.recalculateEdgeLabelProjections(edge);
	      this.calculateLabelAngles(edge);
	    } // for pair edges
	  } // for pair ids

	  for (var i = 0; i < haystackEdges.length; i++) {
	    var edge = haystackEdges[i];
	    var _p = edge._private;
	    var rscratch = _p.rscratch;
	    var rs = rscratch;

	    if (!rscratch.haystack) {
	      var angle = Math.random() * 2 * Math.PI;

	      rscratch.source = {
	        x: Math.cos(angle),
	        y: Math.sin(angle)
	      };

	      var angle = Math.random() * 2 * Math.PI;

	      rscratch.target = {
	        x: Math.cos(angle),
	        y: Math.sin(angle)
	      };
	    }

	    var src = _p.source;
	    var tgt = _p.target;
	    var srcPos = src.position();
	    var tgtPos = tgt.position();
	    var srcW = src.width();
	    var tgtW = tgt.width();
	    var srcH = src.height();
	    var tgtH = tgt.height();
	    var radius = edge.pstyle('haystack-radius').value;
	    var halfRadius = radius / 2; // b/c have to half width/height

	    rs.haystackPts = rs.allpts = [rs.source.x * srcW * halfRadius + srcPos.x, rs.source.y * srcH * halfRadius + srcPos.y, rs.target.x * tgtW * halfRadius + tgtPos.x, rs.target.y * tgtH * halfRadius + tgtPos.y];

	    rs.midX = (rs.allpts[0] + rs.allpts[2]) / 2;
	    rs.midY = (rs.allpts[1] + rs.allpts[3]) / 2;

	    // always override as haystack in case set to different type previously
	    rscratch.edgeType = rscratch.lastCurveStyle = 'haystack';
	    rscratch.haystack = true;

	    this.storeEdgeProjections(edge);
	    this.calculateArrowAngles(edge);
	    this.recalculateEdgeLabelProjections(edge);
	    this.calculateLabelAngles(edge);
	  }
	};

	function getPts(pts) {
	  var retPts = [];

	  if (pts == null) {
	    return;
	  }

	  for (var i = 0; i < pts.length; i += 2) {
	    var x = pts[i];
	    var y = pts[i + 1];

	    retPts.push({ x: x, y: y });
	  }

	  return retPts;
	}

	BRp.getSegmentPoints = function (edge) {
	  var rs = edge[0]._private.rscratch;
	  var type = rs.edgeType;

	  if (type === 'segments') {
	    return getPts(rs.segpts);
	  }
	};

	BRp.getControlPoints = function (edge) {
	  var rs = edge[0]._private.rscratch;
	  var type = rs.edgeType;

	  if (type === 'bezier' || type === 'multibezier' || type === 'self' || type === 'compound') {
	    return getPts(rs.ctrlpts);
	  }
	};

	BRp.getEdgeMidpoint = function (edge) {
	  var rs = edge[0]._private.rscratch;

	  return {
	    x: rs.midX,
	    y: rs.midY
	  };
	};

	module.exports = BRp;

	/***/ }),
	/* 113 */
	/***/ (function(module, exports, __webpack_require__) {


	var math = __webpack_require__(2);
	var is = __webpack_require__(0);

	var BRp = {};

	BRp.manualEndptToPx = function (node, prop) {
	  var r = this;
	  var npos = node.position();
	  var w = node.outerWidth();
	  var h = node.outerHeight();

	  if (prop.value.length === 2) {
	    var p = [prop.pfValue[0], prop.pfValue[1]];

	    if (prop.units[0] === '%') {
	      p[0] = p[0] * w;
	    }

	    if (prop.units[1] === '%') {
	      p[1] = p[1] * h;
	    }

	    p[0] += npos.x;
	    p[1] += npos.y;

	    return p;
	  } else {
	    var angle = prop.pfValue[0];

	    angle = -Math.PI / 2 + angle; // start at 12 o'clock

	    var l = 2 * Math.max(w, h);

	    var _p = [npos.x + Math.cos(angle) * l, npos.y + Math.sin(angle) * l];

	    return r.nodeShapes[this.getNodeShape(node)].intersectLine(npos.x, npos.y, w, h, _p[0], _p[1], 0);
	  }
	};

	BRp.findEndpoints = function (edge) {
	  var r = this;
	  var intersect = void 0;

	  var source = edge.source()[0];
	  var target = edge.target()[0];

	  var srcPos = source.position();
	  var tgtPos = target.position();

	  var tgtArShape = edge.pstyle('target-arrow-shape').value;
	  var srcArShape = edge.pstyle('source-arrow-shape').value;

	  var tgtDist = edge.pstyle('target-distance-from-node').pfValue;
	  var srcDist = edge.pstyle('source-distance-from-node').pfValue;

	  var rs = edge._private.rscratch;

	  var et = rs.edgeType;
	  var self = et === 'self' || et === 'compound';
	  var bezier = et === 'bezier' || et === 'multibezier' || self;
	  var multi = et !== 'bezier';
	  var lines = et === 'straight' || et === 'segments';
	  var segments = et === 'segments';
	  var hasEndpts = bezier || multi || lines;
	  var srcManEndpt = edge.pstyle('source-endpoint');
	  var srcManEndptVal = self ? 'outside-to-node' : srcManEndpt.value;
	  var tgtManEndpt = edge.pstyle('target-endpoint');
	  var tgtManEndptVal = self ? 'outside-to-node' : tgtManEndpt.value;

	  rs.srcManEndpt = srcManEndpt;
	  rs.tgtManEndpt = tgtManEndpt;

	  var p1 = void 0; // last known point of edge on target side
	  var p2 = void 0; // last known point of edge on source side

	  var p1_i = void 0; // point to intersect with target shape
	  var p2_i = void 0; // point to intersect with source shape

	  if (bezier) {
	    var cpStart = [rs.ctrlpts[0], rs.ctrlpts[1]];
	    var cpEnd = multi ? [rs.ctrlpts[rs.ctrlpts.length - 2], rs.ctrlpts[rs.ctrlpts.length - 1]] : cpStart;

	    p1 = cpEnd;
	    p2 = cpStart;
	  } else if (lines) {
	    var srcArrowFromPt = !segments ? [tgtPos.x, tgtPos.y] : rs.segpts.slice(0, 2);
	    var tgtArrowFromPt = !segments ? [srcPos.x, srcPos.y] : rs.segpts.slice(rs.segpts.length - 2);

	    p1 = tgtArrowFromPt;
	    p2 = srcArrowFromPt;
	  }

	  if (tgtManEndptVal === 'inside-to-node') {
	    intersect = [tgtPos.x, tgtPos.y];
	  } else if (tgtManEndpt.units) {
	    intersect = this.manualEndptToPx(target, tgtManEndpt);
	  } else if (tgtManEndptVal === 'outside-to-line') {
	    intersect = rs.tgtIntn; // use cached value from ctrlpt calc
	  } else {
	    if (tgtManEndptVal === 'outside-to-node') {
	      p1_i = p1;
	    } else if (tgtManEndptVal === 'outside-to-line') {
	      p1_i = [srcPos.x, srcPos.y];
	    }

	    intersect = r.nodeShapes[this.getNodeShape(target)].intersectLine(tgtPos.x, tgtPos.y, target.outerWidth(), target.outerHeight(), p1_i[0], p1_i[1], 0);
	  }

	  var arrowEnd = math.shortenIntersection(intersect, p1, r.arrowShapes[tgtArShape].spacing(edge) + tgtDist);
	  var edgeEnd = math.shortenIntersection(intersect, p1, r.arrowShapes[tgtArShape].gap(edge) + tgtDist);

	  rs.endX = edgeEnd[0];
	  rs.endY = edgeEnd[1];

	  rs.arrowEndX = arrowEnd[0];
	  rs.arrowEndY = arrowEnd[1];

	  if (srcManEndptVal === 'inside-to-node') {
	    intersect = [srcPos.x, srcPos.y];
	  } else if (srcManEndpt.units) {
	    intersect = this.manualEndptToPx(source, srcManEndpt);
	  } else if (srcManEndptVal === 'outside-to-line') {
	    intersect = rs.srcIntn; // use cached value from ctrlpt calc
	  } else {
	    if (srcManEndptVal === 'outside-to-node') {
	      p2_i = p2;
	    } else if (srcManEndptVal === 'outside-to-line') {
	      p2_i = [tgtPos.x, tgtPos.y];
	    }

	    intersect = r.nodeShapes[this.getNodeShape(source)].intersectLine(srcPos.x, srcPos.y, source.outerWidth(), source.outerHeight(), p2_i[0], p2_i[1], 0);
	  }

	  var arrowStart = math.shortenIntersection(intersect, p2, r.arrowShapes[srcArShape].spacing(edge) + srcDist);
	  var edgeStart = math.shortenIntersection(intersect, p2, r.arrowShapes[srcArShape].gap(edge) + srcDist);

	  rs.startX = edgeStart[0];
	  rs.startY = edgeStart[1];

	  rs.arrowStartX = arrowStart[0];
	  rs.arrowStartY = arrowStart[1];

	  if (hasEndpts) {
	    if (!is.number(rs.startX) || !is.number(rs.startY) || !is.number(rs.endX) || !is.number(rs.endY)) {
	      rs.badLine = true;
	    } else {
	      rs.badLine = false;
	    }
	  }
	};

	BRp.getSourceEndpoint = function (edge) {
	  var rs = edge[0]._private.rscratch;

	  switch (rs.edgeType) {
	    case 'haystack':
	      return {
	        x: rs.haystackPts[0],
	        y: rs.haystackPts[1]
	      };
	    default:
	      return {
	        x: rs.arrowStartX,
	        y: rs.arrowStartY
	      };
	  }
	};

	BRp.getTargetEndpoint = function (edge) {
	  var rs = edge[0]._private.rscratch;

	  switch (rs.edgeType) {
	    case 'haystack':
	      return {
	        x: rs.haystackPts[2],
	        y: rs.haystackPts[3]
	      };
	    default:
	      return {
	        x: rs.arrowEndX,
	        y: rs.arrowEndY
	      };
	  }
	};

	module.exports = BRp;

	/***/ }),
	/* 114 */
	/***/ (function(module, exports, __webpack_require__) {


	var math = __webpack_require__(2);

	var BRp = {};

	function pushBezierPts(r, edge, pts) {
	  var qbezierAt = function qbezierAt(p1, p2, p3, t) {
	    return math.qbezierAt(p1, p2, p3, t);
	  };
	  var _p = edge._private;
	  var bpts = _p.rstyle.bezierPts;

	  for (var i = 0; i < r.bezierProjPcts.length; i++) {
	    var p = r.bezierProjPcts[i];

	    bpts.push({
	      x: qbezierAt(pts[0], pts[2], pts[4], p),
	      y: qbezierAt(pts[1], pts[3], pts[5], p)
	    });
	  }
	}

	BRp.storeEdgeProjections = function (edge) {
	  var _p = edge._private;
	  var rs = _p.rscratch;
	  var et = rs.edgeType;

	  // clear the cached points state
	  _p.rstyle.bezierPts = null;
	  _p.rstyle.linePts = null;
	  _p.rstyle.haystackPts = null;

	  if (et === 'multibezier' || et === 'bezier' || et === 'self' || et === 'compound') {
	    var bpts = _p.rstyle.bezierPts = []; // jshint ignore:line

	    for (var i = 0; i + 5 < rs.allpts.length; i += 4) {
	      pushBezierPts(this, edge, rs.allpts.slice(i, i + 6));
	    }
	  } else if (et === 'segments') {
	    var lpts = _p.rstyle.linePts = [];

	    for (var i = 0; i + 1 < rs.allpts.length; i += 2) {
	      lpts.push({
	        x: rs.allpts[i],
	        y: rs.allpts[i + 1]
	      });
	    }
	  } else if (et === 'haystack') {
	    var hpts = rs.haystackPts;

	    _p.rstyle.haystackPts = [{ x: hpts[0], y: hpts[1] }, { x: hpts[2], y: hpts[3] }];
	  }

	  _p.rstyle.arrowWidth = this.getArrowWidth(edge.pstyle('width').pfValue, edge.pstyle('arrow-scale').value) * this.arrowShapeWidth;
	};

	BRp.recalculateEdgeProjections = function (edges) {
	  this.findEdgeControlPoints(edges);
	};

	module.exports = BRp;

	/***/ }),
	/* 115 */
	/***/ (function(module, exports, __webpack_require__) {


	var math = __webpack_require__(2);
	var is = __webpack_require__(0);
	var util = __webpack_require__(1);

	var BRp = {};

	BRp.recalculateNodeLabelProjection = function (node) {
	  var content = node.pstyle('label').strValue;

	  if (is.emptyString(content)) {
	    return;
	  }

	  var textX, textY;
	  var _p = node._private;
	  var nodeWidth = node.width();
	  var nodeHeight = node.height();
	  var padding = node.padding();
	  var nodePos = node.position();
	  var textHalign = node.pstyle('text-halign').strValue;
	  var textValign = node.pstyle('text-valign').strValue;
	  var rs = _p.rscratch;
	  var rstyle = _p.rstyle;

	  switch (textHalign) {
	    case 'left':
	      textX = nodePos.x - nodeWidth / 2 - padding;
	      break;

	    case 'right':
	      textX = nodePos.x + nodeWidth / 2 + padding;
	      break;

	    default:
	      // e.g. center
	      textX = nodePos.x;
	  }

	  switch (textValign) {
	    case 'top':
	      textY = nodePos.y - nodeHeight / 2 - padding;
	      break;

	    case 'bottom':
	      textY = nodePos.y + nodeHeight / 2 + padding;
	      break;

	    default:
	      // e.g. middle
	      textY = nodePos.y;
	  }

	  rs.labelX = textX;
	  rs.labelY = textY;
	  rstyle.labelX = textX;
	  rstyle.labelY = textY;

	  this.applyLabelDimensions(node);
	};

	var lineAngleFromDelta = function lineAngleFromDelta(dx, dy) {
	  var angle = Math.atan(dy / dx);

	  if (dx === 0 && angle < 0) {
	    angle = angle * -1;
	  }

	  return angle;
	};

	var lineAngle = function lineAngle(p0, p1) {
	  var dx = p1.x - p0.x;
	  var dy = p1.y - p0.y;

	  return lineAngleFromDelta(dx, dy);
	};

	var bezierAngle = function bezierAngle(p0, p1, p2, t) {
	  var t0 = math.bound(0, t - 0.001, 1);
	  var t1 = math.bound(0, t + 0.001, 1);

	  var lp0 = math.qbezierPtAt(p0, p1, p2, t0);
	  var lp1 = math.qbezierPtAt(p0, p1, p2, t1);

	  return lineAngle(lp0, lp1);
	};

	BRp.recalculateEdgeLabelProjections = function (edge) {
	  var p;
	  var _p = edge._private;
	  var rs = _p.rscratch;
	  var r = this;
	  var content = {
	    mid: edge.pstyle('label').strValue,
	    source: edge.pstyle('source-label').strValue,
	    target: edge.pstyle('target-label').strValue
	  };

	  if (content.mid || content.source || content.target) ; else {
	      return; // no labels => no calcs
	    }

	  // add center point to style so bounding box calculations can use it
	  //
	  p = {
	    x: rs.midX,
	    y: rs.midY
	  };

	  var setRs = function setRs(propName, prefix, value) {
	    util.setPrefixedProperty(_p.rscratch, propName, prefix, value);
	    util.setPrefixedProperty(_p.rstyle, propName, prefix, value);
	  };

	  setRs('labelX', null, p.x);
	  setRs('labelY', null, p.y);

	  var midAngle = lineAngleFromDelta(rs.midDispX, rs.midDispY);
	  setRs('labelAutoAngle', null, midAngle);

	  var createControlPointInfo = function createControlPointInfo() {
	    if (createControlPointInfo.cache) {
	      return createControlPointInfo.cache;
	    } // use cache so only 1x per edge

	    var ctrlpts = [];

	    // store each ctrlpt info init
	    for (var i = 0; i + 5 < rs.allpts.length; i += 4) {
	      var p0 = { x: rs.allpts[i], y: rs.allpts[i + 1] };
	      var p1 = { x: rs.allpts[i + 2], y: rs.allpts[i + 3] }; // ctrlpt
	      var p2 = { x: rs.allpts[i + 4], y: rs.allpts[i + 5] };

	      ctrlpts.push({
	        p0: p0,
	        p1: p1,
	        p2: p2,
	        startDist: 0,
	        length: 0,
	        segments: []
	      });
	    }

	    var bpts = _p.rstyle.bezierPts;
	    var nProjs = r.bezierProjPcts.length;

	    function addSegment(cp, p0, p1, t0, t1) {
	      var length = math.dist(p0, p1);
	      var prevSegment = cp.segments[cp.segments.length - 1];
	      var segment = {
	        p0: p0,
	        p1: p1,
	        t0: t0,
	        t1: t1,
	        startDist: prevSegment ? prevSegment.startDist + prevSegment.length : 0,
	        length: length
	      };

	      cp.segments.push(segment);

	      cp.length += length;
	    }

	    // update each ctrlpt with segment info
	    for (var i = 0; i < ctrlpts.length; i++) {
	      var cp = ctrlpts[i];
	      var prevCp = ctrlpts[i - 1];

	      if (prevCp) {
	        cp.startDist = prevCp.startDist + prevCp.length;
	      }

	      addSegment(cp, cp.p0, bpts[i * nProjs], 0, r.bezierProjPcts[0]); // first

	      for (var j = 0; j < nProjs - 1; j++) {
	        addSegment(cp, bpts[i * nProjs + j], bpts[i * nProjs + j + 1], r.bezierProjPcts[j], r.bezierProjPcts[j + 1]);
	      }

	      addSegment(cp, bpts[i * nProjs + nProjs - 1], cp.p2, r.bezierProjPcts[nProjs - 1], 1); // last
	    }

	    return createControlPointInfo.cache = ctrlpts;
	  };

	  var calculateEndProjection = function calculateEndProjection(prefix) {
	    var angle;
	    var isSrc = prefix === 'source';

	    if (!content[prefix]) {
	      return;
	    }

	    var offset = edge.pstyle(prefix + '-text-offset').pfValue;

	    switch (rs.edgeType) {
	      case 'self':
	      case 'compound':
	      case 'bezier':
	      case 'multibezier':
	        var cps = createControlPointInfo();
	        var selected;
	        var startDist = 0;
	        var totalDist = 0;

	        // find the segment we're on
	        for (var i = 0; i < cps.length; i++) {
	          var cp = cps[isSrc ? i : cps.length - 1 - i];

	          for (var j = 0; j < cp.segments.length; j++) {
	            var seg = cp.segments[isSrc ? j : cp.segments.length - 1 - j];
	            var lastSeg = i === cps.length - 1 && j === cp.segments.length - 1;

	            startDist = totalDist;
	            totalDist += seg.length;

	            if (totalDist >= offset || lastSeg) {
	              selected = { cp: cp, segment: seg };
	              break;
	            }
	          }

	          if (selected) {
	            break;
	          }
	        }

	        var cp = selected.cp;
	        var seg = selected.segment;
	        var tSegment = (offset - startDist) / seg.length;
	        var segDt = seg.t1 - seg.t0;
	        var t = isSrc ? seg.t0 + segDt * tSegment : seg.t1 - segDt * tSegment;

	        t = math.bound(0, t, 1);
	        p = math.qbezierPtAt(cp.p0, cp.p1, cp.p2, t);
	        angle = bezierAngle(cp.p0, cp.p1, cp.p2, t, p);

	        break;

	      case 'straight':
	      case 'segments':
	      case 'haystack':
	        var d = 0,
	            di,
	            d0;
	        var p0, p1;
	        var l = rs.allpts.length;

	        for (var i = 0; i + 3 < l; i += 2) {
	          if (isSrc) {
	            p0 = { x: rs.allpts[i], y: rs.allpts[i + 1] };
	            p1 = { x: rs.allpts[i + 2], y: rs.allpts[i + 3] };
	          } else {
	            p0 = { x: rs.allpts[l - 2 - i], y: rs.allpts[l - 1 - i] };
	            p1 = { x: rs.allpts[l - 4 - i], y: rs.allpts[l - 3 - i] };
	          }

	          di = math.dist(p0, p1);
	          d0 = d;
	          d += di;

	          if (d >= offset) {
	            break;
	          }
	        }

	        var pD = offset - d0;
	        var t = pD / di;

	        t = math.bound(0, t, 1);
	        p = math.lineAt(p0, p1, t);
	        angle = lineAngle(p0, p1);

	        break;
	    }

	    setRs('labelX', prefix, p.x);
	    setRs('labelY', prefix, p.y);
	    setRs('labelAutoAngle', prefix, angle);
	  };

	  calculateEndProjection('source');
	  calculateEndProjection('target');

	  this.applyLabelDimensions(edge);
	};

	BRp.applyLabelDimensions = function (ele) {
	  this.applyPrefixedLabelDimensions(ele);

	  if (ele.isEdge()) {
	    this.applyPrefixedLabelDimensions(ele, 'source');
	    this.applyPrefixedLabelDimensions(ele, 'target');
	  }
	};

	BRp.applyPrefixedLabelDimensions = function (ele, prefix) {
	  var _p = ele._private;

	  var text = this.getLabelText(ele, prefix);
	  var labelDims = this.calculateLabelDimensions(ele, text);

	  util.setPrefixedProperty(_p.rstyle, 'labelWidth', prefix, labelDims.width);
	  util.setPrefixedProperty(_p.rscratch, 'labelWidth', prefix, labelDims.width);

	  util.setPrefixedProperty(_p.rstyle, 'labelHeight', prefix, labelDims.height);
	  util.setPrefixedProperty(_p.rscratch, 'labelHeight', prefix, labelDims.height);
	};

	BRp.getLabelText = function (ele, prefix) {
	  var _p = ele._private;
	  var pfd = prefix ? prefix + '-' : '';
	  var text = ele.pstyle(pfd + 'label').strValue;
	  var textTransform = ele.pstyle('text-transform').value;
	  var rscratch = function rscratch(propName, value) {
	    if (value) {
	      util.setPrefixedProperty(_p.rscratch, propName, prefix, value);
	      return value;
	    } else {
	      return util.getPrefixedProperty(_p.rscratch, propName, prefix);
	    }
	  };

	  // for empty text, skip all processing
	  if (!text) {
	    return '';
	  }

	  if (textTransform == 'none') ; else if (textTransform == 'uppercase') {
	    text = text.toUpperCase();
	  } else if (textTransform == 'lowercase') {
	    text = text.toLowerCase();
	  }

	  var wrapStyle = ele.pstyle('text-wrap').value;

	  if (wrapStyle === 'wrap') {
	    //console.log('wrap');

	    var labelKey = rscratch('labelKey');

	    // save recalc if the label is the same as before
	    if (labelKey && rscratch('labelWrapKey') === labelKey) {
	      // console.log('wrap cache hit');
	      return rscratch('labelWrapCachedText');
	    }
	    // console.log('wrap cache miss');

	    var lines = text.split('\n');
	    var maxW = ele.pstyle('text-max-width').pfValue;
	    var wrappedLines = [];

	    for (var l = 0; l < lines.length; l++) {
	      var line = lines[l];
	      var lineDims = this.calculateLabelDimensions(ele, line, 'line=' + line);
	      var lineW = lineDims.width;

	      if (lineW > maxW) {
	        // line is too long
	        var words = line.split(/\s+/); // NB: assume collapsed whitespace into single space
	        var subline = '';

	        for (var w = 0; w < words.length; w++) {
	          var word = words[w];
	          var testLine = subline.length === 0 ? word : subline + ' ' + word;
	          var testDims = this.calculateLabelDimensions(ele, testLine, 'testLine=' + testLine);
	          var testW = testDims.width;

	          if (testW <= maxW) {
	            // word fits on current line
	            subline += word + ' ';
	          } else {
	            // word starts new line
	            wrappedLines.push(subline);
	            subline = word + ' ';
	          }
	        }

	        // if there's remaining text, put it in a wrapped line
	        if (!subline.match(/^\s+$/)) {
	          wrappedLines.push(subline);
	        }
	      } else {
	        // line is already short enough
	        wrappedLines.push(line);
	      }
	    } // for

	    rscratch('labelWrapCachedLines', wrappedLines);
	    text = rscratch('labelWrapCachedText', wrappedLines.join('\n'));
	    rscratch('labelWrapKey', labelKey);

	    // console.log(text)
	  } else if (wrapStyle === 'ellipsis') {
	    var maxW = ele.pstyle('text-max-width').pfValue;
	    var ellipsized = '';
	    var ellipsis = '\u2026';
	    var incLastCh = false;

	    for (var i = 0; i < text.length; i++) {
	      var widthWithNextCh = this.calculateLabelDimensions(ele, ellipsized + text[i] + ellipsis).width;

	      if (widthWithNextCh > maxW) {
	        break;
	      }

	      ellipsized += text[i];

	      if (i === text.length - 1) {
	        incLastCh = true;
	      }
	    }

	    if (!incLastCh) {
	      ellipsized += ellipsis;
	    }

	    return ellipsized;
	  } // if ellipsize

	  return text;
	};

	BRp.calculateLabelDimensions = function (ele, text, extraKey) {
	  var r = this;

	  var cacheKey = ele._private.labelStyleKey + '$@$' + text;

	  if (extraKey) {
	    cacheKey += '$@$' + extraKey;
	  }

	  var cache = r.labelDimCache || (r.labelDimCache = {});

	  if (cache[cacheKey]) {
	    return cache[cacheKey];
	  }

	  var sizeMult = 1; // increase the scale to increase accuracy w.r.t. zoomed text
	  var fStyle = ele.pstyle('font-style').strValue;
	  var size = sizeMult * ele.pstyle('font-size').pfValue + 'px';
	  var family = ele.pstyle('font-family').strValue;
	  var weight = ele.pstyle('font-weight').strValue;

	  var div = this.labelCalcDiv;

	  if (!div) {
	    div = this.labelCalcDiv = document.createElement('div'); // eslint-disable-line no-undef
	    document.body.appendChild(div); // eslint-disable-line no-undef
	  }

	  var ds = div.style;

	  // from ele style
	  ds.fontFamily = family;
	  ds.fontStyle = fStyle;
	  ds.fontSize = size;
	  ds.fontWeight = weight;

	  // forced style
	  ds.position = 'absolute';
	  ds.left = '-9999px';
	  ds.top = '-9999px';
	  ds.zIndex = '-1';
	  ds.visibility = 'hidden';
	  ds.pointerEvents = 'none';
	  ds.padding = '0';
	  ds.lineHeight = '1';

	  if (ele.pstyle('text-wrap').value === 'wrap') {
	    ds.whiteSpace = 'pre'; // so newlines are taken into account
	  } else {
	    ds.whiteSpace = 'normal';
	  }

	  // put label content in div
	  div.textContent = text;

	  cache[cacheKey] = {
	    width: Math.ceil(div.clientWidth / sizeMult),
	    height: Math.ceil(div.clientHeight / sizeMult)
	  };

	  return cache[cacheKey];
	};

	BRp.calculateLabelAngles = function (ele) {
	  var _p = ele._private;
	  var rs = _p.rscratch;
	  var isEdge = ele.isEdge();
	  var rot = ele.pstyle('text-rotation');
	  var rotStr = rot.strValue;

	  if (rotStr === 'none') {
	    rs.labelAngle = rs.sourceLabelAngle = rs.targetLabelAngle = 0;
	  } else if (isEdge && rotStr === 'autorotate') {
	    rs.labelAngle = rs.labelAutoAngle;
	    rs.sourceLabelAngle = rs.sourceLabelAutoAngle;
	    rs.targetLabelAngle = rs.targetLabelAutoAngle;
	  } else if (rotStr === 'autorotate') {
	    rs.labelAngle = rs.sourceLabelAngle = rs.targetLabelAngle = 0;
	  } else {
	    rs.labelAngle = rs.sourceLabelAngle = rs.targetLabelAngle = rot.pfValue;
	  }
	};

	module.exports = BRp;

	/***/ }),
	/* 116 */
	/***/ (function(module, exports, __webpack_require__) {


	var BRp = {};

	BRp.getNodeShape = function (node) {
	  var r = this;
	  var shape = node.pstyle('shape').value;

	  if (node.isParent()) {
	    if (shape === 'rectangle' || shape === 'roundrectangle' || shape === 'cutrectangle' || shape === 'barrel') {
	      return shape;
	    } else {
	      return 'rectangle';
	    }
	  }

	  if (shape === 'polygon') {
	    var points = node.pstyle('shape-polygon-points').value;

	    return r.nodeShapes.makePolygon(points).name;
	  }

	  return shape;
	};

	module.exports = BRp;

	/***/ }),
	/* 117 */
	/***/ (function(module, exports, __webpack_require__) {


	var BRp = {};

	BRp.registerCalculationListeners = function () {
	  var cy = this.cy;
	  var elesToUpdate = cy.collection();
	  var r = this;

	  var enqueue = function enqueue(eles, e) {
	    var dirtyStyleCaches = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;

	    elesToUpdate.merge(eles);

	    for (var i = 0; i < eles.length; i++) {
	      var ele = eles[i];
	      var _p = ele._private;
	      var rstyle = _p.rstyle;

	      if (dirtyStyleCaches) {
	        rstyle.clean = false;
	        _p.bbCache = null;
	      }

	      var evts = rstyle.dirtyEvents = rstyle.dirtyEvents || { length: 0 };

	      if (!evts[e.type]) {
	        evts[e.type] = true;
	        evts.length++;
	      }
	    }
	  };

	  r.binder(cy)
	  // nodes

	  .on('position.* style.* free.* bounds.*', 'node', function onDirtyModNode(e) {
	    var node = e.target;

	    enqueue(node, e);
	    enqueue(node.connectedEdges(), e);
	  }).on('add.*', 'node', function onDirtyAddNode(e) {
	    var ele = e.target;

	    enqueue(ele, e);
	  }).on('background.*', 'node', function onDirtyBgNode(e) {
	    var ele = e.target;

	    enqueue(ele, e, false);
	  })

	  // edges

	  .on('add.* style.*', 'edge', function onDirtyEdge(e) {
	    var edge = e.target;

	    enqueue(edge, e);
	    enqueue(edge.parallelEdges(), e);
	  }).on('remove.*', 'edge', function onDirtyRemoveEdge(e) {
	    var edge = e.target;
	    var pEdges = edge.parallelEdges();

	    for (var i = 0; i < pEdges.length; i++) {
	      var pEdge = pEdges[i];

	      if (!pEdge.removed()) {
	        enqueue(pEdge, e);
	      }
	    }
	  })

	  // manual dirtying

	  .on('dirty.*', 'node', function onDirtyEle(e) {
	    var ele = e.target;

	    enqueue(ele, e);
	  });

	  var updateEleCalcs = function updateEleCalcs(willDraw) {
	    if (willDraw) {
	      var fns = r.onUpdateEleCalcsFns;

	      if (fns) {
	        for (var i = 0; i < fns.length; i++) {
	          var fn = fns[i];

	          fn(willDraw, elesToUpdate);
	        }
	      }

	      r.recalculateRenderedStyle(elesToUpdate, false);

	      for (var i = 0; i < elesToUpdate.length; i++) {
	        elesToUpdate[i]._private.rstyle.dirtyEvents = null;
	      }

	      elesToUpdate = cy.collection();
	    }
	  };

	  r.beforeRender(updateEleCalcs, r.beforeRenderPriorities.eleCalcs);
	};

	BRp.onUpdateEleCalcs = function (fn) {
	  var fns = this.onUpdateEleCalcsFns = this.onUpdateEleCalcsFns || [];

	  fns.push(fn);
	};

	BRp.recalculateRenderedStyle = function (eles, useCache) {
	  var edges = [];
	  var nodes = [];

	  // the renderer can't be used for calcs when destroyed, e.g. ele.boundingBox()
	  if (this.destroyed) {
	    return;
	  }

	  // use cache by default for perf
	  if (useCache === undefined) {
	    useCache = true;
	  }

	  for (var i = 0; i < eles.length; i++) {
	    var ele = eles[i];
	    var _p = ele._private;
	    var rstyle = _p.rstyle;

	    // only update if dirty and in graph
	    if (useCache && rstyle.clean || ele.removed()) {
	      continue;
	    }

	    // only update if not display: none
	    if (ele.pstyle('display').value === 'none') {
	      continue;
	    }

	    if (_p.group === 'nodes') {
	      nodes.push(ele);
	    } else {
	      // edges
	      edges.push(ele);
	    }

	    rstyle.clean = true;
	    // rstyle.dirtyEvents = null;
	  }

	  // update node data from projections
	  for (var i = 0; i < nodes.length; i++) {
	    var ele = nodes[i];
	    var _p = ele._private;
	    var rstyle = _p.rstyle;
	    var pos = ele.position();

	    this.recalculateNodeLabelProjection(ele);

	    rstyle.nodeX = pos.x;
	    rstyle.nodeY = pos.y;
	    rstyle.nodeW = ele.pstyle('width').pfValue;
	    rstyle.nodeH = ele.pstyle('height').pfValue;
	  }

	  this.recalculateEdgeProjections(edges);

	  // update edge data from projections
	  for (var i = 0; i < edges.length; i++) {
	    var ele = edges[i];
	    var _p = ele._private;
	    var rstyle = _p.rstyle;
	    var rs = _p.rscratch;

	    this.recalculateEdgeLabelProjections(ele);

	    // update rstyle positions
	    rstyle.srcX = rs.arrowStartX;
	    rstyle.srcY = rs.arrowStartY;
	    rstyle.tgtX = rs.arrowEndX;
	    rstyle.tgtY = rs.arrowEndY;
	    rstyle.midX = rs.midX;
	    rstyle.midY = rs.midY;
	    rstyle.labelAngle = rs.labelAngle;
	    rstyle.sourceLabelAngle = rs.sourceLabelAngle;
	    rstyle.targetLabelAngle = rs.targetLabelAngle;
	  }
	};

	module.exports = BRp;

	/***/ }),
	/* 118 */
	/***/ (function(module, exports, __webpack_require__) {


	var zIndexSort = __webpack_require__(17);

	var BRp = {};

	BRp.updateCachedGrabbedEles = function () {
	  var eles = this.cachedZSortedEles;

	  if (!eles) {
	    // just let this be recalculated on the next z sort tick
	    return;
	  }

	  eles.drag = [];
	  eles.nondrag = [];

	  var grabTargets = [];

	  for (var i = 0; i < eles.length; i++) {
	    var ele = eles[i];
	    var rs = ele._private.rscratch;

	    if (ele.grabbed() && !ele.isParent()) {
	      grabTargets.push(ele);
	    } else if (rs.inDragLayer) {
	      eles.drag.push(ele);
	    } else {
	      eles.nondrag.push(ele);
	    }
	  }

	  // put the grab target nodes last so it's on top of its neighbourhood
	  for (var i = 0; i < grabTargets.length; i++) {
	    var ele = grabTargets[i];

	    eles.drag.push(ele);
	  }
	};

	BRp.invalidateCachedZSortedEles = function () {
	  this.cachedZSortedEles = null;
	};

	BRp.getCachedZSortedEles = function (forceRecalc) {
	  if (forceRecalc || !this.cachedZSortedEles) {
	    //console.time('cachezorder')

	    var eles = this.cy.mutableElements().toArray();

	    eles.sort(zIndexSort);

	    eles.interactive = eles.filter(function (ele) {
	      return ele.interactive();
	    });

	    this.cachedZSortedEles = eles;

	    this.updateCachedGrabbedEles();
	  } else {
	    eles = this.cachedZSortedEles;
	  }

	  return eles;
	};

	module.exports = BRp;

	/***/ }),
	/* 119 */
	/***/ (function(module, exports, __webpack_require__) {


	var BRp = {};

	BRp.getCachedImage = function (url, crossOrigin, onLoad) {
	  var r = this;
	  var imageCache = r.imageCache = r.imageCache || {};
	  var cache = imageCache[url];

	  if (cache) {
	    if (!cache.image.complete) {
	      cache.image.addEventListener('load', onLoad);
	    }

	    return cache.image;
	  } else {
	    cache = imageCache[url] = imageCache[url] || {};

	    var image = cache.image = new Image(); // eslint-disable-line no-undef

	    image.addEventListener('load', onLoad);
	    image.addEventListener('error', function () {
	      image.error = true;
	    });

	    // #1582 safari doesn't load data uris with crossOrigin properly
	    // https://bugs.webkit.org/show_bug.cgi?id=123978
	    var dataUriPrefix = 'data:';
	    var isDataUri = url.substring(0, dataUriPrefix.length).toLowerCase() === dataUriPrefix;
	    if (!isDataUri) {
	      image.crossOrigin = crossOrigin; // prevent tainted canvas
	    }

	    image.src = url;

	    return image;
	  }
	};

	module.exports = BRp;

	/***/ }),
	/* 120 */
	/***/ (function(module, exports, __webpack_require__) {


	var is = __webpack_require__(0);
	var util = __webpack_require__(1);
	var math = __webpack_require__(2);
	var Event = __webpack_require__(16);

	var BRp = {};

	BRp.registerBinding = function (target, event, handler, useCapture) {
	  var args = Array.prototype.slice.apply(arguments, [1]); // copy
	  var b = this.binder(target);

	  return b.on.apply(b, args);
	};

	BRp.binder = function (tgt) {
	  var r = this;

	  var tgtIsDom = tgt === window || tgt === document || tgt === document.body || is.domElement(tgt);

	  if (r.supportsPassiveEvents == null) {

	    // from https://github.com/WICG/EventListenerOptions/blob/gh-pages/explainer.md#feature-detection
	    var supportsPassive = false;
	    try {
	      var opts = Object.defineProperty({}, 'passive', {
	        get: function get() {
	          supportsPassive = true;
	        }
	      });

	      window.addEventListener('test', null, opts);
	    } catch (err) {}

	    r.supportsPassiveEvents = supportsPassive;
	  }

	  var on = function on(event, handler, useCapture) {
	    var args = Array.prototype.slice.call(arguments);

	    if (tgtIsDom && r.supportsPassiveEvents) {
	      // replace useCapture w/ opts obj
	      args[2] = {
	        capture: useCapture != null ? useCapture : false,
	        passive: false,
	        once: false
	      };
	    }

	    r.bindings.push({
	      target: tgt,
	      args: args
	    });

	    (tgt.addEventListener || tgt.on).apply(tgt, args);

	    return this;
	  };

	  return {
	    on: on,
	    addEventListener: on,
	    addListener: on,
	    bind: on
	  };
	};

	BRp.nodeIsDraggable = function (node) {
	  return node && node.isNode() && !node.locked() && node.grabbable();
	};

	BRp.nodeIsGrabbable = function (node) {
	  return this.nodeIsDraggable(node) && node.interactive();
	};

	BRp.load = function () {
	  var r = this;

	  var triggerEvents = function triggerEvents(target, names, e, props) {
	    if (target == null) {
	      target = r.cy;
	    }

	    for (var i = 0; i < names.length; i++) {
	      var name = names[i];

	      target.emit(util.extend({ originalEvent: e, type: name }, props));
	    }
	  };

	  var isMultSelKeyDown = function isMultSelKeyDown(e) {
	    return e.shiftKey || e.metaKey || e.ctrlKey; // maybe e.altKey
	  };

	  var allowPanningPassthrough = function allowPanningPassthrough(down, downs) {
	    var allowPassthrough = true;

	    if (r.cy.hasCompoundNodes() && down && down.isEdge()) {
	      // a compound node below the edge => no passthrough panning
	      for (var i = 0; downs && i < downs.length; i++) {
	        var down = downs[i];

	        if (down.isNode() && down.isParent()) {
	          allowPassthrough = false;
	          break;
	        }
	      }
	    } else {
	      allowPassthrough = true;
	    }

	    return allowPassthrough;
	  };

	  var getDragListIds = function getDragListIds(opts) {
	    var listHasId;

	    if (opts.addToList && r.cy.hasCompoundNodes()) {
	      // only needed for compound graphs
	      if (!opts.addToList.hasId) {
	        // build ids lookup if doesn't already exist
	        opts.addToList.hasId = {};

	        for (var i = 0; i < opts.addToList.length; i++) {
	          var ele = opts.addToList[i];

	          opts.addToList.hasId[ele.id()] = true;
	        }
	      }

	      listHasId = opts.addToList.hasId;
	    }

	    return listHasId || {};
	  };

	  var setGrabbed = function setGrabbed(ele) {
	    ele[0]._private.grabbed = true;
	  };

	  var setFreed = function setFreed(ele) {
	    ele[0]._private.grabbed = false;
	  };

	  var setInDragLayer = function setInDragLayer(ele) {
	    ele[0]._private.rscratch.inDragLayer = true;
	  };

	  var setOutDragLayer = function setOutDragLayer(ele) {
	    ele[0]._private.rscratch.inDragLayer = false;
	  };

	  var setGrabTarget = function setGrabTarget(ele) {
	    ele[0]._private.rscratch.isGrabTarget = true;
	  };

	  var removeGrabTarget = function removeGrabTarget(ele) {
	    ele[0]._private.rscratch.isGrabTarget = false;
	  };

	  var addToDragList = function addToDragList(ele, opts) {
	    var listHasId = getDragListIds(opts);

	    if (!listHasId[ele.id()]) {
	      opts.addToList.push(ele);
	      listHasId[ele.id()] = true;

	      setGrabbed(ele);
	    }
	  };

	  // helper function to determine which child nodes and inner edges
	  // of a compound node to be dragged as well as the grabbed and selected nodes
	  var addDescendantsToDrag = function addDescendantsToDrag(node, opts) {
	    if (!node.cy().hasCompoundNodes()) {
	      return;
	    }

	    if (opts.inDragLayer == null && opts.addToList == null) {
	      return;
	    } // nothing to do

	    var innerNodes = node.descendants();

	    if (opts.inDragLayer) {
	      innerNodes.forEach(setInDragLayer);
	      innerNodes.connectedEdges().forEach(setInDragLayer);
	    }

	    if (opts.addToList) {
	      innerNodes.forEach(function (ele) {
	        addToDragList(ele, opts);
	      });
	    }
	  };

	  // adds the given nodes and its neighbourhood to the drag layer
	  var addNodesToDrag = function addNodesToDrag(nodes, opts) {
	    opts = opts || {};

	    var hasCompoundNodes = nodes.cy().hasCompoundNodes();

	    if (opts.inDragLayer) {
	      nodes.forEach(setInDragLayer);

	      nodes.neighborhood().stdFilter(function (ele) {
	        return !hasCompoundNodes || ele.isEdge();
	      }).forEach(setInDragLayer);
	    }

	    if (opts.addToList) {
	      nodes.forEach(function (ele) {
	        addToDragList(ele, opts);
	      });
	    }

	    addDescendantsToDrag(nodes, opts); // always add to drag

	    // also add nodes and edges related to the topmost ancestor
	    updateAncestorsInDragLayer(nodes, {
	      inDragLayer: opts.inDragLayer
	    });

	    r.updateCachedGrabbedEles();
	  };

	  var addNodeToDrag = addNodesToDrag;

	  var freeDraggedElements = function freeDraggedElements(grabbedEles) {
	    if (!grabbedEles) {
	      return;
	    }

	    grabbedEles.hasId = {}; // clear the id list

	    // just go over all elements rather than doing a bunch of (possibly expensive) traversals
	    r.getCachedZSortedEles().forEach(function (ele) {
	      setFreed(ele);
	      setOutDragLayer(ele);
	      removeGrabTarget(ele);
	    });

	    r.updateCachedGrabbedEles();
	  };

	  // helper function to determine which ancestor nodes and edges should go
	  // to the drag layer (or should be removed from drag layer).
	  var updateAncestorsInDragLayer = function updateAncestorsInDragLayer(node, opts) {

	    if (opts.inDragLayer == null && opts.addToList == null) {
	      return;
	    } // nothing to do

	    if (!node.cy().hasCompoundNodes()) {
	      return;
	    }

	    // find top-level parent
	    var parent = node.ancestors().orphans();

	    // no parent node: no nodes to add to the drag layer
	    if (parent.same(node)) {
	      return;
	    }

	    var nodes = parent.descendants().spawnSelf().merge(parent).unmerge(node).unmerge(node.descendants());

	    var edges = nodes.connectedEdges();

	    if (opts.inDragLayer) {
	      edges.forEach(setInDragLayer);
	      nodes.forEach(setInDragLayer);
	    }

	    if (opts.addToList) {
	      nodes.forEach(function (ele) {
	        addToDragList(ele, opts);
	      });
	    }
	  };

	  var blurActiveDomElement = function blurActiveDomElement() {
	    if (document.activeElement != null && document.activeElement.blur != null) {
	      document.activeElement.blur();
	    }
	  };

	  var haveMutationsApi = typeof MutationObserver !== 'undefined';

	  // watch for when the cy container is removed from the dom
	  if (haveMutationsApi) {
	    r.removeObserver = new MutationObserver(function (mutns) {
	      // eslint-disable-line no-undef
	      for (var i = 0; i < mutns.length; i++) {
	        var mutn = mutns[i];
	        var rNodes = mutn.removedNodes;

	        if (rNodes) {
	          for (var j = 0; j < rNodes.length; j++) {
	            var rNode = rNodes[j];

	            if (rNode === r.container) {
	              r.destroy();
	              break;
	            }
	          }
	        }
	      }
	    });

	    if (r.container.parentNode) {
	      r.removeObserver.observe(r.container.parentNode, { childList: true });
	    }
	  } else {
	    r.registerBinding(r.container, 'DOMNodeRemoved', function (e) {
	      r.destroy();
	    });
	  }

	  var onResize = util.debounce(function () {
	    r.cy.resize();
	  }, 100);

	  if (haveMutationsApi) {
	    r.styleObserver = new MutationObserver(onResize); // eslint-disable-line no-undef

	    r.styleObserver.observe(r.container, { attributes: true });
	  }

	  // auto resize
	  r.registerBinding(window, 'resize', onResize); // eslint-disable-line no-undef

	  var forEachUp = function forEachUp(domEle, fn) {
	    while (domEle != null) {
	      fn(domEle);

	      domEle = domEle.parentNode;
	    }
	  };

	  var invalidateCoords = function invalidateCoords() {
	    r.invalidateContainerClientCoordsCache();
	  };

	  forEachUp(r.container, function (domEle) {
	    r.registerBinding(domEle, 'transitionend', invalidateCoords);
	    r.registerBinding(domEle, 'animationend', invalidateCoords);
	    r.registerBinding(domEle, 'scroll', invalidateCoords);
	  });

	  // stop right click menu from appearing on cy
	  r.registerBinding(r.container, 'contextmenu', function (e) {
	    e.preventDefault();
	  });

	  var inBoxSelection = function inBoxSelection() {
	    return r.selection[4] !== 0;
	  };

	  var eventInContainer = function eventInContainer(e) {
	    // save cycles if mouse events aren't to be captured
	    var containerPageCoords = r.findContainerClientCoords();
	    var x = containerPageCoords[0];
	    var y = containerPageCoords[1];
	    var width = containerPageCoords[2];
	    var height = containerPageCoords[3];

	    var positions = e.touches ? e.touches : [e];
	    var atLeastOnePosInside = false;

	    for (var i = 0; i < positions.length; i++) {
	      var p = positions[i];

	      if (x <= p.clientX && p.clientX <= x + width && y <= p.clientY && p.clientY <= y + height) {
	        atLeastOnePosInside = true;
	        break;
	      }
	    }

	    if (!atLeastOnePosInside) {
	      return false;
	    }

	    var container = r.container;
	    var target = e.target;
	    var tParent = target.parentNode;
	    var containerIsTarget = false;

	    while (tParent) {
	      if (tParent === container) {
	        containerIsTarget = true;
	        break;
	      }

	      tParent = tParent.parentNode;
	    }

	    if (!containerIsTarget) {
	      return false;
	    } // if target is outisde cy container, then this event is not for us

	    return true;
	  };

	  // Primary key
	  r.registerBinding(r.container, 'mousedown', function mousedownHandler(e) {
	    if (!eventInContainer(e)) {
	      return;
	    }

	    e.preventDefault();

	    blurActiveDomElement();

	    r.hoverData.capture = true;
	    r.hoverData.which = e.which;

	    var cy = r.cy;
	    var gpos = [e.clientX, e.clientY];
	    var pos = r.projectIntoViewport(gpos[0], gpos[1]);
	    var select = r.selection;
	    var nears = r.findNearestElements(pos[0], pos[1], true, false);
	    var near = nears[0];
	    var draggedElements = r.dragData.possibleDragElements;

	    r.hoverData.mdownPos = pos;
	    r.hoverData.mdownGPos = gpos;

	    var checkForTaphold = function checkForTaphold() {
	      r.hoverData.tapholdCancelled = false;

	      clearTimeout(r.hoverData.tapholdTimeout);

	      r.hoverData.tapholdTimeout = setTimeout(function () {

	        if (r.hoverData.tapholdCancelled) {
	          return;
	        } else {
	          var ele = r.hoverData.down;

	          if (ele) {
	            ele.emit({
	              originalEvent: e,
	              type: 'taphold',
	              position: { x: pos[0], y: pos[1] }
	            });
	          } else {
	            cy.emit({
	              originalEvent: e,
	              type: 'taphold',
	              position: { x: pos[0], y: pos[1] }
	            });
	          }
	        }
	      }, r.tapholdDuration);
	    };

	    // Right click button
	    if (e.which == 3) {

	      r.hoverData.cxtStarted = true;

	      var cxtEvt = {
	        originalEvent: e,
	        type: 'cxttapstart',
	        position: { x: pos[0], y: pos[1] }
	      };

	      if (near) {
	        near.activate();
	        near.emit(cxtEvt);

	        r.hoverData.down = near;
	      } else {
	        cy.emit(cxtEvt);
	      }

	      r.hoverData.downTime = new Date().getTime();
	      r.hoverData.cxtDragged = false;

	      // Primary button
	    } else if (e.which == 1) {

	      if (near) {
	        near.activate();
	      }

	      // Element dragging
	      {
	        // If something is under the cursor and it is draggable, prepare to grab it
	        if (near != null) {

	          if (r.nodeIsGrabbable(near)) {

	            var makeEvent = function makeEvent(type) {
	              return {
	                originalEvent: e,
	                type: type,
	                position: { x: pos[0], y: pos[1] }
	              };
	            };

	            var triggerGrab = function triggerGrab(ele) {
	              ele.emit(makeEvent('grab'));
	            };

	            setGrabTarget(near);

	            if (!near.selected()) {

	              draggedElements = r.dragData.possibleDragElements = [];
	              addNodeToDrag(near, { addToList: draggedElements });

	              near.emit(makeEvent('grabon')).emit(makeEvent('grab'));
	            } else {
	              draggedElements = r.dragData.possibleDragElements = [];

	              var selectedNodes = cy.$(function (ele) {
	                return ele.isNode() && ele.selected() && r.nodeIsGrabbable(ele);
	              });

	              addNodesToDrag(selectedNodes, { addToList: draggedElements });

	              near.emit(makeEvent('grabon'));

	              selectedNodes.forEach(triggerGrab);
	            }

	            r.redrawHint('eles', true);
	            r.redrawHint('drag', true);
	          }
	        }

	        r.hoverData.down = near;
	        r.hoverData.downs = nears;
	        r.hoverData.downTime = new Date().getTime();
	      }

	      triggerEvents(near, ['mousedown', 'tapstart', 'vmousedown'], e, {
	        position: { x: pos[0], y: pos[1] }
	      });

	      if (near == null) {
	        select[4] = 1;

	        r.data.bgActivePosistion = {
	          x: pos[0],
	          y: pos[1]
	        };

	        r.redrawHint('select', true);

	        r.redraw();
	      } else if (near.isEdge()) {
	        select[4] = 1; // for future pan
	      }

	      checkForTaphold();
	    }

	    // Initialize selection box coordinates
	    select[0] = select[2] = pos[0];
	    select[1] = select[3] = pos[1];
	  }, false);

	  r.registerBinding(window, 'mousemove', function mousemoveHandler(e) {
	    // eslint-disable-line no-undef
	    var capture = r.hoverData.capture;

	    if (!capture && !eventInContainer(e)) {
	      return;
	    }

	    var preventDefault = false;
	    var cy = r.cy;
	    var zoom = cy.zoom();
	    var gpos = [e.clientX, e.clientY];
	    var pos = r.projectIntoViewport(gpos[0], gpos[1]);
	    var mdownPos = r.hoverData.mdownPos;
	    var mdownGPos = r.hoverData.mdownGPos;
	    var select = r.selection;

	    var near = null;
	    if (!r.hoverData.draggingEles && !r.hoverData.dragging && !r.hoverData.selecting) {
	      near = r.findNearestElement(pos[0], pos[1], true, false);
	    }
	    var last = r.hoverData.last;
	    var down = r.hoverData.down;

	    var disp = [pos[0] - select[2], pos[1] - select[3]];

	    var draggedElements = r.dragData.possibleDragElements;

	    var isOverThresholdDrag;

	    if (mdownGPos) {
	      var dx = gpos[0] - mdownGPos[0];
	      var dx2 = dx * dx;
	      var dy = gpos[1] - mdownGPos[1];
	      var dy2 = dy * dy;
	      var dist2 = dx2 + dy2;

	      r.hoverData.isOverThresholdDrag = isOverThresholdDrag = dist2 >= r.desktopTapThreshold2;
	    }

	    var multSelKeyDown = isMultSelKeyDown(e);

	    if (isOverThresholdDrag) {
	      r.hoverData.tapholdCancelled = true;
	    }

	    var updateDragDelta = function updateDragDelta() {
	      var dragDelta = r.hoverData.dragDelta = r.hoverData.dragDelta || [];

	      if (dragDelta.length === 0) {
	        dragDelta.push(disp[0]);
	        dragDelta.push(disp[1]);
	      } else {
	        dragDelta[0] += disp[0];
	        dragDelta[1] += disp[1];
	      }
	    };

	    preventDefault = true;

	    triggerEvents(near, ['mousemove', 'vmousemove', 'tapdrag'], e, {
	      position: { x: pos[0], y: pos[1] }
	    });

	    var goIntoBoxMode = function goIntoBoxMode() {
	      r.data.bgActivePosistion = undefined;

	      if (!r.hoverData.selecting) {
	        cy.emit('boxstart');
	      }

	      select[4] = 1;
	      r.hoverData.selecting = true;

	      r.redrawHint('select', true);
	      r.redraw();
	    };

	    // trigger context drag if rmouse down
	    if (r.hoverData.which === 3) {
	      // but only if over threshold
	      if (isOverThresholdDrag) {
	        var cxtEvt = {
	          originalEvent: e,
	          type: 'cxtdrag',
	          position: { x: pos[0], y: pos[1] }
	        };

	        if (down) {
	          down.emit(cxtEvt);
	        } else {
	          cy.emit(cxtEvt);
	        }

	        r.hoverData.cxtDragged = true;

	        if (!r.hoverData.cxtOver || near !== r.hoverData.cxtOver) {

	          if (r.hoverData.cxtOver) {
	            r.hoverData.cxtOver.emit({
	              originalEvent: e,
	              type: 'cxtdragout',
	              position: { x: pos[0], y: pos[1] }
	            });
	          }

	          r.hoverData.cxtOver = near;

	          if (near) {
	            near.emit({
	              originalEvent: e,
	              type: 'cxtdragover',
	              position: { x: pos[0], y: pos[1] }
	            });
	          }
	        }
	      }

	      // Check if we are drag panning the entire graph
	    } else if (r.hoverData.dragging) {
	      preventDefault = true;

	      if (cy.panningEnabled() && cy.userPanningEnabled()) {
	        var deltaP;

	        if (r.hoverData.justStartedPan) {
	          var mdPos = r.hoverData.mdownPos;

	          deltaP = {
	            x: (pos[0] - mdPos[0]) * zoom,
	            y: (pos[1] - mdPos[1]) * zoom
	          };

	          r.hoverData.justStartedPan = false;
	        } else {
	          deltaP = {
	            x: disp[0] * zoom,
	            y: disp[1] * zoom
	          };
	        }

	        cy.panBy(deltaP);

	        r.hoverData.dragged = true;
	      }

	      // Needs reproject due to pan changing viewport
	      pos = r.projectIntoViewport(e.clientX, e.clientY);

	      // Checks primary button down & out of time & mouse not moved much
	    } else if (select[4] == 1 && (down == null || down.isEdge())) {

	      if (isOverThresholdDrag) {

	        if (!r.hoverData.dragging && cy.boxSelectionEnabled() && (multSelKeyDown || !cy.panningEnabled() || !cy.userPanningEnabled())) {
	          goIntoBoxMode();
	        } else if (!r.hoverData.selecting && cy.panningEnabled() && cy.userPanningEnabled()) {
	          var allowPassthrough = allowPanningPassthrough(down, r.hoverData.downs);

	          if (allowPassthrough) {
	            r.hoverData.dragging = true;
	            r.hoverData.justStartedPan = true;
	            select[4] = 0;

	            r.data.bgActivePosistion = math.array2point(mdownPos);

	            r.redrawHint('select', true);
	            r.redraw();
	          }
	        }

	        if (down && down.isEdge() && down.active()) {
	          down.unactivate();
	        }
	      }
	    } else {
	      if (down && down.isEdge() && down.active()) {
	        down.unactivate();
	      }

	      if ((!down || !down.grabbed()) && near != last) {

	        if (last) {
	          triggerEvents(last, ['mouseout', 'tapdragout'], e, {
	            position: { x: pos[0], y: pos[1] }
	          });
	        }

	        if (near) {
	          triggerEvents(near, ['mouseover', 'tapdragover'], e, {
	            position: { x: pos[0], y: pos[1] }
	          });
	        }

	        r.hoverData.last = near;
	      }

	      if (down) {

	        if (isOverThresholdDrag) {
	          // then we can take action

	          if (cy.boxSelectionEnabled() && multSelKeyDown) {
	            // then selection overrides
	            if (down && down.grabbed()) {
	              freeDraggedElements(draggedElements);

	              down.emit('free');
	            }

	            goIntoBoxMode();
	          } else if (down && down.grabbed() && r.nodeIsDraggable(down)) {
	            // drag node
	            var justStartedDrag = !r.dragData.didDrag;

	            if (justStartedDrag) {
	              r.redrawHint('eles', true);
	            }

	            r.dragData.didDrag = true; // indicate that we actually did drag the node

	            var toTrigger = [];

	            // now, add the elements to the drag layer if not done already
	            if (!r.hoverData.draggingEles) {
	              addNodesToDrag(cy.collection(draggedElements), { inDragLayer: true });
	            }

	            for (var i = 0; i < draggedElements.length; i++) {
	              var dEle = draggedElements[i];

	              // Locked nodes not draggable, as well as non-visible nodes
	              if (r.nodeIsDraggable(dEle) && dEle.grabbed()) {
	                var dPos = dEle.position();

	                toTrigger.push(dEle);

	                if (is.number(disp[0]) && is.number(disp[1])) {
	                  dPos.x += disp[0];
	                  dPos.y += disp[1];

	                  if (justStartedDrag) {
	                    var dragDelta = r.hoverData.dragDelta;

	                    if (dragDelta && is.number(dragDelta[0]) && is.number(dragDelta[1])) {
	                      dPos.x += dragDelta[0];
	                      dPos.y += dragDelta[1];
	                    }
	                  }
	                }
	              }
	            }

	            r.hoverData.draggingEles = true;

	            var tcol = cy.collection(toTrigger);

	            tcol.dirtyCompoundBoundsCache();
	            tcol.emit('position drag');

	            r.redrawHint('drag', true);
	            r.redraw();
	          }
	        } else {
	          // otherwise save drag delta for when we actually start dragging so the relative grab pos is constant
	          updateDragDelta();
	        }
	      }

	      // prevent the dragging from triggering text selection on the page
	      preventDefault = true;
	    }

	    select[2] = pos[0];select[3] = pos[1];

	    if (preventDefault) {
	      if (e.stopPropagation) e.stopPropagation();
	      if (e.preventDefault) e.preventDefault();
	      return false;
	    }
	  }, false);

	  r.registerBinding(window, 'mouseup', function mouseupHandler(e) {
	    // eslint-disable-line no-undef
	    var capture = r.hoverData.capture;
	    if (!capture) {
	      return;
	    }
	    r.hoverData.capture = false;

	    var cy = r.cy;var pos = r.projectIntoViewport(e.clientX, e.clientY);var select = r.selection;
	    var near = r.findNearestElement(pos[0], pos[1], true, false);
	    var draggedElements = r.dragData.possibleDragElements;var down = r.hoverData.down;
	    var multSelKeyDown = isMultSelKeyDown(e);

	    if (r.data.bgActivePosistion) {
	      r.redrawHint('select', true);
	      r.redraw();
	    }

	    r.hoverData.tapholdCancelled = true;

	    r.data.bgActivePosistion = undefined; // not active bg now

	    if (down) {
	      down.unactivate();
	    }

	    if (r.hoverData.which === 3) {
	      var cxtEvt = {
	        originalEvent: e,
	        type: 'cxttapend',
	        position: { x: pos[0], y: pos[1] }
	      };

	      if (down) {
	        down.emit(cxtEvt);
	      } else {
	        cy.emit(cxtEvt);
	      }

	      if (!r.hoverData.cxtDragged) {
	        var cxtTap = {
	          originalEvent: e,
	          type: 'cxttap',
	          position: { x: pos[0], y: pos[1] }
	        };

	        if (down) {
	          down.emit(cxtTap);
	        } else {
	          cy.emit(cxtTap);
	        }
	      }

	      r.hoverData.cxtDragged = false;
	      r.hoverData.which = null;
	    } else if (r.hoverData.which === 1) {

	      // Deselect all elements if nothing is currently under the mouse cursor and we aren't dragging something
	      if (down == null && // not mousedown on node
	      !r.dragData.didDrag // didn't move the node around
	      && !r.hoverData.selecting // not box selection
	      && !r.hoverData.dragged // didn't pan
	      && !isMultSelKeyDown(e)) {

	        cy.$(function (ele) {
	          return ele.selected();
	        }).unselect();

	        if (draggedElements.length > 0) {
	          r.redrawHint('eles', true);
	        }

	        r.dragData.possibleDragElements = draggedElements = [];
	      }

	      triggerEvents(near, ['mouseup', 'tapend', 'vmouseup'], e, {
	        position: { x: pos[0], y: pos[1] }
	      });

	      if (!r.dragData.didDrag // didn't move a node around
	      && !r.hoverData.dragged // didn't pan
	      && !r.hoverData.selecting // not box selection
	      && !r.hoverData.isOverThresholdDrag // didn't move too much
	      ) {
	          triggerEvents(down, ['click', 'tap', 'vclick'], e, {
	            position: { x: pos[0], y: pos[1] }
	          });
	        }

	      // Single selection
	      if (near == down && !r.dragData.didDrag && !r.hoverData.selecting) {
	        if (near != null && near._private.selectable) {

	          if (r.hoverData.dragging) ; else if (cy.selectionType() === 'additive' || multSelKeyDown) {
	            if (near.selected()) {
	              near.unselect();
	            } else {
	              near.select();
	            }
	          } else {
	            if (!multSelKeyDown) {
	              cy.$(':selected').unmerge(near).unselect();
	              near.select();
	            }
	          }

	          r.redrawHint('eles', true);
	        }
	      }

	      if (r.hoverData.selecting) {
	        var box = cy.collection(r.getAllInBox(select[0], select[1], select[2], select[3]));

	        r.redrawHint('select', true);

	        if (box.length > 0) {
	          r.redrawHint('eles', true);
	        }

	        cy.emit('boxend');

	        var eleWouldBeSelected = function eleWouldBeSelected(ele) {
	          return ele.selectable() && !ele.selected();
	        };

	        if (cy.selectionType() === 'additive') {
	          box.emit('box').stdFilter(eleWouldBeSelected).select().emit('boxselect');
	        } else {
	          if (!multSelKeyDown) {
	            cy.$(':selected').unmerge(box).unselect();
	          }

	          box.emit('box').stdFilter(eleWouldBeSelected).select().emit('boxselect');
	        }

	        // always need redraw in case eles unselectable
	        r.redraw();
	      }

	      // Cancel drag pan
	      if (r.hoverData.dragging) {
	        r.hoverData.dragging = false;

	        r.redrawHint('select', true);
	        r.redrawHint('eles', true);

	        r.redraw();
	      }

	      if (!select[4]) {
	        r.redrawHint('drag', true);
	        r.redrawHint('eles', true);

	        var downWasGrabbed = down && down.grabbed();

	        freeDraggedElements(draggedElements);

	        if (downWasGrabbed) {
	          down.emit('free');
	        }
	      }
	    } // else not right mouse

	    select[4] = 0;r.hoverData.down = null;

	    r.hoverData.cxtStarted = false;
	    r.hoverData.draggingEles = false;
	    r.hoverData.selecting = false;
	    r.hoverData.isOverThresholdDrag = false;
	    r.dragData.didDrag = false;
	    r.hoverData.dragged = false;
	    r.hoverData.dragDelta = [];
	    r.hoverData.mdownPos = null;
	    r.hoverData.mdownGPos = null;
	  }, false);

	  var wheelHandler = function wheelHandler(e) {

	    if (r.scrollingPage) {
	      return;
	    } // while scrolling, ignore wheel-to-zoom

	    var cy = r.cy;
	    var pos = r.projectIntoViewport(e.clientX, e.clientY);
	    var rpos = [pos[0] * cy.zoom() + cy.pan().x, pos[1] * cy.zoom() + cy.pan().y];

	    if (r.hoverData.draggingEles || r.hoverData.dragging || r.hoverData.cxtStarted || inBoxSelection()) {
	      // if pan dragging or cxt dragging, wheel movements make no zoom
	      e.preventDefault();
	      return;
	    }

	    if (cy.panningEnabled() && cy.userPanningEnabled() && cy.zoomingEnabled() && cy.userZoomingEnabled()) {
	      e.preventDefault();

	      r.data.wheelZooming = true;
	      clearTimeout(r.data.wheelTimeout);
	      r.data.wheelTimeout = setTimeout(function () {
	        r.data.wheelZooming = false;

	        r.redrawHint('eles', true);
	        r.redraw();
	      }, 150);

	      var diff;

	      if (e.deltaY != null) {
	        diff = e.deltaY / -250;
	      } else if (e.wheelDeltaY != null) {
	        diff = e.wheelDeltaY / 1000;
	      } else {
	        diff = e.wheelDelta / 1000;
	      }

	      diff = diff * r.wheelSensitivity;

	      var needsWheelFix = e.deltaMode === 1;
	      if (needsWheelFix) {
	        // fixes slow wheel events on ff/linux and ff/windows
	        diff *= 33;
	      }

	      cy.zoom({
	        level: cy.zoom() * Math.pow(10, diff),
	        renderedPosition: { x: rpos[0], y: rpos[1] }
	      });
	    }
	  };

	  // Functions to help with whether mouse wheel should trigger zooming
	  // --
	  r.registerBinding(r.container, 'wheel', wheelHandler, true);

	  // disable nonstandard wheel events
	  // r.registerBinding(r.container, 'mousewheel', wheelHandler, true);
	  // r.registerBinding(r.container, 'DOMMouseScroll', wheelHandler, true);
	  // r.registerBinding(r.container, 'MozMousePixelScroll', wheelHandler, true); // older firefox

	  r.registerBinding(window, 'scroll', function scrollHandler(e) {
	    // eslint-disable-line no-undef
	    r.scrollingPage = true;

	    clearTimeout(r.scrollingPageTimeout);
	    r.scrollingPageTimeout = setTimeout(function () {
	      r.scrollingPage = false;
	    }, 250);
	  }, true);

	  // Functions to help with handling mouseout/mouseover on the Cytoscape container
	  // Handle mouseout on Cytoscape container
	  r.registerBinding(r.container, 'mouseout', function mouseOutHandler(e) {
	    var pos = r.projectIntoViewport(e.clientX, e.clientY);

	    r.cy.emit({
	      originalEvent: e,
	      type: 'mouseout',
	      position: { x: pos[0], y: pos[1] }
	    });
	  }, false);

	  r.registerBinding(r.container, 'mouseover', function mouseOverHandler(e) {
	    var pos = r.projectIntoViewport(e.clientX, e.clientY);

	    r.cy.emit({
	      originalEvent: e,
	      type: 'mouseover',
	      position: { x: pos[0], y: pos[1] }
	    });
	  }, false);

	  var f1x1, f1y1, f2x1, f2y1; // starting points for pinch-to-zoom
	  var distance1, distance1Sq; // initial distance between finger 1 and finger 2 for pinch-to-zoom
	  var center1, modelCenter1; // center point on start pinch to zoom
	  var offsetLeft, offsetTop;
	  var containerWidth, containerHeight;
	  var twoFingersStartInside;

	  var distance = function distance(x1, y1, x2, y2) {
	    return Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));
	  };

	  var distanceSq = function distanceSq(x1, y1, x2, y2) {
	    return (x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1);
	  };

	  var touchstartHandler;
	  r.registerBinding(r.container, 'touchstart', touchstartHandler = function touchstartHandler(e) {
	    if (!eventInContainer(e)) {
	      return;
	    }

	    blurActiveDomElement();

	    r.touchData.capture = true;
	    r.data.bgActivePosistion = undefined;

	    var cy = r.cy;
	    var now = r.touchData.now;
	    var earlier = r.touchData.earlier;

	    if (e.touches[0]) {
	      var pos = r.projectIntoViewport(e.touches[0].clientX, e.touches[0].clientY);now[0] = pos[0];now[1] = pos[1];
	    }
	    if (e.touches[1]) {
	      var pos = r.projectIntoViewport(e.touches[1].clientX, e.touches[1].clientY);now[2] = pos[0];now[3] = pos[1];
	    }
	    if (e.touches[2]) {
	      var pos = r.projectIntoViewport(e.touches[2].clientX, e.touches[2].clientY);now[4] = pos[0];now[5] = pos[1];
	    }

	    // record starting points for pinch-to-zoom
	    if (e.touches[1]) {

	      freeDraggedElements(r.dragData.touchDragEles);

	      var offsets = r.findContainerClientCoords();
	      offsetLeft = offsets[0];
	      offsetTop = offsets[1];
	      containerWidth = offsets[2];
	      containerHeight = offsets[3];

	      f1x1 = e.touches[0].clientX - offsetLeft;
	      f1y1 = e.touches[0].clientY - offsetTop;

	      f2x1 = e.touches[1].clientX - offsetLeft;
	      f2y1 = e.touches[1].clientY - offsetTop;

	      twoFingersStartInside = 0 <= f1x1 && f1x1 <= containerWidth && 0 <= f2x1 && f2x1 <= containerWidth && 0 <= f1y1 && f1y1 <= containerHeight && 0 <= f2y1 && f2y1 <= containerHeight;

	      var pan = cy.pan();
	      var zoom = cy.zoom();

	      distance1 = distance(f1x1, f1y1, f2x1, f2y1);
	      distance1Sq = distanceSq(f1x1, f1y1, f2x1, f2y1);
	      center1 = [(f1x1 + f2x1) / 2, (f1y1 + f2y1) / 2];
	      modelCenter1 = [(center1[0] - pan.x) / zoom, (center1[1] - pan.y) / zoom];

	      // consider context tap
	      var cxtDistThreshold = 200;
	      var cxtDistThresholdSq = cxtDistThreshold * cxtDistThreshold;
	      if (distance1Sq < cxtDistThresholdSq && !e.touches[2]) {

	        var near1 = r.findNearestElement(now[0], now[1], true, true);
	        var near2 = r.findNearestElement(now[2], now[3], true, true);

	        if (near1 && near1.isNode()) {
	          near1.activate().emit({
	            originalEvent: e,
	            type: 'cxttapstart',
	            position: { x: now[0], y: now[1] }
	          });
	          r.touchData.start = near1;
	        } else if (near2 && near2.isNode()) {
	          near2.activate().emit({
	            originalEvent: e,
	            type: 'cxttapstart',
	            position: { x: now[0], y: now[1] }
	          });
	          r.touchData.start = near2;
	        } else {
	          cy.emit({
	            originalEvent: e,
	            type: 'cxttapstart',
	            position: { x: now[0], y: now[1] }
	          });
	        }

	        if (r.touchData.start) {
	          r.touchData.start._private.grabbed = false;
	        }
	        r.touchData.cxt = true;
	        r.touchData.cxtDragged = false;
	        r.data.bgActivePosistion = undefined;

	        r.redraw();
	        return;
	      }
	    }

	    if (e.touches[2]) ; else if (e.touches[1]) ; else if (e.touches[0]) {
	      var nears = r.findNearestElements(now[0], now[1], true, true);
	      var near = nears[0];

	      if (near != null) {
	        near.activate();

	        r.touchData.start = near;
	        r.touchData.starts = nears;

	        if (r.nodeIsGrabbable(near)) {

	          var draggedEles = r.dragData.touchDragEles = [];
	          var selectedNodes = null;

	          r.redrawHint('eles', true);
	          r.redrawHint('drag', true);

	          if (near.selected()) {
	            // reset drag elements, since near will be added again

	            selectedNodes = cy.$(function (ele) {
	              return ele.selected() && r.nodeIsGrabbable(ele);
	            });

	            addNodesToDrag(selectedNodes, { addToList: draggedEles });
	          } else {
	            addNodeToDrag(near, { addToList: draggedEles });
	          }

	          setGrabTarget(near);

	          var makeEvent = function makeEvent(type) {
	            return {
	              originalEvent: e,
	              type: type,
	              position: { x: now[0], y: now[1] }
	            };
	          };

	          near.emit(makeEvent('grabon'));

	          if (selectedNodes) {
	            selectedNodes.forEach(function (n) {
	              n.emit(makeEvent('grab'));
	            });
	          } else {
	            near.emit(makeEvent('grab'));
	          }
	        }
	      }

	      triggerEvents(near, ['touchstart', 'tapstart', 'vmousedown'], e, {
	        position: { x: now[0], y: now[1] }
	      });

	      if (near == null) {
	        r.data.bgActivePosistion = {
	          x: pos[0],
	          y: pos[1]
	        };

	        r.redrawHint('select', true);
	        r.redraw();
	      }

	      // Tap, taphold
	      // -----

	      r.touchData.singleTouchMoved = false;
	      r.touchData.singleTouchStartTime = +new Date();

	      clearTimeout(r.touchData.tapholdTimeout);
	      r.touchData.tapholdTimeout = setTimeout(function () {
	        if (r.touchData.singleTouchMoved === false && !r.pinching // if pinching, then taphold unselect shouldn't take effect
	        && !r.touchData.selecting // box selection shouldn't allow taphold through
	        ) {
	            triggerEvents(r.touchData.start, ['taphold'], e, {
	              position: { x: now[0], y: now[1] }
	            });

	            if (!r.touchData.start) {
	              cy.$(':selected').unselect();
	            }
	          }
	      }, r.tapholdDuration);
	    }

	    if (e.touches.length >= 1) {
	      var sPos = r.touchData.startPosition = [];

	      for (var i = 0; i < now.length; i++) {
	        sPos[i] = earlier[i] = now[i];
	      }

	      var touch0 = e.touches[0];

	      r.touchData.startGPosition = [touch0.clientX, touch0.clientY];
	    }
	  }, false);

	  var touchmoveHandler;
	  r.registerBinding(window, 'touchmove', touchmoveHandler = function touchmoveHandler(e) {
	    // eslint-disable-line no-undef
	    var capture = r.touchData.capture;

	    if (!capture && !eventInContainer(e)) {
	      return;
	    }

	    var select = r.selection;
	    var cy = r.cy;
	    var now = r.touchData.now;
	    var earlier = r.touchData.earlier;
	    var zoom = cy.zoom();

	    if (e.touches[0]) {
	      var pos = r.projectIntoViewport(e.touches[0].clientX, e.touches[0].clientY);now[0] = pos[0];now[1] = pos[1];
	    }
	    if (e.touches[1]) {
	      var pos = r.projectIntoViewport(e.touches[1].clientX, e.touches[1].clientY);now[2] = pos[0];now[3] = pos[1];
	    }
	    if (e.touches[2]) {
	      var pos = r.projectIntoViewport(e.touches[2].clientX, e.touches[2].clientY);now[4] = pos[0];now[5] = pos[1];
	    }

	    var startGPos = r.touchData.startGPosition;
	    var isOverThresholdDrag;

	    if (capture && e.touches[0] && startGPos) {
	      var disp = [];for (var j = 0; j < now.length; j++) {
	        disp[j] = now[j] - earlier[j];
	      }
	      var dx = e.touches[0].clientX - startGPos[0];
	      var dx2 = dx * dx;
	      var dy = e.touches[0].clientY - startGPos[1];
	      var dy2 = dy * dy;
	      var dist2 = dx2 + dy2;

	      isOverThresholdDrag = dist2 >= r.touchTapThreshold2;
	    }

	    // context swipe cancelling
	    if (capture && r.touchData.cxt) {
	      e.preventDefault();

	      var f1x2 = e.touches[0].clientX - offsetLeft,
	          f1y2 = e.touches[0].clientY - offsetTop;
	      var f2x2 = e.touches[1].clientX - offsetLeft,
	          f2y2 = e.touches[1].clientY - offsetTop;
	      // var distance2 = distance( f1x2, f1y2, f2x2, f2y2 );
	      var distance2Sq = distanceSq(f1x2, f1y2, f2x2, f2y2);
	      var factorSq = distance2Sq / distance1Sq;

	      var distThreshold = 150;
	      var distThresholdSq = distThreshold * distThreshold;
	      var factorThreshold = 1.5;
	      var factorThresholdSq = factorThreshold * factorThreshold;

	      // cancel ctx gestures if the distance b/t the fingers increases
	      if (factorSq >= factorThresholdSq || distance2Sq >= distThresholdSq) {
	        r.touchData.cxt = false;

	        r.data.bgActivePosistion = undefined;

	        r.redrawHint('select', true);

	        var cxtEvt = {
	          originalEvent: e,
	          type: 'cxttapend',
	          position: { x: now[0], y: now[1] }
	        };

	        if (r.touchData.start) {
	          r.touchData.start.unactivate().emit(cxtEvt);

	          r.touchData.start = null;
	        } else {
	          cy.emit(cxtEvt);
	        }
	      }
	    }

	    // context swipe
	    if (capture && r.touchData.cxt) {
	      var cxtEvt = {
	        originalEvent: e,
	        type: 'cxtdrag',
	        position: { x: now[0], y: now[1] }
	      };
	      r.data.bgActivePosistion = undefined;
	      r.redrawHint('select', true);

	      if (r.touchData.start) {
	        r.touchData.start.emit(cxtEvt);
	      } else {
	        cy.emit(cxtEvt);
	      }

	      if (r.touchData.start) {
	        r.touchData.start._private.grabbed = false;
	      }
	      r.touchData.cxtDragged = true;

	      var near = r.findNearestElement(now[0], now[1], true, true);

	      if (!r.touchData.cxtOver || near !== r.touchData.cxtOver) {

	        if (r.touchData.cxtOver) {
	          r.touchData.cxtOver.emit({
	            originalEvent: e,
	            type: 'cxtdragout',
	            position: { x: now[0], y: now[1] }
	          });
	        }

	        r.touchData.cxtOver = near;

	        if (near) {
	          near.emit({
	            originalEvent: e,
	            type: 'cxtdragover',
	            position: { x: now[0], y: now[1] }
	          });
	        }
	      }

	      // box selection
	    } else if (capture && e.touches[2] && cy.boxSelectionEnabled()) {
	      e.preventDefault();

	      r.data.bgActivePosistion = undefined;

	      this.lastThreeTouch = +new Date();

	      if (!r.touchData.selecting) {
	        cy.emit('boxstart');
	      }

	      r.touchData.selecting = true;

	      r.redrawHint('select', true);

	      if (!select || select.length === 0 || select[0] === undefined) {
	        select[0] = (now[0] + now[2] + now[4]) / 3;
	        select[1] = (now[1] + now[3] + now[5]) / 3;
	        select[2] = (now[0] + now[2] + now[4]) / 3 + 1;
	        select[3] = (now[1] + now[3] + now[5]) / 3 + 1;
	      } else {
	        select[2] = (now[0] + now[2] + now[4]) / 3;
	        select[3] = (now[1] + now[3] + now[5]) / 3;
	      }

	      select[4] = 1;
	      r.touchData.selecting = true;

	      r.redraw();

	      // pinch to zoom
	    } else if (capture && e.touches[1] && cy.zoomingEnabled() && cy.panningEnabled() && cy.userZoomingEnabled() && cy.userPanningEnabled()) {
	      // two fingers => pinch to zoom
	      e.preventDefault();

	      r.data.bgActivePosistion = undefined;
	      r.redrawHint('select', true);

	      var draggedEles = r.dragData.touchDragEles;
	      if (draggedEles) {
	        r.redrawHint('drag', true);

	        for (var i = 0; i < draggedEles.length; i++) {
	          var de_p = draggedEles[i]._private;

	          de_p.grabbed = false;
	          de_p.rscratch.inDragLayer = false;
	        }
	      }

	      // (x2, y2) for fingers 1 and 2
	      var f1x2 = e.touches[0].clientX - offsetLeft,
	          f1y2 = e.touches[0].clientY - offsetTop;
	      var f2x2 = e.touches[1].clientX - offsetLeft,
	          f2y2 = e.touches[1].clientY - offsetTop;

	      var distance2 = distance(f1x2, f1y2, f2x2, f2y2);
	      // var distance2Sq = distanceSq( f1x2, f1y2, f2x2, f2y2 );
	      // var factor = Math.sqrt( distance2Sq ) / Math.sqrt( distance1Sq );
	      var factor = distance2 / distance1;

	      if (twoFingersStartInside) {
	        // delta finger1
	        var df1x = f1x2 - f1x1;
	        var df1y = f1y2 - f1y1;

	        // delta finger 2
	        var df2x = f2x2 - f2x1;
	        var df2y = f2y2 - f2y1;

	        // translation is the normalised vector of the two fingers movement
	        // i.e. so pinching cancels out and moving together pans
	        var tx = (df1x + df2x) / 2;
	        var ty = (df1y + df2y) / 2;

	        // adjust factor by the speed multiplier
	        // var speed = 1.5;
	        // if( factor > 1 ){
	        //   factor = (factor - 1) * speed + 1;
	        // } else {
	        //   factor = 1 - (1 - factor) * speed;
	        // }

	        // now calculate the zoom
	        var zoom1 = cy.zoom();
	        var zoom2 = zoom1 * factor;
	        var pan1 = cy.pan();

	        // the model center point converted to the current rendered pos
	        var ctrx = modelCenter1[0] * zoom1 + pan1.x;
	        var ctry = modelCenter1[1] * zoom1 + pan1.y;

	        var pan2 = {
	          x: -zoom2 / zoom1 * (ctrx - pan1.x - tx) + ctrx,
	          y: -zoom2 / zoom1 * (ctry - pan1.y - ty) + ctry
	        };

	        // remove dragged eles
	        if (r.touchData.start && r.touchData.start.active()) {
	          var draggedEles = r.dragData.touchDragEles;

	          freeDraggedElements(draggedEles);

	          r.redrawHint('drag', true);
	          r.redrawHint('eles', true);

	          r.touchData.start.unactivate().emit('free');
	        }

	        cy.viewport({
	          zoom: zoom2,
	          pan: pan2,
	          cancelOnFailedZoom: true
	        });

	        distance1 = distance2;
	        f1x1 = f1x2;
	        f1y1 = f1y2;
	        f2x1 = f2x2;
	        f2y1 = f2y2;

	        r.pinching = true;
	      }

	      // Re-project
	      if (e.touches[0]) {
	        var pos = r.projectIntoViewport(e.touches[0].clientX, e.touches[0].clientY);now[0] = pos[0];now[1] = pos[1];
	      }
	      if (e.touches[1]) {
	        var pos = r.projectIntoViewport(e.touches[1].clientX, e.touches[1].clientY);now[2] = pos[0];now[3] = pos[1];
	      }
	      if (e.touches[2]) {
	        var pos = r.projectIntoViewport(e.touches[2].clientX, e.touches[2].clientY);now[4] = pos[0];now[5] = pos[1];
	      }
	    } else if (e.touches[0]) {
	      var start = r.touchData.start;
	      var last = r.touchData.last;
	      var near;

	      if (!r.hoverData.draggingEles && !r.swipePanning) {
	        near = r.findNearestElement(now[0], now[1], true, true);
	      }

	      if (capture && start != null) {
	        e.preventDefault();
	      }

	      // dragging nodes
	      if (capture && start != null && r.nodeIsDraggable(start)) {

	        if (isOverThresholdDrag) {
	          // then dragging can happen
	          var draggedEles = r.dragData.touchDragEles;
	          var justStartedDrag = !r.dragData.didDrag;

	          if (justStartedDrag) {
	            addNodesToDrag(cy.collection(draggedEles), { inDragLayer: true });
	          }

	          for (var k = 0; k < draggedEles.length; k++) {
	            var draggedEle = draggedEles[k];

	            if (r.nodeIsDraggable(draggedEle) && draggedEle.grabbed()) {
	              r.dragData.didDrag = true;
	              var dPos = draggedEle.position();

	              if (is.number(disp[0]) && is.number(disp[1])) {
	                dPos.x += disp[0];
	                dPos.y += disp[1];
	              }

	              if (justStartedDrag) {
	                r.redrawHint('eles', true);

	                var dragDelta = r.touchData.dragDelta;

	                if (dragDelta && is.number(dragDelta[0]) && is.number(dragDelta[1])) {
	                  dPos.x += dragDelta[0];
	                  dPos.y += dragDelta[1];
	                }
	              }
	            }
	          }

	          var tcol = cy.collection(draggedEles);

	          tcol.dirtyCompoundBoundsCache();
	          tcol.emit('position drag');

	          r.hoverData.draggingEles = true;

	          r.redrawHint('drag', true);

	          if (r.touchData.startPosition[0] == earlier[0] && r.touchData.startPosition[1] == earlier[1]) {

	            r.redrawHint('eles', true);
	          }

	          r.redraw();
	        } else {
	          // otherise keep track of drag delta for later
	          var dragDelta = r.touchData.dragDelta = r.touchData.dragDelta || [];

	          if (dragDelta.length === 0) {
	            dragDelta.push(disp[0]);
	            dragDelta.push(disp[1]);
	          } else {
	            dragDelta[0] += disp[0];
	            dragDelta[1] += disp[1];
	          }
	        }
	      }

	      // touchmove
	      {
	        triggerEvents(start || near, ['touchmove', 'tapdrag', 'vmousemove'], e, {
	          position: { x: now[0], y: now[1] }
	        });

	        if ((!start || !start.grabbed()) && near != last) {
	          if (last) {
	            last.emit({ originalEvent: e, type: 'tapdragout', position: { x: now[0], y: now[1] } });
	          }
	          if (near) {
	            near.emit({ originalEvent: e, type: 'tapdragover', position: { x: now[0], y: now[1] } });
	          }
	        }

	        r.touchData.last = near;
	      }

	      // check to cancel taphold
	      if (capture) {
	        for (var i = 0; i < now.length; i++) {
	          if (now[i] && r.touchData.startPosition[i] && isOverThresholdDrag) {

	            r.touchData.singleTouchMoved = true;
	          }
	        }
	      }

	      // panning
	      if (capture && (start == null || start.isEdge()) && cy.panningEnabled() && cy.userPanningEnabled()) {

	        var allowPassthrough = allowPanningPassthrough(start, r.touchData.starts);

	        if (allowPassthrough) {
	          e.preventDefault();

	          if (r.swipePanning) {
	            cy.panBy({
	              x: disp[0] * zoom,
	              y: disp[1] * zoom
	            });
	          } else if (isOverThresholdDrag) {
	            r.swipePanning = true;

	            cy.panBy({
	              x: dx * zoom,
	              y: dy * zoom
	            });

	            if (start) {
	              start.unactivate();

	              if (!r.data.bgActivePosistion) {
	                r.data.bgActivePosistion = math.array2point(r.touchData.startPosition);
	              }

	              r.redrawHint('select', true);

	              r.touchData.start = null;
	            }
	          }
	        }

	        // Re-project
	        var pos = r.projectIntoViewport(e.touches[0].clientX, e.touches[0].clientY);
	        now[0] = pos[0];now[1] = pos[1];
	      }
	    }

	    for (var j = 0; j < now.length; j++) {
	      earlier[j] = now[j];
	    }
	    //r.redraw();

	    // the active bg indicator should be removed when making a swipe that is neither for dragging nodes or panning
	    if (capture && e.touches.length > 0 && !r.hoverData.draggingEles && !r.swipePanning && r.data.bgActivePosistion != null) {
	      r.data.bgActivePosistion = undefined;
	      r.redrawHint('select', true);
	      r.redraw();
	    }
	  }, false);
	  var touchcancelHandler;
	  r.registerBinding(window, 'touchcancel', touchcancelHandler = function touchcancelHandler(e) {
	    // eslint-disable-line no-undef
	    var start = r.touchData.start;

	    r.touchData.capture = false;

	    if (start) {
	      start.unactivate();
	    }
	  });

	  var touchendHandler;
	  r.registerBinding(window, 'touchend', touchendHandler = function touchendHandler(e) {
	    // eslint-disable-line no-undef
	    var start = r.touchData.start;

	    var capture = r.touchData.capture;

	    if (capture) {
	      if (e.touches.length === 0) {
	        r.touchData.capture = false;
	      }

	      e.preventDefault();
	    } else {
	      return;
	    }

	    var select = r.selection;

	    r.swipePanning = false;
	    r.hoverData.draggingEles = false;

	    var cy = r.cy;
	    var zoom = cy.zoom();
	    var now = r.touchData.now;
	    var earlier = r.touchData.earlier;

	    if (e.touches[0]) {
	      var pos = r.projectIntoViewport(e.touches[0].clientX, e.touches[0].clientY);now[0] = pos[0];now[1] = pos[1];
	    }
	    if (e.touches[1]) {
	      var pos = r.projectIntoViewport(e.touches[1].clientX, e.touches[1].clientY);now[2] = pos[0];now[3] = pos[1];
	    }
	    if (e.touches[2]) {
	      var pos = r.projectIntoViewport(e.touches[2].clientX, e.touches[2].clientY);now[4] = pos[0];now[5] = pos[1];
	    }

	    if (start) {
	      start.unactivate();
	    }

	    var ctxTapend;
	    if (r.touchData.cxt) {
	      ctxTapend = {
	        originalEvent: e,
	        type: 'cxttapend',
	        position: { x: now[0], y: now[1] }
	      };

	      if (start) {
	        start.emit(ctxTapend);
	      } else {
	        cy.emit(ctxTapend);
	      }

	      if (!r.touchData.cxtDragged) {
	        var ctxTap = {
	          originalEvent: e,
	          type: 'cxttap',
	          position: { x: now[0], y: now[1] }
	        };

	        if (start) {
	          start.emit(ctxTap);
	        } else {
	          cy.emit(ctxTap);
	        }
	      }

	      if (r.touchData.start) {
	        r.touchData.start._private.grabbed = false;
	      }
	      r.touchData.cxt = false;
	      r.touchData.start = null;

	      r.redraw();
	      return;
	    }

	    // no more box selection if we don't have three fingers
	    if (!e.touches[2] && cy.boxSelectionEnabled() && r.touchData.selecting) {
	      r.touchData.selecting = false;

	      var box = cy.collection(r.getAllInBox(select[0], select[1], select[2], select[3]));

	      select[0] = undefined;
	      select[1] = undefined;
	      select[2] = undefined;
	      select[3] = undefined;
	      select[4] = 0;

	      r.redrawHint('select', true);

	      cy.emit('boxend');

	      var eleWouldBeSelected = function eleWouldBeSelected(ele) {
	        return ele.selectable() && !ele.selected();
	      };

	      box.emit('box').stdFilter(eleWouldBeSelected).select().emit('boxselect');

	      if (box.nonempty()) {
	        r.redrawHint('eles', true);
	      }

	      r.redraw();
	    }

	    if (start != null) {
	      start.unactivate();
	    }

	    if (e.touches[2]) {
	      r.data.bgActivePosistion = undefined;
	      r.redrawHint('select', true);
	    } else if (e.touches[1]) ; else if (e.touches[0]) ; else if (!e.touches[0]) {

	      r.data.bgActivePosistion = undefined;
	      r.redrawHint('select', true);

	      var draggedEles = r.dragData.touchDragEles;

	      if (start != null) {

	        var startWasGrabbed = start._private.grabbed;

	        freeDraggedElements(draggedEles);

	        r.redrawHint('drag', true);
	        r.redrawHint('eles', true);

	        if (startWasGrabbed) {
	          start.emit('free');
	        }

	        triggerEvents(start, ['touchend', 'tapend', 'vmouseup', 'tapdragout'], e, {
	          position: { x: now[0], y: now[1] }
	        });

	        start.unactivate();

	        r.touchData.start = null;
	      } else {
	        var near = r.findNearestElement(now[0], now[1], true, true);

	        triggerEvents(near, ['touchend', 'tapend', 'vmouseup', 'tapdragout'], e, {
	          position: { x: now[0], y: now[1] }
	        });
	      }

	      var dx = r.touchData.startPosition[0] - now[0];
	      var dx2 = dx * dx;
	      var dy = r.touchData.startPosition[1] - now[1];
	      var dy2 = dy * dy;
	      var dist2 = dx2 + dy2;
	      var rdist2 = dist2 * zoom * zoom;

	      // Prepare to select the currently touched node, only if it hasn't been dragged past a certain distance
	      if (start != null && !r.dragData.didDrag // didn't drag nodes around
	      && start._private.selectable && rdist2 < r.touchTapThreshold2 && !r.pinching // pinch to zoom should not affect selection
	      ) {

	          if (cy.selectionType() === 'single') {
	            cy.$(':selected').unmerge(start).unselect();
	            start.select();
	          } else {
	            if (start.selected()) {
	              start.unselect();
	            } else {
	              start.select();
	            }
	          }

	          r.redrawHint('eles', true);
	        }

	      // Tap event, roughly same as mouse click event for touch
	      if (!r.touchData.singleTouchMoved) {
	        triggerEvents(start, ['tap', 'vclick'], e, {
	          position: { x: now[0], y: now[1] }
	        });
	      }

	      r.touchData.singleTouchMoved = true;
	    }

	    for (var j = 0; j < now.length; j++) {
	      earlier[j] = now[j];
	    }

	    r.dragData.didDrag = false; // reset for next mousedown

	    if (e.touches.length === 0) {
	      r.touchData.dragDelta = [];
	      r.touchData.startPosition = null;
	      r.touchData.startGPosition = null;
	    }

	    if (e.touches.length < 2) {
	      r.pinching = false;
	      r.redrawHint('eles', true);
	      r.redraw();
	    }

	    //r.redraw();
	  }, false);

	  // fallback compatibility layer for ms pointer events
	  if (typeof TouchEvent === 'undefined') {

	    var pointers = [];

	    var makeTouch = function makeTouch(e) {
	      return {
	        clientX: e.clientX,
	        clientY: e.clientY,
	        force: 1,
	        identifier: e.pointerId,
	        pageX: e.pageX,
	        pageY: e.pageY,
	        radiusX: e.width / 2,
	        radiusY: e.height / 2,
	        screenX: e.screenX,
	        screenY: e.screenY,
	        target: e.target
	      };
	    };

	    var makePointer = function makePointer(e) {
	      return {
	        event: e,
	        touch: makeTouch(e)
	      };
	    };

	    var addPointer = function addPointer(e) {
	      pointers.push(makePointer(e));
	    };

	    var removePointer = function removePointer(e) {
	      for (var i = 0; i < pointers.length; i++) {
	        var p = pointers[i];

	        if (p.event.pointerId === e.pointerId) {
	          pointers.splice(i, 1);
	          return;
	        }
	      }
	    };

	    var updatePointer = function updatePointer(e) {
	      var p = pointers.filter(function (p) {
	        return p.event.pointerId === e.pointerId;
	      })[0];

	      p.event = e;
	      p.touch = makeTouch(e);
	    };

	    var addTouchesToEvent = function addTouchesToEvent(e) {
	      e.touches = pointers.map(function (p) {
	        return p.touch;
	      });
	    };

	    var pointerIsMouse = function pointerIsMouse(e) {
	      return e.pointerType === 'mouse' || e.pointerType === 4;
	    };

	    r.registerBinding(r.container, 'pointerdown', function (e) {
	      if (pointerIsMouse(e)) {
	        return;
	      } // mouse already handled

	      e.preventDefault();

	      addPointer(e);

	      addTouchesToEvent(e);
	      touchstartHandler(e);
	    });

	    r.registerBinding(r.container, 'pointerup', function (e) {
	      if (pointerIsMouse(e)) {
	        return;
	      } // mouse already handled

	      removePointer(e);

	      addTouchesToEvent(e);
	      touchendHandler(e);
	    });

	    r.registerBinding(r.container, 'pointercancel', function (e) {
	      if (pointerIsMouse(e)) {
	        return;
	      } // mouse already handled

	      removePointer(e);

	      addTouchesToEvent(e);
	      touchcancelHandler(e);
	    });

	    r.registerBinding(r.container, 'pointermove', function (e) {
	      if (pointerIsMouse(e)) {
	        return;
	      } // mouse already handled

	      e.preventDefault();

	      updatePointer(e);

	      addTouchesToEvent(e);
	      touchmoveHandler(e);
	    });
	  }
	};

	module.exports = BRp;

	/***/ }),
	/* 121 */
	/***/ (function(module, exports, __webpack_require__) {


	var math = __webpack_require__(2);

	var BRp = {};

	BRp.generatePolygon = function (name, points) {
	  return this.nodeShapes[name] = {
	    renderer: this,

	    name: name,

	    points: points,

	    draw: function draw(context, centerX, centerY, width, height) {
	      this.renderer.nodeShapeImpl('polygon', context, centerX, centerY, width, height, this.points);
	    },

	    intersectLine: function intersectLine(nodeX, nodeY, width, height, x, y, padding) {
	      return math.polygonIntersectLine(x, y, this.points, nodeX, nodeY, width / 2, height / 2, padding);
	    },

	    checkPoint: function checkPoint(x, y, padding, width, height, centerX, centerY) {
	      return math.pointInsidePolygon(x, y, this.points, centerX, centerY, width, height, [0, -1], padding);
	    }
	  };
	};

	BRp.generateEllipse = function () {
	  return this.nodeShapes['ellipse'] = {
	    renderer: this,

	    name: 'ellipse',

	    draw: function draw(context, centerX, centerY, width, height) {
	      this.renderer.nodeShapeImpl(this.name, context, centerX, centerY, width, height);
	    },

	    intersectLine: function intersectLine(nodeX, nodeY, width, height, x, y, padding) {
	      return math.intersectLineEllipse(x, y, nodeX, nodeY, width / 2 + padding, height / 2 + padding);
	    },

	    checkPoint: function checkPoint(x, y, padding, width, height, centerX, centerY) {
	      return math.checkInEllipse(x, y, width, height, centerX, centerY, padding);
	    }
	  };
	};

	BRp.generateRoundRectangle = function () {
	  return this.nodeShapes['roundrectangle'] = {
	    renderer: this,

	    name: 'roundrectangle',

	    points: math.generateUnitNgonPointsFitToSquare(4, 0),

	    draw: function draw(context, centerX, centerY, width, height) {
	      this.renderer.nodeShapeImpl(this.name, context, centerX, centerY, width, height);
	    },

	    intersectLine: function intersectLine(nodeX, nodeY, width, height, x, y, padding) {
	      return math.roundRectangleIntersectLine(x, y, nodeX, nodeY, width, height, padding);
	    },

	    checkPoint: function checkPoint(x, y, padding, width, height, centerX, centerY) {

	      var cornerRadius = math.getRoundRectangleRadius(width, height);
	      var diam = cornerRadius * 2;

	      // Check hBox
	      if (math.pointInsidePolygon(x, y, this.points, centerX, centerY, width, height - diam, [0, -1], padding)) {
	        return true;
	      }

	      // Check vBox
	      if (math.pointInsidePolygon(x, y, this.points, centerX, centerY, width - diam, height, [0, -1], padding)) {
	        return true;
	      }

	      // Check top left quarter circle
	      if (math.checkInEllipse(x, y, diam, diam, centerX - width / 2 + cornerRadius, centerY - height / 2 + cornerRadius, padding)) {

	        return true;
	      }

	      // Check top right quarter circle
	      if (math.checkInEllipse(x, y, diam, diam, centerX + width / 2 - cornerRadius, centerY - height / 2 + cornerRadius, padding)) {

	        return true;
	      }

	      // Check bottom right quarter circle
	      if (math.checkInEllipse(x, y, diam, diam, centerX + width / 2 - cornerRadius, centerY + height / 2 - cornerRadius, padding)) {

	        return true;
	      }

	      // Check bottom left quarter circle
	      if (math.checkInEllipse(x, y, diam, diam, centerX - width / 2 + cornerRadius, centerY + height / 2 - cornerRadius, padding)) {

	        return true;
	      }

	      return false;
	    }
	  };
	};

	BRp.generateCutRectangle = function () {
	  return this.nodeShapes['cutrectangle'] = {
	    renderer: this,

	    name: 'cutrectangle',

	    cornerLength: math.getCutRectangleCornerLength(),

	    points: math.generateUnitNgonPointsFitToSquare(4, 0),

	    draw: function draw(context, centerX, centerY, width, height) {
	      this.renderer.nodeShapeImpl(this.name, context, centerX, centerY, width, height);
	    },

	    generateCutTrianglePts: function generateCutTrianglePts(width, height, centerX, centerY) {
	      var cl = this.cornerLength;
	      var hh = height / 2;
	      var hw = width / 2;
	      var xBegin = centerX - hw;
	      var xEnd = centerX + hw;
	      var yBegin = centerY - hh;
	      var yEnd = centerY + hh;

	      // points are in clockwise order, inner (imaginary) triangle pt on [4, 5]
	      return {
	        topLeft: [xBegin, yBegin + cl, xBegin + cl, yBegin, xBegin + cl, yBegin + cl],
	        topRight: [xEnd - cl, yBegin, xEnd, yBegin + cl, xEnd - cl, yBegin + cl],
	        bottomRight: [xEnd, yEnd - cl, xEnd - cl, yEnd, xEnd - cl, yEnd - cl],
	        bottomLeft: [xBegin + cl, yEnd, xBegin, yEnd - cl, xBegin + cl, yEnd - cl]
	      };
	    },

	    intersectLine: function intersectLine(nodeX, nodeY, width, height, x, y, padding) {
	      var cPts = this.generateCutTrianglePts(width + 2 * padding, height + 2 * padding, nodeX, nodeY);
	      var pts = [].concat.apply([], [cPts.topLeft.splice(0, 4), cPts.topRight.splice(0, 4), cPts.bottomRight.splice(0, 4), cPts.bottomLeft.splice(0, 4)]);

	      return math.polygonIntersectLine(x, y, pts, nodeX, nodeY);
	    },

	    checkPoint: function checkPoint(x, y, padding, width, height, centerX, centerY) {
	      // Check hBox
	      if (math.pointInsidePolygon(x, y, this.points, centerX, centerY, width, height - 2 * this.cornerLength, [0, -1], padding)) {
	        return true;
	      }

	      // Check vBox
	      if (math.pointInsidePolygon(x, y, this.points, centerX, centerY, width - 2 * this.cornerLength, height, [0, -1], padding)) {
	        return true;
	      }
	      var cutTrianglePts = this.generateCutTrianglePts(width, height, centerX, centerY);
	      return math.pointInsidePolygonPoints(x, y, cutTrianglePts.topLeft) || math.pointInsidePolygonPoints(x, y, cutTrianglePts.topRight) || math.pointInsidePolygonPoints(x, y, cutTrianglePts.bottomRight) || math.pointInsidePolygonPoints(x, y, cutTrianglePts.bottomLeft);
	    }

	  };
	};

	BRp.generateBarrel = function () {
	  return this.nodeShapes['barrel'] = {
	    renderer: this,

	    name: 'barrel',

	    points: math.generateUnitNgonPointsFitToSquare(4, 0),

	    draw: function draw(context, centerX, centerY, width, height) {
	      this.renderer.nodeShapeImpl(this.name, context, centerX, centerY, width, height);
	    },

	    intersectLine: function intersectLine(nodeX, nodeY, width, height, x, y, padding) {
	      // use two fixed t values for the bezier curve approximation

	      var t0 = 0.15;
	      var t1 = 0.5;
	      var t2 = 0.85;

	      var bPts = this.generateBarrelBezierPts(width + 2 * padding, height + 2 * padding, nodeX, nodeY);

	      var approximateBarrelCurvePts = function approximateBarrelCurvePts(pts) {
	        // approximate curve pts based on the two t values
	        var m0 = math.qbezierPtAt({ x: pts[0], y: pts[1] }, { x: pts[2], y: pts[3] }, { x: pts[4], y: pts[5] }, t0);
	        var m1 = math.qbezierPtAt({ x: pts[0], y: pts[1] }, { x: pts[2], y: pts[3] }, { x: pts[4], y: pts[5] }, t1);
	        var m2 = math.qbezierPtAt({ x: pts[0], y: pts[1] }, { x: pts[2], y: pts[3] }, { x: pts[4], y: pts[5] }, t2);

	        return [pts[0], pts[1], m0.x, m0.y, m1.x, m1.y, m2.x, m2.y, pts[4], pts[5]];
	      };

	      var pts = [].concat(approximateBarrelCurvePts(bPts.topLeft), approximateBarrelCurvePts(bPts.topRight), approximateBarrelCurvePts(bPts.bottomRight), approximateBarrelCurvePts(bPts.bottomLeft));

	      return math.polygonIntersectLine(x, y, pts, nodeX, nodeY);
	    },

	    generateBarrelBezierPts: function generateBarrelBezierPts(width, height, centerX, centerY) {
	      var hh = height / 2;
	      var hw = width / 2;
	      var xBegin = centerX - hw;
	      var xEnd = centerX + hw;
	      var yBegin = centerY - hh;
	      var yEnd = centerY + hh;

	      var curveConstants = math.getBarrelCurveConstants(width, height);
	      var hOffset = curveConstants.heightOffset;
	      var wOffset = curveConstants.widthOffset;
	      var ctrlPtXOffset = curveConstants.ctrlPtOffsetPct * width;

	      // points are in clockwise order, inner (imaginary) control pt on [4, 5]
	      var pts = {
	        topLeft: [xBegin, yBegin + hOffset, xBegin + ctrlPtXOffset, yBegin, xBegin + wOffset, yBegin],
	        topRight: [xEnd - wOffset, yBegin, xEnd - ctrlPtXOffset, yBegin, xEnd, yBegin + hOffset],
	        bottomRight: [xEnd, yEnd - hOffset, xEnd - ctrlPtXOffset, yEnd, xEnd - wOffset, yEnd],
	        bottomLeft: [xBegin + wOffset, yEnd, xBegin + ctrlPtXOffset, yEnd, xBegin, yEnd - hOffset]
	      };

	      pts.topLeft.isTop = true;
	      pts.topRight.isTop = true;
	      pts.bottomLeft.isBottom = true;
	      pts.bottomRight.isBottom = true;

	      return pts;
	    },

	    checkPoint: function checkPoint(x, y, padding, width, height, centerX, centerY) {

	      var curveConstants = math.getBarrelCurveConstants(width, height);
	      var hOffset = curveConstants.heightOffset;
	      var wOffset = curveConstants.widthOffset;

	      // Check hBox
	      if (math.pointInsidePolygon(x, y, this.points, centerX, centerY, width, height - 2 * hOffset, [0, -1], padding)) {
	        return true;
	      }

	      // Check vBox
	      if (math.pointInsidePolygon(x, y, this.points, centerX, centerY, width - 2 * wOffset, height, [0, -1], padding)) {
	        return true;
	      }

	      var barrelCurvePts = this.generateBarrelBezierPts(width, height, centerX, centerY);

	      var getCurveT = function getCurveT(x, y, curvePts) {
	        var x0 = curvePts[4];
	        var x1 = curvePts[2];
	        var x2 = curvePts[0];
	        var y0 = curvePts[5];
	        // var y1 = curvePts[ 3 ];
	        var y2 = curvePts[1];

	        var xMin = Math.min(x0, x2);
	        var xMax = Math.max(x0, x2);
	        var yMin = Math.min(y0, y2);
	        var yMax = Math.max(y0, y2);

	        if (xMin <= x && x <= xMax && yMin <= y && y <= yMax) {
	          var coeff = math.bezierPtsToQuadCoeff(x0, x1, x2);
	          var roots = math.solveQuadratic(coeff[0], coeff[1], coeff[2], x);

	          var validRoots = roots.filter(function (r) {
	            return 0 <= r && r <= 1;
	          });

	          if (validRoots.length > 0) {
	            return validRoots[0];
	          }
	        }
	        return null;
	      };

	      var curveRegions = Object.keys(barrelCurvePts);
	      for (var i = 0; i < curveRegions.length; i++) {
	        var corner = curveRegions[i];
	        var cornerPts = barrelCurvePts[corner];
	        var t = getCurveT(x, y, cornerPts);

	        if (t == null) {
	          continue;
	        }

	        var y0 = cornerPts[5];
	        var y1 = cornerPts[3];
	        var y2 = cornerPts[1];
	        var bezY = math.qbezierAt(y0, y1, y2, t);

	        if (cornerPts.isTop && bezY <= y) {
	          return true;
	        }
	        if (cornerPts.isBottom && y <= bezY) {
	          return true;
	        }
	      }
	      return false;
	    }
	  };
	};

	BRp.generateBottomRoundrectangle = function () {
	  return this.nodeShapes['bottomroundrectangle'] = {
	    renderer: this,

	    name: 'bottomroundrectangle',

	    points: math.generateUnitNgonPointsFitToSquare(4, 0),

	    draw: function draw(context, centerX, centerY, width, height) {
	      this.renderer.nodeShapeImpl(this.name, context, centerX, centerY, width, height);
	    },

	    intersectLine: function intersectLine(nodeX, nodeY, width, height, x, y, padding) {
	      var topStartX = nodeX - (width / 2 + padding);
	      var topStartY = nodeY - (height / 2 + padding);
	      var topEndY = topStartY;
	      var topEndX = nodeX + (width / 2 + padding);

	      var topIntersections = math.finiteLinesIntersect(x, y, nodeX, nodeY, topStartX, topStartY, topEndX, topEndY, false);
	      if (topIntersections.length > 0) {
	        return topIntersections;
	      }

	      return math.roundRectangleIntersectLine(x, y, nodeX, nodeY, width, height, padding);
	    },

	    checkPoint: function checkPoint(x, y, padding, width, height, centerX, centerY) {

	      var cornerRadius = math.getRoundRectangleRadius(width, height);
	      var diam = 2 * cornerRadius;

	      // Check hBox
	      if (math.pointInsidePolygon(x, y, this.points, centerX, centerY, width, height - diam, [0, -1], padding)) {
	        return true;
	      }

	      // Check vBox
	      if (math.pointInsidePolygon(x, y, this.points, centerX, centerY, width - diam, height, [0, -1], padding)) {
	        return true;
	      }

	      // check non-rounded top side
	      var outerWidth = width / 2 + 2 * padding;
	      var outerHeight = height / 2 + 2 * padding;
	      var points = [centerX - outerWidth, centerY - outerHeight, centerX - outerWidth, centerY, centerX + outerWidth, centerY, centerX + outerWidth, centerY - outerHeight];
	      if (math.pointInsidePolygonPoints(x, y, points)) {
	        return true;
	      }

	      // Check bottom right quarter circle
	      if (math.checkInEllipse(x, y, diam, diam, centerX + width / 2 - cornerRadius, centerY + height / 2 - cornerRadius, padding)) {

	        return true;
	      }

	      // Check bottom left quarter circle
	      if (math.checkInEllipse(x, y, diam, diam, centerX - width / 2 + cornerRadius, centerY + height / 2 - cornerRadius, padding)) {

	        return true;
	      }

	      return false;
	    }
	  };
	};

	BRp.registerNodeShapes = function () {
	  var nodeShapes = this.nodeShapes = {};
	  var renderer = this;

	  this.generateEllipse();

	  this.generatePolygon('triangle', math.generateUnitNgonPointsFitToSquare(3, 0));

	  this.generatePolygon('rectangle', math.generateUnitNgonPointsFitToSquare(4, 0));
	  nodeShapes['square'] = nodeShapes['rectangle'];

	  this.generateRoundRectangle();

	  this.generateCutRectangle();

	  this.generateBarrel();

	  this.generateBottomRoundrectangle();

	  this.generatePolygon('diamond', [0, 1, 1, 0, 0, -1, -1, 0]);

	  this.generatePolygon('pentagon', math.generateUnitNgonPointsFitToSquare(5, 0));

	  this.generatePolygon('hexagon', math.generateUnitNgonPointsFitToSquare(6, 0));

	  this.generatePolygon('heptagon', math.generateUnitNgonPointsFitToSquare(7, 0));

	  this.generatePolygon('octagon', math.generateUnitNgonPointsFitToSquare(8, 0));

	  var star5Points = new Array(20);
	  {
	    var outerPoints = math.generateUnitNgonPoints(5, 0);
	    var innerPoints = math.generateUnitNgonPoints(5, Math.PI / 5);

	    // Outer radius is 1; inner radius of star is smaller
	    var innerRadius = 0.5 * (3 - Math.sqrt(5));
	    innerRadius *= 1.57;

	    for (var i = 0; i < innerPoints.length / 2; i++) {
	      innerPoints[i * 2] *= innerRadius;
	      innerPoints[i * 2 + 1] *= innerRadius;
	    }

	    for (var i = 0; i < 20 / 4; i++) {
	      star5Points[i * 4] = outerPoints[i * 2];
	      star5Points[i * 4 + 1] = outerPoints[i * 2 + 1];

	      star5Points[i * 4 + 2] = innerPoints[i * 2];
	      star5Points[i * 4 + 3] = innerPoints[i * 2 + 1];
	    }
	  }

	  star5Points = math.fitPolygonToSquare(star5Points);

	  this.generatePolygon('star', star5Points);

	  this.generatePolygon('vee', [-1, -1, 0, -0.333, 1, -1, 0, 1]);

	  this.generatePolygon('rhomboid', [-1, -1, 0.333, -1, 1, 1, -0.333, 1]);

	  this.generatePolygon('concavehexagon', [-1, -0.95, -0.75, 0, -1, 0.95, 1, 0.95, 0.75, 0, 1, -0.95]);

	  this.generatePolygon('tag', [-1, -1, 0.25, -1, 1, 0, 0.25, 1, -1, 1]);

	  nodeShapes.makePolygon = function (points) {

	    // use caching on user-specified polygons so they are as fast as native shapes

	    var key = points.join('$');
	    var name = 'polygon-' + key;
	    var shape;

	    if (shape = this[name]) {
	      // got cached shape
	      return shape;
	    }

	    // create and cache new shape
	    return renderer.generatePolygon(name, points);
	  };
	};

	module.exports = BRp;

	/***/ }),
	/* 122 */
	/***/ (function(module, exports, __webpack_require__) {


	var util = __webpack_require__(1);

	var BRp = {};

	BRp.timeToRender = function () {
	  return this.redrawTotalTime / this.redrawCount;
	};

	BRp.redraw = function (options) {
	  options = options || util.staticEmptyObject();

	  var r = this;

	  if (r.averageRedrawTime === undefined) {
	    r.averageRedrawTime = 0;
	  }
	  if (r.lastRedrawTime === undefined) {
	    r.lastRedrawTime = 0;
	  }
	  if (r.lastDrawTime === undefined) {
	    r.lastDrawTime = 0;
	  }

	  r.requestedFrame = true;
	  r.renderOptions = options;
	};

	BRp.beforeRender = function (fn, priority) {
	  // the renderer can't add tick callbacks when destroyed
	  if (this.destroyed) {
	    return;
	  }

	  priority = priority || 0;

	  var cbs = this.beforeRenderCallbacks;

	  cbs.push({ fn: fn, priority: priority });

	  // higher priority callbacks executed first
	  cbs.sort(function (a, b) {
	    return b.priority - a.priority;
	  });
	};

	var beforeRenderCallbacks = function beforeRenderCallbacks(r, willDraw, startTime) {
	  var cbs = r.beforeRenderCallbacks;

	  for (var i = 0; i < cbs.length; i++) {
	    cbs[i].fn(willDraw, startTime);
	  }
	};

	BRp.startRenderLoop = function () {
	  var r = this;

	  if (r.renderLoopStarted) {
	    return;
	  } else {
	    r.renderLoopStarted = true;
	  }

	  var renderFn = function renderFn(requestTime) {
	    if (r.destroyed) {
	      return;
	    }

	    if (r.requestedFrame && !r.skipFrame) {
	      beforeRenderCallbacks(r, true, requestTime);

	      var startTime = util.performanceNow();

	      r.render(r.renderOptions);

	      var endTime = r.lastDrawTime = util.performanceNow();

	      if (r.averageRedrawTime === undefined) {
	        r.averageRedrawTime = endTime - startTime;
	      }

	      if (r.redrawCount === undefined) {
	        r.redrawCount = 0;
	      }

	      r.redrawCount++;

	      if (r.redrawTotalTime === undefined) {
	        r.redrawTotalTime = 0;
	      }

	      var duration = endTime - startTime;

	      r.redrawTotalTime += duration;
	      r.lastRedrawTime = duration;

	      // use a weighted average with a bias from the previous average so we don't spike so easily
	      r.averageRedrawTime = r.averageRedrawTime / 2 + duration / 2;

	      r.requestedFrame = false;
	    } else {
	      beforeRenderCallbacks(r, false, requestTime);
	    }

	    r.skipFrame = false;

	    util.requestAnimationFrame(renderFn);
	  };

	  util.requestAnimationFrame(renderFn);
	};

	module.exports = BRp;

	/***/ }),
	/* 123 */
	/***/ (function(module, exports, __webpack_require__) {


	/*
	The canvas renderer was written by Yue Dong.

	Modifications tracked on Github.
	*/

	var util = __webpack_require__(1);
	var is = __webpack_require__(0);
	var ElementTextureCache = __webpack_require__(124);
	var LayeredTextureCache = __webpack_require__(125);

	var CR = CanvasRenderer;
	var CRp = CanvasRenderer.prototype;

	CRp.CANVAS_LAYERS = 3;
	//
	CRp.SELECT_BOX = 0;
	CRp.DRAG = 1;
	CRp.NODE = 2;

	CRp.BUFFER_COUNT = 3;
	//
	CRp.TEXTURE_BUFFER = 0;
	CRp.MOTIONBLUR_BUFFER_NODE = 1;
	CRp.MOTIONBLUR_BUFFER_DRAG = 2;

	function CanvasRenderer(options) {
	  var r = this;

	  r.data = {
	    canvases: new Array(CRp.CANVAS_LAYERS),
	    contexts: new Array(CRp.CANVAS_LAYERS),
	    canvasNeedsRedraw: new Array(CRp.CANVAS_LAYERS),

	    bufferCanvases: new Array(CRp.BUFFER_COUNT),
	    bufferContexts: new Array(CRp.CANVAS_LAYERS)
	  };

	  var tapHlOff = '-webkit-tap-highlight-color: rgba(0,0,0,0);';

	  r.data.canvasContainer = document.createElement('div'); // eslint-disable-line no-undef
	  var containerStyle = r.data.canvasContainer.style;
	  r.data.canvasContainer.setAttribute('style', tapHlOff);
	  containerStyle.position = 'relative';
	  containerStyle.zIndex = '0';
	  containerStyle.overflow = 'hidden';

	  var container = options.cy.container();
	  container.appendChild(r.data.canvasContainer);

	  if ((container.getAttribute('style') || '').indexOf(tapHlOff) < 0) {
	    container.setAttribute('style', (container.getAttribute('style') || '') + tapHlOff);
	  }

	  for (var i = 0; i < CRp.CANVAS_LAYERS; i++) {
	    var canvas = r.data.canvases[i] = document.createElement('canvas'); // eslint-disable-line no-undef
	    r.data.contexts[i] = canvas.getContext('2d');
	    canvas.setAttribute('style', '-webkit-user-select: none; -moz-user-select: -moz-none; user-select: none; -webkit-tap-highlight-color: rgba(0,0,0,0); outline-style: none;' + (is.ms() ? ' -ms-touch-action: none; touch-action: none; ' : ''));
	    canvas.style.position = 'absolute';
	    canvas.setAttribute('data-id', 'layer' + i);
	    canvas.style.zIndex = String(CRp.CANVAS_LAYERS - i);
	    r.data.canvasContainer.appendChild(canvas);

	    r.data.canvasNeedsRedraw[i] = false;
	  }
	  r.data.topCanvas = r.data.canvases[0];

	  r.data.canvases[CRp.NODE].setAttribute('data-id', 'layer' + CRp.NODE + '-node');
	  r.data.canvases[CRp.SELECT_BOX].setAttribute('data-id', 'layer' + CRp.SELECT_BOX + '-selectbox');
	  r.data.canvases[CRp.DRAG].setAttribute('data-id', 'layer' + CRp.DRAG + '-drag');

	  for (var i = 0; i < CRp.BUFFER_COUNT; i++) {
	    r.data.bufferCanvases[i] = document.createElement('canvas'); // eslint-disable-line no-undef
	    r.data.bufferContexts[i] = r.data.bufferCanvases[i].getContext('2d');
	    r.data.bufferCanvases[i].style.position = 'absolute';
	    r.data.bufferCanvases[i].setAttribute('data-id', 'buffer' + i);
	    r.data.bufferCanvases[i].style.zIndex = String(-i - 1);
	    r.data.bufferCanvases[i].style.visibility = 'hidden';
	    //r.data.canvasContainer.appendChild(r.data.bufferCanvases[i]);
	  }

	  r.pathsEnabled = true;

	  r.data.eleTxrCache = new ElementTextureCache(r);
	  r.data.lyrTxrCache = new LayeredTextureCache(r, r.data.eleTxrCache);

	  r.onUpdateEleCalcs(function invalidateTextureCaches(willDraw, eles) {
	    for (var i = 0; i < eles.length; i++) {
	      var ele = eles[i];
	      var rs = ele._private.rstyle;
	      var de = rs.dirtyEvents;

	      if (ele.isNode() && de && de.length === 1 && de['position']) ; else {
	        r.data.eleTxrCache.invalidateElement(ele);

	        // NB this block of code should not be ported to 3.3 (unstable branch).
	        // - This check is unneccesary in 3.3 as caches will be stored without respect to opacity.
	        // - This fix may result in lowered performance for compound graphs.
	        // - Ref : Opacity of child node is not updated for certain zoom levels after parent opacity is overriden #2078
	        if (ele.isParent() && de['style']) {
	          var op1 = rs.prevParentOpacity;
	          var op2 = ele.pstyle('opacity').pfValue;

	          rs.prevParentOpacity = op2;

	          if (op1 !== op2) {
	            var descs = ele.descendants();

	            for (var j = 0; j < descs.length; j++) {
	              r.data.eleTxrCache.invalidateElement(descs[j]);
	            }
	          }
	        }
	      }
	    }

	    if (eles.length > 0) {
	      r.data.lyrTxrCache.invalidateElements(eles);
	    }
	  });
	}

	CRp.redrawHint = function (group, bool) {
	  var r = this;

	  switch (group) {
	    case 'eles':
	      r.data.canvasNeedsRedraw[CRp.NODE] = bool;
	      break;
	    case 'drag':
	      r.data.canvasNeedsRedraw[CRp.DRAG] = bool;
	      break;
	    case 'select':
	      r.data.canvasNeedsRedraw[CRp.SELECT_BOX] = bool;
	      break;
	  }
	};

	// whether to use Path2D caching for drawing
	var pathsImpld = typeof Path2D !== 'undefined';

	CRp.path2dEnabled = function (on) {
	  if (on === undefined) {
	    return this.pathsEnabled;
	  }

	  this.pathsEnabled = on ? true : false;
	};

	CRp.usePaths = function () {
	  return pathsImpld && this.pathsEnabled;
	};

	[__webpack_require__(126), __webpack_require__(127), __webpack_require__(128), __webpack_require__(129), __webpack_require__(130), __webpack_require__(131), __webpack_require__(132), __webpack_require__(133), __webpack_require__(134), __webpack_require__(135)].forEach(function (props) {
	  util.extend(CRp, props);
	});

	module.exports = CR;

	/***/ }),
	/* 124 */
	/***/ (function(module, exports, __webpack_require__) {


	var math = __webpack_require__(2);
	var util = __webpack_require__(1);
	var Heap = __webpack_require__(9);
	var defs = __webpack_require__(19);

	var minTxrH = 25; // the size of the texture cache for small height eles (special case)
	var txrStepH = 50; // the min size of the regular cache, and the size it increases with each step up
	var minLvl = -4; // when scaling smaller than that we don't need to re-render
	var maxLvl = 2; // when larger than this scale just render directly (caching is not helpful)
	var maxZoom = 3.99; // beyond this zoom level, layered textures are not used
	var eleTxrSpacing = 8; // spacing between elements on textures to avoid blitting overlaps
	var defTxrWidth = 1024; // default/minimum texture width
	var maxTxrW = 1024; // the maximum width of a texture
	var maxTxrH = 1024; // the maximum height of a texture
	var minUtility = 0.5; // if usage of texture is less than this, it is retired
	var maxFullness = 0.8; // fullness of texture after which queue removal is checked
	var maxFullnessChecks = 10; // dequeued after this many checks
	var deqCost = 0.15; // % of add'l rendering cost allowed for dequeuing ele caches each frame
	var deqAvgCost = 0.1; // % of add'l rendering cost compared to average overall redraw time
	var deqNoDrawCost = 0.9; // % of avg frame time that can be used for dequeueing when not drawing
	var deqFastCost = 0.9; // % of frame time to be used when >60fps
	var deqRedrawThreshold = 100; // time to batch redraws together from dequeueing to allow more dequeueing calcs to happen in the meanwhile
	var maxDeqSize = 1; // number of eles to dequeue and render at higher texture in each batch

	var getTxrReasons = {
	  dequeue: 'dequeue',
	  downscale: 'downscale',
	  highQuality: 'highQuality'
	};

	var ElementTextureCache = function ElementTextureCache(renderer) {
	  var self = this;

	  self.renderer = renderer;
	  self.onDequeues = [];

	  self.setupDequeueing();
	};

	var ETCp = ElementTextureCache.prototype;

	ETCp.reasons = getTxrReasons;

	// the list of textures in which new subtextures for elements can be placed
	ETCp.getTextureQueue = function (txrH) {
	  var self = this;
	  self.eleImgCaches = self.eleImgCaches || {};

	  return self.eleImgCaches[txrH] = self.eleImgCaches[txrH] || [];
	};

	// the list of usused textures which can be recycled (in use in texture queue)
	ETCp.getRetiredTextureQueue = function (txrH) {
	  var self = this;

	  var rtxtrQs = self.eleImgCaches.retired = self.eleImgCaches.retired || {};
	  var rtxtrQ = rtxtrQs[txrH] = rtxtrQs[txrH] || [];

	  return rtxtrQ;
	};

	// queue of element draw requests at different scale levels
	ETCp.getElementQueue = function () {
	  var self = this;

	  var q = self.eleCacheQueue = self.eleCacheQueue || new Heap(function (a, b) {
	    return b.reqs - a.reqs;
	  });

	  return q;
	};

	// queue of element draw requests at different scale levels (element id lookup)
	ETCp.getElementIdToQueue = function () {
	  var self = this;

	  var id2q = self.eleIdToCacheQueue = self.eleIdToCacheQueue || {};

	  return id2q;
	};

	ETCp.getElement = function (ele, bb, pxRatio, lvl, reason) {
	  var self = this;
	  var r = this.renderer;
	  var rs = ele._private.rscratch;
	  var zoom = r.cy.zoom();

	  if (bb.w === 0 || bb.h === 0 || !ele.visible()) {
	    return null;
	  }

	  if (lvl == null) {
	    lvl = Math.ceil(math.log2(zoom * pxRatio));
	  }

	  if (lvl < minLvl) {
	    lvl = minLvl;
	  } else if (zoom >= maxZoom || lvl > maxLvl) {
	    return null;
	  }

	  var scale = Math.pow(2, lvl);
	  var eleScaledH = bb.h * scale;
	  var eleScaledW = bb.w * scale;
	  var caches = rs.imgCaches = rs.imgCaches || {};
	  var eleCache = caches[lvl];

	  if (eleCache) {
	    return eleCache;
	  }

	  var txrH; // which texture height this ele belongs to

	  if (eleScaledH <= minTxrH) {
	    txrH = minTxrH;
	  } else if (eleScaledH <= txrStepH) {
	    txrH = txrStepH;
	  } else {
	    txrH = Math.ceil(eleScaledH / txrStepH) * txrStepH;
	  }

	  if (eleScaledH > maxTxrH || eleScaledW > maxTxrW || ele.isEdge() || ele.isParent()) {
	    return null; // caching large elements is not efficient
	  }

	  var txrQ = self.getTextureQueue(txrH);

	  // first try the second last one in case it has space at the end
	  var txr = txrQ[txrQ.length - 2];

	  var addNewTxr = function addNewTxr() {
	    return self.recycleTexture(txrH, eleScaledW) || self.addTexture(txrH, eleScaledW);
	  };

	  // try the last one if there is no second last one
	  if (!txr) {
	    txr = txrQ[txrQ.length - 1];
	  }

	  // if the last one doesn't exist, we need a first one
	  if (!txr) {
	    txr = addNewTxr();
	  }

	  // if there's no room in the current texture, we need a new one
	  if (txr.width - txr.usedWidth < eleScaledW) {
	    txr = addNewTxr();
	  }

	  var scaledLabelShown = r.eleTextBiggerThanMin(ele, scale);
	  var scalableFrom = function scalableFrom(otherCache) {
	    return otherCache && otherCache.scaledLabelShown === scaledLabelShown;
	  };

	  var deqing = reason && reason === getTxrReasons.dequeue;
	  var highQualityReq = reason && reason === getTxrReasons.highQuality;
	  var downscaleReq = reason && reason === getTxrReasons.downscale;

	  var higherCache; // the nearest cache with a higher level
	  for (var l = lvl + 1; l <= maxLvl; l++) {
	    var c = caches[l];

	    if (c) {
	      higherCache = c;break;
	    }
	  }

	  var oneUpCache = higherCache && higherCache.level === lvl + 1 ? higherCache : null;

	  var downscale = function downscale() {
	    txr.context.drawImage(oneUpCache.texture.canvas, oneUpCache.x, 0, oneUpCache.width, oneUpCache.height, txr.usedWidth, 0, eleScaledW, eleScaledH);
	  };

	  // reset ele area in texture
	  txr.context.setTransform(1, 0, 0, 1, 0, 0);
	  txr.context.clearRect(txr.usedWidth, 0, eleScaledW, txrH);

	  if (scalableFrom(oneUpCache)) {
	    // then we can relatively cheaply rescale the existing image w/o rerendering
	    downscale();
	  } else if (scalableFrom(higherCache)) {
	    // then use the higher cache for now and queue the next level down
	    // to cheaply scale towards the smaller level

	    if (highQualityReq) {
	      for (var l = higherCache.level; l > lvl; l--) {
	        oneUpCache = self.getElement(ele, bb, pxRatio, l, getTxrReasons.downscale);
	      }

	      downscale();
	    } else {
	      self.queueElement(ele, higherCache.level - 1);

	      return higherCache;
	    }
	  } else {

	    var lowerCache; // the nearest cache with a lower level
	    if (!deqing && !highQualityReq && !downscaleReq) {
	      for (var l = lvl - 1; l >= minLvl; l--) {
	        var c = caches[l];

	        if (c) {
	          lowerCache = c;break;
	        }
	      }
	    }

	    if (scalableFrom(lowerCache)) {
	      // then use the lower quality cache for now and queue the better one for later

	      self.queueElement(ele, lvl);

	      return lowerCache;
	    }

	    txr.context.translate(txr.usedWidth, 0);
	    txr.context.scale(scale, scale);

	    r.drawElement(txr.context, ele, bb, scaledLabelShown);

	    txr.context.scale(1 / scale, 1 / scale);
	    txr.context.translate(-txr.usedWidth, 0);
	  }

	  eleCache = caches[lvl] = {
	    ele: ele,
	    x: txr.usedWidth,
	    texture: txr,
	    level: lvl,
	    scale: scale,
	    width: eleScaledW,
	    height: eleScaledH,
	    scaledLabelShown: scaledLabelShown
	  };

	  txr.usedWidth += Math.ceil(eleScaledW + eleTxrSpacing);

	  txr.eleCaches.push(eleCache);

	  self.checkTextureFullness(txr);

	  return eleCache;
	};

	ETCp.invalidateElement = function (ele) {
	  var self = this;
	  var caches = ele._private.rscratch.imgCaches;

	  if (caches) {
	    for (var lvl = minLvl; lvl <= maxLvl; lvl++) {
	      var cache = caches[lvl];

	      if (cache) {
	        var txr = cache.texture;

	        // remove space from the texture it belongs to
	        txr.invalidatedWidth += cache.width;

	        // remove refs with the element
	        caches[lvl] = null;
	        util.removeFromArray(txr.eleCaches, cache);

	        // remove from queue since the old req was for the old state
	        self.removeFromQueue(ele);

	        // might have to remove the entire texture if it's not efficiently using its space
	        self.checkTextureUtility(txr);
	      }
	    }
	  }
	};

	ETCp.checkTextureUtility = function (txr) {
	  // invalidate all entries in the cache if the cache size is small
	  if (txr.invalidatedWidth >= minUtility * txr.width) {
	    this.retireTexture(txr);
	  }
	};

	ETCp.checkTextureFullness = function (txr) {
	  // if texture has been mostly filled and passed over several times, remove
	  // it from the queue so we don't need to waste time looking at it to put new things

	  var self = this;
	  var txrQ = self.getTextureQueue(txr.height);

	  if (txr.usedWidth / txr.width > maxFullness && txr.fullnessChecks >= maxFullnessChecks) {
	    util.removeFromArray(txrQ, txr);
	  } else {
	    txr.fullnessChecks++;
	  }
	};

	ETCp.retireTexture = function (txr) {
	  var self = this;
	  var txrH = txr.height;
	  var txrQ = self.getTextureQueue(txrH);

	  // retire the texture from the active / searchable queue:

	  util.removeFromArray(txrQ, txr);

	  txr.retired = true;

	  // remove the refs from the eles to the caches:

	  var eleCaches = txr.eleCaches;

	  for (var i = 0; i < eleCaches.length; i++) {
	    var eleCache = eleCaches[i];
	    var ele = eleCache.ele;
	    var lvl = eleCache.level;
	    var imgCaches = ele._private.rscratch.imgCaches;

	    if (imgCaches) {
	      imgCaches[lvl] = null;
	    }
	  }

	  util.clearArray(eleCaches);

	  // add the texture to a retired queue so it can be recycled in future:

	  var rtxtrQ = self.getRetiredTextureQueue(txrH);

	  rtxtrQ.push(txr);
	};

	ETCp.addTexture = function (txrH, minW) {
	  var self = this;
	  var txrQ = self.getTextureQueue(txrH);
	  var txr = {};

	  txrQ.push(txr);

	  txr.eleCaches = [];

	  txr.height = txrH;
	  txr.width = Math.max(defTxrWidth, minW);
	  txr.usedWidth = 0;
	  txr.invalidatedWidth = 0;
	  txr.fullnessChecks = 0;

	  txr.canvas = document.createElement('canvas'); // eslint-disable-line no-undef
	  txr.canvas.width = txr.width;
	  txr.canvas.height = txr.height;

	  txr.context = txr.canvas.getContext('2d');

	  return txr;
	};

	ETCp.recycleTexture = function (txrH, minW) {
	  var self = this;
	  var txrQ = self.getTextureQueue(txrH);
	  var rtxtrQ = self.getRetiredTextureQueue(txrH);

	  for (var i = 0; i < rtxtrQ.length; i++) {
	    var txr = rtxtrQ[i];

	    if (txr.width >= minW) {
	      txr.retired = false;

	      txr.usedWidth = 0;
	      txr.invalidatedWidth = 0;
	      txr.fullnessChecks = 0;

	      util.clearArray(txr.eleCaches);

	      txr.context.setTransform(1, 0, 0, 1, 0, 0);
	      txr.context.clearRect(0, 0, txr.width, txr.height);

	      util.removeFromArray(rtxtrQ, txr);
	      txrQ.push(txr);

	      return txr;
	    }
	  }
	};

	ETCp.queueElement = function (ele, lvl) {
	  var self = this;
	  var q = self.getElementQueue();
	  var id2q = self.getElementIdToQueue();
	  var id = ele.id();
	  var existingReq = id2q[id];

	  if (existingReq) {
	    // use the max lvl b/c in between lvls are cheap to make
	    existingReq.level = Math.max(existingReq.level, lvl);
	    existingReq.reqs++;

	    q.updateItem(existingReq);
	  } else {
	    var req = {
	      ele: ele,
	      level: lvl,
	      reqs: 1
	    };

	    q.push(req);

	    id2q[id] = req;
	  }
	};

	ETCp.dequeue = function (pxRatio /*, extent*/) {
	  var self = this;
	  var q = self.getElementQueue();
	  var id2q = self.getElementIdToQueue();
	  var dequeued = [];

	  for (var i = 0; i < maxDeqSize; i++) {
	    if (q.size() > 0) {
	      var req = q.pop();
	      var ele = req.ele;
	      var caches = ele._private.rscratch.imgCaches;

	      // dequeueing isn't necessary when an existing cache exists
	      if (caches[req.level] != null) {
	        continue;
	      }

	      id2q[ele.id()] = null;

	      dequeued.push(req);

	      var bb = ele.boundingBox();

	      self.getElement(ele, bb, pxRatio, req.level, getTxrReasons.dequeue);
	    } else {
	      break;
	    }
	  }

	  return dequeued;
	};

	ETCp.removeFromQueue = function (ele) {
	  var self = this;
	  var q = self.getElementQueue();
	  var id2q = self.getElementIdToQueue();
	  var req = id2q[ele.id()];

	  if (req != null) {
	    // bring to front of queue
	    req.reqs = util.MAX_INT;
	    q.updateItem(req);

	    q.pop(); // remove from queue

	    id2q[ele.id()] = null; // remove from lookup map
	  }
	};

	ETCp.onDequeue = function (fn) {
	  this.onDequeues.push(fn);
	};
	ETCp.offDequeue = function (fn) {
	  util.removeFromArray(this.onDequeues, fn);
	};

	ETCp.setupDequeueing = defs.setupDequeueing({
	  deqRedrawThreshold: deqRedrawThreshold,
	  deqCost: deqCost,
	  deqAvgCost: deqAvgCost,
	  deqNoDrawCost: deqNoDrawCost,
	  deqFastCost: deqFastCost,
	  deq: function deq(self, pxRatio, extent) {
	    return self.dequeue(pxRatio, extent);
	  },
	  onDeqd: function onDeqd(self, deqd) {
	    for (var i = 0; i < self.onDequeues.length; i++) {
	      var fn = self.onDequeues[i];

	      fn(deqd);
	    }
	  },
	  shouldRedraw: function shouldRedraw(self, deqd, pxRatio, extent) {
	    for (var i = 0; i < deqd.length; i++) {
	      var bb = deqd[i].ele.boundingBox();

	      if (math.boundingBoxesIntersect(bb, extent)) {
	        return true;
	      }
	    }

	    return false;
	  },
	  priority: function priority(self) {
	    return self.renderer.beforeRenderPriorities.eleTxrDeq;
	  }
	});

	module.exports = ElementTextureCache;

	/***/ }),
	/* 125 */
	/***/ (function(module, exports, __webpack_require__) {


	var util = __webpack_require__(1);
	var math = __webpack_require__(2);
	var Heap = __webpack_require__(9);
	var is = __webpack_require__(0);
	var defs = __webpack_require__(19);

	var defNumLayers = 1; // default number of layers to use
	var minLvl = -4; // when scaling smaller than that we don't need to re-render
	var maxLvl = 2; // when larger than this scale just render directly (caching is not helpful)
	var maxZoom = 3.99; // beyond this zoom level, layered textures are not used
	var deqRedrawThreshold = 50; // time to batch redraws together from dequeueing to allow more dequeueing calcs to happen in the meanwhile
	var refineEleDebounceTime = 50; // time to debounce sharper ele texture updates
	var deqCost = 0.15; // % of add'l rendering cost allowed for dequeuing ele caches each frame
	var deqAvgCost = 0.1; // % of add'l rendering cost compared to average overall redraw time
	var deqNoDrawCost = 0.9; // % of avg frame time that can be used for dequeueing when not drawing
	var deqFastCost = 0.9; // % of frame time to be used when >60fps
	var maxDeqSize = 1; // number of eles to dequeue and render at higher texture in each batch
	var invalidThreshold = 250; // time threshold for disabling b/c of invalidations
	var maxLayerArea = 4000 * 4000; // layers can't be bigger than this

	// var log = function(){ console.log.apply( console, arguments ); };

	var LayeredTextureCache = function LayeredTextureCache(renderer, eleTxrCache) {
	  var self = this;

	  var r = self.renderer = renderer;

	  self.layersByLevel = {}; // e.g. 2 => [ layer1, layer2, ..., layerN ]

	  self.firstGet = true;

	  self.lastInvalidationTime = util.performanceNow() - 2 * invalidThreshold;

	  self.skipping = false;

	  r.beforeRender(function (willDraw, now) {
	    if (now - self.lastInvalidationTime <= invalidThreshold) {
	      self.skipping = true;
	    } else {
	      self.skipping = false;
	    }
	  });

	  var qSort = function qSort(a, b) {
	    return b.reqs - a.reqs;
	  };

	  self.layersQueue = new Heap(qSort);

	  self.eleTxrCache = eleTxrCache;

	  self.setupEleCacheInvalidation();

	  self.setupDequeueing();
	};

	var LTCp = LayeredTextureCache.prototype;

	var layerIdPool = 0;
	var MAX_INT = Math.pow(2, 53) - 1;

	LTCp.makeLayer = function (bb, lvl) {
	  var scale = Math.pow(2, lvl);

	  var w = Math.ceil(bb.w * scale);
	  var h = Math.ceil(bb.h * scale);

	  var canvas = document.createElement('canvas'); // eslint-disable-line no-undef

	  canvas.width = w;
	  canvas.height = h;

	  var layer = {
	    id: layerIdPool = ++layerIdPool % MAX_INT,
	    bb: bb,
	    level: lvl,
	    width: w,
	    height: h,
	    canvas: canvas,
	    context: canvas.getContext('2d'),
	    eles: [],
	    elesQueue: [],
	    reqs: 0
	  };

	  // log('make layer %s with w %s and h %s and lvl %s', layer.id, layer.width, layer.height, layer.level);

	  var cxt = layer.context;
	  var dx = -layer.bb.x1;
	  var dy = -layer.bb.y1;

	  // do the transform on creation to save cycles (it's the same for all eles)
	  cxt.scale(scale, scale);
	  cxt.translate(dx, dy);

	  return layer;
	};

	LTCp.getLayers = function (eles, pxRatio, lvl) {
	  var self = this;
	  var r = self.renderer;
	  var cy = r.cy;
	  var zoom = cy.zoom();
	  var firstGet = self.firstGet;

	  self.firstGet = false;

	  // log('--\nget layers with %s eles', eles.length);
	  //log eles.map(function(ele){ return ele.id() }) );

	  if (lvl == null) {
	    lvl = Math.ceil(math.log2(zoom * pxRatio));

	    if (lvl < minLvl) {
	      lvl = minLvl;
	    } else if (zoom >= maxZoom || lvl > maxLvl) {
	      return null;
	    }
	  }

	  self.validateLayersElesOrdering(lvl, eles);

	  var layersByLvl = self.layersByLevel;
	  var scale = Math.pow(2, lvl);
	  var layers = layersByLvl[lvl] = layersByLvl[lvl] || [];
	  var bb;

	  var lvlComplete = self.levelIsComplete(lvl, eles);
	  var tmpLayers;

	  var checkTempLevels = function checkTempLevels() {
	    var canUseAsTmpLvl = function canUseAsTmpLvl(l) {
	      self.validateLayersElesOrdering(l, eles);

	      if (self.levelIsComplete(l, eles)) {
	        tmpLayers = layersByLvl[l];
	        return true;
	      }
	    };

	    var checkLvls = function checkLvls(dir) {
	      if (tmpLayers) {
	        return;
	      }

	      for (var l = lvl + dir; minLvl <= l && l <= maxLvl; l += dir) {
	        if (canUseAsTmpLvl(l)) {
	          break;
	        }
	      }
	    };

	    checkLvls(+1);
	    checkLvls(-1);

	    // remove the invalid layers; they will be replaced as needed later in this function
	    for (var i = layers.length - 1; i >= 0; i--) {
	      var layer = layers[i];

	      if (layer.invalid) {
	        util.removeFromArray(layers, layer);
	      }
	    }
	  };

	  if (!lvlComplete) {
	    // if the current level is incomplete, then use the closest, best quality layerset temporarily
	    // and later queue the current layerset so we can get the proper quality level soon

	    checkTempLevels();
	  } else {
	    // log('level complete, using existing layers\n--');
	    return layers;
	  }

	  var getBb = function getBb() {
	    if (!bb) {
	      bb = math.makeBoundingBox();

	      for (var i = 0; i < eles.length; i++) {
	        math.updateBoundingBox(bb, eles[i].boundingBox());
	      }
	    }

	    return bb;
	  };

	  var makeLayer = function makeLayer(opts) {
	    opts = opts || {};

	    var after = opts.after;

	    getBb();

	    var area = bb.w * scale * (bb.h * scale);

	    if (area > maxLayerArea) {
	      return null;
	    }

	    var layer = self.makeLayer(bb, lvl);

	    if (after != null) {
	      var index = layers.indexOf(after) + 1;

	      layers.splice(index, 0, layer);
	    } else if (opts.insert === undefined || opts.insert) {
	      // no after specified => first layer made so put at start
	      layers.unshift(layer);
	    }

	    // if( tmpLayers ){
	    //self.queueLayer( layer );
	    // }

	    return layer;
	  };

	  if (self.skipping && !firstGet) {
	    // log('skip layers');
	    return null;
	  }

	  // log('do layers');

	  var layer = null;
	  var maxElesPerLayer = eles.length / defNumLayers;
	  var allowLazyQueueing = !firstGet;

	  for (var i = 0; i < eles.length; i++) {
	    var ele = eles[i];
	    var rs = ele._private.rscratch;
	    var caches = rs.imgLayerCaches = rs.imgLayerCaches || {};

	    // log('look at ele', ele.id());

	    var existingLayer = caches[lvl];

	    if (existingLayer) {
	      // reuse layer for later eles
	      // log('reuse layer for', ele.id());
	      layer = existingLayer;
	      continue;
	    }

	    if (!layer || layer.eles.length >= maxElesPerLayer || !math.boundingBoxInBoundingBox(layer.bb, ele.boundingBox())) {
	      // log('make new layer for ele %s', ele.id());

	      layer = makeLayer({ insert: true, after: layer });

	      // if now layer can be built then we can't use layers at this level
	      if (!layer) {
	        return null;
	      }

	      // log('new layer with id %s', layer.id);
	    }

	    if (tmpLayers || allowLazyQueueing) {
	      // log('queue ele %s in layer %s', ele.id(), layer.id);
	      self.queueLayer(layer, ele);
	    } else {
	      // log('draw ele %s in layer %s', ele.id(), layer.id);
	      self.drawEleInLayer(layer, ele, lvl, pxRatio);
	    }

	    layer.eles.push(ele);

	    caches[lvl] = layer;
	  }

	  // log('--');

	  if (tmpLayers) {
	    // then we only queued the current layerset and can't draw it yet
	    return tmpLayers;
	  }

	  if (allowLazyQueueing) {
	    // log('lazy queue level', lvl);
	    return null;
	  }

	  return layers;
	};

	// a layer may want to use an ele cache of a higher level to avoid blurriness
	// so the layer level might not equal the ele level
	LTCp.getEleLevelForLayerLevel = function (lvl, pxRatio) {
	  return lvl;
	};

	function imgSmoothing(context, bool) {
	  if (context.imageSmoothingEnabled != null) {
	    context.imageSmoothingEnabled = bool;
	  } else {
	    context.webkitImageSmoothingEnabled = bool;
	    context.mozImageSmoothingEnabled = bool;
	    context.msImageSmoothingEnabled = bool;
	  }
	}

	LTCp.drawEleInLayer = function (layer, ele, lvl, pxRatio) {
	  var self = this;
	  var r = this.renderer;
	  var context = layer.context;
	  var bb = ele.boundingBox();

	  if (bb.w === 0 || bb.h === 0 || !ele.visible()) {
	    return;
	  }

	  var eleCache = self.eleTxrCache;
	  var reason = eleCache.reasons.highQuality;

	  lvl = self.getEleLevelForLayerLevel(lvl, pxRatio);

	  var cache = eleCache.getElement(ele, bb, null, lvl, reason);

	  if (cache) {
	    {
	      imgSmoothing(context, false);
	    }

	    context.drawImage(cache.texture.canvas, cache.x, 0, cache.width, cache.height, bb.x1, bb.y1, bb.w, bb.h);

	    {
	      imgSmoothing(context, true);
	    }
	  } else {
	    // if the element is not cacheable, then draw directly
	    r.drawElement(context, ele);
	  }
	};

	LTCp.levelIsComplete = function (lvl, eles) {
	  var self = this;
	  var layers = self.layersByLevel[lvl];

	  if (!layers || layers.length === 0) {
	    return false;
	  }

	  var numElesInLayers = 0;

	  for (var i = 0; i < layers.length; i++) {
	    var layer = layers[i];

	    // if there are any eles needed to be drawn yet, the level is not complete
	    if (layer.reqs > 0) {
	      return false;
	    }

	    // if the layer is invalid, the level is not complete
	    if (layer.invalid) {
	      return false;
	    }

	    numElesInLayers += layer.eles.length;
	  }

	  // we should have exactly the number of eles passed in to be complete
	  if (numElesInLayers !== eles.length) {
	    return false;
	  }

	  return true;
	};

	LTCp.validateLayersElesOrdering = function (lvl, eles) {
	  var layers = this.layersByLevel[lvl];

	  if (!layers) {
	    return;
	  }

	  // if in a layer the eles are not in the same order, then the layer is invalid
	  // (i.e. there is an ele in between the eles in the layer)

	  for (var i = 0; i < layers.length; i++) {
	    var layer = layers[i];
	    var offset = -1;

	    // find the offset
	    for (var j = 0; j < eles.length; j++) {
	      if (layer.eles[0] === eles[j]) {
	        offset = j;
	        break;
	      }
	    }

	    if (offset < 0) {
	      // then the layer has nonexistant elements and is invalid
	      this.invalidateLayer(layer);
	      continue;
	    }

	    // the eles in the layer must be in the same continuous order, else the layer is invalid

	    var o = offset;

	    for (var j = 0; j < layer.eles.length; j++) {
	      if (layer.eles[j] !== eles[o + j]) {
	        // log('invalidate based on ordering', layer.id);

	        this.invalidateLayer(layer);
	        break;
	      }
	    }
	  }
	};

	LTCp.updateElementsInLayers = function (eles, update) {
	  var self = this;
	  var isEles = is.element(eles[0]);

	  // collect udpated elements (cascaded from the layers) and update each
	  // layer itself along the way
	  for (var i = 0; i < eles.length; i++) {
	    var req = isEles ? null : eles[i];
	    var ele = isEles ? eles[i] : eles[i].ele;
	    var rs = ele._private.rscratch;
	    var caches = rs.imgLayerCaches = rs.imgLayerCaches || {};

	    for (var l = minLvl; l <= maxLvl; l++) {
	      var layer = caches[l];

	      if (!layer) {
	        continue;
	      }

	      // if update is a request from the ele cache, then it affects only
	      // the matching level
	      if (req && self.getEleLevelForLayerLevel(layer.level) !== req.level) {
	        continue;
	      }

	      update(layer, ele, req);
	    }
	  }
	};

	LTCp.haveLayers = function () {
	  var self = this;
	  var haveLayers = false;

	  for (var l = minLvl; l <= maxLvl; l++) {
	    var layers = self.layersByLevel[l];

	    if (layers && layers.length > 0) {
	      haveLayers = true;
	      break;
	    }
	  }

	  return haveLayers;
	};

	LTCp.invalidateElements = function (eles) {
	  var self = this;

	  self.lastInvalidationTime = util.performanceNow();

	  // log('update invalidate layer time from eles');

	  if (eles.length === 0 || !self.haveLayers()) {
	    return;
	  }

	  self.updateElementsInLayers(eles, function invalAssocLayers(layer, ele, req) {
	    self.invalidateLayer(layer);
	  });
	};

	LTCp.invalidateLayer = function (layer) {
	  // log('update invalidate layer time');

	  this.lastInvalidationTime = util.performanceNow();

	  if (layer.invalid) {
	    return;
	  } // save cycles

	  var lvl = layer.level;
	  var eles = layer.eles;
	  var layers = this.layersByLevel[lvl];

	  // log('invalidate layer', layer.id );

	  util.removeFromArray(layers, layer);
	  // layer.eles = [];

	  layer.elesQueue = [];

	  layer.invalid = true;

	  if (layer.replacement) {
	    layer.replacement.invalid = true;
	  }

	  for (var i = 0; i < eles.length; i++) {
	    var caches = eles[i]._private.rscratch.imgLayerCaches;

	    if (caches) {
	      caches[lvl] = null;
	    }
	  }
	};

	LTCp.refineElementTextures = function (eles) {
	  var self = this;

	  // log('refine', eles.length);

	  self.updateElementsInLayers(eles, function refineEachEle(layer, ele, req) {
	    var rLyr = layer.replacement;

	    if (!rLyr) {
	      rLyr = layer.replacement = self.makeLayer(layer.bb, layer.level);
	      rLyr.replaces = layer;
	      rLyr.eles = layer.eles;

	      // log('make replacement layer %s for %s with level %s', rLyr.id, layer.id, rLyr.level);
	    }

	    if (!rLyr.reqs) {
	      for (var i = 0; i < rLyr.eles.length; i++) {
	        self.queueLayer(rLyr, rLyr.eles[i]);
	      }

	      // log('queue replacement layer refinement', rLyr.id);
	    }
	  });
	};

	LTCp.setupEleCacheInvalidation = function () {
	  var self = this;
	  var eleDeqs = [];

	  var updatedElesInLayers = util.debounce(function () {
	    self.refineElementTextures(eleDeqs);

	    eleDeqs = [];
	  }, refineEleDebounceTime);

	  self.eleTxrCache.onDequeue(function (reqs) {
	    for (var i = 0; i < reqs.length; i++) {
	      eleDeqs.push(reqs[i]);
	    }

	    updatedElesInLayers();
	  });
	};

	LTCp.queueLayer = function (layer, ele) {
	  var self = this;
	  var q = self.layersQueue;
	  var elesQ = layer.elesQueue;
	  var hasId = elesQ.hasId = elesQ.hasId || {};

	  // if a layer is going to be replaced, queuing is a waste of time
	  if (layer.replacement) {
	    return;
	  }

	  if (ele) {
	    if (hasId[ele.id()]) {
	      return;
	    }

	    elesQ.push(ele);
	    hasId[ele.id()] = true;
	  }

	  if (layer.reqs) {
	    layer.reqs++;

	    q.updateItem(layer);
	  } else {
	    layer.reqs = 1;

	    q.push(layer);
	  }
	};

	LTCp.dequeue = function (pxRatio) {
	  var self = this;
	  var q = self.layersQueue;
	  var deqd = [];
	  var eleDeqs = 0;

	  while (eleDeqs < maxDeqSize) {
	    if (q.size() === 0) {
	      break;
	    }

	    var layer = q.peek();

	    // if a layer has been or will be replaced, then don't waste time with it
	    if (layer.replacement) {
	      // log('layer %s in queue skipped b/c it already has a replacement', layer.id);
	      q.pop();
	      continue;
	    }

	    // if this is a replacement layer that has been superceded, then forget it
	    if (layer.replaces && layer !== layer.replaces.replacement) {
	      // log('layer is no longer the most uptodate replacement; dequeued', layer.id)
	      q.pop();
	      continue;
	    }

	    if (layer.invalid) {
	      // log('replacement layer %s is invalid; dequeued', layer.id);
	      q.pop();
	      continue;
	    }

	    var ele = layer.elesQueue.shift();

	    if (ele) {
	      // log('dequeue layer %s', layer.id);

	      self.drawEleInLayer(layer, ele, layer.level, pxRatio);

	      eleDeqs++;
	    }

	    if (deqd.length === 0) {
	      // we need only one entry in deqd to queue redrawing etc
	      deqd.push(true);
	    }

	    // if the layer has all its eles done, then remove from the queue
	    if (layer.elesQueue.length === 0) {
	      q.pop();

	      layer.reqs = 0;

	      // log('dequeue of layer %s complete', layer.id);

	      // when a replacement layer is dequeued, it replaces the old layer in the level
	      if (layer.replaces) {
	        self.applyLayerReplacement(layer);
	      }

	      self.requestRedraw();
	    }
	  }

	  return deqd;
	};

	LTCp.applyLayerReplacement = function (layer) {
	  var self = this;
	  var layersInLevel = self.layersByLevel[layer.level];
	  var replaced = layer.replaces;
	  var index = layersInLevel.indexOf(replaced);

	  // if the replaced layer is not in the active list for the level, then replacing
	  // refs would be a mistake (i.e. overwriting the true active layer)
	  if (index < 0 || replaced.invalid) {
	    // log('replacement layer would have no effect', layer.id);
	    return;
	  }

	  layersInLevel[index] = layer; // replace level ref

	  // replace refs in eles
	  for (var i = 0; i < layer.eles.length; i++) {
	    var _p = layer.eles[i]._private;
	    var cache = _p.imgLayerCaches = _p.imgLayerCaches || {};

	    if (cache) {
	      cache[layer.level] = layer;
	    }
	  }

	  // log('apply replacement layer %s over %s', layer.id, replaced.id);

	  self.requestRedraw();
	};

	LTCp.requestRedraw = util.debounce(function () {
	  var r = this.renderer;

	  r.redrawHint('eles', true);
	  r.redrawHint('drag', true);
	  r.redraw();
	}, 100);

	LTCp.setupDequeueing = defs.setupDequeueing({
	  deqRedrawThreshold: deqRedrawThreshold,
	  deqCost: deqCost,
	  deqAvgCost: deqAvgCost,
	  deqNoDrawCost: deqNoDrawCost,
	  deqFastCost: deqFastCost,
	  deq: function deq(self, pxRatio) {
	    return self.dequeue(pxRatio);
	  },
	  onDeqd: util.noop,
	  shouldRedraw: util.trueify,
	  priority: function priority(self) {
	    return self.renderer.beforeRenderPriorities.lyrTxrDeq;
	  }
	});

	module.exports = LayeredTextureCache;

	/***/ }),
	/* 126 */
	/***/ (function(module, exports, __webpack_require__) {


	var CRp = {};

	var impl;

	CRp.arrowShapeImpl = function (name) {
	  return (impl || (impl = {
	    'polygon': function polygon(context, points) {
	      for (var i = 0; i < points.length; i++) {
	        var pt = points[i];

	        context.lineTo(pt.x, pt.y);
	      }
	    },

	    'triangle-backcurve': function triangleBackcurve(context, points, controlPoint) {
	      var firstPt;

	      for (var i = 0; i < points.length; i++) {
	        var pt = points[i];

	        if (i === 0) {
	          firstPt = pt;
	        }

	        context.lineTo(pt.x, pt.y);
	      }

	      context.quadraticCurveTo(controlPoint.x, controlPoint.y, firstPt.x, firstPt.y);
	    },

	    'triangle-tee': function triangleTee(context, trianglePoints, teePoints) {
	      if (context.beginPath) {
	        context.beginPath();
	      }

	      var triPts = trianglePoints;
	      for (var i = 0; i < triPts.length; i++) {
	        var pt = triPts[i];

	        context.lineTo(pt.x, pt.y);
	      }

	      if (context.closePath) {
	        context.closePath();
	      }

	      if (context.beginPath) {
	        context.beginPath();
	      }

	      var teePts = teePoints;
	      var firstTeePt = teePoints[0];
	      context.moveTo(firstTeePt.x, firstTeePt.y);

	      for (var i = 0; i < teePts.length; i++) {
	        var pt = teePts[i];

	        context.lineTo(pt.x, pt.y);
	      }
	      if (context.closePath) {
	        context.closePath();
	      }
	    },

	    'triangle-cross': function triangleCross(context, trianglePoints, crossLinePoints) {
	      if (context.beginPath) {
	        context.beginPath();
	      }

	      var triPts = trianglePoints;
	      for (var i = 0; i < triPts.length; i++) {
	        var pt = triPts[i];

	        context.lineTo(pt.x, pt.y);
	      }

	      if (context.closePath) {
	        context.closePath();
	      }

	      if (context.beginPath) {
	        context.beginPath();
	      }

	      var teePts = crossLinePoints;
	      var firstTeePt = crossLinePoints[0];
	      context.moveTo(firstTeePt.x, firstTeePt.y);

	      for (var i = 0; i < teePts.length; i++) {
	        var pt = teePts[i];

	        context.lineTo(pt.x, pt.y);
	      }
	      if (context.closePath) {
	        context.closePath();
	      }
	    },

	    'circle': function circle(context, rx, ry, r) {
	      context.arc(rx, ry, r, 0, Math.PI * 2, false);
	    }
	  }))[name];
	};

	module.exports = CRp;

	/***/ }),
	/* 127 */
	/***/ (function(module, exports, __webpack_require__) {


	var math = __webpack_require__(2);

	var CRp = {};

	CRp.drawElement = function (context, ele, shiftToOriginWithBb, showLabel) {
	  var r = this;

	  if (ele.isNode()) {
	    r.drawNode(context, ele, shiftToOriginWithBb, showLabel);
	  } else {
	    r.drawEdge(context, ele, shiftToOriginWithBb, showLabel);
	  }
	};

	CRp.drawCachedElement = function (context, ele, pxRatio, extent) {
	  var r = this;
	  var bb = ele.boundingBox();

	  if (bb.w === 0 || bb.h === 0) {
	    return;
	  }

	  if (!extent || math.boundingBoxesIntersect(bb, extent)) {
	    var cache = r.data.eleTxrCache.getElement(ele, bb, pxRatio);

	    if (cache != null) {
	      context.drawImage(cache.texture.canvas, cache.x, 0, cache.width, cache.height, bb.x1, bb.y1, bb.w, bb.h);
	    } else {
	      // if the element is not cacheable, then draw directly
	      r.drawElement(context, ele);
	    }
	  }
	};

	CRp.drawElements = function (context, eles) {
	  var r = this;

	  for (var i = 0; i < eles.length; i++) {
	    var ele = eles[i];

	    r.drawElement(context, ele);
	  }
	};

	CRp.drawCachedElements = function (context, eles, pxRatio, extent) {
	  var r = this;

	  for (var i = 0; i < eles.length; i++) {
	    var ele = eles[i];

	    r.drawCachedElement(context, ele, pxRatio, extent);
	  }
	};

	CRp.drawCachedNodes = function (context, eles, pxRatio, extent) {
	  var r = this;

	  for (var i = 0; i < eles.length; i++) {
	    var ele = eles[i];

	    if (!ele.isNode()) {
	      continue;
	    }

	    r.drawCachedElement(context, ele, pxRatio, extent);
	  }
	};

	CRp.drawLayeredElements = function (context, eles, pxRatio, extent) {
	  var r = this;

	  var layers = r.data.lyrTxrCache.getLayers(eles, pxRatio);

	  if (layers) {
	    for (var i = 0; i < layers.length; i++) {
	      var layer = layers[i];
	      var bb = layer.bb;

	      if (bb.w === 0 || bb.h === 0) {
	        continue;
	      }

	      context.drawImage(layer.canvas, bb.x1, bb.y1, bb.w, bb.h);
	    }
	  } else {
	    // fall back on plain caching if no layers
	    r.drawCachedElements(context, eles, pxRatio, extent);
	  }
	};

	CRp.drawDebugPoints = function (context, eles) {
	  var draw = function draw(x, y, color) {
	    context.fillStyle = color;
	    context.fillRect(x - 1, y - 1, 3, 3);
	  };

	  for (var i = 0; i < eles.length; i++) {
	    var ele = eles[i];
	    var rs = ele._private.rscratch;

	    if (ele.isNode()) {
	      var p = ele.position();

	      draw(p.x, p.y, 'magenta');
	    } else {
	      var pts = rs.allpts;

	      for (var j = 0; j + 1 < pts.length; j += 2) {
	        var x = pts[j];
	        var y = pts[j + 1];

	        draw(x, y, 'cyan');
	      }

	      draw(rs.midX, rs.midY, 'yellow');
	    }
	  }
	};

	module.exports = CRp;

	/***/ }),
	/* 128 */
	/***/ (function(module, exports, __webpack_require__) {


	var CRp = {};

	CRp.drawEdge = function (context, edge, shiftToOriginWithBb, drawLabel) {
	  var r = this;
	  var rs = edge._private.rscratch;
	  var usePaths = r.usePaths();

	  if (!edge.visible()) {
	    return;
	  }

	  // if bezier ctrl pts can not be calculated, then die
	  if (rs.badLine || rs.allpts == null || isNaN(rs.allpts[0])) {
	    // isNaN in case edge is impossible and browser bugs (e.g. safari)
	    return;
	  }

	  var bb = void 0;
	  if (shiftToOriginWithBb) {
	    bb = shiftToOriginWithBb;

	    context.translate(-bb.x1, -bb.y1);
	  }

	  var overlayPadding = edge.pstyle('overlay-padding').pfValue;
	  var overlayWidth = 2 * overlayPadding;
	  var overlayOpacity = edge.pstyle('overlay-opacity').value;
	  var overlayColor = edge.pstyle('overlay-color').value;
	  var lineColor = edge.pstyle('line-color').value;
	  var opacity = edge.pstyle('opacity').value;
	  var lineStyle = edge.pstyle('line-style').value;
	  var edgeWidth = edge.pstyle('width').pfValue;

	  var drawLine = function drawLine() {
	    var strokeOpacity = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : opacity;

	    context.lineWidth = edgeWidth;
	    context.lineCap = 'butt';

	    r.strokeStyle(context, lineColor[0], lineColor[1], lineColor[2], strokeOpacity);

	    r.drawEdgePath(edge, context, rs.allpts, lineStyle);
	  };

	  var drawOverlay = function drawOverlay() {
	    var strokeOpacity = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : overlayOpacity;

	    context.lineWidth = overlayWidth;

	    if (rs.edgeType === 'self' && !usePaths) {
	      context.lineCap = 'butt';
	    } else {
	      context.lineCap = 'round';
	    }

	    r.strokeStyle(context, overlayColor[0], overlayColor[1], overlayColor[2], strokeOpacity);

	    r.drawEdgePath(edge, context, rs.allpts, 'solid');
	  };

	  var drawArrows = function drawArrows() {
	    var arrowOpacity = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : opacity;

	    r.drawArrowheads(context, edge, arrowOpacity);
	  };

	  var drawText = function drawText() {
	    r.drawElementText(context, edge, drawLabel);
	  };

	  context.lineJoin = 'round';

	  var ghost = edge.pstyle('ghost').value === 'yes';

	  if (ghost) {
	    var gx = edge.pstyle('ghost-offset-x').pfValue;
	    var gy = edge.pstyle('ghost-offset-y').pfValue;
	    var ghostOpacity = edge.pstyle('ghost-opacity').value;
	    var effectiveGhostOpacity = opacity * ghostOpacity;

	    context.translate(gx, gy);

	    drawLine(effectiveGhostOpacity);
	    drawArrows(effectiveGhostOpacity);

	    context.translate(-gx, -gy);
	  }

	  drawLine();
	  drawArrows();
	  drawOverlay();
	  drawText();

	  if (shiftToOriginWithBb) {
	    context.translate(bb.x1, bb.y1);
	  }
	};

	CRp.drawEdgePath = function (edge, context, pts, type) {
	  var rs = edge._private.rscratch;
	  var canvasCxt = context;
	  var path = void 0;
	  var pathCacheHit = false;
	  var usePaths = this.usePaths();

	  if (usePaths) {
	    var pathCacheKey = pts.join('$');
	    var keyMatches = rs.pathCacheKey && rs.pathCacheKey === pathCacheKey;

	    if (keyMatches) {
	      path = context = rs.pathCache;
	      pathCacheHit = true;
	    } else {
	      path = context = new Path2D(); // eslint-disable-line no-undef
	      rs.pathCacheKey = pathCacheKey;
	      rs.pathCache = path;
	    }
	  }

	  if (canvasCxt.setLineDash) {
	    // for very outofdate browsers
	    switch (type) {
	      case 'dotted':
	        canvasCxt.setLineDash([1, 1]);
	        break;

	      case 'dashed':
	        canvasCxt.setLineDash([6, 3]);
	        break;

	      case 'solid':
	        canvasCxt.setLineDash([]);
	        break;
	    }
	  }

	  if (!pathCacheHit && !rs.badLine) {
	    if (context.beginPath) {
	      context.beginPath();
	    }
	    context.moveTo(pts[0], pts[1]);

	    switch (rs.edgeType) {
	      case 'bezier':
	      case 'self':
	      case 'compound':
	      case 'multibezier':
	        for (var i = 2; i + 3 < pts.length; i += 4) {
	          context.quadraticCurveTo(pts[i], pts[i + 1], pts[i + 2], pts[i + 3]);
	        }
	        break;

	      case 'straight':
	      case 'segments':
	      case 'haystack':
	        for (var _i = 2; _i + 1 < pts.length; _i += 2) {
	          context.lineTo(pts[_i], pts[_i + 1]);
	        }
	        break;
	    }
	  }

	  context = canvasCxt;
	  if (usePaths) {
	    context.stroke(path);
	  } else {
	    context.stroke();
	  }

	  // reset any line dashes
	  if (context.setLineDash) {
	    // for very outofdate browsers
	    context.setLineDash([]);
	  }
	};

	CRp.drawArrowheads = function (context, edge, opacity) {
	  var rs = edge._private.rscratch;
	  var isHaystack = rs.edgeType === 'haystack';

	  if (!isHaystack) {
	    this.drawArrowhead(context, edge, 'source', rs.arrowStartX, rs.arrowStartY, rs.srcArrowAngle, opacity);
	  }

	  this.drawArrowhead(context, edge, 'mid-target', rs.midX, rs.midY, rs.midtgtArrowAngle, opacity);

	  this.drawArrowhead(context, edge, 'mid-source', rs.midX, rs.midY, rs.midsrcArrowAngle, opacity);

	  if (!isHaystack) {
	    this.drawArrowhead(context, edge, 'target', rs.arrowEndX, rs.arrowEndY, rs.tgtArrowAngle, opacity);
	  }
	};

	CRp.drawArrowhead = function (context, edge, prefix, x, y, angle, opacity) {
	  if (isNaN(x) || x == null || isNaN(y) || y == null || isNaN(angle) || angle == null) {
	    return;
	  }

	  var self = this;
	  var arrowShape = edge.pstyle(prefix + '-arrow-shape').value;
	  if (arrowShape === 'none') {
	    return;
	  }

	  var arrowClearFill = edge.pstyle(prefix + '-arrow-fill').value === 'hollow' ? 'both' : 'filled';
	  var arrowFill = edge.pstyle(prefix + '-arrow-fill').value;
	  var edgeWidth = edge.pstyle('width').pfValue;
	  var edgeOpacity = edge.pstyle('opacity').value;

	  if (opacity === undefined) {
	    opacity = edgeOpacity;
	  }

	  var gco = context.globalCompositeOperation;

	  if (opacity !== 1 || arrowFill === 'hollow') {
	    // then extra clear is needed
	    context.globalCompositeOperation = 'destination-out';

	    self.fillStyle(context, 255, 255, 255, 1);
	    self.strokeStyle(context, 255, 255, 255, 1);

	    self.drawArrowShape(edge, prefix, context, arrowClearFill, edgeWidth, arrowShape, x, y, angle);

	    context.globalCompositeOperation = gco;
	  } // otherwise, the opaque arrow clears it for free :)

	  var color = edge.pstyle(prefix + '-arrow-color').value;
	  self.fillStyle(context, color[0], color[1], color[2], opacity);
	  self.strokeStyle(context, color[0], color[1], color[2], opacity);

	  self.drawArrowShape(edge, prefix, context, arrowFill, edgeWidth, arrowShape, x, y, angle);
	};

	CRp.drawArrowShape = function (edge, arrowType, context, fill, edgeWidth, shape, x, y, angle) {
	  var r = this;
	  var usePaths = this.usePaths();
	  var rs = edge._private.rscratch;
	  var pathCacheHit = false;
	  var path = void 0;
	  var canvasContext = context;
	  var translation = { x: x, y: y };
	  var scale = edge.pstyle('arrow-scale').value;
	  var size = this.getArrowWidth(edgeWidth, scale);
	  var shapeImpl = r.arrowShapes[shape];

	  if (usePaths) {
	    var pathCacheKey = size + '$' + shape + '$' + angle + '$' + x + '$' + y;
	    rs.arrowPathCacheKey = rs.arrowPathCacheKey || {};
	    rs.arrowPathCache = rs.arrowPathCache || {};

	    var alreadyCached = rs.arrowPathCacheKey[arrowType] === pathCacheKey;
	    if (alreadyCached) {
	      path = context = rs.arrowPathCache[arrowType];
	      pathCacheHit = true;
	    } else {
	      path = context = new Path2D(); // eslint-disable-line no-undef
	      rs.arrowPathCacheKey[arrowType] = pathCacheKey;
	      rs.arrowPathCache[arrowType] = path;
	    }
	  }

	  if (context.beginPath) {
	    context.beginPath();
	  }

	  if (!pathCacheHit) {
	    shapeImpl.draw(context, size, angle, translation, edgeWidth);
	  }

	  if (!shapeImpl.leavePathOpen && context.closePath) {
	    context.closePath();
	  }

	  context = canvasContext;

	  if (fill === 'filled' || fill === 'both') {
	    if (usePaths) {
	      context.fill(path);
	    } else {
	      context.fill();
	    }
	  }

	  if (fill === 'hollow' || fill === 'both') {
	    context.lineWidth = shapeImpl.matchEdgeWidth ? edgeWidth : 1;
	    context.lineJoin = 'miter';

	    if (usePaths) {
	      context.stroke(path);
	    } else {
	      context.stroke();
	    }
	  }
	};

	module.exports = CRp;

	/***/ }),
	/* 129 */
	/***/ (function(module, exports, __webpack_require__) {


	var CRp = {};

	CRp.safeDrawImage = function (context, img, ix, iy, iw, ih, x, y, w, h) {

	  // detect problematic cases for old browsers with bad images (cheaper than try-catch)
	  if (iw <= 0 || ih <= 0 || w <= 0 || h <= 0) {
	    return;
	  }

	  context.drawImage(img, ix, iy, iw, ih, x, y, w, h);
	};

	CRp.drawInscribedImage = function (context, img, node, index, nodeOpacity) {
	  var r = this;
	  var pos = node.position();
	  var nodeX = pos.x;
	  var nodeY = pos.y;
	  var styleObj = node.cy().style();
	  var getIndexedStyle = styleObj.getIndexedStyle.bind(styleObj);
	  var fit = getIndexedStyle(node, 'background-fit', 'value', index);
	  var repeat = getIndexedStyle(node, 'background-repeat', 'value', index);
	  var nodeW = node.width();
	  var nodeH = node.height();
	  var paddingX2 = node.padding() * 2;
	  var nodeTW = nodeW + (getIndexedStyle(node, 'background-width-relative-to', 'value', index) === 'inner' ? 0 : paddingX2);
	  var nodeTH = nodeH + (getIndexedStyle(node, 'background-height-relative-to', 'value', index) === 'inner' ? 0 : paddingX2);
	  var rs = node._private.rscratch;
	  var clip = node.pstyle('background-clip').value;
	  var shouldClip = clip === 'node';
	  var imgOpacity = getIndexedStyle(node, 'background-image-opacity', 'value', index) * nodeOpacity;

	  var imgW = img.width || img.cachedW;
	  var imgH = img.height || img.cachedH;

	  // workaround for broken browsers like ie
	  if (null == imgW || null == imgH) {
	    document.body.appendChild(img); // eslint-disable-line no-undef

	    imgW = img.cachedW = img.width || img.offsetWidth;
	    imgH = img.cachedH = img.height || img.offsetHeight;

	    document.body.removeChild(img); // eslint-disable-line no-undef
	  }

	  var w = imgW;
	  var h = imgH;

	  if (getIndexedStyle(node, 'background-width', 'value', index) !== 'auto') {
	    if (getIndexedStyle(node, 'background-width', 'units', index) === '%') {
	      w = getIndexedStyle(node, 'background-width', 'pfValue', index) * nodeTW;
	    } else {
	      w = getIndexedStyle(node, 'background-width', 'pfValue', index);
	    }
	  }

	  if (getIndexedStyle(node, 'background-height', 'value', index) !== 'auto') {
	    if (getIndexedStyle(node, 'background-height', 'units', index) === '%') {
	      h = getIndexedStyle(node, 'background-height', 'pfValue', index) * nodeTH;
	    } else {
	      h = getIndexedStyle(node, 'background-height', 'pfValue', index);
	    }
	  }

	  if (w === 0 || h === 0) {
	    return; // no point in drawing empty image (and chrome is broken in this case)
	  }

	  if (fit === 'contain') {
	    var scale = Math.min(nodeTW / w, nodeTH / h);

	    w *= scale;
	    h *= scale;
	  } else if (fit === 'cover') {
	    var scale = Math.max(nodeTW / w, nodeTH / h);

	    w *= scale;
	    h *= scale;
	  }

	  var x = nodeX - nodeTW / 2; // left
	  if (getIndexedStyle(node, 'background-position-x', 'units', index) === '%') {
	    x += (nodeTW - w) * getIndexedStyle(node, 'background-position-x', 'pfValue', index);
	  } else {
	    x += getIndexedStyle(node, 'background-position-x', 'pfValue', index);
	  }

	  var y = nodeY - nodeTH / 2; // top
	  if (getIndexedStyle(node, 'background-position-y', 'units', index) === '%') {
	    y += (nodeTH - h) * getIndexedStyle(node, 'background-position-y', 'pfValue', index);
	  } else {
	    y += getIndexedStyle(node, 'background-position-y', 'pfValue', index);
	  }

	  if (rs.pathCache) {
	    x -= nodeX;
	    y -= nodeY;

	    nodeX = 0;
	    nodeY = 0;
	  }

	  var gAlpha = context.globalAlpha;

	  context.globalAlpha = imgOpacity;

	  if (repeat === 'no-repeat') {

	    if (shouldClip) {
	      context.save();

	      if (rs.pathCache) {
	        context.clip(rs.pathCache);
	      } else {
	        r.nodeShapes[r.getNodeShape(node)].draw(context, nodeX, nodeY, nodeTW, nodeTH);

	        context.clip();
	      }
	    }

	    r.safeDrawImage(context, img, 0, 0, imgW, imgH, x, y, w, h);

	    if (shouldClip) {
	      context.restore();
	    }
	  } else {
	    var pattern = context.createPattern(img, repeat);
	    context.fillStyle = pattern;

	    r.nodeShapes[r.getNodeShape(node)].draw(context, nodeX, nodeY, nodeTW, nodeTH);

	    context.translate(x, y);
	    context.fill();
	    context.translate(-x, -y);
	  }

	  context.globalAlpha = gAlpha;
	};

	module.exports = CRp;

	/***/ }),
	/* 130 */
	/***/ (function(module, exports, __webpack_require__) {


	var util = __webpack_require__(1);
	var math = __webpack_require__(2);

	var CRp = {};

	CRp.eleTextBiggerThanMin = function (ele, scale) {
	  if (!scale) {
	    var zoom = ele.cy().zoom();
	    var pxRatio = this.getPixelRatio();
	    var lvl = Math.ceil(math.log2(zoom * pxRatio)); // the effective texture level

	    scale = Math.pow(2, lvl);
	  }

	  var computedSize = ele.pstyle('font-size').pfValue * scale;
	  var minSize = ele.pstyle('min-zoomed-font-size').pfValue;

	  if (computedSize < minSize) {
	    return false;
	  }

	  return true;
	};

	CRp.drawElementText = function (context, ele, force) {
	  var r = this;

	  if (force === undefined) {
	    if (!r.eleTextBiggerThanMin(ele)) {
	      return;
	    }
	  } else {
	    if (!force) {
	      return;
	    }
	  }

	  if (ele.isNode()) {
	    var label = ele.pstyle('label');

	    if (!label || !label.value) {
	      return;
	    }

	    var textHalign = ele.pstyle('text-halign').strValue;
	    var textValign = ele.pstyle('text-valign').strValue;

	    switch (textHalign) {
	      case 'left':
	        context.textAlign = 'right';
	        break;

	      case 'right':
	        context.textAlign = 'left';
	        break;

	      default:
	        // e.g. center
	        context.textAlign = 'center';
	    }

	    context.textBaseline = 'bottom';
	  } else {
	    var label = ele.pstyle('label');
	    var srcLabel = ele.pstyle('source-label');
	    var tgtLabel = ele.pstyle('target-label');

	    if ((!label || !label.value) && (!srcLabel || !srcLabel.value) && (!tgtLabel || !tgtLabel.value)) {
	      return;
	    }

	    context.textAlign = 'center';
	    context.textBaseline = 'bottom';
	  }

	  r.drawText(context, ele);

	  if (ele.isEdge()) {
	    r.drawText(context, ele, 'source');

	    r.drawText(context, ele, 'target');
	  }
	};

	CRp.drawNodeText = CRp.drawEdgeText = CRp.drawElementText;

	CRp.getFontCache = function (context) {
	  var cache;

	  this.fontCaches = this.fontCaches || [];

	  for (var i = 0; i < this.fontCaches.length; i++) {
	    cache = this.fontCaches[i];

	    if (cache.context === context) {
	      return cache;
	    }
	  }

	  cache = {
	    context: context
	  };
	  this.fontCaches.push(cache);

	  return cache;
	};

	// set up canvas context with font
	// returns transformed text string
	CRp.setupTextStyle = function (context, ele) {
	  // Font style
	  var parentOpacity = ele.effectiveOpacity();
	  var labelStyle = ele.pstyle('font-style').strValue;
	  var labelSize = ele.pstyle('font-size').pfValue + 'px';
	  var labelFamily = ele.pstyle('font-family').strValue;
	  var labelWeight = ele.pstyle('font-weight').strValue;
	  var opacity = ele.pstyle('text-opacity').value * ele.pstyle('opacity').value * parentOpacity;
	  var outlineOpacity = ele.pstyle('text-outline-opacity').value * opacity;
	  var color = ele.pstyle('color').value;
	  var outlineColor = ele.pstyle('text-outline-color').value;

	  var fontCacheKey = ele._private.fontKey;
	  var cache = this.getFontCache(context);

	  if (cache.key !== fontCacheKey) {
	    context.font = labelStyle + ' ' + labelWeight + ' ' + labelSize + ' ' + labelFamily;

	    cache.key = fontCacheKey;
	  }

	  // Calculate text draw position based on text alignment

	  // so text outlines aren't jagged
	  context.lineJoin = 'round';

	  this.fillStyle(context, color[0], color[1], color[2], opacity);

	  this.strokeStyle(context, outlineColor[0], outlineColor[1], outlineColor[2], outlineOpacity);
	};

	function roundRect(ctx, x, y, width, height, radius) {
	  var radius = radius || 5;
	  ctx.beginPath();
	  ctx.moveTo(x + radius, y);
	  ctx.lineTo(x + width - radius, y);
	  ctx.quadraticCurveTo(x + width, y, x + width, y + radius);
	  ctx.lineTo(x + width, y + height - radius);
	  ctx.quadraticCurveTo(x + width, y + height, x + width - radius, y + height);
	  ctx.lineTo(x + radius, y + height);
	  ctx.quadraticCurveTo(x, y + height, x, y + height - radius);
	  ctx.lineTo(x, y + radius);
	  ctx.quadraticCurveTo(x, y, x + radius, y);
	  ctx.closePath();
	  ctx.fill();
	}

	// Draw text
	CRp.drawText = function (context, ele, prefix) {
	  var _p = ele._private;
	  var rscratch = _p.rscratch;
	  var parentOpacity = ele.effectiveOpacity();
	  if (parentOpacity === 0 || ele.pstyle('text-opacity').value === 0) {
	    return;
	  }

	  var textX = util.getPrefixedProperty(rscratch, 'labelX', prefix);
	  var textY = util.getPrefixedProperty(rscratch, 'labelY', prefix);
	  var text = this.getLabelText(ele, prefix);

	  if (text != null && text !== '' && !isNaN(textX) && !isNaN(textY)) {
	    this.setupTextStyle(context, ele);

	    var pdash = prefix ? prefix + '-' : '';
	    var textW = util.getPrefixedProperty(rscratch, 'labelWidth', prefix);
	    var textH = util.getPrefixedProperty(rscratch, 'labelHeight', prefix);
	    var textAngle = util.getPrefixedProperty(rscratch, 'labelAngle', prefix);
	    var marginX = ele.pstyle(pdash + 'text-margin-x').pfValue;
	    var marginY = ele.pstyle(pdash + 'text-margin-y').pfValue;

	    var isEdge = ele.isEdge();
	    var isNode = ele.isNode();

	    var halign = ele.pstyle('text-halign').value;
	    var valign = ele.pstyle('text-valign').value;

	    if (isEdge) {
	      halign = 'center';
	      valign = 'center';
	    }

	    textX += marginX;
	    textY += marginY;

	    var rotation = ele.pstyle(pdash + 'text-rotation');
	    var theta;

	    if (rotation.strValue === 'autorotate') {
	      theta = isEdge ? textAngle : 0;
	    } else if (rotation.strValue === 'none') {
	      theta = 0;
	    } else {
	      theta = rotation.pfValue;
	    }

	    if (theta !== 0) {
	      var orgTextX = textX;
	      var orgTextY = textY;

	      context.translate(orgTextX, orgTextY);
	      context.rotate(theta);

	      textX = 0;
	      textY = 0;
	    }

	    switch (valign) {
	      case 'top':
	        break;
	      case 'center':
	        textY += textH / 2;
	        break;
	      case 'bottom':
	        textY += textH;
	        break;
	    }

	    var backgroundOpacity = ele.pstyle('text-background-opacity').value;
	    var borderOpacity = ele.pstyle('text-border-opacity').value;
	    var textBorderWidth = ele.pstyle('text-border-width').pfValue;
	    var backgroundPadding = ele.pstyle('text-background-padding').pfValue;

	    if (backgroundOpacity > 0 || textBorderWidth > 0 && borderOpacity > 0) {
	      var bgX = textX - backgroundPadding;

	      switch (halign) {
	        case 'left':
	          bgX -= textW;
	          break;
	        case 'center':
	          bgX -= textW / 2;
	          break;
	        case 'right':
	          break;
	      }

	      var bgY = textY - textH - backgroundPadding;
	      var bgW = textW + 2 * backgroundPadding;
	      var bgH = textH + 2 * backgroundPadding;

	      if (backgroundOpacity > 0) {
	        var textFill = context.fillStyle;
	        var textBackgroundColor = ele.pstyle('text-background-color').value;

	        context.fillStyle = 'rgba(' + textBackgroundColor[0] + ',' + textBackgroundColor[1] + ',' + textBackgroundColor[2] + ',' + backgroundOpacity * parentOpacity + ')';
	        var styleShape = ele.pstyle('text-background-shape').strValue;
	        if (styleShape == 'roundrectangle') {
	          roundRect(context, bgX, bgY, bgW, bgH, 2);
	        } else {
	          context.fillRect(bgX, bgY, bgW, bgH);
	        }
	        context.fillStyle = textFill;
	      }

	      if (textBorderWidth > 0 && borderOpacity > 0) {
	        var textStroke = context.strokeStyle;
	        var textLineWidth = context.lineWidth;
	        var textBorderColor = ele.pstyle('text-border-color').value;
	        var textBorderStyle = ele.pstyle('text-border-style').value;

	        context.strokeStyle = 'rgba(' + textBorderColor[0] + ',' + textBorderColor[1] + ',' + textBorderColor[2] + ',' + borderOpacity * parentOpacity + ')';
	        context.lineWidth = textBorderWidth;

	        if (context.setLineDash) {
	          // for very outofdate browsers
	          switch (textBorderStyle) {
	            case 'dotted':
	              context.setLineDash([1, 1]);
	              break;
	            case 'dashed':
	              context.setLineDash([4, 2]);
	              break;
	            case 'double':
	              context.lineWidth = textBorderWidth / 4; // 50% reserved for white between the two borders
	              context.setLineDash([]);
	              break;
	            case 'solid':
	              context.setLineDash([]);
	              break;
	          }
	        }

	        context.strokeRect(bgX, bgY, bgW, bgH);

	        if (textBorderStyle === 'double') {
	          var whiteWidth = textBorderWidth / 2;

	          context.strokeRect(bgX + whiteWidth, bgY + whiteWidth, bgW - whiteWidth * 2, bgH - whiteWidth * 2);
	        }

	        if (context.setLineDash) {
	          // for very outofdate browsers
	          context.setLineDash([]);
	        }
	        context.lineWidth = textLineWidth;
	        context.strokeStyle = textStroke;
	      }
	    }

	    var lineWidth = 2 * ele.pstyle('text-outline-width').pfValue; // *2 b/c the stroke is drawn centred on the middle

	    if (lineWidth > 0) {
	      context.lineWidth = lineWidth;
	    }

	    if (ele.pstyle('text-wrap').value === 'wrap') {
	      var lines = util.getPrefixedProperty(rscratch, 'labelWrapCachedLines', prefix);
	      var lineHeight = textH / lines.length;

	      switch (valign) {
	        case 'top':
	          textY -= (lines.length - 1) * lineHeight;
	          break;
	        case 'center':
	        case 'bottom':
	          textY -= (lines.length - 1) * lineHeight;
	          break;
	      }

	      for (var l = 0; l < lines.length; l++) {
	        if (lineWidth > 0) {
	          context.strokeText(lines[l], textX, textY);
	        }

	        context.fillText(lines[l], textX, textY);

	        textY += lineHeight;
	      }
	    } else {
	      if (lineWidth > 0) {
	        context.strokeText(text, textX, textY);
	      }

	      context.fillText(text, textX, textY);
	    }

	    if (theta !== 0) {
	      context.rotate(-theta);
	      context.translate(-orgTextX, -orgTextY);
	    }
	  }
	};

	module.exports = CRp;

	/***/ }),
	/* 131 */
	/***/ (function(module, exports, __webpack_require__) {


	/* global Path2D */

	var is = __webpack_require__(0);

	var CRp = {};

	CRp.drawNode = function (context, node, shiftToOriginWithBb, drawLabel) {
	  var r = this;
	  var nodeWidth = void 0,
	      nodeHeight = void 0;
	  var _p = node._private;
	  var rs = _p.rscratch;
	  var pos = node.position();

	  if (!is.number(pos.x) || !is.number(pos.y)) {
	    return; // can't draw node with undefined position
	  }

	  if (!node.visible()) {
	    return;
	  }

	  var parentOpacity = node.effectiveOpacity();

	  var usePaths = r.usePaths();
	  var path = void 0;
	  var pathCacheHit = false;

	  var padding = node.padding();

	  nodeWidth = node.width() + 2 * padding;
	  nodeHeight = node.height() + 2 * padding;

	  //
	  // setup shift

	  var bb = void 0;
	  if (shiftToOriginWithBb) {
	    bb = shiftToOriginWithBb;

	    context.translate(-bb.x1, -bb.y1);
	  }

	  //
	  // load bg image

	  var bgImgProp = node.pstyle('background-image');
	  var urls = bgImgProp.value;
	  var urlDefined = new Array(urls.length);
	  var image = new Array(urls.length);
	  var numImages = 0;
	  for (var i = 0; i < urls.length; i++) {
	    var url = urls[i];
	    var defd = urlDefined[i] = url != null && url !== 'none';

	    if (defd) {
	      var bgImgCrossOrigin = node.cy().style().getIndexedStyle(node, 'background-image-crossorigin', 'value', i);

	      numImages++;

	      // get image, and if not loaded then ask to redraw when later loaded
	      image[i] = r.getCachedImage(url, bgImgCrossOrigin, function () {
	        node.emitAndNotify('background');
	      });
	    }
	  }

	  //
	  // setup styles

	  var darkness = node.pstyle('background-blacken').value;
	  var borderWidth = node.pstyle('border-width').pfValue;
	  var bgColor = node.pstyle('background-color').value;
	  var bgOpacity = node.pstyle('background-opacity').value * parentOpacity;
	  var borderColor = node.pstyle('border-color').value;
	  var borderStyle = node.pstyle('border-style').value;
	  var borderOpacity = node.pstyle('border-opacity').value * parentOpacity;

	  context.lineJoin = 'miter'; // so borders are square with the node shape

	  var setupShapeColor = function setupShapeColor() {
	    var bgOpy = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : bgOpacity;

	    r.fillStyle(context, bgColor[0], bgColor[1], bgColor[2], bgOpy);
	  };

	  var setupBorderColor = function setupBorderColor() {
	    var bdrOpy = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : borderOpacity;

	    r.strokeStyle(context, borderColor[0], borderColor[1], borderColor[2], bdrOpy);
	  };

	  //
	  // setup shape

	  var styleShape = node.pstyle('shape').strValue;
	  var shapePts = node.pstyle('shape-polygon-points').pfValue;

	  if (usePaths) {
	    var pathCacheKey = styleShape + '$' + nodeWidth + '$' + nodeHeight + (styleShape === 'polygon' ? '$' + shapePts.join('$') : '');

	    context.translate(pos.x, pos.y);

	    if (rs.pathCacheKey === pathCacheKey) {
	      path = rs.pathCache;
	      pathCacheHit = true;
	    } else {
	      path = new Path2D();
	      rs.pathCacheKey = pathCacheKey;
	      rs.pathCache = path;
	    }
	  }

	  var drawShape = function drawShape() {
	    if (!pathCacheHit) {

	      var npos = pos;

	      if (usePaths) {
	        npos = {
	          x: 0,
	          y: 0
	        };
	      }

	      r.nodeShapes[r.getNodeShape(node)].draw(path || context, npos.x, npos.y, nodeWidth, nodeHeight);
	    }

	    if (usePaths) {
	      context.fill(path);
	    } else {
	      context.fill();
	    }
	  };

	  var drawImages = function drawImages() {
	    var nodeOpacity = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : parentOpacity;

	    var prevBging = _p.backgrounding;
	    var totalCompleted = 0;

	    for (var _i = 0; _i < image.length; _i++) {
	      if (urlDefined[_i] && image[_i].complete && !image[_i].error) {
	        totalCompleted++;
	        r.drawInscribedImage(context, image[_i], node, _i, nodeOpacity);
	      }
	    }

	    _p.backgrounding = !(totalCompleted === numImages);
	    if (prevBging !== _p.backgrounding) {
	      // update style b/c :backgrounding state changed
	      node.updateStyle(false);
	    }
	  };

	  var drawPie = function drawPie() {
	    var redrawShape = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
	    var pieOpacity = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : parentOpacity;

	    if (r.hasPie(node)) {
	      r.drawPie(context, node, pieOpacity);

	      // redraw/restore path if steps after pie need it
	      if (redrawShape) {

	        if (!usePaths) {
	          r.nodeShapes[r.getNodeShape(node)].draw(context, pos.x, pos.y, nodeWidth, nodeHeight);
	        }
	      }
	    }
	  };

	  var darken = function darken() {
	    var darkenOpacity = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : parentOpacity;

	    var opacity = (darkness > 0 ? darkness : -darkness) * darkenOpacity;
	    var c = darkness > 0 ? 0 : 255;

	    if (darkness !== 0) {
	      r.fillStyle(context, c, c, c, opacity);

	      if (usePaths) {
	        context.fill(path);
	      } else {
	        context.fill();
	      }
	    }
	  };

	  var drawBorder = function drawBorder() {
	    if (borderWidth > 0) {

	      context.lineWidth = borderWidth;
	      context.lineCap = 'butt';

	      if (context.setLineDash) {
	        // for very outofdate browsers
	        switch (borderStyle) {
	          case 'dotted':
	            context.setLineDash([1, 1]);
	            break;

	          case 'dashed':
	            context.setLineDash([4, 2]);
	            break;

	          case 'solid':
	          case 'double':
	            context.setLineDash([]);
	            break;
	        }
	      }

	      if (usePaths) {
	        context.stroke(path);
	      } else {
	        context.stroke();
	      }

	      if (borderStyle === 'double') {
	        context.lineWidth = borderWidth / 3;

	        var gco = context.globalCompositeOperation;
	        context.globalCompositeOperation = 'destination-out';

	        if (usePaths) {
	          context.stroke(path);
	        } else {
	          context.stroke();
	        }

	        context.globalCompositeOperation = gco;
	      }

	      // reset in case we changed the border style
	      if (context.setLineDash) {
	        // for very outofdate browsers
	        context.setLineDash([]);
	      }
	    }
	  };

	  var drawOverlay = function drawOverlay() {
	    var overlayPadding = node.pstyle('overlay-padding').pfValue;
	    var overlayOpacity = node.pstyle('overlay-opacity').value;
	    var overlayColor = node.pstyle('overlay-color').value;

	    if (overlayOpacity > 0) {
	      r.fillStyle(context, overlayColor[0], overlayColor[1], overlayColor[2], overlayOpacity);

	      r.nodeShapes['roundrectangle'].draw(context, pos.x, pos.y, nodeWidth + overlayPadding * 2, nodeHeight + overlayPadding * 2);

	      context.fill();
	    }
	  };

	  var drawText = function drawText() {
	    r.drawElementText(context, node, drawLabel);
	  };

	  var ghost = node.pstyle('ghost').value === 'yes';

	  if (ghost) {
	    var gx = node.pstyle('ghost-offset-x').pfValue;
	    var gy = node.pstyle('ghost-offset-y').pfValue;
	    var ghostOpacity = node.pstyle('ghost-opacity').value;
	    var effGhostOpacity = ghostOpacity * parentOpacity;

	    context.translate(gx, gy);

	    setupShapeColor(ghostOpacity * bgOpacity);
	    drawShape();
	    drawImages(effGhostOpacity);
	    drawPie(darkness !== 0 || borderWidth !== 0);
	    darken(effGhostOpacity);
	    setupBorderColor(ghostOpacity * borderOpacity);
	    drawBorder();

	    context.translate(-gx, -gy);
	  }

	  setupShapeColor();
	  drawShape();
	  drawImages();
	  drawPie(darkness !== 0 || borderWidth !== 0);
	  darken();
	  setupBorderColor();
	  drawBorder();

	  if (usePaths) {
	    context.translate(-pos.x, -pos.y);
	  }

	  drawText();
	  drawOverlay();

	  //
	  // clean up shift

	  if (shiftToOriginWithBb) {
	    context.translate(bb.x1, bb.y1);
	  }
	};

	// does the node have at least one pie piece?
	CRp.hasPie = function (node) {
	  node = node[0]; // ensure ele ref

	  return node._private.hasPie;
	};

	CRp.drawPie = function (context, node, nodeOpacity, pos) {
	  node = node[0]; // ensure ele ref
	  pos = pos || node.position();

	  var cyStyle = node.cy().style();
	  var pieSize = node.pstyle('pie-size');
	  var x = pos.x;
	  var y = pos.y;
	  var nodeW = node.width();
	  var nodeH = node.height();
	  var radius = Math.min(nodeW, nodeH) / 2; // must fit in node
	  var lastPercent = 0; // what % to continue drawing pie slices from on [0, 1]
	  var usePaths = this.usePaths();

	  if (usePaths) {
	    x = 0;
	    y = 0;
	  }

	  if (pieSize.units === '%') {
	    radius = radius * pieSize.pfValue;
	  } else if (pieSize.pfValue !== undefined) {
	    radius = pieSize.pfValue / 2;
	  }

	  for (var i = 1; i <= cyStyle.pieBackgroundN; i++) {
	    // 1..N
	    var size = node.pstyle('pie-' + i + '-background-size').value;
	    var color = node.pstyle('pie-' + i + '-background-color').value;
	    var opacity = node.pstyle('pie-' + i + '-background-opacity').value * nodeOpacity;
	    var percent = size / 100; // map integer range [0, 100] to [0, 1]

	    // percent can't push beyond 1
	    if (percent + lastPercent > 1) {
	      percent = 1 - lastPercent;
	    }

	    var angleStart = 1.5 * Math.PI + 2 * Math.PI * lastPercent; // start at 12 o'clock and go clockwise
	    var angleDelta = 2 * Math.PI * percent;
	    var angleEnd = angleStart + angleDelta;

	    // ignore if
	    // - zero size
	    // - we're already beyond the full circle
	    // - adding the current slice would go beyond the full circle
	    if (size === 0 || lastPercent >= 1 || lastPercent + percent > 1) {
	      continue;
	    }

	    context.beginPath();
	    context.moveTo(x, y);
	    context.arc(x, y, radius, angleStart, angleEnd);
	    context.closePath();

	    this.fillStyle(context, color[0], color[1], color[2], opacity);

	    context.fill();

	    lastPercent += percent;
	  }
	};

	module.exports = CRp;

	/***/ }),
	/* 132 */
	/***/ (function(module, exports, __webpack_require__) {


	var CRp = {};

	var util = __webpack_require__(1);

	var motionBlurDelay = 100;

	// var isFirefox = typeof InstallTrigger !== 'undefined';

	CRp.getPixelRatio = function () {
	  var context = this.data.contexts[0];

	  if (this.forcedPixelRatio != null) {
	    return this.forcedPixelRatio;
	  }

	  var backingStore = context.backingStorePixelRatio || context.webkitBackingStorePixelRatio || context.mozBackingStorePixelRatio || context.msBackingStorePixelRatio || context.oBackingStorePixelRatio || context.backingStorePixelRatio || 1;

	  return (window.devicePixelRatio || 1) / backingStore; // eslint-disable-line no-undef
	};

	CRp.paintCache = function (context) {
	  var caches = this.paintCaches = this.paintCaches || [];
	  var needToCreateCache = true;
	  var cache;

	  for (var i = 0; i < caches.length; i++) {
	    cache = caches[i];

	    if (cache.context === context) {
	      needToCreateCache = false;
	      break;
	    }
	  }

	  if (needToCreateCache) {
	    cache = {
	      context: context
	    };
	    caches.push(cache);
	  }

	  return cache;
	};

	CRp.fillStyle = function (context, r, g, b, a) {
	  context.fillStyle = 'rgba(' + r + ',' + g + ',' + b + ',' + a + ')';

	  // turn off for now, seems context does its own caching

	  // var cache = this.paintCache(context);

	  // var fillStyle = 'rgba(' + r + ',' + g + ',' + b + ',' + a + ')';

	  // if( cache.fillStyle !== fillStyle ){
	  //   context.fillStyle = cache.fillStyle = fillStyle;
	  // }
	};

	CRp.strokeStyle = function (context, r, g, b, a) {
	  context.strokeStyle = 'rgba(' + r + ',' + g + ',' + b + ',' + a + ')';

	  // turn off for now, seems context does its own caching

	  // var cache = this.paintCache(context);

	  // var strokeStyle = 'rgba(' + r + ',' + g + ',' + b + ',' + a + ')';

	  // if( cache.strokeStyle !== strokeStyle ){
	  //   context.strokeStyle = cache.strokeStyle = strokeStyle;
	  // }
	};

	// Resize canvas
	CRp.matchCanvasSize = function (container) {
	  var r = this;
	  var data = r.data;
	  var bb = r.findContainerClientCoords();
	  var width = bb[2];
	  var height = bb[3];
	  var pixelRatio = r.getPixelRatio();
	  var mbPxRatio = r.motionBlurPxRatio;

	  if (container === r.data.bufferCanvases[r.MOTIONBLUR_BUFFER_NODE] || container === r.data.bufferCanvases[r.MOTIONBLUR_BUFFER_DRAG]) {
	    pixelRatio = mbPxRatio;
	  }

	  var canvasWidth = width * pixelRatio;
	  var canvasHeight = height * pixelRatio;
	  var canvas;

	  if (canvasWidth === r.canvasWidth && canvasHeight === r.canvasHeight) {
	    return; // save cycles if same
	  }

	  r.fontCaches = null; // resizing resets the style

	  var canvasContainer = data.canvasContainer;
	  canvasContainer.style.width = width + 'px';
	  canvasContainer.style.height = height + 'px';

	  for (var i = 0; i < r.CANVAS_LAYERS; i++) {
	    canvas = data.canvases[i];

	    canvas.width = canvasWidth;
	    canvas.height = canvasHeight;

	    canvas.style.width = width + 'px';
	    canvas.style.height = height + 'px';
	  }

	  for (var i = 0; i < r.BUFFER_COUNT; i++) {
	    canvas = data.bufferCanvases[i];

	    canvas.width = canvasWidth;
	    canvas.height = canvasHeight;

	    canvas.style.width = width + 'px';
	    canvas.style.height = height + 'px';
	  }

	  r.textureMult = 1;
	  if (pixelRatio <= 1) {
	    canvas = data.bufferCanvases[r.TEXTURE_BUFFER];

	    r.textureMult = 2;
	    canvas.width = canvasWidth * r.textureMult;
	    canvas.height = canvasHeight * r.textureMult;
	  }

	  r.canvasWidth = canvasWidth;
	  r.canvasHeight = canvasHeight;
	};

	CRp.renderTo = function (cxt, zoom, pan, pxRatio) {
	  this.render({
	    forcedContext: cxt,
	    forcedZoom: zoom,
	    forcedPan: pan,
	    drawAllLayers: true,
	    forcedPxRatio: pxRatio
	  });
	};

	CRp.render = function (options) {
	  options = options || util.staticEmptyObject();

	  var forcedContext = options.forcedContext;
	  var drawAllLayers = options.drawAllLayers;
	  var drawOnlyNodeLayer = options.drawOnlyNodeLayer;
	  var forcedZoom = options.forcedZoom;
	  var forcedPan = options.forcedPan;
	  var r = this;
	  var pixelRatio = options.forcedPxRatio === undefined ? this.getPixelRatio() : options.forcedPxRatio;
	  var cy = r.cy;var data = r.data;
	  var needDraw = data.canvasNeedsRedraw;
	  var textureDraw = r.textureOnViewport && !forcedContext && (r.pinching || r.hoverData.dragging || r.swipePanning || r.data.wheelZooming);
	  var motionBlur = options.motionBlur !== undefined ? options.motionBlur : r.motionBlur;
	  var mbPxRatio = r.motionBlurPxRatio;
	  var hasCompoundNodes = cy.hasCompoundNodes();
	  var inNodeDragGesture = r.hoverData.draggingEles;
	  var inBoxSelection = r.hoverData.selecting || r.touchData.selecting ? true : false;
	  motionBlur = motionBlur && !forcedContext && r.motionBlurEnabled && !inBoxSelection;
	  var motionBlurFadeEffect = motionBlur;

	  if (!forcedContext) {
	    if (r.prevPxRatio !== pixelRatio) {
	      r.invalidateContainerClientCoordsCache();
	      r.matchCanvasSize(r.container);

	      r.redrawHint('eles', true);
	      r.redrawHint('drag', true);
	    }

	    r.prevPxRatio = pixelRatio;
	  }

	  if (!forcedContext && r.motionBlurTimeout) {
	    clearTimeout(r.motionBlurTimeout);
	  }

	  if (motionBlur) {
	    if (r.mbFrames == null) {
	      r.mbFrames = 0;
	    }

	    r.mbFrames++;

	    if (r.mbFrames < 3) {
	      // need several frames before even high quality motionblur
	      motionBlurFadeEffect = false;
	    }

	    // go to lower quality blurry frames when several m/b frames have been rendered (avoids flashing)
	    if (r.mbFrames > r.minMbLowQualFrames) {
	      //r.fullQualityMb = false;
	      r.motionBlurPxRatio = r.mbPxRBlurry;
	    }
	  }

	  if (r.clearingMotionBlur) {
	    r.motionBlurPxRatio = 1;
	  }

	  // b/c drawToContext() may be async w.r.t. redraw(), keep track of last texture frame
	  // because a rogue async texture frame would clear needDraw
	  if (r.textureDrawLastFrame && !textureDraw) {
	    needDraw[r.NODE] = true;
	    needDraw[r.SELECT_BOX] = true;
	  }

	  var coreStyle = cy.style()._private.coreStyle;

	  var zoom = cy.zoom();
	  var effectiveZoom = forcedZoom !== undefined ? forcedZoom : zoom;
	  var pan = cy.pan();
	  var effectivePan = {
	    x: pan.x,
	    y: pan.y
	  };

	  var vp = {
	    zoom: zoom,
	    pan: {
	      x: pan.x,
	      y: pan.y
	    }
	  };
	  var prevVp = r.prevViewport;
	  var viewportIsDiff = prevVp === undefined || vp.zoom !== prevVp.zoom || vp.pan.x !== prevVp.pan.x || vp.pan.y !== prevVp.pan.y;

	  // we want the low quality motionblur only when the viewport is being manipulated etc (where it's not noticed)
	  if (!viewportIsDiff && !(inNodeDragGesture && !hasCompoundNodes)) {
	    r.motionBlurPxRatio = 1;
	  }

	  if (forcedPan) {
	    effectivePan = forcedPan;
	  }

	  // apply pixel ratio

	  effectiveZoom *= pixelRatio;
	  effectivePan.x *= pixelRatio;
	  effectivePan.y *= pixelRatio;

	  var eles = r.getCachedZSortedEles();

	  function mbclear(context, x, y, w, h) {
	    var gco = context.globalCompositeOperation;

	    context.globalCompositeOperation = 'destination-out';
	    r.fillStyle(context, 255, 255, 255, r.motionBlurTransparency);
	    context.fillRect(x, y, w, h);

	    context.globalCompositeOperation = gco;
	  }

	  function setContextTransform(context, clear) {
	    var ePan, eZoom, w, h;

	    if (!r.clearingMotionBlur && (context === data.bufferContexts[r.MOTIONBLUR_BUFFER_NODE] || context === data.bufferContexts[r.MOTIONBLUR_BUFFER_DRAG])) {
	      ePan = {
	        x: pan.x * mbPxRatio,
	        y: pan.y * mbPxRatio
	      };

	      eZoom = zoom * mbPxRatio;

	      w = r.canvasWidth * mbPxRatio;
	      h = r.canvasHeight * mbPxRatio;
	    } else {
	      ePan = effectivePan;
	      eZoom = effectiveZoom;

	      w = r.canvasWidth;
	      h = r.canvasHeight;
	    }

	    context.setTransform(1, 0, 0, 1, 0, 0);

	    if (clear === 'motionBlur') {
	      mbclear(context, 0, 0, w, h);
	    } else if (!forcedContext && (clear === undefined || clear)) {
	      context.clearRect(0, 0, w, h);
	    }

	    if (!drawAllLayers) {
	      context.translate(ePan.x, ePan.y);
	      context.scale(eZoom, eZoom);
	    }
	    if (forcedPan) {
	      context.translate(forcedPan.x, forcedPan.y);
	    }
	    if (forcedZoom) {
	      context.scale(forcedZoom, forcedZoom);
	    }
	  }

	  if (!textureDraw) {
	    r.textureDrawLastFrame = false;
	  }

	  if (textureDraw) {
	    r.textureDrawLastFrame = true;

	    var bb;

	    if (!r.textureCache) {
	      r.textureCache = {};

	      bb = r.textureCache.bb = cy.mutableElements().boundingBox();

	      r.textureCache.texture = r.data.bufferCanvases[r.TEXTURE_BUFFER];

	      var cxt = r.data.bufferContexts[r.TEXTURE_BUFFER];

	      cxt.setTransform(1, 0, 0, 1, 0, 0);
	      cxt.clearRect(0, 0, r.canvasWidth * r.textureMult, r.canvasHeight * r.textureMult);

	      r.render({
	        forcedContext: cxt,
	        drawOnlyNodeLayer: true,
	        forcedPxRatio: pixelRatio * r.textureMult
	      });

	      var vp = r.textureCache.viewport = {
	        zoom: cy.zoom(),
	        pan: cy.pan(),
	        width: r.canvasWidth,
	        height: r.canvasHeight
	      };

	      vp.mpan = {
	        x: (0 - vp.pan.x) / vp.zoom,
	        y: (0 - vp.pan.y) / vp.zoom
	      };
	    }

	    needDraw[r.DRAG] = false;
	    needDraw[r.NODE] = false;

	    var context = data.contexts[r.NODE];

	    var texture = r.textureCache.texture;
	    var vp = r.textureCache.viewport;
	    bb = r.textureCache.bb;

	    context.setTransform(1, 0, 0, 1, 0, 0);

	    if (motionBlur) {
	      mbclear(context, 0, 0, vp.width, vp.height);
	    } else {
	      context.clearRect(0, 0, vp.width, vp.height);
	    }

	    var outsideBgColor = coreStyle['outside-texture-bg-color'].value;
	    var outsideBgOpacity = coreStyle['outside-texture-bg-opacity'].value;
	    r.fillStyle(context, outsideBgColor[0], outsideBgColor[1], outsideBgColor[2], outsideBgOpacity);
	    context.fillRect(0, 0, vp.width, vp.height);

	    var zoom = cy.zoom();

	    setContextTransform(context, false);

	    context.clearRect(vp.mpan.x, vp.mpan.y, vp.width / vp.zoom / pixelRatio, vp.height / vp.zoom / pixelRatio);
	    context.drawImage(texture, vp.mpan.x, vp.mpan.y, vp.width / vp.zoom / pixelRatio, vp.height / vp.zoom / pixelRatio);
	  } else if (r.textureOnViewport && !forcedContext) {
	    // clear the cache since we don't need it
	    r.textureCache = null;
	  }

	  var extent = cy.extent();
	  var vpManip = r.pinching || r.hoverData.dragging || r.swipePanning || r.data.wheelZooming || r.hoverData.draggingEles;
	  var hideEdges = r.hideEdgesOnViewport && vpManip;

	  var needMbClear = [];

	  needMbClear[r.NODE] = !needDraw[r.NODE] && motionBlur && !r.clearedForMotionBlur[r.NODE] || r.clearingMotionBlur;
	  if (needMbClear[r.NODE]) {
	    r.clearedForMotionBlur[r.NODE] = true;
	  }

	  needMbClear[r.DRAG] = !needDraw[r.DRAG] && motionBlur && !r.clearedForMotionBlur[r.DRAG] || r.clearingMotionBlur;
	  if (needMbClear[r.DRAG]) {
	    r.clearedForMotionBlur[r.DRAG] = true;
	  }

	  if (needDraw[r.NODE] || drawAllLayers || drawOnlyNodeLayer || needMbClear[r.NODE]) {
	    var useBuffer = motionBlur && !needMbClear[r.NODE] && mbPxRatio !== 1;
	    var context = forcedContext || (useBuffer ? r.data.bufferContexts[r.MOTIONBLUR_BUFFER_NODE] : data.contexts[r.NODE]);
	    var clear = motionBlur && !useBuffer ? 'motionBlur' : undefined;

	    setContextTransform(context, clear);

	    if (hideEdges) {
	      r.drawCachedNodes(context, eles.nondrag, pixelRatio, extent);
	    } else {
	      r.drawLayeredElements(context, eles.nondrag, pixelRatio, extent);
	    }

	    if (r.debug) {
	      r.drawDebugPoints(context, eles.nondrag);
	    }

	    if (!drawAllLayers && !motionBlur) {
	      needDraw[r.NODE] = false;
	    }
	  }

	  if (!drawOnlyNodeLayer && (needDraw[r.DRAG] || drawAllLayers || needMbClear[r.DRAG])) {
	    var useBuffer = motionBlur && !needMbClear[r.DRAG] && mbPxRatio !== 1;
	    var context = forcedContext || (useBuffer ? r.data.bufferContexts[r.MOTIONBLUR_BUFFER_DRAG] : data.contexts[r.DRAG]);

	    setContextTransform(context, motionBlur && !useBuffer ? 'motionBlur' : undefined);

	    if (hideEdges) {
	      r.drawCachedNodes(context, eles.drag, pixelRatio, extent);
	    } else {
	      r.drawCachedElements(context, eles.drag, pixelRatio, extent);
	    }

	    if (r.debug) {
	      r.drawDebugPoints(context, eles.drag);
	    }

	    if (!drawAllLayers && !motionBlur) {
	      needDraw[r.DRAG] = false;
	    }
	  }

	  if (r.showFps || !drawOnlyNodeLayer && needDraw[r.SELECT_BOX] && !drawAllLayers) {
	    var context = forcedContext || data.contexts[r.SELECT_BOX];

	    setContextTransform(context);

	    if (r.selection[4] == 1 && (r.hoverData.selecting || r.touchData.selecting)) {
	      var zoom = r.cy.zoom();
	      var borderWidth = coreStyle['selection-box-border-width'].value / zoom;

	      context.lineWidth = borderWidth;
	      context.fillStyle = 'rgba(' + coreStyle['selection-box-color'].value[0] + ',' + coreStyle['selection-box-color'].value[1] + ',' + coreStyle['selection-box-color'].value[2] + ',' + coreStyle['selection-box-opacity'].value + ')';

	      context.fillRect(r.selection[0], r.selection[1], r.selection[2] - r.selection[0], r.selection[3] - r.selection[1]);

	      if (borderWidth > 0) {
	        context.strokeStyle = 'rgba(' + coreStyle['selection-box-border-color'].value[0] + ',' + coreStyle['selection-box-border-color'].value[1] + ',' + coreStyle['selection-box-border-color'].value[2] + ',' + coreStyle['selection-box-opacity'].value + ')';

	        context.strokeRect(r.selection[0], r.selection[1], r.selection[2] - r.selection[0], r.selection[3] - r.selection[1]);
	      }
	    }

	    if (data.bgActivePosistion && !r.hoverData.selecting) {
	      var zoom = r.cy.zoom();
	      var pos = data.bgActivePosistion;

	      context.fillStyle = 'rgba(' + coreStyle['active-bg-color'].value[0] + ',' + coreStyle['active-bg-color'].value[1] + ',' + coreStyle['active-bg-color'].value[2] + ',' + coreStyle['active-bg-opacity'].value + ')';

	      context.beginPath();
	      context.arc(pos.x, pos.y, coreStyle['active-bg-size'].pfValue / zoom, 0, 2 * Math.PI);
	      context.fill();
	    }

	    var timeToRender = r.lastRedrawTime;
	    if (r.showFps && timeToRender) {
	      timeToRender = Math.round(timeToRender);
	      var fps = Math.round(1000 / timeToRender);

	      context.setTransform(1, 0, 0, 1, 0, 0);

	      context.fillStyle = 'rgba(255, 0, 0, 0.75)';
	      context.strokeStyle = 'rgba(255, 0, 0, 0.75)';
	      context.lineWidth = 1;
	      context.fillText('1 frame = ' + timeToRender + ' ms = ' + fps + ' fps', 0, 20);

	      var maxFps = 60;
	      context.strokeRect(0, 30, 250, 20);
	      context.fillRect(0, 30, 250 * Math.min(fps / maxFps, 1), 20);
	    }

	    if (!drawAllLayers) {
	      needDraw[r.SELECT_BOX] = false;
	    }
	  }

	  // motionblur: blit rendered blurry frames
	  if (motionBlur && mbPxRatio !== 1) {
	    var cxtNode = data.contexts[r.NODE];
	    var txtNode = r.data.bufferCanvases[r.MOTIONBLUR_BUFFER_NODE];

	    var cxtDrag = data.contexts[r.DRAG];
	    var txtDrag = r.data.bufferCanvases[r.MOTIONBLUR_BUFFER_DRAG];

	    var drawMotionBlur = function drawMotionBlur(cxt, txt, needClear) {
	      cxt.setTransform(1, 0, 0, 1, 0, 0);

	      if (needClear || !motionBlurFadeEffect) {
	        cxt.clearRect(0, 0, r.canvasWidth, r.canvasHeight);
	      } else {
	        mbclear(cxt, 0, 0, r.canvasWidth, r.canvasHeight);
	      }

	      var pxr = mbPxRatio;

	      cxt.drawImage(txt, // img
	      0, 0, // sx, sy
	      r.canvasWidth * pxr, r.canvasHeight * pxr, // sw, sh
	      0, 0, // x, y
	      r.canvasWidth, r.canvasHeight // w, h
	      );
	    };

	    if (needDraw[r.NODE] || needMbClear[r.NODE]) {
	      drawMotionBlur(cxtNode, txtNode, needMbClear[r.NODE]);
	      needDraw[r.NODE] = false;
	    }

	    if (needDraw[r.DRAG] || needMbClear[r.DRAG]) {
	      drawMotionBlur(cxtDrag, txtDrag, needMbClear[r.DRAG]);
	      needDraw[r.DRAG] = false;
	    }
	  }

	  r.prevViewport = vp;

	  if (r.clearingMotionBlur) {
	    r.clearingMotionBlur = false;
	    r.motionBlurCleared = true;
	    r.motionBlur = true;
	  }

	  if (motionBlur) {
	    r.motionBlurTimeout = setTimeout(function () {
	      r.motionBlurTimeout = null;

	      r.clearedForMotionBlur[r.NODE] = false;
	      r.clearedForMotionBlur[r.DRAG] = false;
	      r.motionBlur = false;
	      r.clearingMotionBlur = !textureDraw;
	      r.mbFrames = 0;

	      needDraw[r.NODE] = true;
	      needDraw[r.DRAG] = true;

	      r.redraw();
	    }, motionBlurDelay);
	  }

	  if (!forcedContext) {
	    cy.emit('render');
	  }
	};

	module.exports = CRp;

	/***/ }),
	/* 133 */
	/***/ (function(module, exports, __webpack_require__) {


	var math = __webpack_require__(2);

	var CRp = {};

	// @O Polygon drawing
	CRp.drawPolygonPath = function (context, x, y, width, height, points) {

	  var halfW = width / 2;
	  var halfH = height / 2;

	  if (context.beginPath) {
	    context.beginPath();
	  }

	  context.moveTo(x + halfW * points[0], y + halfH * points[1]);

	  for (var i = 1; i < points.length / 2; i++) {
	    context.lineTo(x + halfW * points[i * 2], y + halfH * points[i * 2 + 1]);
	  }

	  context.closePath();
	};

	// Round rectangle drawing
	CRp.drawRoundRectanglePath = function (context, x, y, width, height) {

	  var halfWidth = width / 2;
	  var halfHeight = height / 2;
	  var cornerRadius = math.getRoundRectangleRadius(width, height);

	  if (context.beginPath) {
	    context.beginPath();
	  }

	  // Start at top middle
	  context.moveTo(x, y - halfHeight);
	  // Arc from middle top to right side
	  context.arcTo(x + halfWidth, y - halfHeight, x + halfWidth, y, cornerRadius);
	  // Arc from right side to bottom
	  context.arcTo(x + halfWidth, y + halfHeight, x, y + halfHeight, cornerRadius);
	  // Arc from bottom to left side
	  context.arcTo(x - halfWidth, y + halfHeight, x - halfWidth, y, cornerRadius);
	  // Arc from left side to topBorder
	  context.arcTo(x - halfWidth, y - halfHeight, x, y - halfHeight, cornerRadius);
	  // Join line
	  context.lineTo(x, y - halfHeight);

	  context.closePath();
	};

	CRp.drawBottomRoundRectanglePath = function (context, x, y, width, height) {

	  var halfWidth = width / 2;
	  var halfHeight = height / 2;
	  var cornerRadius = math.getRoundRectangleRadius(width, height);

	  if (context.beginPath) {
	    context.beginPath();
	  }

	  // Start at top middle
	  context.moveTo(x, y - halfHeight);
	  context.lineTo(x + halfWidth, y - halfHeight);
	  context.lineTo(x + halfWidth, y);

	  context.arcTo(x + halfWidth, y + halfHeight, x, y + halfHeight, cornerRadius);
	  context.arcTo(x - halfWidth, y + halfHeight, x - halfWidth, y, cornerRadius);

	  context.lineTo(x - halfWidth, y - halfHeight);
	  context.lineTo(x, y - halfHeight);

	  context.closePath();
	};

	CRp.drawCutRectanglePath = function (context, x, y, width, height) {

	  var halfWidth = width / 2;
	  var halfHeight = height / 2;
	  var cornerLength = math.getCutRectangleCornerLength();

	  if (context.beginPath) {
	    context.beginPath();
	  }

	  context.moveTo(x - halfWidth + cornerLength, y - halfHeight);

	  context.lineTo(x + halfWidth - cornerLength, y - halfHeight);
	  context.lineTo(x + halfWidth, y - halfHeight + cornerLength);
	  context.lineTo(x + halfWidth, y + halfHeight - cornerLength);
	  context.lineTo(x + halfWidth - cornerLength, y + halfHeight);
	  context.lineTo(x - halfWidth + cornerLength, y + halfHeight);
	  context.lineTo(x - halfWidth, y + halfHeight - cornerLength);
	  context.lineTo(x - halfWidth, y - halfHeight + cornerLength);

	  context.closePath();
	};

	CRp.drawBarrelPath = function (context, x, y, width, height) {

	  var halfWidth = width / 2;
	  var halfHeight = height / 2;

	  var xBegin = x - halfWidth;
	  var xEnd = x + halfWidth;
	  var yBegin = y - halfHeight;
	  var yEnd = y + halfHeight;

	  var barrelCurveConstants = math.getBarrelCurveConstants(width, height);
	  var wOffset = barrelCurveConstants.widthOffset;
	  var hOffset = barrelCurveConstants.heightOffset;
	  var ctrlPtXOffset = barrelCurveConstants.ctrlPtOffsetPct * wOffset;

	  if (context.beginPath) {
	    context.beginPath();
	  }

	  context.moveTo(xBegin, yBegin + hOffset);

	  context.lineTo(xBegin, yEnd - hOffset);
	  context.quadraticCurveTo(xBegin + ctrlPtXOffset, yEnd, xBegin + wOffset, yEnd);

	  context.lineTo(xEnd - wOffset, yEnd);
	  context.quadraticCurveTo(xEnd - ctrlPtXOffset, yEnd, xEnd, yEnd - hOffset);

	  context.lineTo(xEnd, yBegin + hOffset);
	  context.quadraticCurveTo(xEnd - ctrlPtXOffset, yBegin, xEnd - wOffset, yBegin);

	  context.lineTo(xBegin + wOffset, yBegin);
	  context.quadraticCurveTo(xBegin + ctrlPtXOffset, yBegin, xBegin, yBegin + hOffset);

	  context.closePath();
	};

	var sin0 = Math.sin(0);
	var cos0 = Math.cos(0);

	var sin = {};
	var cos = {};

	var ellipseStepSize = Math.PI / 40;

	for (var i = 0 * Math.PI; i < 2 * Math.PI; i += ellipseStepSize) {
	  sin[i] = Math.sin(i);
	  cos[i] = Math.cos(i);
	}

	CRp.drawEllipsePath = function (context, centerX, centerY, width, height) {
	  if (context.beginPath) {
	    context.beginPath();
	  }

	  if (context.ellipse) {
	    context.ellipse(centerX, centerY, width / 2, height / 2, 0, 0, 2 * Math.PI);
	  } else {
	    var xPos, yPos;
	    var rw = width / 2;
	    var rh = height / 2;
	    for (var i = 0 * Math.PI; i < 2 * Math.PI; i += ellipseStepSize) {
	      xPos = centerX - rw * sin[i] * sin0 + rw * cos[i] * cos0;
	      yPos = centerY + rh * cos[i] * sin0 + rh * sin[i] * cos0;

	      if (i === 0) {
	        context.moveTo(xPos, yPos);
	      } else {
	        context.lineTo(xPos, yPos);
	      }
	    }
	  }

	  context.closePath();
	};

	module.exports = CRp;

	/***/ }),
	/* 134 */
	/***/ (function(module, exports, __webpack_require__) {


	var is = __webpack_require__(0);

	var CRp = {};

	CRp.createBuffer = function (w, h) {
	  var buffer = document.createElement('canvas'); // eslint-disable-line no-undef
	  buffer.width = w;
	  buffer.height = h;

	  return [buffer, buffer.getContext('2d')];
	};

	CRp.bufferCanvasImage = function (options) {
	  var cy = this.cy;
	  var eles = cy.mutableElements();
	  var bb = eles.boundingBox();
	  var ctrRect = this.findContainerClientCoords();
	  var width = options.full ? Math.ceil(bb.w) : ctrRect[2];
	  var height = options.full ? Math.ceil(bb.h) : ctrRect[3];
	  var specdMaxDims = is.number(options.maxWidth) || is.number(options.maxHeight);
	  var pxRatio = this.getPixelRatio();
	  var scale = 1;

	  if (options.scale !== undefined) {
	    width *= options.scale;
	    height *= options.scale;

	    scale = options.scale;
	  } else if (specdMaxDims) {
	    var maxScaleW = Infinity;
	    var maxScaleH = Infinity;

	    if (is.number(options.maxWidth)) {
	      maxScaleW = scale * options.maxWidth / width;
	    }

	    if (is.number(options.maxHeight)) {
	      maxScaleH = scale * options.maxHeight / height;
	    }

	    scale = Math.min(maxScaleW, maxScaleH);

	    width *= scale;
	    height *= scale;
	  }

	  if (!specdMaxDims) {
	    width *= pxRatio;
	    height *= pxRatio;
	    scale *= pxRatio;
	  }

	  var buffCanvas = document.createElement('canvas'); // eslint-disable-line no-undef

	  buffCanvas.width = width;
	  buffCanvas.height = height;

	  buffCanvas.style.width = width + 'px';
	  buffCanvas.style.height = height + 'px';

	  var buffCxt = buffCanvas.getContext('2d');

	  // Rasterize the layers, but only if container has nonzero size
	  if (width > 0 && height > 0) {

	    buffCxt.clearRect(0, 0, width, height);

	    buffCxt.globalCompositeOperation = 'source-over';

	    var zsortedEles = this.getCachedZSortedEles();

	    if (options.full) {
	      // draw the full bounds of the graph
	      buffCxt.translate(-bb.x1 * scale, -bb.y1 * scale);
	      buffCxt.scale(scale, scale);

	      this.drawElements(buffCxt, zsortedEles);

	      buffCxt.scale(1 / scale, 1 / scale);
	      buffCxt.translate(bb.x1 * scale, bb.y1 * scale);
	    } else {
	      // draw the current view
	      var pan = cy.pan();

	      var translation = {
	        x: pan.x * scale,
	        y: pan.y * scale
	      };

	      scale *= cy.zoom();

	      buffCxt.translate(translation.x, translation.y);
	      buffCxt.scale(scale, scale);

	      this.drawElements(buffCxt, zsortedEles);

	      buffCxt.scale(1 / scale, 1 / scale);
	      buffCxt.translate(-translation.x, -translation.y);
	    }

	    // need to fill bg at end like this in order to fill cleared transparent pixels in jpgs
	    if (options.bg) {
	      buffCxt.globalCompositeOperation = 'destination-over';

	      buffCxt.fillStyle = options.bg;
	      buffCxt.rect(0, 0, width, height);
	      buffCxt.fill();
	    }
	  }

	  return buffCanvas;
	};

	function b64ToBlob(b64, mimeType) {
	  var bytes = atob(b64);
	  var buff = new ArrayBuffer(bytes.length);
	  var buffUint8 = new Uint8Array(buff);

	  for (var i = 0; i < bytes.length; i++) {
	    buffUint8[i] = bytes.charCodeAt(i);
	  }

	  return new Blob([buff], { type: mimeType });
	}

	function b64UriToB64(b64uri) {
	  var i = b64uri.indexOf(',');

	  return b64uri.substr(i + 1);
	}
	function output(options, canvas, mimeType) {
	  var b64Uri = canvas.toDataURL(mimeType, options.quality);

	  switch (options.output) {
	    case 'blob':
	      return b64ToBlob(b64UriToB64(b64Uri), mimeType);

	    case 'base64':
	      return b64UriToB64(b64Uri);

	    case 'base64uri':
	    default:
	      return b64Uri;
	  }
	}

	CRp.png = function (options) {
	  return output(options, this.bufferCanvasImage(options), 'image/png');
	};

	CRp.jpg = function (options) {
	  return output(options, this.bufferCanvasImage(options), 'image/jpeg');
	};

	module.exports = CRp;

	/***/ }),
	/* 135 */
	/***/ (function(module, exports, __webpack_require__) {


	var CRp = {};

	CRp.nodeShapeImpl = function (name, context, centerX, centerY, width, height, points) {
	  switch (name) {
	    case 'ellipse':
	      return this.drawEllipsePath(context, centerX, centerY, width, height);
	    case 'polygon':
	      return this.drawPolygonPath(context, centerX, centerY, width, height, points);
	    case 'roundrectangle':
	      return this.drawRoundRectanglePath(context, centerX, centerY, width, height);
	    case 'cutrectangle':
	      return this.drawCutRectanglePath(context, centerX, centerY, width, height);
	    case 'bottomroundrectangle':
	      return this.drawBottomRoundRectanglePath(context, centerX, centerY, width, height);
	    case 'barrel':
	      return this.drawBarrelPath(context, centerX, centerY, width, height);
	  }
	};

	module.exports = CRp;

	/***/ }),
	/* 136 */
	/***/ (function(module, exports, __webpack_require__) {


	var is = __webpack_require__(0);
	var util = __webpack_require__(1);
	var Style = __webpack_require__(18);

	// a dummy stylesheet object that doesn't need a reference to the core
	// (useful for init)
	var Stylesheet = function Stylesheet() {
	  if (!(this instanceof Stylesheet)) {
	    return new Stylesheet();
	  }

	  this.length = 0;
	};

	var sheetfn = Stylesheet.prototype;

	sheetfn.instanceString = function () {
	  return 'stylesheet';
	};

	// just store the selector to be parsed later
	sheetfn.selector = function (selector) {
	  var i = this.length++;

	  this[i] = {
	    selector: selector,
	    properties: []
	  };

	  return this; // chaining
	};

	// just store the property to be parsed later
	sheetfn.css = function (name, value) {
	  var i = this.length - 1;

	  if (is.string(name)) {
	    this[i].properties.push({
	      name: name,
	      value: value
	    });
	  } else if (is.plainObject(name)) {
	    var map = name;

	    for (var j = 0; j < Style.properties.length; j++) {
	      var prop = Style.properties[j];
	      var mapVal = map[prop.name];

	      if (mapVal === undefined) {
	        // also try camel case name
	        mapVal = map[util.dash2camel(prop.name)];
	      }

	      if (mapVal !== undefined) {
	        var _name = prop.name;
	        var _value = mapVal;

	        this[i].properties.push({
	          name: _name,
	          value: _value
	        });
	      }
	    }
	  }

	  return this; // chaining
	};

	sheetfn.style = sheetfn.css;

	// generate a real style object from the dummy stylesheet
	sheetfn.generateStyle = function (cy) {
	  var style = new Style(cy);

	  return this.appendToStyle(style);
	};

	// append a dummy stylesheet object on a real style object
	sheetfn.appendToStyle = function (style) {
	  for (var i = 0; i < this.length; i++) {
	    var context = this[i];
	    var selector = context.selector;
	    var props = context.properties;

	    style.selector(selector); // apply selector

	    for (var j = 0; j < props.length; j++) {
	      var prop = props[j];

	      style.css(prop.name, prop.value); // apply property
	    }
	  }

	  return style;
	};

	module.exports = Stylesheet;

	/***/ }),
	/* 137 */
	/***/ (function(module, exports, __webpack_require__) {


	module.exports = "3.2.22";

	/***/ })
	/******/ ]);
	});
	});

	var cytoscape$1 = unwrapExports(cytoscape_cjs);

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

	function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }
	var Ontology =
	/*#__PURE__*/
	function () {
	  function Ontology(name, version) {
	    var iriSet = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : new Set();
	    var diagrams = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];

	    _classCallCheck(this, Ontology);

	    this.name = name;
	    this.version = version;
	    this.iriSet = iriSet;
	    this.diagrams = diagrams;
	  } // @param {Iri} iri


	  _createClass(Ontology, [{
	    key: "addIri",
	    value: function addIri(iri) {
	      this.iriSet.add(iri);
	    } // @param {Diagram} diagram

	  }, {
	    key: "addDiagram",
	    value: function addDiagram(diagram) {
	      this.diagrams.push(diagram);
	    }
	  }, {
	    key: "getDiagram",
	    value: function getDiagram(index) {
	      return this.diagrams[index];
	    }
	    /**
	     * Get an element in the ontology by id, searching in every diagram
	     * @param {string} elem_id - The id of the elem to retrieve 
	     * @param {boolean} json - if true return plain json, if false return cytoscape node
	     */

	  }, {
	    key: "getElem",
	    value: function getElem(elem_id) {
	      var json = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
	      var _iteratorNormalCompletion = true;
	      var _didIteratorError = false;
	      var _iteratorError = undefined;

	      try {
	        for (var _iterator = this.diagrams[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	          var diagram = _step.value;
	          var node = diagram.cy.$id(elem_id);
	          if (node && node.length > 0) return json ? node.json() : node;
	        }
	      } catch (err) {
	        _didIteratorError = true;
	        _iteratorError = err;
	      } finally {
	        try {
	          if (!_iteratorNormalCompletion && _iterator["return"] != null) {
	            _iterator["return"]();
	          }
	        } finally {
	          if (_didIteratorError) {
	            throw _iteratorError;
	          }
	        }
	      }

	      return false;
	    }
	    /**
	     * Get an element in the ontology by its id and its diagram id
	     * @param {string} elem_id - The id of the element to retrieve 
	     * @param {string } diagram_id - the id of the diagram containing the element
	     * @param {boolean} json - if true return plain json, if false return cytoscape node
	     */

	  }, {
	    key: "getElemByDiagramAndId",
	    value: function getElemByDiagramAndId(elem_id, diagram_id) {
	      var json = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
	      var diagram = this.getDiagram(diagram_id);

	      if (diagram) {
	        var node = diagram.cy.$("[id_xml = \"".concat(elem_id, "\"]"));
	        if (node) return json ? node.json() : node;
	      }

	      return false;
	    } // return a collection with all the predicates in the ontology

	  }, {
	    key: "getEntities",
	    value: function getEntities() {
	      var predicates = cytoscape$1().collection();
	      this.diagrams.forEach(function (diagram) {
	        predicates = predicates.union(diagram.cy.nodes('.predicate'));
	      });
	      predicates = predicates.sort(function (a, b) {
	        return a.data('label').localeCompare(b.data('label'));
	      });
	      return predicates.jsons();
	    }
	  }]);

	  return Ontology;
	}();

	function _classCallCheck$1(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _defineProperties$1(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

	function _createClass$1(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties$1(Constructor.prototype, protoProps); if (staticProps) _defineProperties$1(Constructor, staticProps); return Constructor; }

	var Iri =
	/*#__PURE__*/
	function () {
	  function Iri(prefixes, value) {
	    var standard = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

	    _classCallCheck$1(this, Iri);

	    this.prefixes = prefixes;
	    this.value = value;
	    this.standard = standard;
	  }

	  _createClass$1(Iri, [{
	    key: "getFullIri",
	    value: function getFullIri() {
	      return this.prefixes[0] + ':' + this.value;
	    }
	  }, {
	    key: "isStandard",
	    value: function isStandard() {
	      return this.standard;
	    }
	  }]);

	  return Iri;
	}();

	function _classCallCheck$2(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _defineProperties$2(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

	function _createClass$2(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties$2(Constructor.prototype, protoProps); if (staticProps) _defineProperties$2(Constructor, staticProps); return Constructor; }
	var Diagram =
	/*#__PURE__*/
	function () {
	  function Diagram(name, id) {
	    var elements = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

	    _classCallCheck$2(this, Diagram);

	    this.name = name;
	    this.id = id;
	    this.cy = cytoscape$1();
	    if (elements) this.addElems(elements);
	  }

	  _createClass$2(Diagram, [{
	    key: "addElems",
	    value: function addElems(elems) {
	      this.cy.add(elems);
	    }
	  }, {
	    key: "getElems",
	    value: function getElems() {
	      return this.nodes.union(this.edges);
	    }
	  }, {
	    key: "nodes",
	    get: function get() {
	      return this.cy.nodes().jsons();
	    }
	  }, {
	    key: "edges",
	    get: function get() {
	      return this.cy.edges().jsons();
	    }
	  }, {
	    key: "elems",
	    get: function get() {
	      return this.nodes.union(this.edges);
	    }
	  }]);

	  return Diagram;
	}();

	// TO DO: export everything and import in parser.js
	// Funzioni che ritornano il primo figlio o il fratello successivo di un dato nodo
	// Ignorano quindi tutti gli elementi di tipo diverso da 1
	// cioÃ¨ gli attributi, gli spazi vuoti ecc...
	function getFirstChild(node) {
	  if (node == null || node.firstChild == null) {
	    return null;
	  }

	  node = node.firstChild;

	  if (node.nodeType !== 1) {
	    node = getNextSibling(node);
	  }

	  return node;
	}
	function getNextSibling(node) {
	  if (node == null || node.nextSibling == null) {
	    return null;
	  }

	  node = node.nextSibling;

	  while (node.nodeType !== 1) {
	    if (node.nextSibling == null) {
	      return null;
	    }

	    node = node.nextSibling;
	  }

	  return node;
	}
	function isPredicate(node) {
	  switch (node.getAttribute('type')) {
	    case 'concept':
	    case 'attribute':
	    case 'role':
	    case 'individual':
	      return true;
	  }

	  return false;
	} // Date le posizioni di source, target e del breakpoint,
	// la funzione calcola i due parametri peso e distanza del breakpoint e li restituisce

	function getDistanceWeight(target, source, point) {
	  // Esprimiamo le coordinate di point traslando l'origine sul source:
	  // point['0'] corrisponde alla coordinata x del punto, point['1'] Ã¨ l'ordinata
	  var breakpoint = [];
	  breakpoint['x'] = point['x'] - source['x'];
	  breakpoint['y'] = point['y'] - source['y'];
	  var delta = [];
	  delta['x'] = target['x'] - source['x'];
	  delta['y'] = target['y'] - source['y'];
	  var intersectpoint = [];
	  var angolar_coeff; // Se delta['x'] Ã¨ nullo : source e target sono sulla stessa ascissa
	  // la retta che li congiunge Ã¨ verticale e pertanto non esprimibile come y = mx + q
	  // Sappiamo perÃ² automaticamente che la retta perpendicolare Ã¨ del tipo y = c
	  // quindi l'intersect point avrÃ  X = 0 e Y = breakpoint['y']

	  if (delta['x'] == 0) {
	    intersectpoint['x'] = 0;
	    intersectpoint['y'] = breakpoint['y'];
	  } else if (delta['y'] == 0) {
	    intersectpoint['x'] = breakpoint['x'];
	    intersectpoint['y'] = 0;
	    angolar_coeff = 0;
	  } else {
	    angolar_coeff = delta['y'] / delta['x']; // quindi prendendo il source come origine, la retta che unisce source e target Ã¨ data da:
	    // R: y = angolar_coeff * x
	    // La retta che interseca perpendicolarmente R e che passa per point Ã¨ data da :
	    // T: y = - x / angolar_coeff + quote
	    // dobbiamo calcolare quote imponendo che point faccia parte della retta T, quindi calcoliamo:
	    // quote = breakpoint_y + (breakpoint_x/angolar_coeff)

	    var quote = breakpoint['y'] + breakpoint['x'] / angolar_coeff; // Adesso mettiamo a sistema le due rette T ed R (che sono perpendicolari) e risolvendo il sistema
	    // otteniamo che il punto di intersezione tra le due ha le coordinate:
	    // intersectpoint_x = (quote * angolar_coeff) / ((angolar_coeff ^ 2) + 1)
	    // intersectpoint_y = intersectpoint_x * angolar_coeff

	    intersectpoint['x'] = quote * angolar_coeff / (Math.pow(angolar_coeff, 2) + 1);
	    intersectpoint['y'] = intersectpoint['x'] * angolar_coeff;
	  } // Adesso calcoliamo la distanza tra source e target


	  var dist_source_target = Math.sqrt(Math.pow(delta['x'], 2) + Math.pow(delta['y'], 2)); // Adesso calcoliamo la distanza tra interscetpoint e source
	  // NOTA: le coordinate di intersectpoint sono calcolate traslando l'origine sul source, quindi usando il teorema di pitagora non sottraiamo le coordinate di source perchÃ¨ sono nulle in questo sistema di riferimento
	  // NOTA 2: la distanza che otteniamo Ã¨ un valore assoluto, Ã¨ quindi indipendente dal sistema di riferimento e possiamo usarla direttamente per calcolare il peso

	  var dist_inter_source = Math.sqrt(Math.pow(intersectpoint['x'], 2) + Math.pow(intersectpoint['y'], 2)); // Il peso lo calcolo come percentuale dividendo la distanza dell'intersectpoint dal source per la distanza tra source e target

	  var point_weight = dist_inter_source / dist_source_target; // Dobbiamo stabilire se il peso Ã¨ positivo o negativo
	  // Se la X dell' intersectpoint Ã¨ compresta tra quella del source e quella del target, allora il peso Ã¨ positivo
	  // se la X del target Ã¨ maggiore della X del source e la X dell'intersectpoint Ã¨ minore di quella del source, allora il peso Ã¨ negativo

	  if (delta['x'] > 0 && intersectpoint['x'] < 0) {
	    point_weight = -point_weight;
	  }

	  if (delta['x'] < 0 && intersectpoint['x'] > 0) {
	    point_weight = -point_weight;
	  } // Calcolo la distanza tra point e intersectpoint (sono entrambi espressi rispetto a source, ma per la distanza non ci interessa)


	  var point_distance = Math.sqrt(Math.pow(intersectpoint['x'] - breakpoint['x'], 2) + Math.pow(intersectpoint['y'] - breakpoint['y'], 2)); // Dobbiamo stabilire se prendere la point_distance positiva o negativa
	  // La regola Ã¨ che, andando dal source al target sulla retta che li
	  // congiunge, se il breakpoint si trova alla mia sinistra, la distanza
	  // Ã¨ negativa, se invece Ã¨ alla mia destra Ã¨ positiva
	  // questo si traduce nel valutare una diseguaglianza (Y ><= M*X ? dove Y e X sono le coordinate del breakpoint) e la scelta dipende dal quadrante in cui si trova il target.
	  // [Stiamo considerando le coordinate relative al source]
	  // [Quindi delta['x'] e delta['y'] sono proprio le coordinate del target]
	  // RICORDA: in cytoscape il verso crescente dell'asse Y Ã¨ verso il
	  // basso, quindi occorre fare attenzione al verso delle diseguaglianze
	  // Target con X negativa => il breakpoint si trova a sinitra della
	  // retta quando si trova al di sotto della retta

	  if (delta['x'] < 0 && breakpoint['y'] > angolar_coeff * breakpoint['x']) {
	    point_distance = -point_distance;
	  } // Target con X positiva => il breakpoint si trova a sinistra dela
	  // retta quando si trova al di sopra della retta


	  if (delta['x'] > 0 && breakpoint['y'] < angolar_coeff * breakpoint['x']) {
	    point_distance = -point_distance;
	  } // SOURCE CON STESSA X DEL TARGET
	  // se il target ha una Y maggiore del source (deltaY>0),
	  // allora sto guardando verso il basso, quindi il punto sarÃ  a
	  // sinistra quando la sua X sarÃ  positiva


	  if (delta['x'] == 0 && delta['y'] > 0 && breakpoint['x'] > 0) {
	    point_distance = -point_distance;
	  } // Se invece guardo verso l'alto (target con Y<0), allora il nodo Ã¨ a
	  // sinistra della retta quando ha la X negativa


	  if (delta['x'] == 0 && delta['y'] < 0 && breakpoint['x'] < 0) {
	    point_distance = -point_distance;
	  }

	  return [point_distance, point_weight];
	} // Funzione che decide se spostare un endpoint sul bordo del nodo (source o target) o meno
	// Facciamo quest'operazione per tutti gli archi che presentano degli endpoint
	// non al centro del nodo (source o target), in questi casi le
	// opzioni sono 2:
	//   1: l'arco parte (o arriva) in diagonale, in questo caso l'endpoint lo lasciamo al centro del nodo
	//   2: l'arco arriva perpendicolarmente al bordo del nodo (source o target), in questo caso
	//      vediamo se il breakpoint successivo (o precedente nel caso del target), ha la stessa X o la stessa Y
	//      del nodo in questione.
	//      Valutando poi la coordinata che non risulta uguale a quella del nodo, spostiamo l'endpoint sul bordo del
	//      nodo in direzione del breakpoint successivo (o precedente).
	// Se lasciassimo intatti gli endpoint non centrati, cytoscape farebbe entrare la freccia nel nodo,
	// Traslando sul bordo l'endpoint in direzione del breakpoint successivo (nel caso di source) o precedente
	// (nel caso di target), cytoscape farÃ  corrispondere la punta della freccia sul bordo del nodo e
	// sarÃ  quindi visibile

	function getNewEndpoint(end_point, node, break_point) {
	  // Calcoliamo le coordinate relative al nodo source (o target)
	  var endpoint = [];
	  endpoint['x'] = end_point['x'] - node.position('x');
	  endpoint['y'] = end_point['y'] - node.position('y');
	  if (endpoint['x'] == 0 && endpoint['y'] == 0) return endpoint;
	  var breakpoint = [];
	  breakpoint['x'] = break_point['x'] - node.position('x');
	  breakpoint['y'] = break_point['y'] - node.position('y'); // Se l'endpoint non Ã¨ centrato nel nodo ma ha la X uguale al breakpoint successivo (o precedente)
	  // Allora l'arco parte (o arriva) perpendicolarmente dall'alto o dal basso

	  if (endpoint['x'] == breakpoint['x']) {
	    // Se il breakpoint si trova piÃ¹ in basso (Ricorda: asse Y al contrario in cytoscape!),
	    // allora spostiamo sul bordo inferiore l'endpoint
	    if (breakpoint['y'] > 0) {
	      endpoint['y'] = node.data('height') / 2;
	      return endpoint;
	    } // Se invece il breakpoint Ã¨ piÃ¹ in alto del nodo, allora spostiamo l'endpoint sul bordo superiore
	    else if (breakpoint['y'] < 0) {
	        endpoint['y'] = -node.data('height') / 2;
	        return endpoint;
	      }
	  } // Se invece ad essere uguale Ã¨ la Y, l'arco arriva da destra o da sinistra, facciamo gli stessi passaggi appena fatti
	  else if (endpoint['y'] == breakpoint['y']) {
	      if (breakpoint['x'] > 0) {
	        endpoint['x'] = node.data('width') / 2;
	        return endpoint;
	      } else if (breakpoint['x'] < 0) {
	        endpoint['x'] = -node.data('width') / 2;
	        return endpoint;
	      }
	    }

	  return endpoint;
	}

	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

	function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

	function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

	function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

	function _classCallCheck$3(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _defineProperties$3(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

	function _createClass$3(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties$3(Constructor.prototype, protoProps); if (staticProps) _defineProperties$3(Constructor, staticProps); return Constructor; }

	var GrapholParser =
	/*#__PURE__*/
	function () {
	  function GrapholParser() {
	    _classCallCheck$3(this, GrapholParser);
	  }

	  _createClass$3(GrapholParser, [{
	    key: "parseGraphol",
	    value: function parseGraphol(xmlString) {
	      var i, k;
	      var parser = new DOMParser();
	      var xmlDocument = xmlString instanceof XMLDocument ? xmlString : parser.parseFromString(xmlString, 'text/xml');
	      var xml_ontology_tag = xmlDocument.getElementsByTagName('ontology')[0];
	      var ontology_name = xml_ontology_tag.getElementsByTagName('name')[0].textContent;
	      var ontology_version = '';

	      if (xml_ontology_tag.getElementsByTagName('version')[0]) {
	        ontology_version = xml_ontology_tag.getElementsByTagName('version')[0].textContent;
	      } else {
	        ontology_version = 'Undefined';
	      } // Creating an Ontology Object


	      var ontology = new Ontology(ontology_name, ontology_version);

	      if (xmlDocument.getElementsByTagName('IRI_prefixes_nodes_dict').length === 0) {
	        // for old graphol files
	        var _iri_value = xmlDocument.getElementsByTagName('iri')[0].textContent;
	        ontology.addIri(new Iri([''], _iri_value));
	      } else {
	        // Create iri and add them to ontology.iriSet
	        var iri_list = xmlDocument.getElementsByTagName('iri'); // Foreach iri create a Iri object

	        for (i = 0; i < iri_list.length; i++) {
	          var iri = iri_list[i];
	          var iri_value = iri.getAttribute('iri_value');
	          var is_standard = false;
	          var iri_prefixes = [];

	          {
	            _toConsumableArray(iri.getElementsByTagName('prefix')).forEach(function (iri_prefix) {
	              iri_prefixes.push(iri_prefix.getAttribute('prefix_value'));
	            });
	          }

	          if (iri_prefixes.length == 0) {
	            iri_prefixes.push('');
	          }

	          for (k = 0; k < iri.getElementsByTagName('property').length; k++) {
	            var iri_property = iri.getElementsByTagName('property')[k];

	            switch (iri_property.getAttribute('property_value')) {
	              case 'Standard_IRI':
	                is_standard = true;
	                break;
	            }
	          }
	          ontology.addIri(new Iri(iri_prefixes, iri_value, is_standard));
	        }
	      } // for searching predicates' description


	      var xmlPredicates = xmlDocument.getElementsByTagName('predicate');
	      var diagrams = xmlDocument.getElementsByTagName('diagram');

	      for (i = 0; i < diagrams.length; i++) {
	        var diagram_name = diagrams[i].getAttribute('name');
	        var diagram = new Diagram(diagram_name, i);
	        ontology.addDiagram(diagram);
	        var array_json_elems = [];
	        var nodes = diagrams[i].getElementsByTagName('node');
	        var edges = diagrams[i].getElementsByTagName('edge');
	        var cnt = 0; // Create JSON for each node to be added to the collection

	        for (k = 0; k < nodes.length; k++) {
	          array_json_elems.push(this.NodeXmlToJson(nodes[k], ontology, xmlPredicates, i));

	          if (array_json_elems[cnt].data.type === 'property-assertion' || array_json_elems[cnt].data.type === 'facet' || array_json_elems[cnt].data.functional && array_json_elems[cnt].data.inverseFunctional) {
	            this.addFakeNodes(array_json_elems);
	            cnt += array_json_elems.length - cnt;
	          } else {
	            cnt++;
	          }
	        }

	        diagram.addElems(array_json_elems);
	        array_json_elems = [];

	        for (k = 0; k < edges.length; k++) {
	          array_json_elems.push(this.EdgeXmlToJson(edges[k], ontology, i));
	        }

	        diagram.addElems(array_json_elems);
	      }

	      if (i == 0) {
	        throw "The selected .graphol file has no defined diagram";
	      }

	      this.getIdentityForNeutralNodes(ontology);
	      return ontology;
	    }
	  }, {
	    key: "NodeXmlToJson",
	    value: function NodeXmlToJson(element, ontology, xmlPredicates, diagram_id) {
	      // Creating a JSON Object for the node to be added to the collection
	      var label_no_break;
	      var nodo = {
	        data: {
	          id_xml: element.getAttribute('id'),
	          diagram_id: diagram_id,
	          id: element.getAttribute('id') + '_' + diagram_id,
	          fillColor: element.getAttribute('color'),
	          type: element.getAttribute('type')
	        },
	        position: {},
	        classes: element.getAttribute('type')
	      };

	      switch (nodo.data.type) {
	        case 'concept':
	        case 'domain-restriction':
	          nodo.data.shape = 'rectangle';
	          nodo.data.identity = 'concept';
	          break;

	        case 'range-restriction':
	          nodo.data.shape = 'rectangle';
	          nodo.data.identity = 'neutral';
	          break;

	        case 'role':
	          nodo.data.shape = 'diamond';
	          nodo.data.identity = 'role';
	          break;

	        case 'attribute':
	          nodo.data.shape = 'ellipse';
	          nodo.data.identity = 'attribute';
	          break;

	        case 'union':
	        case 'disjoint-union':
	        case 'complement':
	        case 'intersection':
	        case 'enumeration':
	          nodo.data.shape = 'hexagon';
	          nodo.data.identity = 'neutral';
	          break;

	        case 'role-inverse':
	        case 'role-chain':
	          nodo.data.shape = 'hexagon';
	          nodo.data.identity = 'role';

	          if (nodo.data.type === 'role-chain') {
	            if (element.getAttribute('inputs') !== '') {
	              nodo.data.inputs = element.getAttribute('inputs').split(',');
	            }
	          }

	          break;

	        case 'datatype-restriction':
	          nodo.data.shape = 'hexagon';
	          nodo.data.identity = 'value_domain';
	          break;

	        case 'value-domain':
	          nodo.data.shape = 'roundrectangle';
	          nodo.data.identity = 'value_domain';
	          break;

	        case 'property-assertion':
	          nodo.data.shape = 'roundrectangle';
	          nodo.data.identity = 'neutral';
	          nodo.data.inputs = element.getAttribute('inputs').split(',');
	          break;

	        case 'individual':
	          nodo.data.shape = 'octagon';
	          nodo.data.identity = 'individual';
	          break;

	        case 'facet':
	          nodo.data.shape = 'polygon';
	          nodo.data.shape_points = '-0.9 -1 1 -1 0.9 1 -1 1';
	          nodo.data.fillColor = '#ffffff';
	          nodo.data.identity = 'facet';
	          break;

	        default:
	          console.error('tipo di nodo sconosciuto');
	          break;
	      } // Parsing the <geometry> child node of node
	      // info = <GEOMETRY>


	      var info = getFirstChild(element);
	      nodo.data.width = parseInt(info.getAttribute('width')); // Gli individual hanno dimensioni negative nel file graphol

	      if (nodo.data.width < 0) {
	        nodo.data.width = -nodo.data.width;
	      }

	      nodo.data.height = parseInt(info.getAttribute('height')); // Gli individual hanno dimensioni negative nel file graphol

	      if (nodo.data.height < 0) {
	        nodo.data.height = -nodo.data.height;
	      } // L'altezza dei facet Ã¨ nulla nel file graphol, la impostiamo a 40


	      if (nodo.data.type === 'facet') {
	        nodo.data.height = 40;
	      }

	      nodo.position.x = parseInt(info.getAttribute('x'));
	      nodo.position.y = parseInt(info.getAttribute('y')); // info = <LABEL>

	      info = getNextSibling(info); // info = null se non esiste la label (Ã¨ l'ultimo elemento)

	      if (info != null) {
	        nodo.data.label = info.textContent;
	        nodo.data.labelXpos = parseInt(info.getAttribute('x')) - nodo.position.x + 1;
	        nodo.data.labelYpos = parseInt(info.getAttribute('y')) - nodo.position.y + (nodo.data.height + 2) / 2 + parseInt(info.getAttribute('height')) / 4;
	        label_no_break = nodo.data.label.replace(/\n/g, '');
	      } // Setting predicates properties


	      if (isPredicate(element)) {
	        nodo.classes += ' predicate';
	        var node_iri, rem_chars, len_prefix, node_prefix_iri; // setting iri

	        if (element.getAttribute('remaining_characters') != null) {
	          rem_chars = element.getAttribute('remaining_characters').replace(/\n/g, '');
	        } else {
	          rem_chars = label_no_break;
	        }

	        len_prefix = label_no_break.length - rem_chars.length;
	        node_prefix_iri = label_no_break.substring(0, len_prefix);
	        ontology.iriSet.forEach(function (iri) {
	          iri.prefixes.forEach(function (prefix) {
	            if (node_prefix_iri == prefix + ':' || node_prefix_iri == prefix) {
	              node_iri = iri.value;
	            }
	          });
	        });

	        if (!node_iri) {
	          throw "Err: the iri prefix \"".concat(node_prefix_iri, "\" is not associated to any iri");
	        }

	        if (node_prefix_iri.search(/"[\w]+"\^\^[\w]+:/) != -1) {
	          rem_chars = label_no_break;
	          node_iri = '';
	          node_prefix_iri = node_prefix_iri.slice(node_prefix_iri.lastIndexOf('^') + 1, node_prefix_iri.lastIndexOf(':') + 1);
	        } else if (node_iri.slice(-1) !== '/' && node_iri.slice(-1) !== '#') {
	          node_iri = node_iri + '/';
	        }

	        nodo.data.remaining_chars = rem_chars;
	        nodo.data.prefix_iri = node_prefix_iri;
	        nodo.data.iri = node_iri + rem_chars;
	        var j, predicateXml;

	        for (j = 0; j < xmlPredicates.length; j++) {
	          predicateXml = xmlPredicates[j];

	          if (label_no_break === predicateXml.getAttribute('name') && nodo.data.type === predicateXml.getAttribute('type')) {
	            nodo.data.description = predicateXml.getElementsByTagName('description')[0].textContent; //nodo.data.description = nodo.data.description.replace(/&lt;/g, '<')
	            //nodo.data.description = nodo.data.description.replace(/&gt;/g, '>')
	            //nodo.data.description = nodo.data.description.replace(/font-family:'monospace'/g, '')
	            //nodo.data.description = nodo.data.description.replace(/&amp;/g, '&')

	            nodo.data.description = nodo.data.description.replace(/font-size:0pt/g, '');
	            var start_body_index = nodo.data.description.indexOf('<p');
	            var end_body_index = nodo.data.description.indexOf('</body');
	            nodo.data.description = nodo.data.description.slice(start_body_index, end_body_index); // Impostazione delle funzionalitÃ  dei nodi di tipo role o attribute

	            if (nodo.data.type === 'attribute' || nodo.data.type === 'role') {
	              nodo.data.functional = parseInt(predicateXml.getElementsByTagName('functional')[0].textContent);
	            }

	            if (nodo.data.type === 'role') {
	              nodo.data.inverseFunctional = parseInt(predicateXml.getElementsByTagName('inverseFunctional')[0].textContent);
	              nodo.data.asymmetric = parseInt(predicateXml.getElementsByTagName('asymmetric')[0].textContent);
	              nodo.data.irreflexive = parseInt(predicateXml.getElementsByTagName('irreflexive')[0].textContent);
	              nodo.data.reflexive = parseInt(predicateXml.getElementsByTagName('reflexive')[0].textContent);
	              nodo.data.symmetric = parseInt(predicateXml.getElementsByTagName('symmetric')[0].textContent);
	              nodo.data.transitive = parseInt(predicateXml.getElementsByTagName('transitive')[0].textContent);
	            }

	            break;
	          }
	        }
	      } else {
	        // Set prefix and remaining chars for non-predicate nodes
	        // owl.js use this informations for all nodes
	        nodo.data.prefix_iri = '';
	        nodo.data.remaining_chars = label_no_break;

	        if (nodo.data.type === 'value-domain' || nodo.data.type === 'facet') {
	          nodo.data.prefix_iri = label_no_break.split(':')[0] + ':';
	          nodo.data.remaining_chars = label_no_break.split(':')[1];
	        }
	      }

	      return nodo;
	    }
	  }, {
	    key: "EdgeXmlToJson",
	    value: function EdgeXmlToJson(arco, ontology, diagram_id) {
	      var k;
	      var edge = {
	        data: {
	          target: arco.getAttribute('target') + '_' + diagram_id,
	          source: arco.getAttribute('source') + '_' + diagram_id,
	          id: arco.getAttribute('id') + '_' + diagram_id,
	          id_xml: arco.getAttribute('id'),
	          diagram_id: diagram_id,
	          type: arco.getAttribute('type'),
	          breakpoints: []
	        }
	      };
	      if (edge.data.type == 'membership') edge.data.edge_label = 'instance Of'; // Prendiamo i nodi source e target

	      var source = ontology.getDiagram(diagram_id).cy.$id(edge.data.source);
	      var target = ontology.getDiagram(diagram_id).cy.$id(edge.data.target); // Impostiamo le label numeriche per gli archi che entrano nei role-chain
	      // I role-chain hanno un campo <input> con una lista di id di archi all'interno
	      // che sono gli archi che entrano, l'ordine nella sequenza stabilisce la label
	      // numerica che deve avere l'arco
	      // Quindi se l'arco che stiamo aggiungendo ha come target un nodo role-chain,
	      // Cerchiamo l'id dell'arco negli inputs del role-chain e se lo troviamo impostiamo
	      // la target_label in base alla posizione nella sequenza

	      if (target.data('type') === 'role-chain' || target.data('type') === 'property-assertion') {
	        for (k = 0; k < target.data('inputs').length; k++) {
	          if (target.data('inputs')[k] === edge.data.id_xml) {
	            edge.data.target_label = k + 1;
	            break;
	          }
	        }
	      } // info = <POINT>
	      // Processiamo i breakpoints dell'arco
	      // NOTA: ogni arco ha sempre almeno 2 breakpoints, cioÃ¨ gli endpoints


	      var point = getFirstChild(arco);
	      var breakpoints = [];
	      var segment_weights = [];
	      var segment_distances = [];
	      var j;
	      var count = 0;

	      for (j = 0; j < arco.childNodes.length; j++) {
	        // Ignoriamo spazi vuoti, e altri figli di tipo diverso da 1
	        if (arco.childNodes[j].nodeType != 1) {
	          continue;
	        }

	        breakpoints[count] = {
	          'x': parseInt(point.getAttribute('x')),
	          'y': parseInt(point.getAttribute('y')) //breakpoints[count].push(parseInt(point.getAttribute('x')))
	          //breakpoints[count].push(parseInt(point.getAttribute('y')))

	        };

	        if (getNextSibling(point) != null) {
	          point = getNextSibling(point); // Se il breakpoint in questione non Ã¨ il primo
	          // e non Ã¨ l'ultimo, visto che ha un fratello,
	          // allora calcoliamo peso e distanza per questo breakpoint
	          // [Il primo e l'ultimo breakpoint sono gli endpoint e non hanno peso e distanza]

	          if (count > 0) {
	            var aux = getDistanceWeight(target.position(), source.position(), breakpoints[count]);
	            segment_distances.push(aux[0]);
	            segment_weights.push(aux[1]);
	          }

	          count++;
	        } else {
	          break;
	        }
	      } // Se ci sono almeno 3 breakpoints, allora impostiamo gli array delle distanze e dei pesi


	      if (count > 1) {
	        edge.data.breakpoints = breakpoints.slice(1, count);
	        edge.data.segment_distances = segment_distances;
	        edge.data.segment_weights = segment_weights;
	      } // Calcoliamo gli endpoints sul source e sul target
	      // Se non sono centrati sul nodo vanno spostati sul bordo del nodo


	      var source_endpoint = [];
	      source_endpoint['x'] = breakpoints[0]['x'];
	      source_endpoint['y'] = breakpoints[0]['y'];
	      source_endpoint = getNewEndpoint(source_endpoint, source, breakpoints[1]); // Impostiamo l'endpoint solo se Ã¨ diverso da zero
	      // perchÃ¨ di default l'endpoint Ã¨ impostato a (0,0) relativamente al nodo di riferimento

	      if (source_endpoint['x'] != 0 || source_endpoint['y'] != 0) {
	        edge.data.source_endpoint = [];
	        edge.data.source_endpoint.push(source_endpoint['x']);
	        edge.data.source_endpoint.push(source_endpoint['y']);
	      } // Facciamo la stessa cosa per il target


	      var target_endpoint = [];
	      target_endpoint['x'] = breakpoints[breakpoints.length - 1]['x'];
	      target_endpoint['y'] = breakpoints[breakpoints.length - 1]['y'];
	      target_endpoint = getNewEndpoint(target_endpoint, target, breakpoints[breakpoints.length - 2]);

	      if (target_endpoint['x'] != 0 || target_endpoint['y'] != 0) {
	        edge.data.target_endpoint = [];
	        edge.data.target_endpoint.push(target_endpoint['x']);
	        edge.data.target_endpoint.push(target_endpoint['y']);
	      }

	      return edge;
	    }
	  }, {
	    key: "addFakeNodes",
	    value: function addFakeNodes(array_json_nodes) {
	      var nodo = array_json_nodes[array_json_nodes.length - 1];

	      if (nodo.data.type === 'facet') {
	        // Se il nodo Ã¨ di tipo facet inseriamo i ritorni a capo nella label
	        // e la trasliamo verso il basso di una quantitÃ  pari all'altezza del nodo
	        nodo.data.label = nodo.data.label.replace('^^', '\n\n');
	        nodo.data.labelYpos = nodo.data.height; // Creating the top rhomboid for the grey background

	        var top_rhomboid = {
	          selectable: false,
	          data: {
	            height: nodo.data.height,
	            width: nodo.data.width,
	            fillColor: '#ddd',
	            shape: 'polygon',
	            shape_points: '-0.9 -1 1 -1 0.95 0 -0.95 0',
	            diagram_id: nodo.data.diagram_id,
	            parent_node_id: nodo.data.id,
	            type: nodo.data.type
	          },
	          position: {
	            x: nodo.position.x,
	            y: nodo.position.y
	          }
	        };
	        var bottom_rhomboid = {
	          selectable: false,
	          data: {
	            height: nodo.data.height,
	            width: nodo.data.width,
	            fillColor: '#fff',
	            shape: 'polygon',
	            shape_points: '-0.95 0 0.95 0 0.9 1 -1 1',
	            diagram_id: nodo.data.diagram_id,
	            parent_node_id: nodo.data.id,
	            type: nodo.data.type
	          },
	          position: {
	            x: nodo.position.x,
	            y: nodo.position.y
	          }
	        };
	        array_json_nodes[array_json_nodes.length - 1] = top_rhomboid;
	        array_json_nodes.push(bottom_rhomboid);
	        array_json_nodes.push(nodo);
	        return;
	      }

	      if (nodo.data.functional === 1 && nodo.data.inverseFunctional === 1) {
	        // Creating "fake" nodes for the double style border effect
	        var triangle_right = {
	          selectable: false,
	          data: {
	            height: nodo.data.height,
	            width: nodo.data.width,
	            fillColor: "#000",
	            shape: 'polygon',
	            shape_points: '0 -1 1 0 0 1',
	            diagram_id: nodo.data.diagram_id,
	            type: nodo.data.type
	          },
	          position: {
	            x: nodo.position.x,
	            y: nodo.position.y
	          },
	          classes: 'fake-triangle fake-triangle-right'
	        };
	        var triangle_left = {
	          selectable: false,
	          data: {
	            height: nodo.data.height,
	            width: nodo.data.width + 2,
	            fillColor: '#fcfcfc',
	            shape: 'polygon',
	            shape_points: '0 -1 -1 0 0 1',
	            diagram_id: nodo.data.diagram_id,
	            type: nodo.data.type
	          },
	          position: {
	            x: nodo.position.x,
	            y: nodo.position.y
	          },
	          classes: 'fake-triangle'
	        };
	        var old_labelXpos = nodo.data.labelXpos;
	        var old_labelYpos = nodo.data.labelYpos;
	        nodo.data.height -= 8;
	        nodo.data.width -= 10; // If the node is both functional and inverse functional,
	        // we added the double style border and changed the node height and width.
	        // The label position is function of node's height and width so we adjust it
	        // now after those changes.

	        if (nodo.data.label != null) {
	          nodo.data.labelYpos -= 4;
	        }

	        array_json_nodes[array_json_nodes.length - 1] = triangle_left;
	        array_json_nodes.push(triangle_right);
	        array_json_nodes.push(nodo);
	      }

	      if (nodo.data.type === 'property-assertion') {
	        var circle1 = {
	          selectable: false,
	          classes: 'no_overlay',
	          data: {
	            height: nodo.data.height,
	            width: nodo.data.height,
	            shape: 'ellipse',
	            diagram_id: nodo.data.diagram_id,
	            fillColor: '#fff',
	            parent_node_id: nodo.data.id,
	            type: nodo.data.type
	          },
	          position: {
	            x: nodo.position.x - (nodo.data.width - nodo.data.height) / 2,
	            y: nodo.position.y
	          }
	        };
	        var circle2 = {
	          selectable: false,
	          classes: 'no_overlay',
	          data: {
	            height: nodo.data.height,
	            width: nodo.data.height,
	            shape: 'ellipse',
	            diagram_id: nodo.data.diagram_id,
	            fillColor: '#fff',
	            parent_node_id: nodo.data.id,
	            type: nodo.data.type
	          },
	          position: {
	            x: nodo.position.x + (nodo.data.width - nodo.data.height) / 2,
	            y: nodo.position.y
	          }
	        };
	        var back_rectangle = {
	          data: {
	            selectable: false,
	            height: nodo.data.height,
	            width: nodo.data.width - nodo.data.height,
	            shape: 'rectangle',
	            diagram_id: nodo.data.diagram_id,
	            fillColor: '#fff',
	            parent_node_id: nodo.data.id,
	            type: nodo.data.type
	          },
	          position: nodo.position
	        };
	        var front_rectangle = {
	          data: _defineProperty({
	            type: 'property-assertion',
	            height: nodo.data.height - 1,
	            width: nodo.data.width - nodo.data.height,
	            shape: 'rectangle',
	            diagram_id: nodo.data.diagram_id,
	            fillColor: '#fff',
	            parent_node_id: nodo.data.id
	          }, "type", nodo.data.type),
	          position: nodo.position,
	          classes: 'property-assertion no_border'
	        };
	        nodo.classes += ' hidden';
	        array_json_nodes[array_json_nodes.length - 1] = nodo;
	        array_json_nodes.push(back_rectangle);
	        array_json_nodes.push(circle1);
	        array_json_nodes.push(circle2);
	        array_json_nodes.push(front_rectangle);
	      }
	    }
	  }, {
	    key: "getIdentityForNeutralNodes",
	    value: function getIdentityForNeutralNodes(ontology) {
	      ontology.diagrams.forEach(function (diagram) {
	        diagram.cy.nodes('[identity = "neutral"]').forEach(function (node) {
	          node.data('identity', findIdentity(node));
	        });
	      }); // Recursively traverse first input node and return his identity
	      // if he is neutral => recursive step

	      function findIdentity(node) {
	        var first_input_node = node.incomers('[type = "input"]').sources();
	        var identity = first_input_node.data('identity');

	        if (identity === 'neutral') {
	          return findIdentity(first_input_node);
	        } else {
	          switch (node.data('type')) {
	            case 'range-restriction':
	              if (identity === 'role') {
	                return 'concept';
	              } else if (identity === 'attribute') {
	                return 'value_domain';
	              } else {
	                return identity;
	              }

	            case 'enumeration':
	              if (identity === 'individual') {
	                return 'concept';
	              } else {
	                return identity;
	              }

	            default:
	              return identity;
	          }
	        }
	      }
	    }
	  }]);

	  return GrapholParser;
	}();

	/**
	 * @license
	 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
	 * This code may only be used under the BSD style license found at
	 * http://polymer.github.io/LICENSE.txt
	 * The complete set of authors may be found at
	 * http://polymer.github.io/AUTHORS.txt
	 * The complete set of contributors may be found at
	 * http://polymer.github.io/CONTRIBUTORS.txt
	 * Code distributed by Google as part of the polymer project is also
	 * subject to an additional IP rights grant found at
	 * http://polymer.github.io/PATENTS.txt
	 */
	var directives = new WeakMap();
	var isDirective = function isDirective(o) {
	  return typeof o === 'function' && directives.has(o);
	};

	/**
	 * @license
	 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
	 * This code may only be used under the BSD style license found at
	 * http://polymer.github.io/LICENSE.txt
	 * The complete set of authors may be found at
	 * http://polymer.github.io/AUTHORS.txt
	 * The complete set of contributors may be found at
	 * http://polymer.github.io/CONTRIBUTORS.txt
	 * Code distributed by Google as part of the polymer project is also
	 * subject to an additional IP rights grant found at
	 * http://polymer.github.io/PATENTS.txt
	 */

	/**
	 * True if the custom elements polyfill is in use.
	 */
	var isCEPolyfill = window.customElements !== undefined && window.customElements.polyfillWrapFlushCallback !== undefined;
	/**
	 * Removes nodes, starting from `start` (inclusive) to `end` (exclusive), from
	 * `container`.
	 */

	var removeNodes = function removeNodes(container, start) {
	  var end = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

	  while (start !== end) {
	    var n = start.nextSibling;
	    container.removeChild(start);
	    start = n;
	  }
	};

	/**
	 * @license
	 * Copyright (c) 2018 The Polymer Project Authors. All rights reserved.
	 * This code may only be used under the BSD style license found at
	 * http://polymer.github.io/LICENSE.txt
	 * The complete set of authors may be found at
	 * http://polymer.github.io/AUTHORS.txt
	 * The complete set of contributors may be found at
	 * http://polymer.github.io/CONTRIBUTORS.txt
	 * Code distributed by Google as part of the polymer project is also
	 * subject to an additional IP rights grant found at
	 * http://polymer.github.io/PATENTS.txt
	 */

	/**
	 * A sentinel value that signals that a value was handled by a directive and
	 * should not be written to the DOM.
	 */
	var noChange = {};
	/**
	 * A sentinel value that signals a NodePart to fully clear its content.
	 */

	var nothing = {};

	function _classCallCheck$4(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	/**
	 * @license
	 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
	 * This code may only be used under the BSD style license found at
	 * http://polymer.github.io/LICENSE.txt
	 * The complete set of authors may be found at
	 * http://polymer.github.io/AUTHORS.txt
	 * The complete set of contributors may be found at
	 * http://polymer.github.io/CONTRIBUTORS.txt
	 * Code distributed by Google as part of the polymer project is also
	 * subject to an additional IP rights grant found at
	 * http://polymer.github.io/PATENTS.txt
	 */

	/**
	 * An expression marker with embedded unique key to avoid collision with
	 * possible text in templates.
	 */
	var marker = "{{lit-".concat(String(Math.random()).slice(2), "}}");
	/**
	 * An expression marker used text-positions, multi-binding attributes, and
	 * attributes with markup-like text values.
	 */

	var nodeMarker = "<!--".concat(marker, "-->");
	var markerRegex = new RegExp("".concat(marker, "|").concat(nodeMarker));
	/**
	 * Suffix appended to all bound attribute names.
	 */

	var boundAttributeSuffix = '$lit$';
	/**
	 * An updateable Template that tracks the location of dynamic parts.
	 */

	var Template = function Template(result, element) {
	  _classCallCheck$4(this, Template);

	  this.parts = [];
	  this.element = element;
	  var nodesToRemove = [];
	  var stack = []; // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be null

	  var walker = document.createTreeWalker(element.content, 133
	  /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */
	  , null, false); // Keeps track of the last index associated with a part. We try to delete
	  // unnecessary nodes, but we never want to associate two different parts
	  // to the same index. They must have a constant node between.

	  var lastPartIndex = 0;
	  var index = -1;
	  var partIndex = 0;
	  var strings = result.strings,
	      length = result.values.length;

	  while (partIndex < length) {
	    var node = walker.nextNode();

	    if (node === null) {
	      // We've exhausted the content inside a nested template element.
	      // Because we still have parts (the outer for-loop), we know:
	      // - There is a template in the stack
	      // - The walker will find a nextNode outside the template
	      walker.currentNode = stack.pop();
	      continue;
	    }

	    index++;

	    if (node.nodeType === 1
	    /* Node.ELEMENT_NODE */
	    ) {
	        if (node.hasAttributes()) {
	          var attributes = node.attributes;
	          var _length = attributes.length; // Per
	          // https://developer.mozilla.org/en-US/docs/Web/API/NamedNodeMap,
	          // attributes are not guaranteed to be returned in document order.
	          // In particular, Edge/IE can return them out of order, so we cannot
	          // assume a correspondence between part index and attribute index.

	          var count = 0;

	          for (var i = 0; i < _length; i++) {
	            if (endsWith(attributes[i].name, boundAttributeSuffix)) {
	              count++;
	            }
	          }

	          while (count-- > 0) {
	            // Get the template literal section leading up to the first
	            // expression in this attribute
	            var stringForPart = strings[partIndex]; // Find the attribute name

	            var name = lastAttributeNameRegex.exec(stringForPart)[2]; // Find the corresponding attribute
	            // All bound attributes have had a suffix added in
	            // TemplateResult#getHTML to opt out of special attribute
	            // handling. To look up the attribute value we also need to add
	            // the suffix.

	            var attributeLookupName = name.toLowerCase() + boundAttributeSuffix;
	            var attributeValue = node.getAttribute(attributeLookupName);
	            node.removeAttribute(attributeLookupName);
	            var statics = attributeValue.split(markerRegex);
	            this.parts.push({
	              type: 'attribute',
	              index: index,
	              name: name,
	              strings: statics
	            });
	            partIndex += statics.length - 1;
	          }
	        }

	        if (node.tagName === 'TEMPLATE') {
	          stack.push(node);
	          walker.currentNode = node.content;
	        }
	      } else if (node.nodeType === 3
	    /* Node.TEXT_NODE */
	    ) {
	        var data = node.data;

	        if (data.indexOf(marker) >= 0) {
	          var parent = node.parentNode;

	          var _strings = data.split(markerRegex);

	          var lastIndex = _strings.length - 1; // Generate a new text node for each literal section
	          // These nodes are also used as the markers for node parts

	          for (var _i = 0; _i < lastIndex; _i++) {
	            var insert = void 0;
	            var s = _strings[_i];

	            if (s === '') {
	              insert = createMarker();
	            } else {
	              var match = lastAttributeNameRegex.exec(s);

	              if (match !== null && endsWith(match[2], boundAttributeSuffix)) {
	                s = s.slice(0, match.index) + match[1] + match[2].slice(0, -boundAttributeSuffix.length) + match[3];
	              }

	              insert = document.createTextNode(s);
	            }

	            parent.insertBefore(insert, node);
	            this.parts.push({
	              type: 'node',
	              index: ++index
	            });
	          } // If there's no text, we must insert a comment to mark our place.
	          // Else, we can trust it will stick around after cloning.


	          if (_strings[lastIndex] === '') {
	            parent.insertBefore(createMarker(), node);
	            nodesToRemove.push(node);
	          } else {
	            node.data = _strings[lastIndex];
	          } // We have a part for each match found


	          partIndex += lastIndex;
	        }
	      } else if (node.nodeType === 8
	    /* Node.COMMENT_NODE */
	    ) {
	        if (node.data === marker) {
	          var _parent = node.parentNode; // Add a new marker node to be the startNode of the Part if any of
	          // the following are true:
	          //  * We don't have a previousSibling
	          //  * The previousSibling is already the start of a previous part

	          if (node.previousSibling === null || index === lastPartIndex) {
	            index++;

	            _parent.insertBefore(createMarker(), node);
	          }

	          lastPartIndex = index;
	          this.parts.push({
	            type: 'node',
	            index: index
	          }); // If we don't have a nextSibling, keep this node so we have an end.
	          // Else, we can remove it to save future costs.

	          if (node.nextSibling === null) {
	            node.data = '';
	          } else {
	            nodesToRemove.push(node);
	            index--;
	          }

	          partIndex++;
	        } else {
	          var _i2 = -1;

	          while ((_i2 = node.data.indexOf(marker, _i2 + 1)) !== -1) {
	            // Comment node has a binding marker inside, make an inactive part
	            // The binding won't work, but subsequent bindings will
	            // TODO (justinfagnani): consider whether it's even worth it to
	            // make bindings in comments work
	            this.parts.push({
	              type: 'node',
	              index: -1
	            });
	            partIndex++;
	          }
	        }
	      }
	  } // Remove text binding nodes after the walk to not disturb the TreeWalker


	  for (var _i3 = 0, _nodesToRemove = nodesToRemove; _i3 < _nodesToRemove.length; _i3++) {
	    var n = _nodesToRemove[_i3];
	    n.parentNode.removeChild(n);
	  }
	};

	var endsWith = function endsWith(str, suffix) {
	  var index = str.length - suffix.length;
	  return index >= 0 && str.slice(index) === suffix;
	};

	var isTemplatePartActive = function isTemplatePartActive(part) {
	  return part.index !== -1;
	}; // Allows `document.createComment('')` to be renamed for a
	// small manual size-savings.

	var createMarker = function createMarker() {
	  return document.createComment('');
	};
	/**
	 * This regex extracts the attribute name preceding an attribute-position
	 * expression. It does this by matching the syntax allowed for attributes
	 * against the string literal directly preceding the expression, assuming that
	 * the expression is in an attribute-value position.
	 *
	 * See attributes in the HTML spec:
	 * https://www.w3.org/TR/html5/syntax.html#elements-attributes
	 *
	 * " \x09\x0a\x0c\x0d" are HTML space characters:
	 * https://www.w3.org/TR/html5/infrastructure.html#space-characters
	 *
	 * "\0-\x1F\x7F-\x9F" are Unicode control characters, which includes every
	 * space character except " ".
	 *
	 * So an attribute is:
	 *  * The name: any character except a control character, space character, ('),
	 *    ("), ">", "=", or "/"
	 *  * Followed by zero or more space characters
	 *  * Followed by "="
	 *  * Followed by zero or more space characters
	 *  * Followed by:
	 *    * Any character except space, ('), ("), "<", ">", "=", (`), or
	 *    * (") then any non-("), or
	 *    * (') then any non-(')
	 */

	var lastAttributeNameRegex = /([ \x09\x0a\x0c\x0d])([^\0-\x1F\x7F-\x9F "'>=/]+)([ \x09\x0a\x0c\x0d]*=[ \x09\x0a\x0c\x0d]*(?:[^ \x09\x0a\x0c\x0d"'`<>=]*|"[^"]*|'[^']*))$/;

	function _toConsumableArray$1(arr) { return _arrayWithoutHoles$1(arr) || _iterableToArray$1(arr) || _nonIterableSpread$1(); }

	function _nonIterableSpread$1() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

	function _iterableToArray$1(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

	function _arrayWithoutHoles$1(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

	function _classCallCheck$5(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _defineProperties$4(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

	function _createClass$4(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties$4(Constructor.prototype, protoProps); if (staticProps) _defineProperties$4(Constructor, staticProps); return Constructor; }
	/**
	 * An instance of a `Template` that can be attached to the DOM and updated
	 * with new values.
	 */

	var TemplateInstance =
	/*#__PURE__*/
	function () {
	  function TemplateInstance(template, processor, options) {
	    _classCallCheck$5(this, TemplateInstance);

	    this.__parts = [];
	    this.template = template;
	    this.processor = processor;
	    this.options = options;
	  }

	  _createClass$4(TemplateInstance, [{
	    key: "update",
	    value: function update(values) {
	      var i = 0;
	      var _iteratorNormalCompletion = true;
	      var _didIteratorError = false;
	      var _iteratorError = undefined;

	      try {
	        for (var _iterator = this.__parts[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	          var part = _step.value;

	          if (part !== undefined) {
	            part.setValue(values[i]);
	          }

	          i++;
	        }
	      } catch (err) {
	        _didIteratorError = true;
	        _iteratorError = err;
	      } finally {
	        try {
	          if (!_iteratorNormalCompletion && _iterator["return"] != null) {
	            _iterator["return"]();
	          }
	        } finally {
	          if (_didIteratorError) {
	            throw _iteratorError;
	          }
	        }
	      }

	      var _iteratorNormalCompletion2 = true;
	      var _didIteratorError2 = false;
	      var _iteratorError2 = undefined;

	      try {
	        for (var _iterator2 = this.__parts[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
	          var _part = _step2.value;

	          if (_part !== undefined) {
	            _part.commit();
	          }
	        }
	      } catch (err) {
	        _didIteratorError2 = true;
	        _iteratorError2 = err;
	      } finally {
	        try {
	          if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
	            _iterator2["return"]();
	          }
	        } finally {
	          if (_didIteratorError2) {
	            throw _iteratorError2;
	          }
	        }
	      }
	    }
	  }, {
	    key: "_clone",
	    value: function _clone() {
	      // There are a number of steps in the lifecycle of a template instance's
	      // DOM fragment:
	      //  1. Clone - create the instance fragment
	      //  2. Adopt - adopt into the main document
	      //  3. Process - find part markers and create parts
	      //  4. Upgrade - upgrade custom elements
	      //  5. Update - set node, attribute, property, etc., values
	      //  6. Connect - connect to the document. Optional and outside of this
	      //     method.
	      //
	      // We have a few constraints on the ordering of these steps:
	      //  * We need to upgrade before updating, so that property values will pass
	      //    through any property setters.
	      //  * We would like to process before upgrading so that we're sure that the
	      //    cloned fragment is inert and not disturbed by self-modifying DOM.
	      //  * We want custom elements to upgrade even in disconnected fragments.
	      //
	      // Given these constraints, with full custom elements support we would
	      // prefer the order: Clone, Process, Adopt, Upgrade, Update, Connect
	      //
	      // But Safari dooes not implement CustomElementRegistry#upgrade, so we
	      // can not implement that order and still have upgrade-before-update and
	      // upgrade disconnected fragments. So we instead sacrifice the
	      // process-before-upgrade constraint, since in Custom Elements v1 elements
	      // must not modify their light DOM in the constructor. We still have issues
	      // when co-existing with CEv0 elements like Polymer 1, and with polyfills
	      // that don't strictly adhere to the no-modification rule because shadow
	      // DOM, which may be created in the constructor, is emulated by being placed
	      // in the light DOM.
	      //
	      // The resulting order is on native is: Clone, Adopt, Upgrade, Process,
	      // Update, Connect. document.importNode() performs Clone, Adopt, and Upgrade
	      // in one step.
	      //
	      // The Custom Elements v1 polyfill supports upgrade(), so the order when
	      // polyfilled is the more ideal: Clone, Process, Adopt, Upgrade, Update,
	      // Connect.
	      var fragment = isCEPolyfill ? this.template.element.content.cloneNode(true) : document.importNode(this.template.element.content, true);
	      var stack = [];
	      var parts = this.template.parts; // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be null

	      var walker = document.createTreeWalker(fragment, 133
	      /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */
	      , null, false);
	      var partIndex = 0;
	      var nodeIndex = 0;
	      var part;
	      var node = walker.nextNode(); // Loop through all the nodes and parts of a template

	      while (partIndex < parts.length) {
	        part = parts[partIndex];

	        if (!isTemplatePartActive(part)) {
	          this.__parts.push(undefined);

	          partIndex++;
	          continue;
	        } // Progress the tree walker until we find our next part's node.
	        // Note that multiple parts may share the same node (attribute parts
	        // on a single element), so this loop may not run at all.


	        while (nodeIndex < part.index) {
	          nodeIndex++;

	          if (node.nodeName === 'TEMPLATE') {
	            stack.push(node);
	            walker.currentNode = node.content;
	          }

	          if ((node = walker.nextNode()) === null) {
	            // We've exhausted the content inside a nested template element.
	            // Because we still have parts (the outer for-loop), we know:
	            // - There is a template in the stack
	            // - The walker will find a nextNode outside the template
	            walker.currentNode = stack.pop();
	            node = walker.nextNode();
	          }
	        } // We've arrived at our part's node.


	        if (part.type === 'node') {
	          var _part2 = this.processor.handleTextExpression(this.options);

	          _part2.insertAfterNode(node.previousSibling);

	          this.__parts.push(_part2);
	        } else {
	          var _this$__parts;

	          (_this$__parts = this.__parts).push.apply(_this$__parts, _toConsumableArray$1(this.processor.handleAttributeExpressions(node, part.name, part.strings, this.options)));
	        }

	        partIndex++;
	      }

	      if (isCEPolyfill) {
	        document.adoptNode(fragment);
	        customElements.upgrade(fragment);
	      }

	      return fragment;
	    }
	  }]);

	  return TemplateInstance;
	}();

	function _classCallCheck$6(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _defineProperties$5(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

	function _createClass$5(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties$5(Constructor.prototype, protoProps); if (staticProps) _defineProperties$5(Constructor, staticProps); return Constructor; }
	/**
	 * The return type of `html`, which holds a Template and the values from
	 * interpolated expressions.
	 */

	var TemplateResult =
	/*#__PURE__*/
	function () {
	  function TemplateResult(strings, values, type, processor) {
	    _classCallCheck$6(this, TemplateResult);

	    this.strings = strings;
	    this.values = values;
	    this.type = type;
	    this.processor = processor;
	  }
	  /**
	   * Returns a string of HTML used to create a `<template>` element.
	   */


	  _createClass$5(TemplateResult, [{
	    key: "getHTML",
	    value: function getHTML() {
	      var l = this.strings.length - 1;
	      var html = '';
	      var isCommentBinding = false;

	      for (var i = 0; i < l; i++) {
	        var s = this.strings[i]; // For each binding we want to determine the kind of marker to insert
	        // into the template source before it's parsed by the browser's HTML
	        // parser. The marker type is based on whether the expression is in an
	        // attribute, text, or comment poisition.
	        //   * For node-position bindings we insert a comment with the marker
	        //     sentinel as its text content, like <!--{{lit-guid}}-->.
	        //   * For attribute bindings we insert just the marker sentinel for the
	        //     first binding, so that we support unquoted attribute bindings.
	        //     Subsequent bindings can use a comment marker because multi-binding
	        //     attributes must be quoted.
	        //   * For comment bindings we insert just the marker sentinel so we don't
	        //     close the comment.
	        //
	        // The following code scans the template source, but is *not* an HTML
	        // parser. We don't need to track the tree structure of the HTML, only
	        // whether a binding is inside a comment, and if not, if it appears to be
	        // the first binding in an attribute.

	        var commentOpen = s.lastIndexOf('<!--'); // We're in comment position if we have a comment open with no following
	        // comment close. Because <-- can appear in an attribute value there can
	        // be false positives.

	        isCommentBinding = (commentOpen > -1 || isCommentBinding) && s.indexOf('-->', commentOpen + 1) === -1; // Check to see if we have an attribute-like sequence preceeding the
	        // expression. This can match "name=value" like structures in text,
	        // comments, and attribute values, so there can be false-positives.

	        var attributeMatch = lastAttributeNameRegex.exec(s);

	        if (attributeMatch === null) {
	          // We're only in this branch if we don't have a attribute-like
	          // preceeding sequence. For comments, this guards against unusual
	          // attribute values like <div foo="<!--${'bar'}">. Cases like
	          // <!-- foo=${'bar'}--> are handled correctly in the attribute branch
	          // below.
	          html += s + (isCommentBinding ? marker : nodeMarker);
	        } else {
	          // For attributes we use just a marker sentinel, and also append a
	          // $lit$ suffix to the name to opt-out of attribute-specific parsing
	          // that IE and Edge do for style and certain SVG attributes.
	          html += s.substr(0, attributeMatch.index) + attributeMatch[1] + attributeMatch[2] + boundAttributeSuffix + attributeMatch[3] + marker;
	        }
	      }

	      html += this.strings[l];
	      return html;
	    }
	  }, {
	    key: "getTemplateElement",
	    value: function getTemplateElement() {
	      var template = document.createElement('template');
	      template.innerHTML = this.getHTML();
	      return template;
	    }
	  }]);

	  return TemplateResult;
	}();

	function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

	function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

	function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

	function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

	function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

	function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

	function _classCallCheck$7(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _defineProperties$6(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

	function _createClass$6(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties$6(Constructor.prototype, protoProps); if (staticProps) _defineProperties$6(Constructor, staticProps); return Constructor; }

	function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }
	var isPrimitive = function isPrimitive(value) {
	  return value === null || !(_typeof(value) === 'object' || typeof value === 'function');
	};
	var isIterable = function isIterable(value) {
	  return Array.isArray(value) || // tslint:disable-next-line:no-any
	  !!(value && value[Symbol.iterator]);
	};
	/**
	 * Writes attribute values to the DOM for a group of AttributeParts bound to a
	 * single attibute. The value is only set once even if there are multiple parts
	 * for an attribute.
	 */

	var AttributeCommitter =
	/*#__PURE__*/
	function () {
	  function AttributeCommitter(element, name, strings) {
	    _classCallCheck$7(this, AttributeCommitter);

	    this.dirty = true;
	    this.element = element;
	    this.name = name;
	    this.strings = strings;
	    this.parts = [];

	    for (var i = 0; i < strings.length - 1; i++) {
	      this.parts[i] = this._createPart();
	    }
	  }
	  /**
	   * Creates a single part. Override this to create a differnt type of part.
	   */


	  _createClass$6(AttributeCommitter, [{
	    key: "_createPart",
	    value: function _createPart() {
	      return new AttributePart(this);
	    }
	  }, {
	    key: "_getValue",
	    value: function _getValue() {
	      var strings = this.strings;
	      var l = strings.length - 1;
	      var text = '';

	      for (var i = 0; i < l; i++) {
	        text += strings[i];
	        var part = this.parts[i];

	        if (part !== undefined) {
	          var v = part.value;

	          if (isPrimitive(v) || !isIterable(v)) {
	            text += typeof v === 'string' ? v : String(v);
	          } else {
	            var _iteratorNormalCompletion = true;
	            var _didIteratorError = false;
	            var _iteratorError = undefined;

	            try {
	              for (var _iterator = v[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	                var t = _step.value;
	                text += typeof t === 'string' ? t : String(t);
	              }
	            } catch (err) {
	              _didIteratorError = true;
	              _iteratorError = err;
	            } finally {
	              try {
	                if (!_iteratorNormalCompletion && _iterator["return"] != null) {
	                  _iterator["return"]();
	                }
	              } finally {
	                if (_didIteratorError) {
	                  throw _iteratorError;
	                }
	              }
	            }
	          }
	        }
	      }

	      text += strings[l];
	      return text;
	    }
	  }, {
	    key: "commit",
	    value: function commit() {
	      if (this.dirty) {
	        this.dirty = false;
	        this.element.setAttribute(this.name, this._getValue());
	      }
	    }
	  }]);

	  return AttributeCommitter;
	}();
	/**
	 * A Part that controls all or part of an attribute value.
	 */

	var AttributePart =
	/*#__PURE__*/
	function () {
	  function AttributePart(committer) {
	    _classCallCheck$7(this, AttributePart);

	    this.value = undefined;
	    this.committer = committer;
	  }

	  _createClass$6(AttributePart, [{
	    key: "setValue",
	    value: function setValue(value) {
	      if (value !== noChange && (!isPrimitive(value) || value !== this.value)) {
	        this.value = value; // If the value is a not a directive, dirty the committer so that it'll
	        // call setAttribute. If the value is a directive, it'll dirty the
	        // committer if it calls setValue().

	        if (!isDirective(value)) {
	          this.committer.dirty = true;
	        }
	      }
	    }
	  }, {
	    key: "commit",
	    value: function commit() {
	      while (isDirective(this.value)) {
	        var directive = this.value;
	        this.value = noChange;
	        directive(this);
	      }

	      if (this.value === noChange) {
	        return;
	      }

	      this.committer.commit();
	    }
	  }]);

	  return AttributePart;
	}();
	/**
	 * A Part that controls a location within a Node tree. Like a Range, NodePart
	 * has start and end locations and can set and update the Nodes between those
	 * locations.
	 *
	 * NodeParts support several value types: primitives, Nodes, TemplateResults,
	 * as well as arrays and iterables of those types.
	 */

	var NodePart =
	/*#__PURE__*/
	function () {
	  function NodePart(options) {
	    _classCallCheck$7(this, NodePart);

	    this.value = undefined;
	    this.__pendingValue = undefined;
	    this.options = options;
	  }
	  /**
	   * Appends this part into a container.
	   *
	   * This part must be empty, as its contents are not automatically moved.
	   */


	  _createClass$6(NodePart, [{
	    key: "appendInto",
	    value: function appendInto(container) {
	      this.startNode = container.appendChild(createMarker());
	      this.endNode = container.appendChild(createMarker());
	    }
	    /**
	     * Inserts this part after the `ref` node (between `ref` and `ref`'s next
	     * sibling). Both `ref` and its next sibling must be static, unchanging nodes
	     * such as those that appear in a literal section of a template.
	     *
	     * This part must be empty, as its contents are not automatically moved.
	     */

	  }, {
	    key: "insertAfterNode",
	    value: function insertAfterNode(ref) {
	      this.startNode = ref;
	      this.endNode = ref.nextSibling;
	    }
	    /**
	     * Appends this part into a parent part.
	     *
	     * This part must be empty, as its contents are not automatically moved.
	     */

	  }, {
	    key: "appendIntoPart",
	    value: function appendIntoPart(part) {
	      part.__insert(this.startNode = createMarker());

	      part.__insert(this.endNode = createMarker());
	    }
	    /**
	     * Inserts this part after the `ref` part.
	     *
	     * This part must be empty, as its contents are not automatically moved.
	     */

	  }, {
	    key: "insertAfterPart",
	    value: function insertAfterPart(ref) {
	      ref.__insert(this.startNode = createMarker());

	      this.endNode = ref.endNode;
	      ref.endNode = this.startNode;
	    }
	  }, {
	    key: "setValue",
	    value: function setValue(value) {
	      this.__pendingValue = value;
	    }
	  }, {
	    key: "commit",
	    value: function commit() {
	      while (isDirective(this.__pendingValue)) {
	        var directive = this.__pendingValue;
	        this.__pendingValue = noChange;
	        directive(this);
	      }

	      var value = this.__pendingValue;

	      if (value === noChange) {
	        return;
	      }

	      if (isPrimitive(value)) {
	        if (value !== this.value) {
	          this.__commitText(value);
	        }
	      } else if (value instanceof TemplateResult) {
	        this.__commitTemplateResult(value);
	      } else if (value instanceof Node) {
	        this.__commitNode(value);
	      } else if (isIterable(value)) {
	        this.__commitIterable(value);
	      } else if (value === nothing) {
	        this.value = nothing;
	        this.clear();
	      } else {
	        // Fallback, will render the string representation
	        this.__commitText(value);
	      }
	    }
	  }, {
	    key: "__insert",
	    value: function __insert(node) {
	      this.endNode.parentNode.insertBefore(node, this.endNode);
	    }
	  }, {
	    key: "__commitNode",
	    value: function __commitNode(value) {
	      if (this.value === value) {
	        return;
	      }

	      this.clear();

	      this.__insert(value);

	      this.value = value;
	    }
	  }, {
	    key: "__commitText",
	    value: function __commitText(value) {
	      var node = this.startNode.nextSibling;
	      value = value == null ? '' : value;

	      if (node === this.endNode.previousSibling && node.nodeType === 3
	      /* Node.TEXT_NODE */
	      ) {
	          // If we only have a single text node between the markers, we can just
	          // set its value, rather than replacing it.
	          // TODO(justinfagnani): Can we just check if this.value is primitive?
	          node.data = value;
	        } else {
	        this.__commitNode(document.createTextNode(typeof value === 'string' ? value : String(value)));
	      }

	      this.value = value;
	    }
	  }, {
	    key: "__commitTemplateResult",
	    value: function __commitTemplateResult(value) {
	      var template = this.options.templateFactory(value);

	      if (this.value instanceof TemplateInstance && this.value.template === template) {
	        this.value.update(value.values);
	      } else {
	        // Make sure we propagate the template processor from the TemplateResult
	        // so that we use its syntax extension, etc. The template factory comes
	        // from the render function options so that it can control template
	        // caching and preprocessing.
	        var instance = new TemplateInstance(template, value.processor, this.options);

	        var fragment = instance._clone();

	        instance.update(value.values);

	        this.__commitNode(fragment);

	        this.value = instance;
	      }
	    }
	  }, {
	    key: "__commitIterable",
	    value: function __commitIterable(value) {
	      // For an Iterable, we create a new InstancePart per item, then set its
	      // value to the item. This is a little bit of overhead for every item in
	      // an Iterable, but it lets us recurse easily and efficiently update Arrays
	      // of TemplateResults that will be commonly returned from expressions like:
	      // array.map((i) => html`${i}`), by reusing existing TemplateInstances.
	      // If _value is an array, then the previous render was of an
	      // iterable and _value will contain the NodeParts from the previous
	      // render. If _value is not an array, clear this part and make a new
	      // array for NodeParts.
	      if (!Array.isArray(this.value)) {
	        this.value = [];
	        this.clear();
	      } // Lets us keep track of how many items we stamped so we can clear leftover
	      // items from a previous render


	      var itemParts = this.value;
	      var partIndex = 0;
	      var itemPart;
	      var _iteratorNormalCompletion2 = true;
	      var _didIteratorError2 = false;
	      var _iteratorError2 = undefined;

	      try {
	        for (var _iterator2 = value[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
	          var item = _step2.value;
	          // Try to reuse an existing part
	          itemPart = itemParts[partIndex]; // If no existing part, create a new one

	          if (itemPart === undefined) {
	            itemPart = new NodePart(this.options);
	            itemParts.push(itemPart);

	            if (partIndex === 0) {
	              itemPart.appendIntoPart(this);
	            } else {
	              itemPart.insertAfterPart(itemParts[partIndex - 1]);
	            }
	          }

	          itemPart.setValue(item);
	          itemPart.commit();
	          partIndex++;
	        }
	      } catch (err) {
	        _didIteratorError2 = true;
	        _iteratorError2 = err;
	      } finally {
	        try {
	          if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
	            _iterator2["return"]();
	          }
	        } finally {
	          if (_didIteratorError2) {
	            throw _iteratorError2;
	          }
	        }
	      }

	      if (partIndex < itemParts.length) {
	        // Truncate the parts array so _value reflects the current state
	        itemParts.length = partIndex;
	        this.clear(itemPart && itemPart.endNode);
	      }
	    }
	  }, {
	    key: "clear",
	    value: function clear() {
	      var startNode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.startNode;
	      removeNodes(this.startNode.parentNode, startNode.nextSibling, this.endNode);
	    }
	  }]);

	  return NodePart;
	}();
	/**
	 * Implements a boolean attribute, roughly as defined in the HTML
	 * specification.
	 *
	 * If the value is truthy, then the attribute is present with a value of
	 * ''. If the value is falsey, the attribute is removed.
	 */

	var BooleanAttributePart =
	/*#__PURE__*/
	function () {
	  function BooleanAttributePart(element, name, strings) {
	    _classCallCheck$7(this, BooleanAttributePart);

	    this.value = undefined;
	    this.__pendingValue = undefined;

	    if (strings.length !== 2 || strings[0] !== '' || strings[1] !== '') {
	      throw new Error('Boolean attributes can only contain a single expression');
	    }

	    this.element = element;
	    this.name = name;
	    this.strings = strings;
	  }

	  _createClass$6(BooleanAttributePart, [{
	    key: "setValue",
	    value: function setValue(value) {
	      this.__pendingValue = value;
	    }
	  }, {
	    key: "commit",
	    value: function commit() {
	      while (isDirective(this.__pendingValue)) {
	        var directive = this.__pendingValue;
	        this.__pendingValue = noChange;
	        directive(this);
	      }

	      if (this.__pendingValue === noChange) {
	        return;
	      }

	      var value = !!this.__pendingValue;

	      if (this.value !== value) {
	        if (value) {
	          this.element.setAttribute(this.name, '');
	        } else {
	          this.element.removeAttribute(this.name);
	        }

	        this.value = value;
	      }

	      this.__pendingValue = noChange;
	    }
	  }]);

	  return BooleanAttributePart;
	}();
	/**
	 * Sets attribute values for PropertyParts, so that the value is only set once
	 * even if there are multiple parts for a property.
	 *
	 * If an expression controls the whole property value, then the value is simply
	 * assigned to the property under control. If there are string literals or
	 * multiple expressions, then the strings are expressions are interpolated into
	 * a string first.
	 */

	var PropertyCommitter =
	/*#__PURE__*/
	function (_AttributeCommitter) {
	  _inherits(PropertyCommitter, _AttributeCommitter);

	  function PropertyCommitter(element, name, strings) {
	    var _this;

	    _classCallCheck$7(this, PropertyCommitter);

	    _this = _possibleConstructorReturn(this, _getPrototypeOf(PropertyCommitter).call(this, element, name, strings));
	    _this.single = strings.length === 2 && strings[0] === '' && strings[1] === '';
	    return _this;
	  }

	  _createClass$6(PropertyCommitter, [{
	    key: "_createPart",
	    value: function _createPart() {
	      return new PropertyPart(this);
	    }
	  }, {
	    key: "_getValue",
	    value: function _getValue() {
	      if (this.single) {
	        return this.parts[0].value;
	      }

	      return _get(_getPrototypeOf(PropertyCommitter.prototype), "_getValue", this).call(this);
	    }
	  }, {
	    key: "commit",
	    value: function commit() {
	      if (this.dirty) {
	        this.dirty = false; // tslint:disable-next-line:no-any

	        this.element[this.name] = this._getValue();
	      }
	    }
	  }]);

	  return PropertyCommitter;
	}(AttributeCommitter);
	var PropertyPart =
	/*#__PURE__*/
	function (_AttributePart) {
	  _inherits(PropertyPart, _AttributePart);

	  function PropertyPart() {
	    _classCallCheck$7(this, PropertyPart);

	    return _possibleConstructorReturn(this, _getPrototypeOf(PropertyPart).apply(this, arguments));
	  }

	  return PropertyPart;
	}(AttributePart); // Detect event listener options support. If the `capture` property is read
	// from the options object, then options are supported. If not, then the thrid
	// argument to add/removeEventListener is interpreted as the boolean capture
	// value so we should only pass the `capture` property.

	var eventOptionsSupported = false;

	try {
	  var options = {
	    get capture() {
	      eventOptionsSupported = true;
	      return false;
	    }

	  }; // tslint:disable-next-line:no-any

	  window.addEventListener('test', options, options); // tslint:disable-next-line:no-any

	  window.removeEventListener('test', options, options);
	} catch (_e) {}

	var EventPart =
	/*#__PURE__*/
	function () {
	  function EventPart(element, eventName, eventContext) {
	    var _this2 = this;

	    _classCallCheck$7(this, EventPart);

	    this.value = undefined;
	    this.__pendingValue = undefined;
	    this.element = element;
	    this.eventName = eventName;
	    this.eventContext = eventContext;

	    this.__boundHandleEvent = function (e) {
	      return _this2.handleEvent(e);
	    };
	  }

	  _createClass$6(EventPart, [{
	    key: "setValue",
	    value: function setValue(value) {
	      this.__pendingValue = value;
	    }
	  }, {
	    key: "commit",
	    value: function commit() {
	      while (isDirective(this.__pendingValue)) {
	        var directive = this.__pendingValue;
	        this.__pendingValue = noChange;
	        directive(this);
	      }

	      if (this.__pendingValue === noChange) {
	        return;
	      }

	      var newListener = this.__pendingValue;
	      var oldListener = this.value;
	      var shouldRemoveListener = newListener == null || oldListener != null && (newListener.capture !== oldListener.capture || newListener.once !== oldListener.once || newListener.passive !== oldListener.passive);
	      var shouldAddListener = newListener != null && (oldListener == null || shouldRemoveListener);

	      if (shouldRemoveListener) {
	        this.element.removeEventListener(this.eventName, this.__boundHandleEvent, this.__options);
	      }

	      if (shouldAddListener) {
	        this.__options = getOptions(newListener);
	        this.element.addEventListener(this.eventName, this.__boundHandleEvent, this.__options);
	      }

	      this.value = newListener;
	      this.__pendingValue = noChange;
	    }
	  }, {
	    key: "handleEvent",
	    value: function handleEvent(event) {
	      if (typeof this.value === 'function') {
	        this.value.call(this.eventContext || this.element, event);
	      } else {
	        this.value.handleEvent(event);
	      }
	    }
	  }]);

	  return EventPart;
	}(); // We copy options because of the inconsistent behavior of browsers when reading
	// the third argument of add/removeEventListener. IE11 doesn't support options
	// at all. Chrome 41 only reads `capture` if the argument is an object.

	var getOptions = function getOptions(o) {
	  return o && (eventOptionsSupported ? {
	    capture: o.capture,
	    passive: o.passive,
	    once: o.once
	  } : o.capture);
	};

	function _classCallCheck$8(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _defineProperties$7(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

	function _createClass$7(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties$7(Constructor.prototype, protoProps); if (staticProps) _defineProperties$7(Constructor, staticProps); return Constructor; }
	/**
	 * Creates Parts when a template is instantiated.
	 */

	var DefaultTemplateProcessor =
	/*#__PURE__*/
	function () {
	  function DefaultTemplateProcessor() {
	    _classCallCheck$8(this, DefaultTemplateProcessor);
	  }

	  _createClass$7(DefaultTemplateProcessor, [{
	    key: "handleAttributeExpressions",

	    /**
	     * Create parts for an attribute-position binding, given the event, attribute
	     * name, and string literals.
	     *
	     * @param element The element containing the binding
	     * @param name  The attribute name
	     * @param strings The string literals. There are always at least two strings,
	     *   event for fully-controlled bindings with a single expression.
	     */
	    value: function handleAttributeExpressions(element, name, strings, options) {
	      var prefix = name[0];

	      if (prefix === '.') {
	        var _committer = new PropertyCommitter(element, name.slice(1), strings);

	        return _committer.parts;
	      }

	      if (prefix === '@') {
	        return [new EventPart(element, name.slice(1), options.eventContext)];
	      }

	      if (prefix === '?') {
	        return [new BooleanAttributePart(element, name.slice(1), strings)];
	      }

	      var committer = new AttributeCommitter(element, name, strings);
	      return committer.parts;
	    }
	    /**
	     * Create parts for a text-position binding.
	     * @param templateFactory
	     */

	  }, {
	    key: "handleTextExpression",
	    value: function handleTextExpression(options) {
	      return new NodePart(options);
	    }
	  }]);

	  return DefaultTemplateProcessor;
	}();
	var defaultTemplateProcessor = new DefaultTemplateProcessor();

	/**
	 * The default TemplateFactory which caches Templates keyed on
	 * result.type and result.strings.
	 */

	function templateFactory(result) {
	  var templateCache = templateCaches.get(result.type);

	  if (templateCache === undefined) {
	    templateCache = {
	      stringsArray: new WeakMap(),
	      keyString: new Map()
	    };
	    templateCaches.set(result.type, templateCache);
	  }

	  var template = templateCache.stringsArray.get(result.strings);

	  if (template !== undefined) {
	    return template;
	  } // If the TemplateStringsArray is new, generate a key from the strings
	  // This key is shared between all templates with identical content


	  var key = result.strings.join(marker); // Check if we already have a Template for this key

	  template = templateCache.keyString.get(key);

	  if (template === undefined) {
	    // If we have not seen this key before, create a new Template
	    template = new Template(result, result.getTemplateElement()); // Cache the Template for this key

	    templateCache.keyString.set(key, template);
	  } // Cache all future queries for this TemplateStringsArray


	  templateCache.stringsArray.set(result.strings, template);
	  return template;
	}
	var templateCaches = new Map();

	var parts = new WeakMap();
	/**
	 * Renders a template to a container.
	 *
	 * To update a container with new values, reevaluate the template literal and
	 * call `render` with the new result.
	 *
	 * @param result a TemplateResult created by evaluating a template tag like
	 *     `html` or `svg`.
	 * @param container A DOM parent to render to. The entire contents are either
	 *     replaced, or efficiently updated if the same result type was previous
	 *     rendered there.
	 * @param options RenderOptions for the entire render tree rendered to this
	 *     container. Render options must *not* change between renders to the same
	 *     container, as those changes will not effect previously rendered DOM.
	 */

	var render = function render(result, container, options) {
	  var part = parts.get(container);

	  if (part === undefined) {
	    removeNodes(container, container.firstChild);
	    parts.set(container, part = new NodePart(Object.assign({
	      templateFactory: templateFactory
	    }, options)));
	    part.appendInto(container);
	  }

	  part.setValue(result);
	  part.commit();
	};

	/**
	 * @license
	 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
	 * This code may only be used under the BSD style license found at
	 * http://polymer.github.io/LICENSE.txt
	 * The complete set of authors may be found at
	 * http://polymer.github.io/AUTHORS.txt
	 * The complete set of contributors may be found at
	 * http://polymer.github.io/CONTRIBUTORS.txt
	 * Code distributed by Google as part of the polymer project is also
	 * subject to an additional IP rights grant found at
	 * http://polymer.github.io/PATENTS.txt
	 */
	// This line will be used in regexes to search for lit-html usage.
	// TODO(justinfagnani): inject version number at build time

	(window['litHtmlVersions'] || (window['litHtmlVersions'] = [])).push('1.0.0');
	/**
	 * Interprets a template literal as an HTML template that can efficiently
	 * render to and update a container.
	 */

	var html$1 = function html(strings) {
	  for (var _len = arguments.length, values = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	    values[_key - 1] = arguments[_key];
	  }

	  return new TemplateResult(strings, values, 'html', defaultTemplateProcessor);
	};

	var walkerNodeFilter = 133
	/* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */
	;
	/**
	 * Removes the list of nodes from a Template safely. In addition to removing
	 * nodes from the Template, the Template part indices are updated to match
	 * the mutated Template DOM.
	 *
	 * As the template is walked the removal state is tracked and
	 * part indices are adjusted as needed.
	 *
	 * div
	 *   div#1 (remove) <-- start removing (removing node is div#1)
	 *     div
	 *       div#2 (remove)  <-- continue removing (removing node is still div#1)
	 *         div
	 * div <-- stop removing since previous sibling is the removing node (div#1,
	 * removed 4 nodes)
	 */

	function removeNodesFromTemplate(template, nodesToRemove) {
	  var content = template.element.content,
	      parts = template.parts;
	  var walker = document.createTreeWalker(content, walkerNodeFilter, null, false);
	  var partIndex = nextActiveIndexInTemplateParts(parts);
	  var part = parts[partIndex];
	  var nodeIndex = -1;
	  var removeCount = 0;
	  var nodesToRemoveInTemplate = [];
	  var currentRemovingNode = null;

	  while (walker.nextNode()) {
	    nodeIndex++;
	    var node = walker.currentNode; // End removal if stepped past the removing node

	    if (node.previousSibling === currentRemovingNode) {
	      currentRemovingNode = null;
	    } // A node to remove was found in the template


	    if (nodesToRemove.has(node)) {
	      nodesToRemoveInTemplate.push(node); // Track node we're removing

	      if (currentRemovingNode === null) {
	        currentRemovingNode = node;
	      }
	    } // When removing, increment count by which to adjust subsequent part indices


	    if (currentRemovingNode !== null) {
	      removeCount++;
	    }

	    while (part !== undefined && part.index === nodeIndex) {
	      // If part is in a removed node deactivate it by setting index to -1 or
	      // adjust the index as needed.
	      part.index = currentRemovingNode !== null ? -1 : part.index - removeCount; // go to the next active part.

	      partIndex = nextActiveIndexInTemplateParts(parts, partIndex);
	      part = parts[partIndex];
	    }
	  }

	  nodesToRemoveInTemplate.forEach(function (n) {
	    return n.parentNode.removeChild(n);
	  });
	}

	var countNodes = function countNodes(node) {
	  var count = node.nodeType === 11
	  /* Node.DOCUMENT_FRAGMENT_NODE */
	  ? 0 : 1;
	  var walker = document.createTreeWalker(node, walkerNodeFilter, null, false);

	  while (walker.nextNode()) {
	    count++;
	  }

	  return count;
	};

	var nextActiveIndexInTemplateParts = function nextActiveIndexInTemplateParts(parts) {
	  var startIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : -1;

	  for (var i = startIndex + 1; i < parts.length; i++) {
	    var part = parts[i];

	    if (isTemplatePartActive(part)) {
	      return i;
	    }
	  }

	  return -1;
	};
	/**
	 * Inserts the given node into the Template, optionally before the given
	 * refNode. In addition to inserting the node into the Template, the Template
	 * part indices are updated to match the mutated Template DOM.
	 */


	function insertNodeIntoTemplate(template, node) {
	  var refNode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
	  var content = template.element.content,
	      parts = template.parts; // If there's no refNode, then put node at end of template.
	  // No part indices need to be shifted in this case.

	  if (refNode === null || refNode === undefined) {
	    content.appendChild(node);
	    return;
	  }

	  var walker = document.createTreeWalker(content, walkerNodeFilter, null, false);
	  var partIndex = nextActiveIndexInTemplateParts(parts);
	  var insertCount = 0;
	  var walkerIndex = -1;

	  while (walker.nextNode()) {
	    walkerIndex++;
	    var walkerNode = walker.currentNode;

	    if (walkerNode === refNode) {
	      insertCount = countNodes(node);
	      refNode.parentNode.insertBefore(node, refNode);
	    }

	    while (partIndex !== -1 && parts[partIndex].index === walkerIndex) {
	      // If we've inserted the node, simply adjust all subsequent parts
	      if (insertCount > 0) {
	        while (partIndex !== -1) {
	          parts[partIndex].index += insertCount;
	          partIndex = nextActiveIndexInTemplateParts(parts, partIndex);
	        }

	        return;
	      }

	      partIndex = nextActiveIndexInTemplateParts(parts, partIndex);
	    }
	  }
	}

	var getTemplateCacheKey = function getTemplateCacheKey(type, scopeName) {
	  return "".concat(type, "--").concat(scopeName);
	};

	var compatibleShadyCSSVersion = true;

	if (typeof window.ShadyCSS === 'undefined') {
	  compatibleShadyCSSVersion = false;
	} else if (typeof window.ShadyCSS.prepareTemplateDom === 'undefined') {
	  console.warn("Incompatible ShadyCSS version detected. " + "Please update to at least @webcomponents/webcomponentsjs@2.0.2 and " + "@webcomponents/shadycss@1.3.1.");
	  compatibleShadyCSSVersion = false;
	}
	/**
	 * Template factory which scopes template DOM using ShadyCSS.
	 * @param scopeName {string}
	 */


	var shadyTemplateFactory = function shadyTemplateFactory(scopeName) {
	  return function (result) {
	    var cacheKey = getTemplateCacheKey(result.type, scopeName);
	    var templateCache = templateCaches.get(cacheKey);

	    if (templateCache === undefined) {
	      templateCache = {
	        stringsArray: new WeakMap(),
	        keyString: new Map()
	      };
	      templateCaches.set(cacheKey, templateCache);
	    }

	    var template = templateCache.stringsArray.get(result.strings);

	    if (template !== undefined) {
	      return template;
	    }

	    var key = result.strings.join(marker);
	    template = templateCache.keyString.get(key);

	    if (template === undefined) {
	      var element = result.getTemplateElement();

	      if (compatibleShadyCSSVersion) {
	        window.ShadyCSS.prepareTemplateDom(element, scopeName);
	      }

	      template = new Template(result, element);
	      templateCache.keyString.set(key, template);
	    }

	    templateCache.stringsArray.set(result.strings, template);
	    return template;
	  };
	};

	var TEMPLATE_TYPES = ['html', 'svg'];
	/**
	 * Removes all style elements from Templates for the given scopeName.
	 */

	var removeStylesFromLitTemplates = function removeStylesFromLitTemplates(scopeName) {
	  TEMPLATE_TYPES.forEach(function (type) {
	    var templates = templateCaches.get(getTemplateCacheKey(type, scopeName));

	    if (templates !== undefined) {
	      templates.keyString.forEach(function (template) {
	        var content = template.element.content; // IE 11 doesn't support the iterable param Set constructor

	        var styles = new Set();
	        Array.from(content.querySelectorAll('style')).forEach(function (s) {
	          styles.add(s);
	        });
	        removeNodesFromTemplate(template, styles);
	      });
	    }
	  });
	};

	var shadyRenderSet = new Set();
	/**
	 * For the given scope name, ensures that ShadyCSS style scoping is performed.
	 * This is done just once per scope name so the fragment and template cannot
	 * be modified.
	 * (1) extracts styles from the rendered fragment and hands them to ShadyCSS
	 * to be scoped and appended to the document
	 * (2) removes style elements from all lit-html Templates for this scope name.
	 *
	 * Note, <style> elements can only be placed into templates for the
	 * initial rendering of the scope. If <style> elements are included in templates
	 * dynamically rendered to the scope (after the first scope render), they will
	 * not be scoped and the <style> will be left in the template and rendered
	 * output.
	 */

	var prepareTemplateStyles = function prepareTemplateStyles(renderedDOM, template, scopeName) {
	  shadyRenderSet.add(scopeName); // Move styles out of rendered DOM and store.

	  var styles = renderedDOM.querySelectorAll('style');
	  var length = styles.length; // If there are no styles, skip unnecessary work

	  if (length === 0) {
	    // Ensure prepareTemplateStyles is called to support adding
	    // styles via `prepareAdoptedCssText` since that requires that
	    // `prepareTemplateStyles` is called.
	    window.ShadyCSS.prepareTemplateStyles(template.element, scopeName);
	    return;
	  }

	  var condensedStyle = document.createElement('style'); // Collect styles into a single style. This helps us make sure ShadyCSS
	  // manipulations will not prevent us from being able to fix up template
	  // part indices.
	  // NOTE: collecting styles is inefficient for browsers but ShadyCSS
	  // currently does this anyway. When it does not, this should be changed.

	  for (var i = 0; i < length; i++) {
	    var _style = styles[i];

	    _style.parentNode.removeChild(_style);

	    condensedStyle.textContent += _style.textContent;
	  } // Remove styles from nested templates in this scope.


	  removeStylesFromLitTemplates(scopeName); // And then put the condensed style into the "root" template passed in as
	  // `template`.

	  var content = template.element.content;
	  insertNodeIntoTemplate(template, condensedStyle, content.firstChild); // Note, it's important that ShadyCSS gets the template that `lit-html`
	  // will actually render so that it can update the style inside when
	  // needed (e.g. @apply native Shadow DOM case).

	  window.ShadyCSS.prepareTemplateStyles(template.element, scopeName);
	  var style = content.querySelector('style');

	  if (window.ShadyCSS.nativeShadow && style !== null) {
	    // When in native Shadow DOM, ensure the style created by ShadyCSS is
	    // included in initially rendered output (`renderedDOM`).
	    renderedDOM.insertBefore(style.cloneNode(true), renderedDOM.firstChild);
	  } else {
	    // When no style is left in the template, parts will be broken as a
	    // result. To fix this, we put back the style node ShadyCSS removed
	    // and then tell lit to remove that node from the template.
	    // There can be no style in the template in 2 cases (1) when Shady DOM
	    // is in use, ShadyCSS removes all styles, (2) when native Shadow DOM
	    // is in use ShadyCSS removes the style if it contains no content.
	    // NOTE, ShadyCSS creates its own style so we can safely add/remove
	    // `condensedStyle` here.
	    content.insertBefore(condensedStyle, content.firstChild);
	    var removes = new Set();
	    removes.add(condensedStyle);
	    removeNodesFromTemplate(template, removes);
	  }
	};
	/**
	 * Extension to the standard `render` method which supports rendering
	 * to ShadowRoots when the ShadyDOM (https://github.com/webcomponents/shadydom)
	 * and ShadyCSS (https://github.com/webcomponents/shadycss) polyfills are used
	 * or when the webcomponentsjs
	 * (https://github.com/webcomponents/webcomponentsjs) polyfill is used.
	 *
	 * Adds a `scopeName` option which is used to scope element DOM and stylesheets
	 * when native ShadowDOM is unavailable. The `scopeName` will be added to
	 * the class attribute of all rendered DOM. In addition, any style elements will
	 * be automatically re-written with this `scopeName` selector and moved out
	 * of the rendered DOM and into the document `<head>`.
	 *
	 * It is common to use this render method in conjunction with a custom element
	 * which renders a shadowRoot. When this is done, typically the element's
	 * `localName` should be used as the `scopeName`.
	 *
	 * In addition to DOM scoping, ShadyCSS also supports a basic shim for css
	 * custom properties (needed only on older browsers like IE11) and a shim for
	 * a deprecated feature called `@apply` that supports applying a set of css
	 * custom properties to a given location.
	 *
	 * Usage considerations:
	 *
	 * * Part values in `<style>` elements are only applied the first time a given
	 * `scopeName` renders. Subsequent changes to parts in style elements will have
	 * no effect. Because of this, parts in style elements should only be used for
	 * values that will never change, for example parts that set scope-wide theme
	 * values or parts which render shared style elements.
	 *
	 * * Note, due to a limitation of the ShadyDOM polyfill, rendering in a
	 * custom element's `constructor` is not supported. Instead rendering should
	 * either done asynchronously, for example at microtask timing (for example
	 * `Promise.resolve()`), or be deferred until the first time the element's
	 * `connectedCallback` runs.
	 *
	 * Usage considerations when using shimmed custom properties or `@apply`:
	 *
	 * * Whenever any dynamic changes are made which affect
	 * css custom properties, `ShadyCSS.styleElement(element)` must be called
	 * to update the element. There are two cases when this is needed:
	 * (1) the element is connected to a new parent, (2) a class is added to the
	 * element that causes it to match different custom properties.
	 * To address the first case when rendering a custom element, `styleElement`
	 * should be called in the element's `connectedCallback`.
	 *
	 * * Shimmed custom properties may only be defined either for an entire
	 * shadowRoot (for example, in a `:host` rule) or via a rule that directly
	 * matches an element with a shadowRoot. In other words, instead of flowing from
	 * parent to child as do native css custom properties, shimmed custom properties
	 * flow only from shadowRoots to nested shadowRoots.
	 *
	 * * When using `@apply` mixing css shorthand property names with
	 * non-shorthand names (for example `border` and `border-width`) is not
	 * supported.
	 */


	var render$1 = function render$1(result, container, options) {
	  var scopeName = options.scopeName;
	  var hasRendered = parts.has(container);
	  var needsScoping = compatibleShadyCSSVersion && container.nodeType === 11
	  /* Node.DOCUMENT_FRAGMENT_NODE */
	  && !!container.host && result instanceof TemplateResult; // Handle first render to a scope specially...

	  var firstScopeRender = needsScoping && !shadyRenderSet.has(scopeName); // On first scope render, render into a fragment; this cannot be a single
	  // fragment that is reused since nested renders can occur synchronously.

	  var renderContainer = firstScopeRender ? document.createDocumentFragment() : container;
	  render(result, renderContainer, Object.assign({
	    templateFactory: shadyTemplateFactory(scopeName)
	  }, options)); // When performing first scope render,
	  // (1) We've rendered into a fragment so that there's a chance to
	  // `prepareTemplateStyles` before sub-elements hit the DOM
	  // (which might cause them to render based on a common pattern of
	  // rendering in a custom element's `connectedCallback`);
	  // (2) Scope the template with ShadyCSS one time only for this scope.
	  // (3) Render the fragment into the container and make sure the
	  // container knows its `part` is the one we just rendered. This ensures
	  // DOM will be re-used on subsequent renders.

	  if (firstScopeRender) {
	    var part = parts.get(renderContainer);
	    parts["delete"](renderContainer);

	    if (part.value instanceof TemplateInstance) {
	      prepareTemplateStyles(renderContainer, part.value.template, scopeName);
	    }

	    removeNodes(container, container.firstChild);
	    container.appendChild(renderContainer);
	    parts.set(container, part);
	  } // After elements have hit the DOM, update styling if this is the
	  // initial render to this container.
	  // This is needed whenever dynamic changes are made so it would be
	  // safest to do every render; however, this would regress performance
	  // so we leave it up to the user to call `ShadyCSSS.styleElement`
	  // for dynamic changes.


	  if (!hasRendered && needsScoping) {
	    window.ShadyCSS.styleElement(container.host);
	  }
	};

	function _toConsumableArray$2(arr) { return _arrayWithoutHoles$2(arr) || _iterableToArray$2(arr) || _nonIterableSpread$2(); }

	function _nonIterableSpread$2() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

	function _iterableToArray$2(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

	function _arrayWithoutHoles$2(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

	function _typeof$1(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof$1 = function _typeof(obj) { return typeof obj; }; } else { _typeof$1 = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof$1(obj); }

	function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

	function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

	function _classCallCheck$9(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _defineProperties$8(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

	function _createClass$8(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties$8(Constructor.prototype, protoProps); if (staticProps) _defineProperties$8(Constructor, staticProps); return Constructor; }

	function _possibleConstructorReturn$1(self, call) { if (call && (_typeof$1(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized$1(self); }

	function _assertThisInitialized$1(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

	function _inherits$1(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf$1(subClass, superClass); }

	function _wrapNativeSuper(Class) { var _cache = typeof Map === "function" ? new Map() : undefined; _wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !_isNativeFunction(Class)) return Class; if (typeof Class !== "function") { throw new TypeError("Super expression must either be null or a function"); } if (typeof _cache !== "undefined") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return _construct(Class, arguments, _getPrototypeOf$1(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return _setPrototypeOf$1(Wrapper, Class); }; return _wrapNativeSuper(Class); }

	function isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

	function _construct(Parent, args, Class) { if (isNativeReflectConstruct()) { _construct = Reflect.construct; } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf$1(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }

	function _isNativeFunction(fn) { return Function.toString.call(fn).indexOf("[native code]") !== -1; }

	function _setPrototypeOf$1(o, p) { _setPrototypeOf$1 = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf$1(o, p); }

	function _getPrototypeOf$1(o) { _getPrototypeOf$1 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf$1(o); }

	/**
	 * @license
	 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
	 * This code may only be used under the BSD style license found at
	 * http://polymer.github.io/LICENSE.txt
	 * The complete set of authors may be found at
	 * http://polymer.github.io/AUTHORS.txt
	 * The complete set of contributors may be found at
	 * http://polymer.github.io/CONTRIBUTORS.txt
	 * Code distributed by Google as part of the polymer project is also
	 * subject to an additional IP rights grant found at
	 * http://polymer.github.io/PATENTS.txt
	 */

	/**
	 * When using Closure Compiler, JSCompiler_renameProperty(property, object) is
	 * replaced at compile time by the munged name for object[property]. We cannot
	 * alias this function, so we have to use a small shim that has the same
	 * behavior when not compiling.
	 */
	window.JSCompiler_renameProperty = function (prop, _obj) {
	  return prop;
	};

	var defaultConverter = {
	  toAttribute: function toAttribute(value, type) {
	    switch (type) {
	      case Boolean:
	        return value ? '' : null;

	      case Object:
	      case Array:
	        // if the value is `null` or `undefined` pass this through
	        // to allow removing/no change behavior.
	        return value == null ? value : JSON.stringify(value);
	    }

	    return value;
	  },
	  fromAttribute: function fromAttribute(value, type) {
	    switch (type) {
	      case Boolean:
	        return value !== null;

	      case Number:
	        return value === null ? null : Number(value);

	      case Object:
	      case Array:
	        return JSON.parse(value);
	    }

	    return value;
	  }
	};
	/**
	 * Change function that returns true if `value` is different from `oldValue`.
	 * This method is used as the default for a property's `hasChanged` function.
	 */

	var notEqual = function notEqual(value, old) {
	  // This ensures (old==NaN, value==NaN) always returns false
	  return old !== value && (old === old || value === value);
	};
	var defaultPropertyDeclaration = {
	  attribute: true,
	  type: String,
	  converter: defaultConverter,
	  reflect: false,
	  hasChanged: notEqual
	};
	var microtaskPromise = Promise.resolve(true);
	var STATE_HAS_UPDATED = 1;
	var STATE_UPDATE_REQUESTED = 1 << 2;
	var STATE_IS_REFLECTING_TO_ATTRIBUTE = 1 << 3;
	var STATE_IS_REFLECTING_TO_PROPERTY = 1 << 4;
	var STATE_HAS_CONNECTED = 1 << 5;
	/**
	 * Base element class which manages element properties and attributes. When
	 * properties change, the `update` method is asynchronously called. This method
	 * should be supplied by subclassers to render updates as desired.
	 */

	var UpdatingElement =
	/*#__PURE__*/
	function (_HTMLElement) {
	  _inherits$1(UpdatingElement, _HTMLElement);

	  function UpdatingElement() {
	    var _this;

	    _classCallCheck$9(this, UpdatingElement);

	    _this = _possibleConstructorReturn$1(this, _getPrototypeOf$1(UpdatingElement).call(this));
	    _this._updateState = 0;
	    _this._instanceProperties = undefined;
	    _this._updatePromise = microtaskPromise;
	    _this._hasConnectedResolver = undefined;
	    /**
	     * Map with keys for any properties that have changed since the last
	     * update cycle with previous values.
	     */

	    _this._changedProperties = new Map();
	    /**
	     * Map with keys of properties that should be reflected when updated.
	     */

	    _this._reflectingProperties = undefined;

	    _this.initialize();

	    return _this;
	  }
	  /**
	   * Returns a list of attributes corresponding to the registered properties.
	   * @nocollapse
	   */


	  _createClass$8(UpdatingElement, [{
	    key: "initialize",

	    /**
	     * Performs element initialization. By default captures any pre-set values for
	     * registered properties.
	     */
	    value: function initialize() {
	      this._saveInstanceProperties(); // ensures first update will be caught by an early access of `updateComplete`


	      this._requestUpdate();
	    }
	    /**
	     * Fixes any properties set on the instance before upgrade time.
	     * Otherwise these would shadow the accessor and break these properties.
	     * The properties are stored in a Map which is played back after the
	     * constructor runs. Note, on very old versions of Safari (<=9) or Chrome
	     * (<=41), properties created for native platform properties like (`id` or
	     * `name`) may not have default values set in the element constructor. On
	     * these browsers native properties appear on instances and therefore their
	     * default value will overwrite any element default (e.g. if the element sets
	     * this.id = 'id' in the constructor, the 'id' will become '' since this is
	     * the native platform default).
	     */

	  }, {
	    key: "_saveInstanceProperties",
	    value: function _saveInstanceProperties() {
	      var _this2 = this;

	      // Use forEach so this works even if for/of loops are compiled to for loops
	      // expecting arrays
	      this.constructor._classProperties.forEach(function (_v, p) {
	        if (_this2.hasOwnProperty(p)) {
	          var value = _this2[p];
	          delete _this2[p];

	          if (!_this2._instanceProperties) {
	            _this2._instanceProperties = new Map();
	          }

	          _this2._instanceProperties.set(p, value);
	        }
	      });
	    }
	    /**
	     * Applies previously saved instance properties.
	     */

	  }, {
	    key: "_applyInstanceProperties",
	    value: function _applyInstanceProperties() {
	      var _this3 = this;

	      // Use forEach so this works even if for/of loops are compiled to for loops
	      // expecting arrays
	      // tslint:disable-next-line:no-any
	      this._instanceProperties.forEach(function (v, p) {
	        return _this3[p] = v;
	      });

	      this._instanceProperties = undefined;
	    }
	  }, {
	    key: "connectedCallback",
	    value: function connectedCallback() {
	      this._updateState = this._updateState | STATE_HAS_CONNECTED; // Ensure first connection completes an update. Updates cannot complete before
	      // connection and if one is pending connection the `_hasConnectionResolver`
	      // will exist. If so, resolve it to complete the update, otherwise
	      // requestUpdate.

	      if (this._hasConnectedResolver) {
	        this._hasConnectedResolver();

	        this._hasConnectedResolver = undefined;
	      }
	    }
	    /**
	     * Allows for `super.disconnectedCallback()` in extensions while
	     * reserving the possibility of making non-breaking feature additions
	     * when disconnecting at some point in the future.
	     */

	  }, {
	    key: "disconnectedCallback",
	    value: function disconnectedCallback() {}
	    /**
	     * Synchronizes property values when attributes change.
	     */

	  }, {
	    key: "attributeChangedCallback",
	    value: function attributeChangedCallback(name, old, value) {
	      if (old !== value) {
	        this._attributeToProperty(name, value);
	      }
	    }
	  }, {
	    key: "_propertyToAttribute",
	    value: function _propertyToAttribute(name, value) {
	      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : defaultPropertyDeclaration;
	      var ctor = this.constructor;

	      var attr = ctor._attributeNameForProperty(name, options);

	      if (attr !== undefined) {
	        var attrValue = ctor._propertyValueToAttribute(value, options); // an undefined value does not change the attribute.


	        if (attrValue === undefined) {
	          return;
	        } // Track if the property is being reflected to avoid
	        // setting the property again via `attributeChangedCallback`. Note:
	        // 1. this takes advantage of the fact that the callback is synchronous.
	        // 2. will behave incorrectly if multiple attributes are in the reaction
	        // stack at time of calling. However, since we process attributes
	        // in `update` this should not be possible (or an extreme corner case
	        // that we'd like to discover).
	        // mark state reflecting


	        this._updateState = this._updateState | STATE_IS_REFLECTING_TO_ATTRIBUTE;

	        if (attrValue == null) {
	          this.removeAttribute(attr);
	        } else {
	          this.setAttribute(attr, attrValue);
	        } // mark state not reflecting


	        this._updateState = this._updateState & ~STATE_IS_REFLECTING_TO_ATTRIBUTE;
	      }
	    }
	  }, {
	    key: "_attributeToProperty",
	    value: function _attributeToProperty(name, value) {
	      // Use tracking info to avoid deserializing attribute value if it was
	      // just set from a property setter.
	      if (this._updateState & STATE_IS_REFLECTING_TO_ATTRIBUTE) {
	        return;
	      }

	      var ctor = this.constructor;

	      var propName = ctor._attributeToPropertyMap.get(name);

	      if (propName !== undefined) {
	        var options = ctor._classProperties.get(propName) || defaultPropertyDeclaration; // mark state reflecting

	        this._updateState = this._updateState | STATE_IS_REFLECTING_TO_PROPERTY;
	        this[propName] = // tslint:disable-next-line:no-any
	        ctor._propertyValueFromAttribute(value, options); // mark state not reflecting

	        this._updateState = this._updateState & ~STATE_IS_REFLECTING_TO_PROPERTY;
	      }
	    }
	    /**
	     * This private version of `requestUpdate` does not access or return the
	     * `updateComplete` promise. This promise can be overridden and is therefore
	     * not free to access.
	     */

	  }, {
	    key: "_requestUpdate",
	    value: function _requestUpdate(name, oldValue) {
	      var shouldRequestUpdate = true; // If we have a property key, perform property update steps.

	      if (name !== undefined) {
	        var ctor = this.constructor;
	        var options = ctor._classProperties.get(name) || defaultPropertyDeclaration;

	        if (ctor._valueHasChanged(this[name], oldValue, options.hasChanged)) {
	          if (!this._changedProperties.has(name)) {
	            this._changedProperties.set(name, oldValue);
	          } // Add to reflecting properties set.
	          // Note, it's important that every change has a chance to add the
	          // property to `_reflectingProperties`. This ensures setting
	          // attribute + property reflects correctly.


	          if (options.reflect === true && !(this._updateState & STATE_IS_REFLECTING_TO_PROPERTY)) {
	            if (this._reflectingProperties === undefined) {
	              this._reflectingProperties = new Map();
	            }

	            this._reflectingProperties.set(name, options);
	          }
	        } else {
	          // Abort the request if the property should not be considered changed.
	          shouldRequestUpdate = false;
	        }
	      }

	      if (!this._hasRequestedUpdate && shouldRequestUpdate) {
	        this._enqueueUpdate();
	      }
	    }
	    /**
	     * Requests an update which is processed asynchronously. This should
	     * be called when an element should update based on some state not triggered
	     * by setting a property. In this case, pass no arguments. It should also be
	     * called when manually implementing a property setter. In this case, pass the
	     * property `name` and `oldValue` to ensure that any configured property
	     * options are honored. Returns the `updateComplete` Promise which is resolved
	     * when the update completes.
	     *
	     * @param name {PropertyKey} (optional) name of requesting property
	     * @param oldValue {any} (optional) old value of requesting property
	     * @returns {Promise} A Promise that is resolved when the update completes.
	     */

	  }, {
	    key: "requestUpdate",
	    value: function requestUpdate(name, oldValue) {
	      this._requestUpdate(name, oldValue);

	      return this.updateComplete;
	    }
	    /**
	     * Sets up the element to asynchronously update.
	     */

	  }, {
	    key: "_enqueueUpdate",
	    value: function () {
	      var _enqueueUpdate2 = _asyncToGenerator(
	      /*#__PURE__*/
	      regeneratorRuntime.mark(function _callee() {
	        var _this4 = this;

	        var resolve, reject, previousUpdatePromise, result;
	        return regeneratorRuntime.wrap(function _callee$(_context) {
	          while (1) {
	            switch (_context.prev = _context.next) {
	              case 0:
	                // Mark state updating...
	                this._updateState = this._updateState | STATE_UPDATE_REQUESTED;
	                previousUpdatePromise = this._updatePromise;
	                this._updatePromise = new Promise(function (res, rej) {
	                  resolve = res;
	                  reject = rej;
	                });
	                _context.prev = 3;
	                _context.next = 6;
	                return previousUpdatePromise;

	              case 6:
	                _context.next = 10;
	                break;

	              case 8:
	                _context.prev = 8;
	                _context.t0 = _context["catch"](3);

	              case 10:
	                if (this._hasConnected) {
	                  _context.next = 13;
	                  break;
	                }

	                _context.next = 13;
	                return new Promise(function (res) {
	                  return _this4._hasConnectedResolver = res;
	                });

	              case 13:
	                _context.prev = 13;
	                result = this.performUpdate(); // If `performUpdate` returns a Promise, we await it. This is done to
	                // enable coordinating updates with a scheduler. Note, the result is
	                // checked to avoid delaying an additional microtask unless we need to.

	                if (!(result != null)) {
	                  _context.next = 18;
	                  break;
	                }

	                _context.next = 18;
	                return result;

	              case 18:
	                _context.next = 23;
	                break;

	              case 20:
	                _context.prev = 20;
	                _context.t1 = _context["catch"](13);
	                reject(_context.t1);

	              case 23:
	                resolve(!this._hasRequestedUpdate);

	              case 24:
	              case "end":
	                return _context.stop();
	            }
	          }
	        }, _callee, this, [[3, 8], [13, 20]]);
	      }));

	      function _enqueueUpdate() {
	        return _enqueueUpdate2.apply(this, arguments);
	      }

	      return _enqueueUpdate;
	    }()
	  }, {
	    key: "performUpdate",

	    /**
	     * Performs an element update. Note, if an exception is thrown during the
	     * update, `firstUpdated` and `updated` will not be called.
	     *
	     * You can override this method to change the timing of updates. If this
	     * method is overridden, `super.performUpdate()` must be called.
	     *
	     * For instance, to schedule updates to occur just before the next frame:
	     *
	     * ```
	     * protected async performUpdate(): Promise<unknown> {
	     *   await new Promise((resolve) => requestAnimationFrame(() => resolve()));
	     *   super.performUpdate();
	     * }
	     * ```
	     */
	    value: function performUpdate() {
	      // Mixin instance properties once, if they exist.
	      if (this._instanceProperties) {
	        this._applyInstanceProperties();
	      }

	      var shouldUpdate = false;
	      var changedProperties = this._changedProperties;

	      try {
	        shouldUpdate = this.shouldUpdate(changedProperties);

	        if (shouldUpdate) {
	          this.update(changedProperties);
	        }
	      } catch (e) {
	        // Prevent `firstUpdated` and `updated` from running when there's an
	        // update exception.
	        shouldUpdate = false;
	        throw e;
	      } finally {
	        // Ensure element can accept additional updates after an exception.
	        this._markUpdated();
	      }

	      if (shouldUpdate) {
	        if (!(this._updateState & STATE_HAS_UPDATED)) {
	          this._updateState = this._updateState | STATE_HAS_UPDATED;
	          this.firstUpdated(changedProperties);
	        }

	        this.updated(changedProperties);
	      }
	    }
	  }, {
	    key: "_markUpdated",
	    value: function _markUpdated() {
	      this._changedProperties = new Map();
	      this._updateState = this._updateState & ~STATE_UPDATE_REQUESTED;
	    }
	    /**
	     * Returns a Promise that resolves when the element has completed updating.
	     * The Promise value is a boolean that is `true` if the element completed the
	     * update without triggering another update. The Promise result is `false` if
	     * a property was set inside `updated()`. If the Promise is rejected, an
	     * exception was thrown during the update. This getter can be implemented to
	     * await additional state. For example, it is sometimes useful to await a
	     * rendered element before fulfilling this Promise. To do this, first await
	     * `super.updateComplete` then any subsequent state.
	     *
	     * @returns {Promise} The Promise returns a boolean that indicates if the
	     * update resolved without triggering another update.
	     */

	  }, {
	    key: "shouldUpdate",

	    /**
	     * Controls whether or not `update` should be called when the element requests
	     * an update. By default, this method always returns `true`, but this can be
	     * customized to control when to update.
	     *
	     * * @param _changedProperties Map of changed properties with old values
	     */
	    value: function shouldUpdate(_changedProperties) {
	      return true;
	    }
	    /**
	     * Updates the element. This method reflects property values to attributes.
	     * It can be overridden to render and keep updated element DOM.
	     * Setting properties inside this method will *not* trigger
	     * another update.
	     *
	     * * @param _changedProperties Map of changed properties with old values
	     */

	  }, {
	    key: "update",
	    value: function update(_changedProperties) {
	      var _this5 = this;

	      if (this._reflectingProperties !== undefined && this._reflectingProperties.size > 0) {
	        // Use forEach so this works even if for/of loops are compiled to for
	        // loops expecting arrays
	        this._reflectingProperties.forEach(function (v, k) {
	          return _this5._propertyToAttribute(k, _this5[k], v);
	        });

	        this._reflectingProperties = undefined;
	      }
	    }
	    /**
	     * Invoked whenever the element is updated. Implement to perform
	     * post-updating tasks via DOM APIs, for example, focusing an element.
	     *
	     * Setting properties inside this method will trigger the element to update
	     * again after this update cycle completes.
	     *
	     * * @param _changedProperties Map of changed properties with old values
	     */

	  }, {
	    key: "updated",
	    value: function updated(_changedProperties) {}
	    /**
	     * Invoked when the element is first updated. Implement to perform one time
	     * work on the element after update.
	     *
	     * Setting properties inside this method will trigger the element to update
	     * again after this update cycle completes.
	     *
	     * * @param _changedProperties Map of changed properties with old values
	     */

	  }, {
	    key: "firstUpdated",
	    value: function firstUpdated(_changedProperties) {}
	  }, {
	    key: "_hasConnected",
	    get: function get() {
	      return this._updateState & STATE_HAS_CONNECTED;
	    }
	  }, {
	    key: "_hasRequestedUpdate",
	    get: function get() {
	      return this._updateState & STATE_UPDATE_REQUESTED;
	    }
	  }, {
	    key: "hasUpdated",
	    get: function get() {
	      return this._updateState & STATE_HAS_UPDATED;
	    }
	  }, {
	    key: "updateComplete",
	    get: function get() {
	      return this._updatePromise;
	    }
	  }], [{
	    key: "_ensureClassProperties",

	    /**
	     * Ensures the private `_classProperties` property metadata is created.
	     * In addition to `finalize` this is also called in `createProperty` to
	     * ensure the `@property` decorator can add property metadata.
	     */

	    /** @nocollapse */
	    value: function _ensureClassProperties() {
	      var _this6 = this;

	      // ensure private storage for property declarations.
	      if (!this.hasOwnProperty(JSCompiler_renameProperty('_classProperties', this))) {
	        this._classProperties = new Map(); // NOTE: Workaround IE11 not supporting Map constructor argument.

	        var superProperties = Object.getPrototypeOf(this)._classProperties;

	        if (superProperties !== undefined) {
	          superProperties.forEach(function (v, k) {
	            return _this6._classProperties.set(k, v);
	          });
	        }
	      }
	    }
	    /**
	     * Creates a property accessor on the element prototype if one does not exist.
	     * The property setter calls the property's `hasChanged` property option
	     * or uses a strict identity check to determine whether or not to request
	     * an update.
	     * @nocollapse
	     */

	  }, {
	    key: "createProperty",
	    value: function createProperty(name) {
	      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultPropertyDeclaration;

	      // Note, since this can be called by the `@property` decorator which
	      // is called before `finalize`, we ensure storage exists for property
	      // metadata.
	      this._ensureClassProperties();

	      this._classProperties.set(name, options); // Do not generate an accessor if the prototype already has one, since
	      // it would be lost otherwise and that would never be the user's intention;
	      // Instead, we expect users to call `requestUpdate` themselves from
	      // user-defined accessors. Note that if the super has an accessor we will
	      // still overwrite it


	      if (options.noAccessor || this.prototype.hasOwnProperty(name)) {
	        return;
	      }

	      var key = _typeof$1(name) === 'symbol' ? Symbol() : "__".concat(name);
	      Object.defineProperty(this.prototype, name, {
	        // tslint:disable-next-line:no-any no symbol in index
	        get: function get() {
	          return this[key];
	        },
	        set: function set(value) {
	          // tslint:disable-next-line:no-any no symbol in index
	          var oldValue = this[name]; // tslint:disable-next-line:no-any no symbol in index

	          this[key] = value;

	          this._requestUpdate(name, oldValue);
	        },
	        configurable: true,
	        enumerable: true
	      });
	    }
	    /**
	     * Creates property accessors for registered properties and ensures
	     * any superclasses are also finalized.
	     * @nocollapse
	     */

	  }, {
	    key: "finalize",
	    value: function finalize() {
	      if (this.hasOwnProperty(JSCompiler_renameProperty('finalized', this)) && this.finalized) {
	        return;
	      } // finalize any superclasses


	      var superCtor = Object.getPrototypeOf(this);

	      if (typeof superCtor.finalize === 'function') {
	        superCtor.finalize();
	      }

	      this.finalized = true;

	      this._ensureClassProperties(); // initialize Map populated in observedAttributes


	      this._attributeToPropertyMap = new Map(); // make any properties
	      // Note, only process "own" properties since this element will inherit
	      // any properties defined on the superClass, and finalization ensures
	      // the entire prototype chain is finalized.

	      if (this.hasOwnProperty(JSCompiler_renameProperty('properties', this))) {
	        var props = this.properties; // support symbols in properties (IE11 does not support this)

	        var propKeys = [].concat(_toConsumableArray$2(Object.getOwnPropertyNames(props)), _toConsumableArray$2(typeof Object.getOwnPropertySymbols === 'function' ? Object.getOwnPropertySymbols(props) : [])); // This for/of is ok because propKeys is an array

	        var _iteratorNormalCompletion = true;
	        var _didIteratorError = false;
	        var _iteratorError = undefined;

	        try {
	          for (var _iterator = propKeys[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	            var p = _step.value;
	            // note, use of `any` is due to TypeSript lack of support for symbol in
	            // index types
	            // tslint:disable-next-line:no-any no symbol in index
	            this.createProperty(p, props[p]);
	          }
	        } catch (err) {
	          _didIteratorError = true;
	          _iteratorError = err;
	        } finally {
	          try {
	            if (!_iteratorNormalCompletion && _iterator["return"] != null) {
	              _iterator["return"]();
	            }
	          } finally {
	            if (_didIteratorError) {
	              throw _iteratorError;
	            }
	          }
	        }
	      }
	    }
	    /**
	     * Returns the property name for the given attribute `name`.
	     * @nocollapse
	     */

	  }, {
	    key: "_attributeNameForProperty",
	    value: function _attributeNameForProperty(name, options) {
	      var attribute = options.attribute;
	      return attribute === false ? undefined : typeof attribute === 'string' ? attribute : typeof name === 'string' ? name.toLowerCase() : undefined;
	    }
	    /**
	     * Returns true if a property should request an update.
	     * Called when a property value is set and uses the `hasChanged`
	     * option for the property if present or a strict identity check.
	     * @nocollapse
	     */

	  }, {
	    key: "_valueHasChanged",
	    value: function _valueHasChanged(value, old) {
	      var hasChanged = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : notEqual;
	      return hasChanged(value, old);
	    }
	    /**
	     * Returns the property value for the given attribute value.
	     * Called via the `attributeChangedCallback` and uses the property's
	     * `converter` or `converter.fromAttribute` property option.
	     * @nocollapse
	     */

	  }, {
	    key: "_propertyValueFromAttribute",
	    value: function _propertyValueFromAttribute(value, options) {
	      var type = options.type;
	      var converter = options.converter || defaultConverter;
	      var fromAttribute = typeof converter === 'function' ? converter : converter.fromAttribute;
	      return fromAttribute ? fromAttribute(value, type) : value;
	    }
	    /**
	     * Returns the attribute value for the given property value. If this
	     * returns undefined, the property will *not* be reflected to an attribute.
	     * If this returns null, the attribute will be removed, otherwise the
	     * attribute will be set to the value.
	     * This uses the property's `reflect` and `type.toAttribute` property options.
	     * @nocollapse
	     */

	  }, {
	    key: "_propertyValueToAttribute",
	    value: function _propertyValueToAttribute(value, options) {
	      if (options.reflect === undefined) {
	        return;
	      }

	      var type = options.type;
	      var converter = options.converter;
	      var toAttribute = converter && converter.toAttribute || defaultConverter.toAttribute;
	      return toAttribute(value, type);
	    }
	  }, {
	    key: "observedAttributes",
	    get: function get() {
	      var _this7 = this;

	      // note: piggy backing on this to ensure we're finalized.
	      this.finalize();
	      var attributes = []; // Use forEach so this works even if for/of loops are compiled to for loops
	      // expecting arrays

	      this._classProperties.forEach(function (v, p) {
	        var attr = _this7._attributeNameForProperty(p, v);

	        if (attr !== undefined) {
	          _this7._attributeToPropertyMap.set(attr, p);

	          attributes.push(attr);
	        }
	      });

	      return attributes;
	    }
	  }]);

	  return UpdatingElement;
	}(_wrapNativeSuper(HTMLElement));
	/**
	 * Marks class as having finished creating properties.
	 */

	UpdatingElement.finalized = true;

	/**
	 * @license
	 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
	 * This code may only be used under the BSD style license found at
	 * http://polymer.github.io/LICENSE.txt
	 * The complete set of authors may be found at
	 * http://polymer.github.io/AUTHORS.txt
	 * The complete set of contributors may be found at
	 * http://polymer.github.io/CONTRIBUTORS.txt
	 * Code distributed by Google as part of the polymer project is also
	 * subject to an additional IP rights grant found at
	 * http://polymer.github.io/PATENTS.txt
	 */
	var legacyCustomElement = function legacyCustomElement(tagName, clazz) {
	  window.customElements.define(tagName, clazz); // Cast as any because TS doesn't recognize the return type as being a
	  // subtype of the decorated class when clazz is typed as
	  // `Constructor<HTMLElement>` for some reason.
	  // `Constructor<HTMLElement>` is helpful to make sure the decorator is
	  // applied to elements however.
	  // tslint:disable-next-line:no-any

	  return clazz;
	};

	var standardCustomElement = function standardCustomElement(tagName, descriptor) {
	  var kind = descriptor.kind,
	      elements = descriptor.elements;
	  return {
	    kind: kind,
	    elements: elements,
	    // This callback is called once the class is otherwise fully defined
	    finisher: function finisher(clazz) {
	      window.customElements.define(tagName, clazz);
	    }
	  };
	};
	/**
	 * Class decorator factory that defines the decorated class as a custom element.
	 *
	 * @param tagName the name of the custom element to define
	 */


	var customElement = function customElement(tagName) {
	  return function (classOrDescriptor) {
	    return typeof classOrDescriptor === 'function' ? legacyCustomElement(tagName, classOrDescriptor) : standardCustomElement(tagName, classOrDescriptor);
	  };
	};

	function _classCallCheck$a(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _defineProperties$9(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

	function _createClass$9(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties$9(Constructor.prototype, protoProps); if (staticProps) _defineProperties$9(Constructor, staticProps); return Constructor; }

	/**
	@license
	Copyright (c) 2019 The Polymer Project Authors. All rights reserved.
	This code may only be used under the BSD style license found at
	http://polymer.github.io/LICENSE.txt The complete set of authors may be found at
	http://polymer.github.io/AUTHORS.txt The complete set of contributors may be
	found at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as
	part of the polymer project is also subject to an additional IP rights grant
	found at http://polymer.github.io/PATENTS.txt
	*/
	var supportsAdoptingStyleSheets = 'adoptedStyleSheets' in Document.prototype && 'replace' in CSSStyleSheet.prototype;
	var constructionToken = Symbol();
	var CSSResult =
	/*#__PURE__*/
	function () {
	  function CSSResult(cssText, safeToken) {
	    _classCallCheck$a(this, CSSResult);

	    if (safeToken !== constructionToken) {
	      throw new Error('CSSResult is not constructable. Use `unsafeCSS` or `css` instead.');
	    }

	    this.cssText = cssText;
	  } // Note, this is a getter so that it's lazy. In practice, this means
	  // stylesheets are not created until the first element instance is made.


	  _createClass$9(CSSResult, [{
	    key: "toString",
	    value: function toString() {
	      return this.cssText;
	    }
	  }, {
	    key: "styleSheet",
	    get: function get() {
	      if (this._styleSheet === undefined) {
	        // Note, if `adoptedStyleSheets` is supported then we assume CSSStyleSheet
	        // is constructable.
	        if (supportsAdoptingStyleSheets) {
	          this._styleSheet = new CSSStyleSheet();

	          this._styleSheet.replaceSync(this.cssText);
	        } else {
	          this._styleSheet = null;
	        }
	      }

	      return this._styleSheet;
	    }
	  }]);

	  return CSSResult;
	}();

	var textFromCSSResult = function textFromCSSResult(value) {
	  if (value instanceof CSSResult) {
	    return value.cssText;
	  } else {
	    throw new Error("Value passed to 'css' function must be a 'css' function result: ".concat(value, ". Use 'unsafeCSS' to pass non-literal values, but\n            take care to ensure page security."));
	  }
	};
	/**
	 * Template tag which which can be used with LitElement's `style` property to
	 * set element styles. For security reasons, only literal string values may be
	 * used. To incorporate non-literal values `unsafeCSS` may be used inside a
	 * template string part.
	 */


	var css = function css(strings) {
	  for (var _len = arguments.length, values = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	    values[_key - 1] = arguments[_key];
	  }

	  var cssText = values.reduce(function (acc, v, idx) {
	    return acc + textFromCSSResult(v) + strings[idx + 1];
	  }, strings[0]);
	  return new CSSResult(cssText, constructionToken);
	};

	function _typeof$2(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof$2 = function _typeof(obj) { return typeof obj; }; } else { _typeof$2 = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof$2(obj); }

	function _classCallCheck$b(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _defineProperties$a(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

	function _createClass$a(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties$a(Constructor.prototype, protoProps); if (staticProps) _defineProperties$a(Constructor, staticProps); return Constructor; }

	function _possibleConstructorReturn$2(self, call) { if (call && (_typeof$2(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized$2(self); }

	function _assertThisInitialized$2(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

	function _get$1(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get$1 = Reflect.get; } else { _get$1 = function _get(target, property, receiver) { var base = _superPropBase$1(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get$1(target, property, receiver || target); }

	function _superPropBase$1(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf$2(object); if (object === null) break; } return object; }

	function _getPrototypeOf$2(o) { _getPrototypeOf$2 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf$2(o); }

	function _inherits$2(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf$2(subClass, superClass); }

	function _setPrototypeOf$2(o, p) { _setPrototypeOf$2 = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf$2(o, p); }
	// This line will be used in regexes to search for LitElement usage.
	// TODO(justinfagnani): inject version number at build time

	(window['litElementVersions'] || (window['litElementVersions'] = [])).push('2.0.1');
	/**
	 * Minimal implementation of Array.prototype.flat
	 * @param arr the array to flatten
	 * @param result the accumlated result
	 */

	function arrayFlat(styles) {
	  var result = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

	  for (var i = 0, length = styles.length; i < length; i++) {
	    var value = styles[i];

	    if (Array.isArray(value)) {
	      arrayFlat(value, result);
	    } else {
	      result.push(value);
	    }
	  }

	  return result;
	}
	/** Deeply flattens styles array. Uses native flat if available. */


	var flattenStyles = function flattenStyles(styles) {
	  return styles.flat ? styles.flat(Infinity) : arrayFlat(styles);
	};

	var LitElement =
	/*#__PURE__*/
	function (_UpdatingElement) {
	  _inherits$2(LitElement, _UpdatingElement);

	  function LitElement() {
	    _classCallCheck$b(this, LitElement);

	    return _possibleConstructorReturn$2(this, _getPrototypeOf$2(LitElement).apply(this, arguments));
	  }

	  _createClass$a(LitElement, [{
	    key: "initialize",

	    /**
	     * Performs element initialization. By default this calls `createRenderRoot`
	     * to create the element `renderRoot` node and captures any pre-set values for
	     * registered properties.
	     */
	    value: function initialize() {
	      _get$1(_getPrototypeOf$2(LitElement.prototype), "initialize", this).call(this);

	      this.renderRoot = this.createRenderRoot(); // Note, if renderRoot is not a shadowRoot, styles would/could apply to the
	      // element's getRootNode(). While this could be done, we're choosing not to
	      // support this now since it would require different logic around de-duping.

	      if (window.ShadowRoot && this.renderRoot instanceof window.ShadowRoot) {
	        this.adoptStyles();
	      }
	    }
	    /**
	     * Returns the node into which the element should render and by default
	     * creates and returns an open shadowRoot. Implement to customize where the
	     * element's DOM is rendered. For example, to render into the element's
	     * childNodes, return `this`.
	     * @returns {Element|DocumentFragment} Returns a node into which to render.
	     */

	  }, {
	    key: "createRenderRoot",
	    value: function createRenderRoot() {
	      return this.attachShadow({
	        mode: 'open'
	      });
	    }
	    /**
	     * Applies styling to the element shadowRoot using the `static get styles`
	     * property. Styling will apply using `shadowRoot.adoptedStyleSheets` where
	     * available and will fallback otherwise. When Shadow DOM is polyfilled,
	     * ShadyCSS scopes styles and adds them to the document. When Shadow DOM
	     * is available but `adoptedStyleSheets` is not, styles are appended to the
	     * end of the `shadowRoot` to [mimic spec
	     * behavior](https://wicg.github.io/construct-stylesheets/#using-constructed-stylesheets).
	     */

	  }, {
	    key: "adoptStyles",
	    value: function adoptStyles() {
	      var styles = this.constructor._styles;

	      if (styles.length === 0) {
	        return;
	      } // There are three separate cases here based on Shadow DOM support.
	      // (1) shadowRoot polyfilled: use ShadyCSS
	      // (2) shadowRoot.adoptedStyleSheets available: use it.
	      // (3) shadowRoot.adoptedStyleSheets polyfilled: append styles after
	      // rendering


	      if (window.ShadyCSS !== undefined && !window.ShadyCSS.nativeShadow) {
	        window.ShadyCSS.ScopingShim.prepareAdoptedCssText(styles.map(function (s) {
	          return s.cssText;
	        }), this.localName);
	      } else if (supportsAdoptingStyleSheets) {
	        this.renderRoot.adoptedStyleSheets = styles.map(function (s) {
	          return s.styleSheet;
	        });
	      } else {
	        // This must be done after rendering so the actual style insertion is done
	        // in `update`.
	        this._needsShimAdoptedStyleSheets = true;
	      }
	    }
	  }, {
	    key: "connectedCallback",
	    value: function connectedCallback() {
	      _get$1(_getPrototypeOf$2(LitElement.prototype), "connectedCallback", this).call(this); // Note, first update/render handles styleElement so we only call this if
	      // connected after first update.


	      if (this.hasUpdated && window.ShadyCSS !== undefined) {
	        window.ShadyCSS.styleElement(this);
	      }
	    }
	    /**
	     * Updates the element. This method reflects property values to attributes
	     * and calls `render` to render DOM via lit-html. Setting properties inside
	     * this method will *not* trigger another update.
	     * * @param _changedProperties Map of changed properties with old values
	     */

	  }, {
	    key: "update",
	    value: function update(changedProperties) {
	      var _this = this;

	      _get$1(_getPrototypeOf$2(LitElement.prototype), "update", this).call(this, changedProperties);

	      var templateResult = this.render();

	      if (templateResult instanceof TemplateResult) {
	        this.constructor.render(templateResult, this.renderRoot, {
	          scopeName: this.localName,
	          eventContext: this
	        });
	      } // When native Shadow DOM is used but adoptedStyles are not supported,
	      // insert styling after rendering to ensure adoptedStyles have highest
	      // priority.


	      if (this._needsShimAdoptedStyleSheets) {
	        this._needsShimAdoptedStyleSheets = false;

	        this.constructor._styles.forEach(function (s) {
	          var style = document.createElement('style');
	          style.textContent = s.cssText;

	          _this.renderRoot.appendChild(style);
	        });
	      }
	    }
	    /**
	     * Invoked on each update to perform rendering tasks. This method must return
	     * a lit-html TemplateResult. Setting properties inside this method will *not*
	     * trigger the element to update.
	     */

	  }, {
	    key: "render",
	    value: function render() {}
	  }], [{
	    key: "finalize",

	    /** @nocollapse */
	    value: function finalize() {
	      _get$1(_getPrototypeOf$2(LitElement), "finalize", this).call(this); // Prepare styling that is stamped at first render time. Styling
	      // is built from user provided `styles` or is inherited from the superclass.


	      this._styles = this.hasOwnProperty(JSCompiler_renameProperty('styles', this)) ? this._getUniqueStyles() : this._styles || [];
	    }
	    /** @nocollapse */

	  }, {
	    key: "_getUniqueStyles",
	    value: function _getUniqueStyles() {
	      // Take care not to call `this.styles` multiple times since this generates
	      // new CSSResults each time.
	      // TODO(sorvell): Since we do not cache CSSResults by input, any
	      // shared styles will generate new stylesheet objects, which is wasteful.
	      // This should be addressed when a browser ships constructable
	      // stylesheets.
	      var userStyles = this.styles;
	      var styles = [];

	      if (Array.isArray(userStyles)) {
	        var flatStyles = flattenStyles(userStyles); // As a performance optimization to avoid duplicated styling that can
	        // occur especially when composing via subclassing, de-duplicate styles
	        // preserving the last item in the list. The last item is kept to
	        // try to preserve cascade order with the assumption that it's most
	        // important that last added styles override previous styles.

	        var styleSet = flatStyles.reduceRight(function (set, s) {
	          set.add(s); // on IE set.add does not return the set.

	          return set;
	        }, new Set()); // Array.from does not work on Set in IE

	        styleSet.forEach(function (v) {
	          return styles.unshift(v);
	        });
	      } else if (userStyles) {
	        styles.push(userStyles);
	      }

	      return styles;
	    }
	  }]);

	  return LitElement;
	}(UpdatingElement);
	/**
	 * Ensure this class is marked as `finalized` as an optimization ensuring
	 * it will not needlessly try to `finalize`.
	 */

	LitElement.finalized = true;
	/**
	 * Render method used to render the lit-html TemplateResult to the element's
	 * DOM.
	 * @param {TemplateResult} Template to render.
	 * @param {Element|DocumentFragment} Node into which to render.
	 * @param {String} Element name.
	 * @nocollapse
	 */

	LitElement.render = render$1;

	function _templateObject() {
	  var data = _taggedTemplateLiteral([":host{font-family:var(--mdc-icon-font, \"Material Icons\");font-weight:normal;font-style:normal;font-size:var(--mdc-icon-size, 24px);line-height:1;letter-spacing:normal;text-transform:none;display:inline-block;white-space:nowrap;word-wrap:normal;direction:ltr;-webkit-font-feature-settings:\"liga\";-webkit-font-smoothing:antialiased}"]);

	  _templateObject = function _templateObject() {
	    return data;
	  };

	  return data;
	}

	function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }
	var style = css(_templateObject());

	/**
	@license
	Copyright 2018 Google Inc. All Rights Reserved.

	Licensed under the Apache License, Version 2.0 (the "License");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at

	    http://www.apache.org/licenses/LICENSE-2.0

	Unless required by applicable law or agreed to in writing, software
	distributed under the License is distributed on an "AS IS" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and
	limitations under the License.
	*/
	// load material icons font

	var fontEl = document.createElement('link');
	fontEl.rel = 'stylesheet';
	fontEl.href = 'https://fonts.googleapis.com/icon?family=Material+Icons';
	document.head.appendChild(fontEl);

	function _templateObject$1() {
	  var data = _taggedTemplateLiteral$1(["<slot></slot>"]);

	  _templateObject$1 = function _templateObject() {
	    return data;
	  };

	  return data;
	}

	function _taggedTemplateLiteral$1(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

	function _classCallCheck$c(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _defineProperties$b(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

	function _createClass$b(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties$b(Constructor.prototype, protoProps); if (staticProps) _defineProperties$b(Constructor, staticProps); return Constructor; }

	function _possibleConstructorReturn$3(self, call) { if (call && (_typeof$3(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized$3(self); }

	function _assertThisInitialized$3(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

	function _getPrototypeOf$3(o) { _getPrototypeOf$3 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf$3(o); }

	function _inherits$3(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf$3(subClass, superClass); }

	function _setPrototypeOf$3(o, p) { _setPrototypeOf$3 = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf$3(o, p); }

	function _typeof$3(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof$3 = function _typeof(obj) { return typeof obj; }; } else { _typeof$3 = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof$3(obj); }

	var __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
	  var c = arguments.length,
	      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
	      d;
	  if ((typeof Reflect === "undefined" ? "undefined" : _typeof$3(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
	    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	  }
	  return c > 3 && r && Object.defineProperty(target, key, r), r;
	};

	var Icon =
	/*#__PURE__*/
	function (_LitElement) {
	  _inherits$3(Icon, _LitElement);

	  function Icon() {
	    _classCallCheck$c(this, Icon);

	    return _possibleConstructorReturn$3(this, _getPrototypeOf$3(Icon).apply(this, arguments));
	  }

	  _createClass$b(Icon, [{
	    key: "render",
	    value: function render() {
	      return html$1(_templateObject$1());
	    }
	  }]);

	  return Icon;
	}(LitElement);

	Icon.styles = style;
	Icon = __decorate([customElement('mwc-icon')], Icon);

	function _templateObject51() {
	  var data = _taggedTemplateLiteral$2(["#9875b7"]);

	  _templateObject51 = function _templateObject51() {
	    return data;
	  };

	  return data;
	}

	function _templateObject50() {
	  var data = _taggedTemplateLiteral$2(["#666"]);

	  _templateObject50 = function _templateObject50() {
	    return data;
	  };

	  return data;
	}

	function _templateObject49() {
	  var data = _taggedTemplateLiteral$2(["#B08D00"]);

	  _templateObject49 = function _templateObject49() {
	    return data;
	  };

	  return data;
	}

	function _templateObject48() {
	  var data = _taggedTemplateLiteral$2(["#666"]);

	  _templateObject48 = function _templateObject48() {
	    return data;
	  };

	  return data;
	}

	function _templateObject47() {
	  var data = _taggedTemplateLiteral$2(["#4B7900"]);

	  _templateObject47 = function _templateObject47() {
	    return data;
	  };

	  return data;
	}

	function _templateObject46() {
	  var data = _taggedTemplateLiteral$2(["#666"]);

	  _templateObject46 = function _templateObject46() {
	    return data;
	  };

	  return data;
	}

	function _templateObject45() {
	  var data = _taggedTemplateLiteral$2(["#065A85"]);

	  _templateObject45 = function _templateObject45() {
	    return data;
	  };

	  return data;
	}

	function _templateObject44() {
	  var data = _taggedTemplateLiteral$2(["#666"]);

	  _templateObject44 = function _templateObject44() {
	    return data;
	  };

	  return data;
	}

	function _templateObject43() {
	  var data = _taggedTemplateLiteral$2(["#fcfcfc"]);

	  _templateObject43 = function _templateObject43() {
	    return data;
	  };

	  return data;
	}

	function _templateObject42() {
	  var data = _taggedTemplateLiteral$2(["#fcfcfc"]);

	  _templateObject42 = function _templateObject42() {
	    return data;
	  };

	  return data;
	}

	function _templateObject41() {
	  var data = _taggedTemplateLiteral$2(["#000"]);

	  _templateObject41 = function _templateObject41() {
	    return data;
	  };

	  return data;
	}

	function _templateObject40() {
	  var data = _taggedTemplateLiteral$2(["#333"]);

	  _templateObject40 = function _templateObject40() {
	    return data;
	  };

	  return data;
	}

	function _templateObject39() {
	  var data = _taggedTemplateLiteral$2(["#fff"]);

	  _templateObject39 = function _templateObject39() {
	    return data;
	  };

	  return data;
	}

	function _templateObject38() {
	  var data = _taggedTemplateLiteral$2(["#333"]);

	  _templateObject38 = function _templateObject38() {
	    return data;
	  };

	  return data;
	}

	function _templateObject37() {
	  var data = _taggedTemplateLiteral$2(["#fff"]);

	  _templateObject37 = function _templateObject37() {
	    return data;
	  };

	  return data;
	}

	function _templateObject36() {
	  var data = _taggedTemplateLiteral$2(["#cc3b3b"]);

	  _templateObject36 = function _templateObject36() {
	    return data;
	  };

	  return data;
	}

	function _templateObject35() {
	  var data = _taggedTemplateLiteral$2(["rgba(255, 255, 255, 0.5)"]);

	  _templateObject35 = function _templateObject35() {
	    return data;
	  };

	  return data;
	}

	function _templateObject34() {
	  var data = _taggedTemplateLiteral$2(["#fff"]);

	  _templateObject34 = function _templateObject34() {
	    return data;
	  };

	  return data;
	}

	function _templateObject33() {
	  var data = _taggedTemplateLiteral$2(["#0099e6"]);

	  _templateObject33 = function _templateObject33() {
	    return data;
	  };

	  return data;
	}

	function _templateObject32() {
	  var data = _taggedTemplateLiteral$2(["#333"]);

	  _templateObject32 = function _templateObject32() {
	    return data;
	  };

	  return data;
	}

	function _templateObject31() {
	  var data = _taggedTemplateLiteral$2(["#99ddff"]);

	  _templateObject31 = function _templateObject31() {
	    return data;
	  };

	  return data;
	}

	function _templateObject30() {
	  var data = _taggedTemplateLiteral$2(["#fff"]);

	  _templateObject30 = function _templateObject30() {
	    return data;
	  };

	  return data;
	}

	function _templateObject29() {
	  var data = _taggedTemplateLiteral$2(["#1a1a1a"]);

	  _templateObject29 = function _templateObject29() {
	    return data;
	  };

	  return data;
	}

	function _templateObject28() {
	  var data = _taggedTemplateLiteral$2(["#fff"]);

	  _templateObject28 = function _templateObject28() {
	    return data;
	  };

	  return data;
	}

	function _templateObject27() {
	  var data = _taggedTemplateLiteral$2(["#333"]);

	  _templateObject27 = function _templateObject27() {
	    return data;
	  };

	  return data;
	}

	function _templateObject26() {
	  var data = _taggedTemplateLiteral$2(["#9875b7"]);

	  _templateObject26 = function _templateObject26() {
	    return data;
	  };

	  return data;
	}

	function _templateObject25() {
	  var data = _taggedTemplateLiteral$2(["#d3b3ef"]);

	  _templateObject25 = function _templateObject25() {
	    return data;
	  };

	  return data;
	}

	function _templateObject24() {
	  var data = _taggedTemplateLiteral$2(["#B08D00"]);

	  _templateObject24 = function _templateObject24() {
	    return data;
	  };

	  return data;
	}

	function _templateObject23() {
	  var data = _taggedTemplateLiteral$2(["#F9F3A6"]);

	  _templateObject23 = function _templateObject23() {
	    return data;
	  };

	  return data;
	}

	function _templateObject22() {
	  var data = _taggedTemplateLiteral$2(["#4B7900"]);

	  _templateObject22 = function _templateObject22() {
	    return data;
	  };

	  return data;
	}

	function _templateObject21() {
	  var data = _taggedTemplateLiteral$2(["#C7DAAD"]);

	  _templateObject21 = function _templateObject21() {
	    return data;
	  };

	  return data;
	}

	function _templateObject20() {
	  var data = _taggedTemplateLiteral$2(["#065A85"]);

	  _templateObject20 = function _templateObject20() {
	    return data;
	  };

	  return data;
	}

	function _templateObject19() {
	  var data = _taggedTemplateLiteral$2(["#AACDE1"]);

	  _templateObject19 = function _templateObject19() {
	    return data;
	  };

	  return data;
	}

	function _templateObject18() {
	  var data = _taggedTemplateLiteral$2(["#fcfcfc"]);

	  _templateObject18 = function _templateObject18() {
	    return data;
	  };

	  return data;
	}

	function _templateObject17() {
	  var data = _taggedTemplateLiteral$2(["#000"]);

	  _templateObject17 = function _templateObject17() {
	    return data;
	  };

	  return data;
	}

	function _templateObject16() {
	  var data = _taggedTemplateLiteral$2(["#000"]);

	  _templateObject16 = function _templateObject16() {
	    return data;
	  };

	  return data;
	}

	function _templateObject15() {
	  var data = _taggedTemplateLiteral$2(["#000"]);

	  _templateObject15 = function _templateObject15() {
	    return data;
	  };

	  return data;
	}

	function _templateObject14() {
	  var data = _taggedTemplateLiteral$2(["#fcfcfc"]);

	  _templateObject14 = function _templateObject14() {
	    return data;
	  };

	  return data;
	}

	function _templateObject13() {
	  var data = _taggedTemplateLiteral$2(["#000"]);

	  _templateObject13 = function _templateObject13() {
	    return data;
	  };

	  return data;
	}

	function _templateObject12() {
	  var data = _taggedTemplateLiteral$2(["#fafafa"]);

	  _templateObject12 = function _templateObject12() {
	    return data;
	  };

	  return data;
	}

	function _templateObject11() {
	  var data = _taggedTemplateLiteral$2(["#fff"]);

	  _templateObject11 = function _templateObject11() {
	    return data;
	  };

	  return data;
	}

	function _templateObject10() {
	  var data = _taggedTemplateLiteral$2(["#cc3b3b"]);

	  _templateObject10 = function _templateObject10() {
	    return data;
	  };

	  return data;
	}

	function _templateObject9() {
	  var data = _taggedTemplateLiteral$2(["rgba(0,0,0,0.2)"]);

	  _templateObject9 = function _templateObject9() {
	    return data;
	  };

	  return data;
	}

	function _templateObject8() {
	  var data = _taggedTemplateLiteral$2(["#fff"]);

	  _templateObject8 = function _templateObject8() {
	    return data;
	  };

	  return data;
	}

	function _templateObject7() {
	  var data = _taggedTemplateLiteral$2(["#2c6187"]);

	  _templateObject7 = function _templateObject7() {
	    return data;
	  };

	  return data;
	}

	function _templateObject6() {
	  var data = _taggedTemplateLiteral$2(["#fff"]);

	  _templateObject6 = function _templateObject6() {
	    return data;
	  };

	  return data;
	}

	function _templateObject5() {
	  var data = _taggedTemplateLiteral$2(["rgb(81,149,199)"]);

	  _templateObject5 = function _templateObject5() {
	    return data;
	  };

	  return data;
	}

	function _templateObject4() {
	  var data = _taggedTemplateLiteral$2(["#888"]);

	  _templateObject4 = function _templateObject4() {
	    return data;
	  };

	  return data;
	}

	function _templateObject3() {
	  var data = _taggedTemplateLiteral$2(["#e6e6e6"]);

	  _templateObject3 = function _templateObject3() {
	    return data;
	  };

	  return data;
	}

	function _templateObject2() {
	  var data = _taggedTemplateLiteral$2(["#666"]);

	  _templateObject2 = function _templateObject2() {
	    return data;
	  };

	  return data;
	}

	function _templateObject$2() {
	  var data = _taggedTemplateLiteral$2(["#fff"]);

	  _templateObject$2 = function _templateObject() {
	    return data;
	  };

	  return data;
	}

	function _taggedTemplateLiteral$2(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }
	var gscape = {
	  // primary colors
	  primary: css(_templateObject$2()),
	  on_primary: css(_templateObject2()),
	  primary_dark: css(_templateObject3()),
	  on_primary_dark: css(_templateObject4()),
	  // secondary colors
	  secondary: css(_templateObject5()),
	  on_secondary: css(_templateObject6()),
	  secondary_dark: css(_templateObject7()),
	  on_secondary_dark: css(_templateObject8()),
	  // misc
	  shadows: css(_templateObject9()),
	  error: css(_templateObject10()),
	  on_error: css(_templateObject11()),
	  // graph colors
	  background: css(_templateObject12()),
	  edge: css(_templateObject13()),
	  node_bg: css(_templateObject14()),
	  node_bg_contrast: css(_templateObject15()),
	  node_border: css(_templateObject16()),
	  label_color: css(_templateObject17()),
	  label_color_contrast: css(_templateObject18()),
	  role: css(_templateObject19()),
	  role_dark: css(_templateObject20()),
	  attribute: css(_templateObject21()),
	  attribute_dark: css(_templateObject22()),
	  concept: css(_templateObject23()),
	  concept_dark: css(_templateObject24()),
	  individual: css(_templateObject25()),
	  individual_dark: css(_templateObject26())
	};
	var dark = {
	  primary: css(_templateObject27()),
	  on_primary: css(_templateObject28()),
	  primary_dark: css(_templateObject29()),
	  on_primary_dark: css(_templateObject30()),
	  secondary: css(_templateObject31()),
	  on_secondary: css(_templateObject32()),
	  secondary_dark: css(_templateObject33()),
	  on_secondary_dark: css(_templateObject34()),
	  shadows: css(_templateObject35()),
	  error: css(_templateObject36()),
	  on_error: css(_templateObject37()),
	  // graph colors
	  background: css(_templateObject38()),
	  edge: css(_templateObject39()),
	  node_bg: css(_templateObject40()),
	  node_bg_contrast: css(_templateObject41()),
	  node_border: css(_templateObject42()),
	  label_color: css(_templateObject43()),
	  role: css(_templateObject44()),
	  role_dark: css(_templateObject45()),
	  attribute: css(_templateObject46()),
	  attribute_dark: css(_templateObject47()),
	  concept: css(_templateObject48()),
	  concept_dark: css(_templateObject49()),
	  individual: css(_templateObject50()),
	  individual_dark: css(_templateObject51())
	};

	function _typeof$4(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof$4 = function _typeof(obj) { return typeof obj; }; } else { _typeof$4 = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof$4(obj); }

	function _templateObject2$1() {
	  var data = _taggedTemplateLiteral$3([""]);

	  _templateObject2$1 = function _templateObject2() {
	    return data;
	  };

	  return data;
	}

	function _templateObject$3() {
	  var data = _taggedTemplateLiteral$3(["\n      :host, .gscape-panel{\n        font-family : \"Open Sans\",\"Helvetica Neue\",Helvetica,sans-serif;\n        display: block;\n        position: absolute;\n        color: var(--theme-gscape-on-primary, ", ");\n        background-color:var(--theme-gscape-primary, ", ");\n        box-shadow: 0 2px 4px 0 var(--theme-gscape-shadows, ", ");\n        border-radius: 8px;\n        transition: opacity 0.2s;\n        scrollbar-width: thin;\n      }\n\n      :host(:hover){\n        box-shadow: 0 4px 8px 0 var(--theme-gscape-shadows, ", ");\n      }\n\n      .hide {\n        display:none;\n      }\n\n      .widget-body {\n        width: 100%;\n        margin-top:35px;\n        max-height:450px;\n        border-top:solid 1px var(--theme-gscape-shadows, ", ");\n        border-bottom-left-radius: inherit;\n        border-bottom-right-radius: inherit;\n        overflow:auto;\n        scrollbar-width: inherit;\n      }\n\n      .gscape-panel {\n        position: absolute;\n        bottom: 40px;\n        width: auto;\n        padding:10px;\n        overflow: unset;\n        border: none;\n      }\n\n      .gscape-panel::after {\n        content: \"\";\n        position: absolute;\n        top: 100%;\n        left: 16px;\n        margin-left: -8px;\n        border-width: 8px;\n        border-style: solid;\n        border-color: #ddd transparent transparent transparent;\n      }\n\n      .gscape-panel-title{\n        font-weight: bold;\n        text-align: center;\n        margin-bottom: 10px;\n      }\n\n      .details_table{\n        padding: 12px 6px 0 6px;\n        border-spacing: 0;\n      }\n\n      .details_table th {\n        color: var(--theme-gscape-secondary, ", ");\n        border-right: solid 1px var(--theme-gscape-shadows, ", ");\n        font-weight: bold;\n        text-align:left;\n      }\n      \n      .details_table th, td {\n        padding:5px 8px;\n        white-space: nowrap;\n      }\n\n      /* width */\n      ::-webkit-scrollbar {\n        width: 5px;\n        height: 5px;\n      }\n\n      /* Track */\n      ::-webkit-scrollbar-track {\n        background: #f0f0f0; \n      }\n      \n      /* Handle */\n      ::-webkit-scrollbar-thumb {\n        background: #cdcdcd; \n      }\n\n      /* Handle on hover */\n      ::-webkit-scrollbar-thumb:hover {\n        background: #888; \n      }\n      \n    "]);

	  _templateObject$3 = function _templateObject() {
	    return data;
	  };

	  return data;
	}

	function _taggedTemplateLiteral$3(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

	function _classCallCheck$d(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn$4(self, call) { if (call && (_typeof$4(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized$4(self); }

	function _assertThisInitialized$4(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

	function _getPrototypeOf$4(o) { _getPrototypeOf$4 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf$4(o); }

	function _defineProperties$c(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

	function _createClass$c(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties$c(Constructor.prototype, protoProps); if (staticProps) _defineProperties$c(Constructor, staticProps); return Constructor; }

	function _inherits$4(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf$4(subClass, superClass); }

	function _setPrototypeOf$4(o, p) { _setPrototypeOf$4 = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf$4(o, p); }

	var GscapeWidget =
	/*#__PURE__*/
	function (_LitElement) {
	  _inherits$4(GscapeWidget, _LitElement);

	  _createClass$c(GscapeWidget, null, [{
	    key: "properties",
	    get: function get() {
	      if (this.collapsible) {
	        return {};
	      }

	      return {};
	    }
	  }, {
	    key: "styles",
	    get: function get() {
	      var colors = gscape;
	      return [[css(_templateObject$3(), colors.on_primary, colors.primary, colors.shadows, colors.shadows, colors.shadows, colors.secondary, colors.shadows)], colors];
	    }
	  }]);

	  function GscapeWidget(draggable, collapsible) {
	    var _this;

	    _classCallCheck$d(this, GscapeWidget);

	    _this = _possibleConstructorReturn$4(this, _getPrototypeOf$4(GscapeWidget).call(this));
	    _this.draggable = draggable;
	    _this.collapsible = collapsible;
	    if (collapsible) _this.collapsed = true;

	    _this.onselectstart = function () {
	    };

	    return _this;
	  }

	  _createClass$c(GscapeWidget, [{
	    key: "render",
	    value: function render() {
	      return html$1(_templateObject2$1());
	    }
	  }, {
	    key: "toggleBody",
	    value: function toggleBody() {
	      if (this.collapsible) {
	        if (this.header) {
	          var collapsed = this.header.collapsed;
	          this.header.collapsed = !collapsed;
	        }

	        if (this.body) this.body.classList.toggle('hide');
	      }
	    }
	  }, {
	    key: "collapseBody",
	    value: function collapseBody() {
	      if (this.collapsible) {
	        if (this.header) this.header.collapsed = true;
	        if (this.body) this.body.classList.add('hide');
	      }
	    }
	  }, {
	    key: "showBody",
	    value: function showBody() {
	      if (this.collapsible) {
	        if (this.header) this.header.collapsed = false;
	        if (this.body) this.body.classList.remove('hide');
	      }
	    }
	  }, {
	    key: "firstUpdated",
	    value: function firstUpdated() {
	      this.header = this.shadowRoot.querySelector('gscape-head');
	      this.body = this.shadowRoot.querySelector('.widget-body');

	      if (this.collapsible) {
	        this.addEventListener('toggle-widget-body', this.toggleBody);
	      }

	      if (this.draggable) this.makeDraggable();
	    }
	  }, {
	    key: "makeDraggable",
	    value: function makeDraggable() {
	      var pos1 = 0;
	      var pos2 = 0;
	      var pos3 = 0;
	      var pos4 = 0;
	      var elmnt = this;
	      var drag_handler = this.shadowRoot.querySelector('.drag-handler');
	      if (drag_handler) drag_handler.onmousedown = dragMouseDown;else console.log("No .drag-handler elem for a ".concat(this.constructor.name, " draggable instance"));

	      function dragMouseDown(e) {
	        e = e || window.event; // get the mouse cursor position at startup:

	        pos3 = e.clientX;
	        pos4 = e.clientY;
	        document.onmouseup = closeDragElement; // call a function whenever the cursor moves:

	        document.onmousemove = elementDrag;
	      }

	      function elementDrag(e) {
	        e = e || window.event; // calculate the new cursor position:

	        pos1 = pos3 - e.clientX;
	        pos2 = pos4 - e.clientY;
	        pos3 = e.clientX;
	        pos4 = e.clientY; // set the element's new position:

	        elmnt.style.top = elmnt.offsetTop - pos2 + 'px';
	        elmnt.style.left = elmnt.offsetLeft - pos1 + 'px';
	      }

	      function closeDragElement() {
	        /* stop moving when mouse button is released: */
	        document.onmouseup = null;
	        document.onmousemove = null;
	      }
	    }
	  }, {
	    key: "show",
	    value: function show() {
	      this.style.display = 'initial';
	    }
	  }, {
	    key: "hide",
	    value: function hide() {
	      this.style.display = 'none';
	    }
	  }, {
	    key: "blur",
	    value: function blur() {
	      this.collapseBody();
	    }
	  }]);

	  return GscapeWidget;
	}(LitElement); //customElements.define('gscape-widget', GscapeWidget)

	function _typeof$5(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof$5 = function _typeof(obj) { return typeof obj; }; } else { _typeof$5 = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof$5(obj); }

	function _templateObject4$1() {
	  var data = _taggedTemplateLiteral$4(["\n      .head-btn {\n        position:absolute;\n        color:var(--theme-gscape-on-primary, ", ");\n        right:0;\n        padding:6px 2px;\n        cursor:pointer;\n      }\n\n      .head-btn:hover{\n        color:var(--theme-gscape-secondary, ", ");\n      }\n\n      .head-title {\n        padding: 10px 40px 10px 10px ;\n        box-sizing: border-box;\n        float:left;\n        font-weight:bold;\n        cursor:grab;\n        width: var(--title-width, '');\n        text-align: var(--title-text-align, '')\n      }\n    "]);

	  _templateObject4$1 = function _templateObject4() {
	    return data;
	  };

	  return data;
	}

	function _templateObject3$1() {
	  var data = _taggedTemplateLiteral$4(["arrow_drop_up"]);

	  _templateObject3$1 = function _templateObject3() {
	    return data;
	  };

	  return data;
	}

	function _templateObject2$2() {
	  var data = _taggedTemplateLiteral$4(["arrow_drop_down"]);

	  _templateObject2$2 = function _templateObject2() {
	    return data;
	  };

	  return data;
	}

	function _templateObject$4() {
	  var data = _taggedTemplateLiteral$4(["\n      <div class=\"head-title\"> ", " </div>\n      <slot></slot>\n      <mwc-icon class=\"head-btn\" @click=\"", "\">\n        ", "\n      </mwc-icon> \n    "]);

	  _templateObject$4 = function _templateObject() {
	    return data;
	  };

	  return data;
	}

	function _taggedTemplateLiteral$4(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

	function _classCallCheck$e(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn$5(self, call) { if (call && (_typeof$5(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized$5(self); }

	function _assertThisInitialized$5(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

	function _get$2(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get$2 = Reflect.get; } else { _get$2 = function _get(target, property, receiver) { var base = _superPropBase$2(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get$2(target, property, receiver || target); }

	function _superPropBase$2(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf$5(object); if (object === null) break; } return object; }

	function _getPrototypeOf$5(o) { _getPrototypeOf$5 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf$5(o); }

	function _defineProperties$d(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

	function _createClass$d(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties$d(Constructor.prototype, protoProps); if (staticProps) _defineProperties$d(Constructor, staticProps); return Constructor; }

	function _inherits$5(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf$5(subClass, superClass); }

	function _setPrototypeOf$5(o, p) { _setPrototypeOf$5 = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf$5(o, p); }

	var GscapeHeader =
	/*#__PURE__*/
	function (_GscapeWidget) {
	  _inherits$5(GscapeHeader, _GscapeWidget);

	  _createClass$d(GscapeHeader, null, [{
	    key: "properties",
	    get: function get() {
	      return {
	        collapsed: Boolean,
	        title: String
	      };
	    }
	  }]);

	  function GscapeHeader() {
	    var _this;

	    _classCallCheck$e(this, GscapeHeader);

	    _this = _possibleConstructorReturn$5(this, _getPrototypeOf$5(GscapeHeader).call(this, false, false));
	    _this.title = 'header';
	    _this.collapsed = false;
	    return _this;
	  }

	  _createClass$d(GscapeHeader, [{
	    key: "render",
	    value: function render() {
	      return html$1(_templateObject$4(), this.title, this.toggleBody, this.collapsed ? html$1(_templateObject2$2()) : html$1(_templateObject3$1()));
	    }
	  }, {
	    key: "toggleBody",
	    value: function toggleBody() {
	      var e = new CustomEvent('toggle-widget-body', {
	        bubbles: true,
	        composed: true
	      });
	      this.dispatchEvent(e);
	    }
	  }], [{
	    key: "styles",
	    get: function get() {
	      // we don't need super.styles, just the colors from default imported theme
	      var colors = _get$2(_getPrototypeOf$5(GscapeHeader), "styles", this)[1];

	      return css(_templateObject4$1(), colors.on_primary, colors.secondary);
	    }
	  }]);

	  return GscapeHeader;
	}(GscapeWidget);
	customElements.define('gscape-head', GscapeHeader);

	function _typeof$6(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof$6 = function _typeof(obj) { return typeof obj; }; } else { _typeof$6 = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof$6(obj); }

	function _templateObject3$2() {
	  var data = _taggedTemplateLiteral$5(["\n        <div \n          @click=\"", "\" \n          name=\"", "\" \n          diagram-id=\"", "\" \n          class=\"diagram-item ", "\"\n        >\n          ", "\n        </div>\n        "]);

	  _templateObject3$2 = function _templateObject3() {
	    return data;
	  };

	  return data;
	}

	function _templateObject2$3() {
	  var data = _taggedTemplateLiteral$5(["\n      <gscape-head title=\"", "\"\n        collapsed=\"true\" class=\"drag-handler\"></gscape-head> \n\n      <div class=\"widget-body hide\">\n        ", "\n      </div>\n    "]);

	  _templateObject2$3 = function _templateObject2() {
	    return data;
	  };

	  return data;
	}

	function _templateObject$5() {
	  var data = _taggedTemplateLiteral$5(["\n        :host {\n          top: 10px;\n          left: 10px;\n        }\n\n        .diagram-item {\n          cursor:pointer;\n          padding:5px 10px;\n        }\n\n        .diagram-item:hover {\n          color: var(--theme-gscape-on-secondary, ", ");\n          background-color:var(--theme-gscape-secondary, ", ");\n        }\n\n        .diagram-item:last-of-type {\n          border-radius: inherit;\n        }\n\n        .selected {\n          background-color: var(--theme-gscape-primary-dark, ", ");\n          color: var(--theme-gscape-on-primary-dark, ", ");\n          font-weight: bold;\n        }\n      "]);

	  _templateObject$5 = function _templateObject() {
	    return data;
	  };

	  return data;
	}

	function _taggedTemplateLiteral$5(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

	function _classCallCheck$f(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn$6(self, call) { if (call && (_typeof$6(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized$6(self); }

	function _assertThisInitialized$6(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

	function _defineProperties$e(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

	function _createClass$e(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties$e(Constructor.prototype, protoProps); if (staticProps) _defineProperties$e(Constructor, staticProps); return Constructor; }

	function _inherits$6(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf$6(subClass, superClass); }

	function _setPrototypeOf$6(o, p) { _setPrototypeOf$6 = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf$6(o, p); }

	function _get$3(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get$3 = Reflect.get; } else { _get$3 = function _get(target, property, receiver) { var base = _superPropBase$3(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get$3(target, property, receiver || target); }

	function _superPropBase$3(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf$6(object); if (object === null) break; } return object; }

	function _getPrototypeOf$6(o) { _getPrototypeOf$6 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf$6(o); }

	var GscapeDiagramSelector =
	/*#__PURE__*/
	function (_GscapeWidget) {
	  _inherits$6(GscapeDiagramSelector, _GscapeWidget);

	  _createClass$e(GscapeDiagramSelector, null, [{
	    key: "properties",
	    get: function get() {
	      return [_get$3(_getPrototypeOf$6(GscapeDiagramSelector), "properties", this), {
	        actual_diagram_id: String
	      }];
	    }
	  }, {
	    key: "styles",
	    get: function get() {
	      var super_styles = _get$3(_getPrototypeOf$6(GscapeDiagramSelector), "styles", this);

	      var colors = super_styles[1];
	      return [super_styles[0], css(_templateObject$5(), colors.on_secondary, colors.secondary, colors.primary_dark, colors.on_primary_dark)];
	    }
	  }]);

	  function GscapeDiagramSelector(diagrams) {
	    var _this;

	    _classCallCheck$f(this, GscapeDiagramSelector);

	    _this = _possibleConstructorReturn$6(this, _getPrototypeOf$6(GscapeDiagramSelector).call(this, true, true));
	    _this.diagrams = diagrams;
	    _this.actual_diagram_id = null;
	    _this.default_title = 'Select a Diagram';
	    _this._onDiagramChange = null;
	    return _this;
	  }

	  _createClass$e(GscapeDiagramSelector, [{
	    key: "render",
	    value: function render() {
	      var _this2 = this;

	      return html$1(_templateObject2$3(), this.default_title, this.diagrams.map(function (diagram, id) {
	        return html$1(_templateObject3$2(), _this2.changeDiagram, diagram.name, id, id == _this2.actual_diagram_id ? "selected" : "", diagram.name);
	      }));
	    }
	  }, {
	    key: "changeDiagram",
	    value: function changeDiagram(e) {
	      if (this.shadowRoot.querySelector('.selected')) this.shadowRoot.querySelector('.selected').classList.remove('selected');
	      e.target.classList.add('selected');
	      var diagram_id = e.target.getAttribute('diagram-id');
	      this.toggleBody();
	      this.actual_diagram_id = diagram_id;

	      this._onDiagramChange(diagram_id);
	    }
	  }, {
	    key: "firstUpdated",
	    value: function firstUpdated() {
	      _get$3(_getPrototypeOf$6(GscapeDiagramSelector.prototype), "firstUpdated", this).call(this); //this.shadowRoot.querySelector('gscape-head').title = this.actual_diagram.name

	    }
	  }, {
	    key: "onDiagramChange",
	    set: function set(f) {
	      this._onDiagramChange = f;
	    }
	  }, {
	    key: "actual_diagram_id",
	    set: function set(diagram_id) {
	      this._actual_diagram_id = diagram_id;
	      if (diagram_id != null) this.shadowRoot.querySelector('gscape-head').title = this.diagrams[diagram_id].name;
	    },
	    get: function get() {
	      return this._actual_diagram_id;
	    }
	  }, {
	    key: "actual_diagram",
	    get: function get() {
	      return this._actual_diagram;
	    }
	  }]);

	  return GscapeDiagramSelector;
	}(GscapeWidget);
	customElements.define('gscape-diagram-selector', GscapeDiagramSelector);

	function _typeof$7(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof$7 = function _typeof(obj) { return typeof obj; }; } else { _typeof$7 = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof$7(obj); }

	function _templateObject5$1() {
	  var data = _taggedTemplateLiteral$6(["\n                <div class=\"sub-row\" \n                  diagram_id=\"", "\" \n                  node_id=\"", "\"\n                  @click=\"", "\"\n                >\n                  - ", " - ", "\n                </div>\n              "]);

	  _templateObject5$1 = function _templateObject5() {
	    return data;
	  };

	  return data;
	}

	function _templateObject4$2() {
	  var data = _taggedTemplateLiteral$6(["\n          <div>\n            <div \n              id=\"", "\" \n              class=\"row\" \n              type=\"", "\"\n              label = \"", "\"\n            >\n              <span><mwc-icon @click='", "'>keyboard_arrow_right</mwc-icon></span>\n              <span>", "</span>\n              <div class=\"row-label\" @click='", "'>", "</div>\n            </div>\n\n            <div class=\"sub-rows-wrapper hide\">\n            ", "\n            </div>\n          </div>\n        "]);

	  _templateObject4$2 = function _templateObject4() {
	    return data;
	  };

	  return data;
	}

	function _templateObject3$3() {
	  var data = _taggedTemplateLiteral$6(["\n      <gscape-head title=\"Explorer\" collapsed=\"true\" class=\"drag-handler\">\n        <input \n          type=\"text\" \n          autocomplete=\"off\"\n          @keyup=\"", "\"\n          placeholder=\"Search Entities\"\n        />\n      </gscape-head>\n\n      <div class=\"widget-body hide\">\n      ", "\n      </div>\n    "]);

	  _templateObject3$3 = function _templateObject3() {
	    return data;
	  };

	  return data;
	}

	function _templateObject2$4() {
	  var data = _taggedTemplateLiteral$6(["\n        <div class=\"type-img type-img-", "\">", "<div>\n      "]);

	  _templateObject2$4 = function _templateObject2() {
	    return data;
	  };

	  return data;
	}

	function _templateObject$6() {
	  var data = _taggedTemplateLiteral$6(["\n        :host {\n          left:50%;\n          top:10px;\n          min-width:340px;\n          max-width:450px;\n          transform: translate(-50%, 0);\n        }\n\n        .widget-body {\n          overflow:auto;\n        }\n\n        .row{\n          line-height: 0;\n          display: flex;\n          align-items: center;\n          padding:4px 0;\n        }\n\n        .row:hover, .sub-row:hover {\n          background-color: var(--theme-gscape-secondary, ", ");\n          color: var(--theme-gscape-on-secondary, ", ");\n        }\n\n        .row-label{\n          padding-left:5px;\n          cursor:pointer;\n          width:100%;\n          white-space: nowrap;\n        }\n\n        mwc-icon:hover{\n          color: var(--theme-gscape-primary, ", ");\n          cursor:pointer;\n        }\n\n        .type-img{\n          width: 20px;\n          height: 20px;\n          text-align: center;\n          line-height: 20px;\n        }\n\n        .type-img-A{\n          background-color: var(--theme-graph-attribute, ", ");\n          color: var(--theme-graph-attribute-dark, ", ");\n          border: solid 1px var(--theme-graph-attribute-dark, ", ");\n        }\n\n        .type-img-R{\n          background-color: var(--theme-graph-role, ", ");\n          color: var(--theme-graph-role-dark, ", ");\n          border: solid 1px var(--theme-graph-role-dark, ", "); \n        }\n        \n        .type-img-C{\n          background-color: var(--theme-graph-concept, ", ");\n          color: var(--theme-graph-concept-dark, ", ");\n          border: solid 1px var(--theme-graph-concept-dark, ", "); \n        }\n\n        .type-img-I{\n          background-color: var(--theme-graph-individual, ", ");\n          color: var(--theme-graph-individual-dark, ", ");\n          border: solid 1px var(--theme-graph-individual-dark, ", "); \n        }\n\n        .sub-row{\n          background-color: var(--theme-gscape-primary-dark, ", ");\n          padding: 4px 0 4px 34px;\n          cursor: pointer;\n        }\n\n        .sub-rows-wrapper{\n          padding: 2px 0;\n        }\n\n        .add-shadow{\n          box-shadow: 0 2px 2px 0 var(--theme-gscape-shadows, ", ");\n        }\n\n        gscape-head input {\n          position:absolute;\n          left: 30%;\n          width: 50%;\n          line-height:21px;\n          box-sizing: border-box;\n          background-color: var(--theme-gscape-primary, ", ");\n          padding: 2px 5px;\n          border:none;\n          border-bottom: 1px solid var(--theme-gscape-shadows, ", ");\n          float: left;\n          margin: 8px 0px;\n          transition: all .35s ease-in-out;\n          color:inherit;\n        }\n\n        gscape-head input:focus {\n          border-color: var(--theme-gscape-secondary, ", ");\n          left:0;\n          margin: 8px 10px;\n          width:80%;\n        }\n      "]);

	  _templateObject$6 = function _templateObject() {
	    return data;
	  };

	  return data;
	}

	function _taggedTemplateLiteral$6(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

	function _classCallCheck$g(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn$7(self, call) { if (call && (_typeof$7(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized$7(self); }

	function _assertThisInitialized$7(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

	function _defineProperties$f(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

	function _createClass$f(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties$f(Constructor.prototype, protoProps); if (staticProps) _defineProperties$f(Constructor, staticProps); return Constructor; }

	function _inherits$7(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf$7(subClass, superClass); }

	function _setPrototypeOf$7(o, p) { _setPrototypeOf$7 = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf$7(o, p); }

	function _get$4(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get$4 = Reflect.get; } else { _get$4 = function _get(target, property, receiver) { var base = _superPropBase$4(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get$4(target, property, receiver || target); }

	function _superPropBase$4(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf$7(object); if (object === null) break; } return object; }

	function _getPrototypeOf$7(o) { _getPrototypeOf$7 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf$7(o); }

	var GscapeExplorer =
	/*#__PURE__*/
	function (_GscapeWidget) {
	  _inherits$7(GscapeExplorer, _GscapeWidget);

	  _createClass$f(GscapeExplorer, null, [{
	    key: "properties",
	    get: function get() {
	      return [_get$4(_getPrototypeOf$7(GscapeExplorer), "properties", this), {
	        predicates: Object
	      }];
	    }
	  }, {
	    key: "styles",
	    get: function get() {
	      var super_styles = _get$4(_getPrototypeOf$7(GscapeExplorer), "styles", this);

	      var colors = super_styles[1];
	      return [super_styles[0], css(_templateObject$6(), colors.secondary, colors.on_secondary, colors.primary, colors.attribute, colors.attribute_dark, colors.attribute_dark, colors.role, colors.role_dark, colors.role_dark, colors.concept, colors.concept_dark, colors.concept_dark, colors.individual, colors.individual_dark, colors.individual_dark, colors.primary_dark, colors.shadows, colors.primary, colors.shadows, colors.secondary)];
	    }
	  }]);

	  function GscapeExplorer(predicates, diagrams) {
	    var _this;

	    _classCallCheck$g(this, GscapeExplorer);

	    _this = _possibleConstructorReturn$7(this, _getPrototypeOf$7(GscapeExplorer).call(this, true, true));
	    _this.diagrams = diagrams;
	    _this.predicates = predicates;
	    _this._onEntitySelect = null;
	    _this._onNodeSelect = null;
	    return _this;
	  }

	  _createClass$f(GscapeExplorer, [{
	    key: "render",
	    value: function render() {
	      var _this2 = this;

	      function getTypeImg(type) {
	        var letter = type.charAt(0).toUpperCase();
	        return html$1(_templateObject2$4(), letter, letter);
	      }

	      return html$1(_templateObject3$3(), this.search, Object.keys(this.predicates).map(function (key) {
	        var predicate = _this2.predicates[key];
	        return html$1(_templateObject4$2(), predicate.subrows[0].id, predicate.type, predicate.label, _this2.toggleSubRows, getTypeImg(predicate.type), _this2.handleEntitySelection, predicate.label, predicate.subrows.map(function (predicate_instance) {
	          return html$1(_templateObject5$1(), predicate_instance.diagram.id, predicate_instance.id, _this2.handleNodeSelection, predicate_instance.diagram.name, predicate_instance.id_xml);
	        }));
	      }));
	    }
	  }, {
	    key: "toggleSubRows",
	    value: function toggleSubRows(e) {
	      var row_wrapper = e.target.parentNode.parentNode.parentNode;
	      row_wrapper.querySelector('.sub-rows-wrapper').classList.toggle('hide');
	      e.target.innerHTML = e.target.innerHTML == 'keyboard_arrow_right' ? 'keyboard_arrow_down' : 'keyboard_arrow_right';
	      var row = row_wrapper.querySelector('.row');
	      row.classList.toggle('add-shadow');
	    }
	  }, {
	    key: "search",
	    value: function search(e) {
	      if (e.keyCode == 27) {
	        e.target.blur();
	      }

	      var value = e.target.value.toLowerCase();
	      if (value === '') this.collapseBody();else this.showBody();
	      var rows = this.shadowRoot.querySelectorAll('.row');
	      rows.forEach(function (row) {
	        value.split(' ').forEach(function (word) {
	          if (row.getAttribute('label').toLowerCase().indexOf(word) > -1 || row.getAttribute('type').toLowerCase().indexOf(word) > -1) {
	            row.style.display = '';
	          } else {
	            row.style.display = 'none';
	          }
	        });
	      });
	      e.target.focus();
	    }
	  }, {
	    key: "handleEntitySelection",
	    value: function handleEntitySelection(e) {
	      var entity_id = e.target.parentNode.getAttribute('id'); //let selector = `[label = '${label}'][type = '${type}']`
	      // get the first instance of the selected entity
	      //let predicate_instance = this.predicates.filter(selector)[0]

	      this._onEntitySelect(entity_id, true);
	    }
	  }, {
	    key: "handleNodeSelection",
	    value: function handleNodeSelection(e) {
	      this.toggleBody();
	      var node_id = e.target.getAttribute('node_id');

	      this._onNodeSelect(node_id);
	    }
	  }, {
	    key: "blur",
	    value: function blur() {
	      _get$4(_getPrototypeOf$7(GscapeExplorer.prototype), "blur", this).call(this);

	      this.shadowRoot.querySelector('input').blur();
	    }
	  }, {
	    key: "onEntitySelect",
	    set: function set(f) {
	      this._onEntitySelect = f;
	    }
	  }, {
	    key: "onNodeNavigation",
	    set: function set(f) {
	      this._onNodeSelect = f;
	    }
	  }, {
	    key: "predicates",
	    get: function get() {
	      return this._predicates;
	    },
	    set: function set(predicates) {
	      function getSubRowsObject(predicate) {
	        return {
	          id: predicate.id,
	          id_xml: predicate.id_xml,
	          diagram: {
	            id: predicate.diagram_id,
	            name: this.diagrams[predicate.diagram_id].name
	          }
	        };
	      }

	      var getSubRowsObjectBound = getSubRowsObject.bind(this);
	      var dictionary = [];
	      predicates.forEach(function (predicate) {
	        var label = predicate.label.replace(/\r?\n|\r/g, '');
	        var key = label.concat(predicate.type);

	        if (!(key in dictionary)) {
	          dictionary[key] = {
	            type: predicate.type,
	            label: label,
	            subrows: []
	          };
	        }

	        dictionary[key].subrows.push(getSubRowsObjectBound(predicate));
	      });
	      this._predicates = dictionary;
	    }
	  }]);

	  return GscapeExplorer;
	}(GscapeWidget);
	customElements.define('gscape-explorer', GscapeExplorer);

	function _typeof$8(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof$8 = function _typeof(obj) { return typeof obj; }; } else { _typeof$8 = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof$8(obj); }

	function _templateObject10$1() {
	  var data = _taggedTemplateLiteral$7([""]);

	  _templateObject10$1 = function _templateObject10() {
	    return data;
	  };

	  return data;
	}

	function _templateObject9$1() {
	  var data = _taggedTemplateLiteral$7([""]);

	  _templateObject9$1 = function _templateObject9() {
	    return data;
	  };

	  return data;
	}

	function _templateObject8$1() {
	  var data = _taggedTemplateLiteral$7(["\n                <div>\n                  <div class=\"descr-header\"> Description </div>\n                  <div class=\"descr-text\">\n                  </div>\n                </div>\n              "]);

	  _templateObject8$1 = function _templateObject8() {
	    return data;
	  };

	  return data;
	}

	function _templateObject7$1() {
	  var data = _taggedTemplateLiteral$7([""]);

	  _templateObject7$1 = function _templateObject7() {
	    return data;
	  };

	  return data;
	}

	function _templateObject6$1() {
	  var data = _taggedTemplateLiteral$7(["<span class=\"chip\">&#10003; ", "</span>"]);

	  _templateObject6$1 = function _templateObject6() {
	    return data;
	  };

	  return data;
	}

	function _templateObject5$2() {
	  var data = _taggedTemplateLiteral$7([""]);

	  _templateObject5$2 = function _templateObject5() {
	    return data;
	  };

	  return data;
	}

	function _templateObject4$3() {
	  var data = _taggedTemplateLiteral$7(["\n              <tr>\n                <th>IRI</th>\n                <td>", "</td>\n              </tr>\n              "]);

	  _templateObject4$3 = function _templateObject4() {
	    return data;
	  };

	  return data;
	}

	function _templateObject3$4() {
	  var data = _taggedTemplateLiteral$7(["\n            <table class=\"details_table\">\n              <tr>\n                <th>Name</th>\n                <td>", "</td>\n              </tr>\n              <tr>\n                <th>Type</th>\n                <td>", "</td>\n              </tr>\n              ", " \n            </table>\n\n            <div class=\"chips-wrapper\">\n              ", "\n            </div>\n\n            ", "\n          "]);

	  _templateObject3$4 = function _templateObject3() {
	    return data;
	  };

	  return data;
	}

	function _templateObject2$5() {
	  var data = _taggedTemplateLiteral$7(["\n      <gscape-head title=\"Entity Details\" class=\"drag-handler\"></gscape-head>\n      <div class=\"widget-body\">\n        ", "\n      </div>\n    "]);

	  _templateObject2$5 = function _templateObject2() {
	    return data;
	  };

	  return data;
	}

	function _templateObject$7() {
	  var data = _taggedTemplateLiteral$7(["\n        :host {\n          top:10px;\n          right:62px;\n          width:400px;\n        }\n\n        .widget-body div:last-of-type {\n          margin-bottom: 12px;\n        }\n\n        .chips-wrapper {\n          padding: 12px 6px 0 6px;\n          border-spacing: 0;\n        }\n\n        .descr-header {\n          text-align: center;\n          padding: 12px;\n          font-weight: bold;\n          border-bottom: solid 1px var(--theme-gscape-shadows, ", ");\n          color: var(--theme-gscape-secondary, ", ");\n          width: 85%;\n          margin: auto;\n        }\n\n        .descr-text{\n          padding:10px;\n        }\n\n        gscape-head {\n          --title-text-align: center;\n          --title-width: 100%;\n        }\n\n        .chip {\n          display: inline-block;\n          margin: 4px;\n          padding: 3px 8px;\n          border-radius: 32px;\n          border: 1px solid var(--theme-gscape-secondary, ", ");\n          color: var(--theme-gscape-secondary, ", ");\n          font-size: 13px;\n        }\n      "]);

	  _templateObject$7 = function _templateObject() {
	    return data;
	  };

	  return data;
	}

	function _taggedTemplateLiteral$7(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

	function _classCallCheck$h(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn$8(self, call) { if (call && (_typeof$8(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized$8(self); }

	function _assertThisInitialized$8(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

	function _defineProperties$g(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

	function _createClass$g(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties$g(Constructor.prototype, protoProps); if (staticProps) _defineProperties$g(Constructor, staticProps); return Constructor; }

	function _inherits$8(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf$8(subClass, superClass); }

	function _setPrototypeOf$8(o, p) { _setPrototypeOf$8 = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf$8(o, p); }

	function _get$5(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get$5 = Reflect.get; } else { _get$5 = function _get(target, property, receiver) { var base = _superPropBase$5(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get$5(target, property, receiver || target); }

	function _superPropBase$5(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf$8(object); if (object === null) break; } return object; }

	function _getPrototypeOf$8(o) { _getPrototypeOf$8 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf$8(o); }

	var GscapeEntityDetails =
	/*#__PURE__*/
	function (_GscapeWidget) {
	  _inherits$8(GscapeEntityDetails, _GscapeWidget);

	  _createClass$g(GscapeEntityDetails, null, [{
	    key: "properties",
	    get: function get() {
	      return [_get$5(_getPrototypeOf$8(GscapeEntityDetails), "properties", this), {
	        _entity: {
	          type: Object
	        }
	      }];
	    }
	  }, {
	    key: "styles",
	    get: function get() {
	      var super_styles = _get$5(_getPrototypeOf$8(GscapeEntityDetails), "styles", this);

	      var colors = super_styles[1];
	      return [super_styles[0], css(_templateObject$7(), colors.shadows, colors.secondary, colors.secondary, colors.secondary)];
	    }
	  }]);

	  function GscapeEntityDetails() {
	    var _this;

	    _classCallCheck$h(this, GscapeEntityDetails);

	    _this = _possibleConstructorReturn$8(this, _getPrototypeOf$8(GscapeEntityDetails).call(this, true, true));
	    _this._entity = null;
	    _this.properties = {
	      functional: 'Functional',
	      inverseFunctional: 'Inverse Functional',
	      symmetric: 'Symmetric',
	      asymmetric: 'Asymmetric',
	      reflexive: 'Reflexive',
	      irreflexive: 'Irreflexive',
	      transitive: 'Transitive'
	    };
	    return _this;
	  }

	  _createClass$g(GscapeEntityDetails, [{
	    key: "render",
	    value: function render() {
	      var _this2 = this;

	      return html$1(_templateObject2$5(), this.entity ? html$1(_templateObject3$4(), this.entity.label.replace(/\r?\n|\r/g, ''), this.entity.type, this.entity.type != 'individual' ? html$1(_templateObject4$3(), this.entity.iri) : html$1(_templateObject5$2()), Object.keys(this.properties).map(function (property) {
	        return _this2.entity[property] ? html$1(_templateObject6$1(), _this2.properties[property]) : html$1(_templateObject7$1());
	      }), this.entity.description ? html$1(_templateObject8$1()) : html$1(_templateObject9$1())) : html$1(_templateObject10$1()));
	    }
	  }, {
	    key: "updated",
	    value: function updated() {
	      if (this.entity && this.entity.description) this.renderDescription(this.entity.description);
	    }
	  }, {
	    key: "renderDescription",
	    value: function renderDescription(description) {
	      var descr_container = this.shadowRoot.querySelector('.descr-text');
	      descr_container.innerHTML = description.replace(/(href=.)\/predicate\//g, '$1/documentation/predicate/');
	    }
	  }, {
	    key: "firstUpdated",
	    value: function firstUpdated() {
	      _get$5(_getPrototypeOf$8(GscapeEntityDetails.prototype), "firstUpdated", this).call(this);

	      this.hide();
	    }
	  }, {
	    key: "blur",
	    value: function blur() {
	      this.hide();
	    }
	  }, {
	    key: "entity",
	    set: function set(entity) {
	      var oldval = this.entity;
	      this._entity = entity;

	      switch (this._entity.type) {
	        case 'concept':
	          this._entity.type = 'Class';
	          break;

	        case 'role':
	          this._entity.type = 'Object Property';
	          break;

	        case 'attribute':
	          this._entity.type = 'Data Property';
	          break;
	      }

	      this.requestUpdate('entity', oldval);
	    },
	    get: function get() {
	      return this._entity;
	    }
	  }]);

	  return GscapeEntityDetails;
	}(GscapeWidget);
	customElements.define('gscape-entity-details', GscapeEntityDetails);

	function _typeof$9(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof$9 = function _typeof(obj) { return typeof obj; }; } else { _typeof$9 = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof$9(obj); }

	function _templateObject2$6() {
	  var data = _taggedTemplateLiteral$8(["\n      <div \n        class=\"btn\" \n        ?active = \"", "\"\n        @click=\"", "\" \n        title=\"", "\">\n        \n        <mwc-icon>", "</mwc-icon>\n      </div>\n    "]);

	  _templateObject2$6 = function _templateObject2() {
	    return data;
	  };

	  return data;
	}

	function _templateObject$8() {
	  var data = _taggedTemplateLiteral$8(["\n        .btn {\n          padding:4px;\n          line-height:0;\n          cursor: pointer;\n        }\n\n        .btn:hover {\n          color: var(--theme-gscape-secondary, ", ");\n        }\n\n        .btn[active] {\n          color: var(--theme-gscape-secondary, ", ");\n        }\n      "]);

	  _templateObject$8 = function _templateObject() {
	    return data;
	  };

	  return data;
	}

	function _taggedTemplateLiteral$8(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

	function _classCallCheck$i(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn$9(self, call) { if (call && (_typeof$9(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized$9(self); }

	function _assertThisInitialized$9(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

	function _defineProperties$h(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

	function _createClass$h(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties$h(Constructor.prototype, protoProps); if (staticProps) _defineProperties$h(Constructor, staticProps); return Constructor; }

	function _inherits$9(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf$9(subClass, superClass); }

	function _setPrototypeOf$9(o, p) { _setPrototypeOf$9 = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf$9(o, p); }

	function _get$6(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get$6 = Reflect.get; } else { _get$6 = function _get(target, property, receiver) { var base = _superPropBase$6(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get$6(target, property, receiver || target); }

	function _superPropBase$6(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf$9(object); if (object === null) break; } return object; }

	function _getPrototypeOf$9(o) { _getPrototypeOf$9 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf$9(o); }

	var GscapeButton =
	/*#__PURE__*/
	function (_GscapeWidget) {
	  _inherits$9(GscapeButton, _GscapeWidget);

	  _createClass$h(GscapeButton, null, [{
	    key: "properties",
	    get: function get() {
	      return [_get$6(_getPrototypeOf$9(GscapeButton), "properties", this), {
	        icon: {
	          type: String
	        },
	        active: {
	          type: Boolean
	        }
	      }];
	    }
	  }, {
	    key: "styles",
	    get: function get() {
	      var super_styles = _get$6(_getPrototypeOf$9(GscapeButton), "styles", this);

	      var colors = super_styles[1];
	      return [super_styles[0], css(_templateObject$8(), colors.secondary, colors.secondary)];
	    }
	  }]);

	  function GscapeButton(icon, alt_icon) {
	    var _this;

	    var draggable = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

	    _classCallCheck$i(this, GscapeButton);

	    _this = _possibleConstructorReturn$9(this, _getPrototypeOf$9(GscapeButton).call(this, draggable, false));
	    _this.icon = icon;
	    _this.alternate_icon = alt_icon || icon;
	    _this.onClick = null;
	    _this.highlight = false;
	    _this.active = false;
	    return _this;
	  }

	  _createClass$h(GscapeButton, [{
	    key: "render",
	    value: function render() {
	      return html$1(_templateObject2$6(), this.active, this.clickHandler, this.icon, this.icon);
	    }
	  }, {
	    key: "clickHandler",
	    value: function clickHandler() {
	      if (this.highlight) this.active = !this.active;
	      this.toggleIcon();

	      this._onClick();
	    }
	  }, {
	    key: "toggleIcon",
	    value: function toggleIcon() {
	      var aux = this._icon;
	      this.icon = this._alternate_icon;
	      this.alternate_icon = aux;
	    }
	  }, {
	    key: "firstUpdated",
	    value: function firstUpdated() {
	      _get$6(_getPrototypeOf$9(GscapeButton.prototype), "firstUpdated", this).call(this);

	      this.shadowRoot.querySelector('mwc-icon').onselectstart = function () {
	        return false;
	      };
	    }
	  }, {
	    key: "icon",
	    set: function set(icon) {
	      var oldval = this._icon;
	      this._icon = icon;
	      this.requestUpdate('icon', oldval);
	    },
	    get: function get() {
	      return this._icon;
	    }
	  }, {
	    key: "alternate_icon",
	    set: function set(icon) {
	      var oldval = this._alternate_icon;
	      this._alternate_icon = icon;
	      this.requestUpdate('alternative_icon', oldval);
	    }
	  }, {
	    key: "onClick",
	    set: function set(f) {
	      this._onClick = f;
	    }
	  }]);

	  return GscapeButton;
	}(GscapeWidget);
	customElements.define('gscape-button', GscapeButton);

	function _typeof$a(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof$a = function _typeof(obj) { return typeof obj; }; } else { _typeof$a = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof$a(obj); }

	function _templateObject2$7() {
	  var data = _taggedTemplateLiteral$9(["\n    <div class=\"toggle-container\">\n      <label class=\"toggle-wrap\">\n        <input id=\"", "\" type=\"checkbox\" \n          ?checked=\"", "\"\n          ?disabled=\"", "\"\n          @click=\"", "\"\n        />\n        <span class=\"toggle\"></span>\n      </label>\n      <span class=\"toggle-label\">", "</span>\n    </div>\n    "]);

	  _templateObject2$7 = function _templateObject2() {
	    return data;
	  };

	  return data;
	}

	function _templateObject$9() {
	  var data = _taggedTemplateLiteral$9(["\n        :host {\n          display: flex;\n        }\n        \n        .toggle-container {\n          white-space: nowrap;\n          padding: 6px;\n          display: flex;\n          align-items: center;\n        }\n\n        .toggle-wrap {\n          width: 33px;\n          height: 19px;\n          display: inline-block;\n          position: relative;\n        }\n\n        .toggle {\n          position: absolute;\n          cursor: pointer;\n          top: 0;\n          left: 0;\n          right: 0;\n          bottom: 0;\n          background-color: #ccc;\n          transition: checked 0.2s;\n          border-radius: 19px;\n        }\n\n        .toggle::before {\n          position: absolute;\n          content: \"\";\n          height: 11px;\n          width: 11px;\n          left: 4px;\n          bottom: 4px;\n          background-color: var(--theme-gscape-primary, ", ");\n          transition: .1s;\n          border-radius: 20px;\n        }\n\n        .toggle-wrap input {\n          display:none;\n        }\n\n        .toggle-wrap input:checked + .toggle {\n          background-color: var(--theme-gscape-secondary, ", ");\n        }\n\n        .toggle-wrap input:checked + .toggle::before {\n          -webkit-transform: translateX(14px);\n          -ms-transform: translateX(14px);\n          transform: translateX(14px);      \n        }\n\n        .toggle-wrap input:disabled + .toggle {\n          opacity:0.25;\n        }\n\n        .toggle-label {\n          margin-left: 15px;\n        }\n      "]);

	  _templateObject$9 = function _templateObject() {
	    return data;
	  };

	  return data;
	}

	function _taggedTemplateLiteral$9(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

	function _classCallCheck$j(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn$a(self, call) { if (call && (_typeof$a(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized$a(self); }

	function _assertThisInitialized$a(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

	function _defineProperties$i(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

	function _createClass$i(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties$i(Constructor.prototype, protoProps); if (staticProps) _defineProperties$i(Constructor, staticProps); return Constructor; }

	function _inherits$a(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf$a(subClass, superClass); }

	function _setPrototypeOf$a(o, p) { _setPrototypeOf$a = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf$a(o, p); }

	function _get$7(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get$7 = Reflect.get; } else { _get$7 = function _get(target, property, receiver) { var base = _superPropBase$7(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get$7(target, property, receiver || target); }

	function _superPropBase$7(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf$a(object); if (object === null) break; } return object; }

	function _getPrototypeOf$a(o) { _getPrototypeOf$a = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf$a(o); }

	var GscapeToggle =
	/*#__PURE__*/
	function (_GscapeWidget) {
	  _inherits$a(GscapeToggle, _GscapeWidget);

	  _createClass$i(GscapeToggle, null, [{
	    key: "properties",
	    get: function get() {
	      return {
	        state: Boolean,
	        disabled: Boolean,
	        label: String,
	        key: String,
	        checked: Boolean
	      };
	    }
	  }, {
	    key: "styles",
	    get: function get() {
	      var super_styles = _get$7(_getPrototypeOf$a(GscapeToggle), "styles", this);

	      var colors = super_styles[1];
	      return css(_templateObject$9(), colors.primary, colors.secondary);
	    }
	  }]);

	  function GscapeToggle(key, state, disabled, label, onToggle) {
	    var _this;

	    var inverse_mode = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;

	    _classCallCheck$j(this, GscapeToggle);

	    _this = _possibleConstructorReturn$a(this, _getPrototypeOf$a(GscapeToggle).call(this, false, false));
	    _this.key = key || ''; // always set inverse before state

	    _this.inverse = inverse_mode;
	    _this.state = state || false;
	    _this.disabled = disabled || false;
	    _this.onToggle = onToggle || {};
	    _this.label = label || '';
	    return _this;
	  }

	  _createClass$i(GscapeToggle, [{
	    key: "render",
	    value: function render() {
	      return html$1(_templateObject2$7(), this.key, this.checked, this.disabled, this.clickHandler, this.label);
	    }
	  }, {
	    key: "clickHandler",
	    value: function clickHandler(e) {
	      this.onToggle(e);
	    }
	  }, {
	    key: "updated",
	    value: function updated(a) {
	      // force toggle to change its visual state
	      // this should be unnecessary: see issue 
	      this.shadowRoot.querySelector("#".concat(this.key)).checked = this.checked;
	    }
	  }, {
	    key: "state",
	    set: function set(state) {
	      this._state = state;
	      var old_checked_val = this.checked;
	      this.checked = this.inverse ? !state : state; // trying to force an update, doesn't work
	      //this.requestUpdate('checked', old_checked_val)
	    },
	    get: function get() {
	      return this._state;
	    }
	  }]);

	  return GscapeToggle;
	}(GscapeWidget);
	customElements.define('gscape-toggle', GscapeToggle);

	function _typeof$b(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof$b = function _typeof(obj) { return typeof obj; }; } else { _typeof$b = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof$b(obj); }

	function _templateObject3$5() {
	  var data = _taggedTemplateLiteral$a(["\n              ", "\n            "]);

	  _templateObject3$5 = function _templateObject3() {
	    return data;
	  };

	  return data;
	}

	function _templateObject2$8() {
	  var data = _taggedTemplateLiteral$a(["\n      ", "\n      \n      <div class=\"widget-body hide gscape-panel\">\n        <div class=\"gscape-panel-title\">Filters</div>\n\n        <div class=\"filters-wrapper\">\n          ", "\n        </div>\n      </div>\n    "]);

	  _templateObject2$8 = function _templateObject2() {
	    return data;
	  };

	  return data;
	}

	function _templateObject$a() {
	  var data = _taggedTemplateLiteral$a(["\n        :host {\n          bottom:10px;\n          left:10px;\n        }\n\n        gscape-button{\n          position: static;\n        }\n\n        gscape-toggle[first]{\n          justify-content: center;\n          border-bottom: 1px solid #ccc;\n          margin-bottom: 10px;\n          padding: 10px;\n        }\n      "]);

	  _templateObject$a = function _templateObject() {
	    return data;
	  };

	  return data;
	}

	function _taggedTemplateLiteral$a(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

	function _classCallCheck$k(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn$b(self, call) { if (call && (_typeof$b(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized$b(self); }

	function _assertThisInitialized$b(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

	function _defineProperties$j(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

	function _createClass$j(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties$j(Constructor.prototype, protoProps); if (staticProps) _defineProperties$j(Constructor, staticProps); return Constructor; }

	function _inherits$b(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf$b(subClass, superClass); }

	function _setPrototypeOf$b(o, p) { _setPrototypeOf$b = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf$b(o, p); }

	function _get$8(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get$8 = Reflect.get; } else { _get$8 = function _get(target, property, receiver) { var base = _superPropBase$8(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get$8(target, property, receiver || target); }

	function _superPropBase$8(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf$b(object); if (object === null) break; } return object; }

	function _getPrototypeOf$b(o) { _getPrototypeOf$b = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf$b(o); }

	var GscapeFilters =
	/*#__PURE__*/
	function (_GscapeWidget) {
	  _inherits$b(GscapeFilters, _GscapeWidget);

	  _createClass$j(GscapeFilters, null, [{
	    key: "properties",
	    get: function get() {
	      return {
	        filters: {
	          type: Object,
	          hasChanged: function hasChanged(newVal, oldVal) {
	            if (!oldVal) return true;
	            Object.keys(newVal).map(function (key) {
	              if (newVal[key].active != oldVal[key].active || newVal[key].disabled != oldVal[key].disabled) return true;
	            });
	            return false;
	          }
	        }
	      };
	    }
	  }, {
	    key: "styles",
	    get: function get() {
	      var super_styles = _get$8(_getPrototypeOf$b(GscapeFilters), "styles", this);

	      var colors = super_styles[1];
	      return [super_styles[0], css(_templateObject$a())];
	    }
	  }]);

	  function GscapeFilters(filters) {
	    var _this;

	    _classCallCheck$k(this, GscapeFilters);

	    _this = _possibleConstructorReturn$b(this, _getPrototypeOf$b(GscapeFilters).call(this, false, true));
	    _this.filters = filters;
	    _this.btn = new GscapeButton('filter_list');
	    _this.btn.onClick = _this.toggleBody.bind(_assertThisInitialized$b(_this));
	    _this.onFilterOn = null;
	    _this.onFilterOff = null;
	    return _this;
	  }

	  _createClass$j(GscapeFilters, [{
	    key: "render",
	    value: function render() {
	      var _this2 = this;

	      return html$1(_templateObject2$8(), this.btn, Object.keys(this.filters).map(function (key) {
	        var filter = _this2.filters[key];
	        var toggle = {};
	        /**
	         * filter toggles work in inverse mode
	         *  checked => filter not active
	         *  unchecked => filter active
	         * 
	         * we invert the visual behaviour of a toggle passing the last flag setted to true
	         * the active boolean will represent the filter state, not the visual state.
	         */

	        if (key == 'all') {
	          toggle = new GscapeToggle(key, filter.active, filter.disabled, filter.label, _this2.toggleFilter.bind(_this2));
	          toggle.setAttribute('first', 'true');
	        } else {
	          toggle = new GscapeToggle(key, filter.active, filter.disabled, filter.label, _this2.toggleFilter.bind(_this2), true);
	        }

	        return html$1(_templateObject3$5(), toggle);
	      }));
	    }
	  }, {
	    key: "toggleFilter",
	    value: function toggleFilter(e) {
	      var _this3 = this;

	      var toggle = e.target;
	      this.filters[toggle.id].active = !this.filters[toggle.id].active;

	      if (toggle.id == 'attributes') {
	        this.filters.value_domain.disabled = this.filters.attributes.active;
	      } // if 'all' is toggled, it affect all other filters


	      if (toggle.id == 'all') {
	        Object.keys(this.filters).map(function (key) {
	          if (key != 'all' && !_this3.filters[key].disbaled) {
	            _this3.filters[key].active = _this3.filters.all.active;
	            /** 
	             * if the actual filter is value-domain it means it's not disabled (see previous if condition)
	             * but when filter all is active filter value-domain must be disabled, let's disable it
	             */

	            if (key == 'value_domain') _this3.filters[key].disabled = _this3.filters.all.active;
	            _this3.filters[key].active ? _this3.onFilterOn(_this3.filters[key]) : _this3.onFilterOff(_this3.filters[key]);
	          }
	        });
	      } else {
	        // if one filter get deactivated while the 'all' filter is active
	        // then make the 'all' toggle deactivated
	        if (!this.filters[toggle.id].active && this.filters.all.active) {
	          this.filters.all.active = false;
	        }

	        this.filters[toggle.id].active ? this.onFilterOn(this.filters[toggle.id]) : this.onFilterOff(this.filters[toggle.id]);
	      }

	      this.updateTogglesState();
	    }
	  }, {
	    key: "updateTogglesState",
	    value: function updateTogglesState() {
	      var _this4 = this;

	      var toggles = this.shadowRoot.querySelectorAll("gscape-toggle");
	      var is_activated = false;
	      toggles.forEach(function (toggle) {
	        toggle.state = _this4.filters[toggle.key].active;
	        toggle.disabled = _this4.filters[toggle.key].disabled;
	        if (toggle.state) is_activated = true;
	      });
	      this.btn.active = is_activated;
	      this.btn.requestUpdate();
	    }
	  }]);

	  return GscapeFilters;
	}(GscapeWidget);
	customElements.define('gscape-filters', GscapeFilters);

	function _typeof$c(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof$c = function _typeof(obj) { return typeof obj; }; } else { _typeof$c = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof$c(obj); }

	function _templateObject3$6() {
	  var data = _taggedTemplateLiteral$b(["\n                <tr>\n                  <th>", "</th>\n                  <td>", "</td>\n                </tr> \n              "]);

	  _templateObject3$6 = function _templateObject3() {
	    return data;
	  };

	  return data;
	}

	function _toConsumableArray$3(arr) { return _arrayWithoutHoles$3(arr) || _iterableToArray$3(arr) || _nonIterableSpread$3(); }

	function _nonIterableSpread$3() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

	function _iterableToArray$3(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

	function _arrayWithoutHoles$3(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

	function _templateObject2$9() {
	  var data = _taggedTemplateLiteral$b(["\n      ", "\n\n      <div class=\"widget-body hide gscape-panel\">\n        <div class=\"gscape-panel-title\">Ontology Info</div>\n\n        <table class=\"details_table\">\n          <tr>\n            <th>Name</th>\n            <td>", "</td>\n          </tr>\n          <tr>\n            <th>Version</th>\n            <td>", "</td>\n          </tr>\n        </table>\n\n        \n        <table class=\"iri-dict details_table\">\n          <tr><th colspan=\"2\" class=\"table-header\">IRI Prefixes Dictionary</th></tr>\n\n          ", "\n        </table> \n      </div>\n    "]);

	  _templateObject2$9 = function _templateObject2() {
	    return data;
	  };

	  return data;
	}

	function _templateObject$b() {
	  var data = _taggedTemplateLiteral$b(["\n        :host {\n          bottom:10px;\n          left:52px;\n        }\n\n        gscape-button {\n          position: static;\n        }\n\n        .iri-dict th.table-header{\n          text-align: center;          \n          padding: 12px;\n          font-weight: bold;\n          border-right: 0;\n          color: var(--theme-gscape-on-primary, ", ");    \n        }\n\n        .iri-dict th {\n          color: var(--theme-gscape-on-primary, ", ");\n          border-right: solid 1px var(--theme-gscape-shadows, ", ");\n          text-align: left;\n          font-weight: normal;\n        }\n      "]);

	  _templateObject$b = function _templateObject() {
	    return data;
	  };

	  return data;
	}

	function _taggedTemplateLiteral$b(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

	function _classCallCheck$l(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn$c(self, call) { if (call && (_typeof$c(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized$c(self); }

	function _assertThisInitialized$c(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

	function _defineProperties$k(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

	function _createClass$k(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties$k(Constructor.prototype, protoProps); if (staticProps) _defineProperties$k(Constructor, staticProps); return Constructor; }

	function _inherits$c(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf$c(subClass, superClass); }

	function _setPrototypeOf$c(o, p) { _setPrototypeOf$c = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf$c(o, p); }

	function _get$9(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get$9 = Reflect.get; } else { _get$9 = function _get(target, property, receiver) { var base = _superPropBase$9(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get$9(target, property, receiver || target); }

	function _superPropBase$9(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf$c(object); if (object === null) break; } return object; }

	function _getPrototypeOf$c(o) { _getPrototypeOf$c = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf$c(o); }

	var GscapeOntologyInfo =
	/*#__PURE__*/
	function (_GscapeWidget) {
	  _inherits$c(GscapeOntologyInfo, _GscapeWidget);

	  _createClass$k(GscapeOntologyInfo, null, [{
	    key: "styles",
	    get: function get() {
	      var super_styles = _get$9(_getPrototypeOf$c(GscapeOntologyInfo), "styles", this);

	      var colors = super_styles[1];
	      return [super_styles[0], css(_templateObject$b(), colors.on_primary, colors.on_primary, colors.shadows)];
	    }
	  }]);

	  function GscapeOntologyInfo(ontology) {
	    var _this;

	    _classCallCheck$l(this, GscapeOntologyInfo);

	    _this = _possibleConstructorReturn$c(this, _getPrototypeOf$c(GscapeOntologyInfo).call(this, false, true));
	    _this.ontology = ontology;
	    _this.btn = new GscapeButton('info_outline');
	    _this.btn.onClick = _this.toggleBody.bind(_assertThisInitialized$c(_this));
	    return _this;
	  }

	  _createClass$k(GscapeOntologyInfo, [{
	    key: "render",
	    value: function render() {
	      return html$1(_templateObject2$9(), this.btn, this.ontology.name, this.ontology.version, _toConsumableArray$3(this.ontology.iriSet).map(function (iri) {
	        if (!iri.isStandard()) {
	          return html$1(_templateObject3$6(), iri.prefixes[0], iri.value);
	        }
	      }));
	    }
	  }]);

	  return GscapeOntologyInfo;
	}(GscapeWidget);
	customElements.define('gscape-ontology-info', GscapeOntologyInfo);

	function _typeof$d(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof$d = function _typeof(obj) { return typeof obj; }; } else { _typeof$d = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof$d(obj); }

	function _templateObject2$a() {
	  var data = _taggedTemplateLiteral$c(["\n      <div class=\"widget-body\" hide>\n        <div class=\"owl-text\"></div>\n      </div>\n      <gscape-head title=\"Owl Translation\"></gscape-head>\n    "]);

	  _templateObject2$a = function _templateObject2() {
	    return data;
	  };

	  return data;
	}

	function _templateObject$c() {
	  var data = _taggedTemplateLiteral$c(["\n        :host {\n          left:50%;\n          bottom:10px;\n          transform: translate(-50%, 0);\n        }\n\n        gscape-head {\n          --title-text-align: center;\n          --title-width: 100%;\n        }\n\n        .widget-body {\n          margin:0;\n          border-top: none;\n          border-bottom: 1px solid var(--theme-gscape-shadows, ", ");\n          border-bottom-left-radius:0;\n          border-bottom-right-radius:0;\n        }\n\n        .owl-text {\n          padding: 15px 10px;\n          font-family: \"Lucida Console\", Monaco, monospace;\n          overflow: auto;\n          white-space: nowrap;\n          line-height: 1.5;\n        }\n\n        .owl_concept{\n          color:#859900;\n        }\n        \n        .owl_role{\n          color:#268bd2;\n        }\n        \n        .owl_attribute{\n          color:#b58900;\n        }\n        \n        .owl_value-domain{\n          color: #2aa198;\n        }\n        \n        .owl_individual{\n          color: #6c71c4;\n        }\n        \n        .owl_value {\n          color: #d33682;\n        }\n        \n        .axiom_predicate_prefix{\n          color:#cb4b16;\n        }\n        \n        .owl_error {\n          color: var(--theme-gscape-error, ", ");\n        }\n        \n        .axiom_predefinite_obj {\n          color: #00c0a0;\n        }\n        \n      "]);

	  _templateObject$c = function _templateObject() {
	    return data;
	  };

	  return data;
	}

	function _taggedTemplateLiteral$c(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

	function _classCallCheck$m(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn$d(self, call) { if (call && (_typeof$d(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized$d(self); }

	function _assertThisInitialized$d(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

	function _defineProperties$l(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

	function _createClass$l(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties$l(Constructor.prototype, protoProps); if (staticProps) _defineProperties$l(Constructor, staticProps); return Constructor; }

	function _inherits$d(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf$d(subClass, superClass); }

	function _setPrototypeOf$d(o, p) { _setPrototypeOf$d = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf$d(o, p); }

	function _get$a(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get$a = Reflect.get; } else { _get$a = function _get(target, property, receiver) { var base = _superPropBase$a(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get$a(target, property, receiver || target); }

	function _superPropBase$a(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf$d(object); if (object === null) break; } return object; }

	function _getPrototypeOf$d(o) { _getPrototypeOf$d = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf$d(o); }

	var GscapeOwlTranslator =
	/*#__PURE__*/
	function (_GscapeWidget) {
	  _inherits$d(GscapeOwlTranslator, _GscapeWidget);

	  _createClass$l(GscapeOwlTranslator, null, [{
	    key: "properties",
	    get: function get() {
	      return {
	        _owl_text: String
	      };
	    }
	  }, {
	    key: "styles",
	    get: function get() {
	      var super_styles = _get$a(_getPrototypeOf$d(GscapeOwlTranslator), "styles", this);

	      var colors = super_styles[1];
	      return [_get$a(_getPrototypeOf$d(GscapeOwlTranslator), "styles", this)[0], css(_templateObject$c(), colors.shadows, colors.error)];
	    }
	  }]);

	  function GscapeOwlTranslator() {
	    var _this;

	    _classCallCheck$m(this, GscapeOwlTranslator);

	    _this = _possibleConstructorReturn$d(this, _getPrototypeOf$d(GscapeOwlTranslator).call(this, false, true));
	    _this._owl_text = '';
	    return _this;
	  }

	  _createClass$l(GscapeOwlTranslator, [{
	    key: "render",
	    value: function render() {
	      return html$1(_templateObject2$a());
	    }
	  }, {
	    key: "updated",
	    value: function updated() {
	      this.shadowRoot.querySelector('.owl-text').innerHTML = this.owl_text;
	      this.shadowRoot.querySelector('.owl-text').classList.remove('hide');
	    }
	  }, {
	    key: "blur",
	    value: function blur() {
	      this.hide();
	    }
	  }, {
	    key: "firstUpdated",
	    value: function firstUpdated() {
	      _get$a(_getPrototypeOf$d(GscapeOwlTranslator.prototype), "firstUpdated", this).call(this);

	      this.hide(); // invert header's dropdown icon behaviour

	      this.header.collapsed = true;
	    }
	  }, {
	    key: "owl_text",
	    set: function set(text) {
	      this._owl_text = text;
	    },
	    get: function get() {
	      return this._owl_text;
	    }
	  }]);

	  return GscapeOwlTranslator;
	}(GscapeWidget);
	customElements.define('gscape-owl-translator', GscapeOwlTranslator);

	function _typeof$e(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof$e = function _typeof(obj) { return typeof obj; }; } else { _typeof$e = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof$e(obj); }

	function _templateObject2$b() {
	  var data = _taggedTemplateLiteral$d(["\n      ", "\n      <div id=\"hr\"></div>\n      ", "\n    "]);

	  _templateObject2$b = function _templateObject2() {
	    return data;
	  };

	  return data;
	}

	function _templateObject$d() {
	  var data = _taggedTemplateLiteral$d(["\n        :host {\n          position: absolute;\n          bottom:52px;\n          right:10px;\n        }\n\n        gscape-button{\n          position: static;\n          box-shadow: initial;\n        }\n\n        #hr {\n          height:1px;\n          width:90%;\n          margin: 2px auto 0 auto;\n          background-color: var(--theme-gscape-shadows, ", ")\n        }\n\n      "]);

	  _templateObject$d = function _templateObject() {
	    return data;
	  };

	  return data;
	}

	function _taggedTemplateLiteral$d(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

	function _classCallCheck$n(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn$e(self, call) { if (call && (_typeof$e(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized$e(self); }

	function _assertThisInitialized$e(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

	function _defineProperties$m(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

	function _createClass$m(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties$m(Constructor.prototype, protoProps); if (staticProps) _defineProperties$m(Constructor, staticProps); return Constructor; }

	function _inherits$e(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf$e(subClass, superClass); }

	function _setPrototypeOf$e(o, p) { _setPrototypeOf$e = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf$e(o, p); }

	function _get$b(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get$b = Reflect.get; } else { _get$b = function _get(target, property, receiver) { var base = _superPropBase$b(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get$b(target, property, receiver || target); }

	function _superPropBase$b(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf$e(object); if (object === null) break; } return object; }

	function _getPrototypeOf$e(o) { _getPrototypeOf$e = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf$e(o); }

	var GscapeZoomTools =
	/*#__PURE__*/
	function (_GscapeWidget) {
	  _inherits$e(GscapeZoomTools, _GscapeWidget);

	  _createClass$m(GscapeZoomTools, null, [{
	    key: "styles",
	    get: function get() {
	      var super_styles = _get$b(_getPrototypeOf$e(GscapeZoomTools), "styles", this);

	      var colors = super_styles[1];
	      return [super_styles[0], css(_templateObject$d(), colors.shadows)];
	    }
	  }]);

	  function GscapeZoomTools() {
	    var _this;

	    _classCallCheck$n(this, GscapeZoomTools);

	    _this = _possibleConstructorReturn$e(this, _getPrototypeOf$e(GscapeZoomTools).call(this, false, true));
	    _this.btn_plus = new GscapeButton('add');
	    _this.btn_minus = new GscapeButton('remove');
	    _this._onZoomIn = null;
	    _this._onZoomOut = null;
	    return _this;
	  }

	  _createClass$m(GscapeZoomTools, [{
	    key: "render",
	    value: function render() {
	      return html$1(_templateObject2$b(), this.btn_plus, this.btn_minus);
	    }
	  }, {
	    key: "onZoomIn",
	    set: function set(f) {
	      this._onZoomIn = f;
	      this.btn_plus.onClick = this._onZoomIn;
	    }
	  }, {
	    key: "onZoomOut",
	    set: function set(f) {
	      this._onZoomOut = f;
	      this.btn_minus.onClick = this._onZoomOut;
	    }
	  }]);

	  return GscapeZoomTools;
	}(GscapeWidget);
	customElements.define('gscape-zoom-tools', GscapeZoomTools);

	function getGraphStyle(theme) {
	  return [{
	    selector: 'node',
	    style: {
	      'height': 'data(height)',
	      'width': 'data(width)',
	      'background-color': theme.node_bg,
	      'shape': 'data(shape)',
	      'border-width': 1,
	      'border-color': theme.node_border,
	      'border-style': 'solid',
	      'font-size': 12,
	      'color': theme.label_color
	    }
	  }, {
	    selector: '[label]',
	    style: {
	      'label': 'data(label)',
	      'text-margin-x': 'data(labelXpos)',
	      'text-margin-y': 'data(labelYpos)',
	      'text-wrap': 'wrap'
	    }
	  }, {
	    selector: 'edge',
	    style: {
	      'width': 2,
	      'line-color': theme.edge,
	      'target-arrow-color': theme.edge,
	      'source-arrow-color': theme.edge,
	      'curve-style': 'bezier',
	      'arrow-scale': 1.3
	    }
	  }, {
	    selector: 'edge[type = "inclusion"], [type = "membership"], edge.inclusion',
	    style: {
	      'line-style': 'solid',
	      'target-arrow-shape': 'triangle',
	      'target-arrow-fill': 'filled'
	    }
	  }, {
	    selector: 'edge.hierarchy',
	    style: {
	      'width': 6,
	      'target-arrow-fill': 'hollow'
	    }
	  }, {
	    selector: 'edge.disjoint',
	    style: {
	      'target-arrow-fill': 'filled'
	    }
	  }, {
	    selector: 'edge[type = "input"]',
	    style: {
	      'line-style': 'dashed',
	      'target-arrow-shape': 'diamond',
	      'target-arrow-fill': 'hollow'
	    }
	  }, {
	    selector: 'edge[type = "easy_input"]',
	    style: {
	      'line-style': 'solid'
	    }
	  }, {
	    selector: 'edge[type = "equivalence"]',
	    style: {
	      'line-style': 'solid',
	      'source-arrow-shape': 'triangle',
	      'source-arrow-fill': 'filled',
	      'target-arrow-shape': 'triangle',
	      'target-arrow-fill': 'filled'
	    }
	  }, {
	    selector: '[segment_distances]',
	    style: {
	      'curve-style': 'segments',
	      'segment-distances': 'data(segment_distances)',
	      'segment-weights': 'data(segment_weights)',
	      'edge-distances': 'node-position'
	    }
	  }, {
	    selector: '[source_endpoint]',
	    style: {
	      'source-endpoint': 'data(source_endpoint)'
	    }
	  }, {
	    selector: '[target_endpoint]',
	    style: {
	      'target-endpoint': 'data(target_endpoint)'
	    }
	  }, {
	    selector: '[?functional][!inverseFunctional]',
	    style: {
	      'border-width': 5,
	      'border-color': theme.node_border,
	      'border-style': 'double'
	    }
	  }, {
	    selector: '[?inverseFunctional][!functional]',
	    style: {
	      'border-width': 4,
	      'border-color': theme.node_border,
	      'border-style': 'solid'
	    }
	  }, {
	    selector: '[edge_label]',
	    style: {
	      'label': 'data(edge_label)',
	      'font-size': 10,
	      'text-rotation': 'autorotate',
	      'text-margin-y': -10
	    }
	  }, {
	    selector: '[target_label]',
	    style: {
	      'target-label': 'data(target_label)'
	    }
	  }, {
	    selector: '[source_label]',
	    style: {
	      'source-label': 'data(source_label)'
	    }
	  }, {
	    selector: '[source_label],[target_label]',
	    style: {
	      'font-size': 15,
	      'target-text-offset': 20
	    }
	  }, {
	    selector: '[edge_label],[source_label],[target_label],[text_background]',
	    style: {
	      'text-background-color': theme.background,
	      'text-background-opacity': 1,
	      'text-background-shape': 'roundrectangle',
	      'text-background-padding': 2
	    }
	  }, {
	    selector: '[shape_points]',
	    style: {
	      'shape-polygon-points': 'data(shape_points)'
	    }
	  }, {
	    selector: '.filtered',
	    style: {
	      'display': 'none'
	    }
	  }, {
	    selector: '.facet',
	    style: {
	      'background-opacity': 0
	    }
	  }, {
	    selector: '.hidden',
	    style: {
	      'visibility': 'hidden'
	    }
	  }, {
	    selector: '.no_border',
	    style: {
	      'border-width': 0
	    }
	  }, {
	    selector: '.no_overlay',
	    style: {
	      'overlay-opacity': 0,
	      'overlay-padding': 0
	    }
	  }, {
	    selector: '.concept',
	    style: {
	      'background-color': theme.concept,
	      'border-color': theme.concept_dark
	    }
	  }, {
	    selector: '.role, .fake-triangle',
	    style: {
	      'background-color': theme.role,
	      'border-color': theme.role_dark
	    }
	  }, {
	    selector: '.attribute',
	    style: {
	      'background-color': theme.attribute,
	      'border-color': theme.attribute_dark,
	      'text-background-color': theme.background,
	      'text-background-opacity': 1
	    }
	  }, {
	    selector: 'edge.range',
	    style: {
	      'source-arrow-shape': 'square',
	      'source-arrow-fill': 'filled',
	      'target-arrow-shape': 'none'
	    }
	  }, {
	    selector: 'edge.domain',
	    style: {
	      'target-arrow-shape': 'square',
	      'target-arrow-fill': 'hollow',
	      'source-arrow-shape': 'none'
	    }
	  }, {
	    selector: 'edge.attribute',
	    style: {
	      'line-color': theme.attribute_dark,
	      'source-arrow-shape': 'none',
	      'target-arrow-shape': 'none'
	    }
	  }, {
	    selector: 'edge.role',
	    style: {
	      'line-color': theme.role_dark,
	      'source-arrow-color': theme.role_dark,
	      'target-arrow-color': theme.role_dark
	    }
	  }, {
	    selector: '.individual',
	    style: {
	      'background-color': theme.individual,
	      'border-color': theme.individual_dark
	    }
	  }, {
	    selector: '[type = "range-restriction"], [type = "disjoint-union"]',
	    style: {
	      'background-color': theme.node_bg_contrast
	    }
	  }, {
	    // the right border part of functional && inverseFunctional roles
	    selector: '.fake-triangle-right',
	    style: {
	      'background-color': theme.role_dark
	    }
	  }, //-----------------------------------------------------------
	  // selected selector always last
	  {
	    selector: ':selected',
	    style: {
	      'overlay-color': theme.secondary,
	      'overlay-opacity': 0.2,
	      'z-index': '100'
	    }
	  }];
	}

	function _classCallCheck$o(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _defineProperties$n(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

	function _createClass$n(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties$n(Constructor.prototype, protoProps); if (staticProps) _defineProperties$n(Constructor, staticProps); return Constructor; }

	var GrapholscapeRenderer =
	/*#__PURE__*/
	function () {
	  function GrapholscapeRenderer() {
	    var _this = this;

	    var container = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

	    _classCallCheck$o(this, GrapholscapeRenderer);

	    this.actual_diagram = null;
	    var cy_container = document.createElement('div');
	    cy_container.style.width = '100%';
	    cy_container.style.height = '100%';
	    cy_container.style.position = 'absolute';
	    if (container) container.insertBefore(cy_container, container.firstChild);
	    this.cy = cytoscape$1({
	      container: cy_container,
	      autoungrabify: true,
	      wheelSensitivity: 0.4,
	      maxZoom: 2.5,
	      minZoom: 0.02,
	      layout: {
	        name: 'preset'
	      }
	    });
	    this.cy.on('select', 'node', function (e) {
	      _this.onNodeSelection(e.target.data('id_xml'), e.target.data('diagram_id'));
	    });
	    this.cy.on('select', 'edge', function (e) {
	      _this.onEdgeSelection(e.target.data('id_xml'), e.target.data('diagram_id'));
	    });
	    this.cy.on('tap', function (evt) {
	      if (evt.target === _this.cy) {
	        _this.onBackgroundClick();
	      }
	    });
	    this.cy.on('mouseover', '*', function (e) {
	      _this.cy.container().style.cursor = 'pointer';
	    });
	    this.cy.on('mouseout', '*', function (e) {
	      _this.cy.container().style.cursor = 'inherit';
	    });
	  }

	  _createClass$n(GrapholscapeRenderer, [{
	    key: "mount",
	    value: function mount(container) {
	      //container.insertBefore(this.cy.container(), container.firstChild)
	      // force refresh
	      this.cy.container().style.display = 'block'; //container.setAttribute('id', 'cy')
	      //this.cy.mount(container)
	    }
	  }, {
	    key: "unmount",
	    value: function unmount() {
	      this.cy.container().style.display = 'none'; //this.cy.container().parentElement.removeChild(this.cy.container())
	      //this.cy.unmount()
	    }
	  }, {
	    key: "centerOnNode",
	    value: function centerOnNode(node_id, zoom) {
	      var node = this.cy.getElementById(node_id);

	      if (node) {
	        this.centerOnPosition(node.position('x'), node.position('y'), zoom);
	        this.cy.$(':selected').unselect();
	        node.select();
	      }
	    }
	  }, {
	    key: "centerOnPosition",
	    value: function centerOnPosition(x_pos, y_pos) {
	      var zoom = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.cy.zoom();
	      this.cy.reset();
	      var offset_x = this.cy.width() / 2;
	      var offset_y = this.cy.height() / 2;
	      x_pos -= offset_x;
	      y_pos -= offset_y;
	      this.cy.pan({
	        x: -x_pos,
	        y: -y_pos
	      });
	      this.cy.zoom({
	        level: zoom,
	        renderedPosition: {
	          x: offset_x,
	          y: offset_y
	        }
	      });
	    }
	  }, {
	    key: "centerOnRenderedPosition",
	    value: function centerOnRenderedPosition(x_pos, y_pos) {
	      var zoom = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.cy.zoom();
	      this.cy.viewport({
	        zoom: zoom,
	        pan: {
	          x: x_pos,
	          y: y_pos
	        }
	      });
	    }
	  }, {
	    key: "resetView",
	    value: function resetView() {
	      this.cy.fit();
	    }
	  }, {
	    key: "drawDiagram",
	    value: function drawDiagram(diagram) {
	      this.cy.remove('*');
	      this.cy.add(diagram.nodes);
	      this.cy.add(diagram.edges);
	      this.cy.fit();
	      this.actual_diagram = diagram.id;
	    }
	  }, {
	    key: "zoomIn",
	    value: function zoomIn() {
	      this.cy.zoom({
	        level: this.cy.zoom() + 0.08,
	        renderedPosition: {
	          x: this.cy.width() / 2,
	          y: this.cy.height() / 2
	        }
	      });
	    }
	  }, {
	    key: "zoomOut",
	    value: function zoomOut() {
	      this.cy.zoom({
	        level: this.cy.zoom() - 0.08,
	        renderedPosition: {
	          x: this.cy.width() / 2,
	          y: this.cy.height() / 2
	        }
	      });
	    }
	  }, {
	    key: "filter",
	    value: function filter(_filter, cy_instance) {
	      var _this2 = this;

	      var cy = cy_instance || this.cy;
	      var selector = "".concat(_filter.selector, ", .").concat(_filter["class"]);
	      cy.$(selector).forEach(function (element) {
	        _this2.filterElem(element, _filter["class"], cy);
	      });
	    }
	  }, {
	    key: "filterElem",
	    value: function filterElem(element, filter_class, cy_instance) {
	      var _this3 = this;

	      var cy = cy_instance || this.cy;
	      element.addClass('filtered ' + filter_class); // Filter fake nodes!

	      cy.nodes("[parent_node_id = \"".concat(element.id(), "\"]")).addClass('filtered ' + filter_class); // ARCHI IN USCITA
	      //var selector = `[source = "${element.data('id')}"]`

	      element.outgoers('edge').forEach(function (e) {
	        var neighbour = e.target(); // if inclusion[IN] + equivalence[IN] + all[OUT] == 0 => filter!!

	        var number_edges_in_out = getNumberEdgesInOut(neighbour);

	        if (!e.target().hasClass('filtered') && (number_edges_in_out <= 0 || e.data('type') === 'input')) {
	          _this3.filterElem(e.target(), filter_class);
	        }
	      }); // ARCHI IN ENTRATA

	      element.incomers('edge').forEach(function (e) {
	        var neighbour = e.source(); // if Isa[IN] + equivalence[IN] + all[OUT] == 0 => filter!!

	        var number_edges_in_out = getNumberEdgesInOut(neighbour);

	        if (!e.source().hasClass('filtered') && number_edges_in_out === 0) {
	          _this3.filterElem(e.source(), filter_class);
	        }
	      });

	      function getNumberEdgesInOut(neighbour) {
	        var count = neighbour.outgoers('edge').size() + neighbour.incomers('edge[type != "input"]').size();
	        neighbour.outgoers().forEach(function (e) {
	          if (e.target().hasClass('filtered')) {
	            count--;
	          }
	        });
	        neighbour.incomers('[type != "input"]').forEach(function (e) {
	          if (e.source().hasClass('filtered')) {
	            count--;
	          }
	        });
	        return count;
	      }
	    }
	  }, {
	    key: "unfilter",
	    value: function unfilter(filter, cy_instance) {
	      var selector = "".concat(filter.selector, ", .").concat(filter["class"]);
	      var cy = cy_instance || this.cy;
	      cy.$(selector).removeClass('filtered');
	      cy.$(selector).removeClass(filter["class"]);
	    }
	  }, {
	    key: "setTheme",
	    value: function setTheme(theme) {
	      this.cy.style(getGraphStyle(theme));
	    }
	  }, {
	    key: "getActualPosition",
	    value: function getActualPosition() {
	      return {
	        x: this.cy.pan().x,
	        y: this.cy.pan().y,
	        zoom: this.cy.zoom()
	      };
	    }
	  }]);

	  return GrapholscapeRenderer;
	}();

	var powergraph = createCommonjsModule(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	var PowerEdge = (function () {
	    function PowerEdge(source, target, type) {
	        this.source = source;
	        this.target = target;
	        this.type = type;
	    }
	    return PowerEdge;
	}());
	exports.PowerEdge = PowerEdge;
	var Configuration = (function () {
	    function Configuration(n, edges, linkAccessor, rootGroup) {
	        var _this = this;
	        this.linkAccessor = linkAccessor;
	        this.modules = new Array(n);
	        this.roots = [];
	        if (rootGroup) {
	            this.initModulesFromGroup(rootGroup);
	        }
	        else {
	            this.roots.push(new ModuleSet());
	            for (var i = 0; i < n; ++i)
	                this.roots[0].add(this.modules[i] = new Module(i));
	        }
	        this.R = edges.length;
	        edges.forEach(function (e) {
	            var s = _this.modules[linkAccessor.getSourceIndex(e)], t = _this.modules[linkAccessor.getTargetIndex(e)], type = linkAccessor.getType(e);
	            s.outgoing.add(type, t);
	            t.incoming.add(type, s);
	        });
	    }
	    Configuration.prototype.initModulesFromGroup = function (group) {
	        var moduleSet = new ModuleSet();
	        this.roots.push(moduleSet);
	        for (var i = 0; i < group.leaves.length; ++i) {
	            var node = group.leaves[i];
	            var module = new Module(node.id);
	            this.modules[node.id] = module;
	            moduleSet.add(module);
	        }
	        if (group.groups) {
	            for (var j = 0; j < group.groups.length; ++j) {
	                var child = group.groups[j];
	                var definition = {};
	                for (var prop in child)
	                    if (prop !== "leaves" && prop !== "groups" && child.hasOwnProperty(prop))
	                        definition[prop] = child[prop];
	                moduleSet.add(new Module(-1 - j, new LinkSets(), new LinkSets(), this.initModulesFromGroup(child), definition));
	            }
	        }
	        return moduleSet;
	    };
	    Configuration.prototype.merge = function (a, b, k) {
	        if (k === void 0) { k = 0; }
	        var inInt = a.incoming.intersection(b.incoming), outInt = a.outgoing.intersection(b.outgoing);
	        var children = new ModuleSet();
	        children.add(a);
	        children.add(b);
	        var m = new Module(this.modules.length, outInt, inInt, children);
	        this.modules.push(m);
	        var update = function (s, i, o) {
	            s.forAll(function (ms, linktype) {
	                ms.forAll(function (n) {
	                    var nls = n[i];
	                    nls.add(linktype, m);
	                    nls.remove(linktype, a);
	                    nls.remove(linktype, b);
	                    a[o].remove(linktype, n);
	                    b[o].remove(linktype, n);
	                });
	            });
	        };
	        update(outInt, "incoming", "outgoing");
	        update(inInt, "outgoing", "incoming");
	        this.R -= inInt.count() + outInt.count();
	        this.roots[k].remove(a);
	        this.roots[k].remove(b);
	        this.roots[k].add(m);
	        return m;
	    };
	    Configuration.prototype.rootMerges = function (k) {
	        if (k === void 0) { k = 0; }
	        var rs = this.roots[k].modules();
	        var n = rs.length;
	        var merges = new Array(n * (n - 1));
	        var ctr = 0;
	        for (var i = 0, i_ = n - 1; i < i_; ++i) {
	            for (var j = i + 1; j < n; ++j) {
	                var a = rs[i], b = rs[j];
	                merges[ctr] = { id: ctr, nEdges: this.nEdges(a, b), a: a, b: b };
	                ctr++;
	            }
	        }
	        return merges;
	    };
	    Configuration.prototype.greedyMerge = function () {
	        for (var i = 0; i < this.roots.length; ++i) {
	            if (this.roots[i].modules().length < 2)
	                continue;
	            var ms = this.rootMerges(i).sort(function (a, b) { return a.nEdges == b.nEdges ? a.id - b.id : a.nEdges - b.nEdges; });
	            var m = ms[0];
	            if (m.nEdges >= this.R)
	                continue;
	            this.merge(m.a, m.b, i);
	            return true;
	        }
	    };
	    Configuration.prototype.nEdges = function (a, b) {
	        var inInt = a.incoming.intersection(b.incoming), outInt = a.outgoing.intersection(b.outgoing);
	        return this.R - inInt.count() - outInt.count();
	    };
	    Configuration.prototype.getGroupHierarchy = function (retargetedEdges) {
	        var _this = this;
	        var groups = [];
	        var root = {};
	        toGroups(this.roots[0], root, groups);
	        var es = this.allEdges();
	        es.forEach(function (e) {
	            var a = _this.modules[e.source];
	            var b = _this.modules[e.target];
	            retargetedEdges.push(new PowerEdge(typeof a.gid === "undefined" ? e.source : groups[a.gid], typeof b.gid === "undefined" ? e.target : groups[b.gid], e.type));
	        });
	        return groups;
	    };
	    Configuration.prototype.allEdges = function () {
	        var es = [];
	        Configuration.getEdges(this.roots[0], es);
	        return es;
	    };
	    Configuration.getEdges = function (modules, es) {
	        modules.forAll(function (m) {
	            m.getEdges(es);
	            Configuration.getEdges(m.children, es);
	        });
	    };
	    return Configuration;
	}());
	exports.Configuration = Configuration;
	function toGroups(modules, group, groups) {
	    modules.forAll(function (m) {
	        if (m.isLeaf()) {
	            if (!group.leaves)
	                group.leaves = [];
	            group.leaves.push(m.id);
	        }
	        else {
	            var g = group;
	            m.gid = groups.length;
	            if (!m.isIsland() || m.isPredefined()) {
	                g = { id: m.gid };
	                if (m.isPredefined())
	                    for (var prop in m.definition)
	                        g[prop] = m.definition[prop];
	                if (!group.groups)
	                    group.groups = [];
	                group.groups.push(m.gid);
	                groups.push(g);
	            }
	            toGroups(m.children, g, groups);
	        }
	    });
	}
	var Module = (function () {
	    function Module(id, outgoing, incoming, children, definition) {
	        if (outgoing === void 0) { outgoing = new LinkSets(); }
	        if (incoming === void 0) { incoming = new LinkSets(); }
	        if (children === void 0) { children = new ModuleSet(); }
	        this.id = id;
	        this.outgoing = outgoing;
	        this.incoming = incoming;
	        this.children = children;
	        this.definition = definition;
	    }
	    Module.prototype.getEdges = function (es) {
	        var _this = this;
	        this.outgoing.forAll(function (ms, edgetype) {
	            ms.forAll(function (target) {
	                es.push(new PowerEdge(_this.id, target.id, edgetype));
	            });
	        });
	    };
	    Module.prototype.isLeaf = function () {
	        return this.children.count() === 0;
	    };
	    Module.prototype.isIsland = function () {
	        return this.outgoing.count() === 0 && this.incoming.count() === 0;
	    };
	    Module.prototype.isPredefined = function () {
	        return typeof this.definition !== "undefined";
	    };
	    return Module;
	}());
	exports.Module = Module;
	function intersection(m, n) {
	    var i = {};
	    for (var v in m)
	        if (v in n)
	            i[v] = m[v];
	    return i;
	}
	var ModuleSet = (function () {
	    function ModuleSet() {
	        this.table = {};
	    }
	    ModuleSet.prototype.count = function () {
	        return Object.keys(this.table).length;
	    };
	    ModuleSet.prototype.intersection = function (other) {
	        var result = new ModuleSet();
	        result.table = intersection(this.table, other.table);
	        return result;
	    };
	    ModuleSet.prototype.intersectionCount = function (other) {
	        return this.intersection(other).count();
	    };
	    ModuleSet.prototype.contains = function (id) {
	        return id in this.table;
	    };
	    ModuleSet.prototype.add = function (m) {
	        this.table[m.id] = m;
	    };
	    ModuleSet.prototype.remove = function (m) {
	        delete this.table[m.id];
	    };
	    ModuleSet.prototype.forAll = function (f) {
	        for (var mid in this.table) {
	            f(this.table[mid]);
	        }
	    };
	    ModuleSet.prototype.modules = function () {
	        var vs = [];
	        this.forAll(function (m) {
	            if (!m.isPredefined())
	                vs.push(m);
	        });
	        return vs;
	    };
	    return ModuleSet;
	}());
	exports.ModuleSet = ModuleSet;
	var LinkSets = (function () {
	    function LinkSets() {
	        this.sets = {};
	        this.n = 0;
	    }
	    LinkSets.prototype.count = function () {
	        return this.n;
	    };
	    LinkSets.prototype.contains = function (id) {
	        var result = false;
	        this.forAllModules(function (m) {
	            if (!result && m.id == id) {
	                result = true;
	            }
	        });
	        return result;
	    };
	    LinkSets.prototype.add = function (linktype, m) {
	        var s = linktype in this.sets ? this.sets[linktype] : this.sets[linktype] = new ModuleSet();
	        s.add(m);
	        ++this.n;
	    };
	    LinkSets.prototype.remove = function (linktype, m) {
	        var ms = this.sets[linktype];
	        ms.remove(m);
	        if (ms.count() === 0) {
	            delete this.sets[linktype];
	        }
	        --this.n;
	    };
	    LinkSets.prototype.forAll = function (f) {
	        for (var linktype in this.sets) {
	            f(this.sets[linktype], Number(linktype));
	        }
	    };
	    LinkSets.prototype.forAllModules = function (f) {
	        this.forAll(function (ms, lt) { return ms.forAll(f); });
	    };
	    LinkSets.prototype.intersection = function (other) {
	        var result = new LinkSets();
	        this.forAll(function (ms, lt) {
	            if (lt in other.sets) {
	                var i = ms.intersection(other.sets[lt]), n = i.count();
	                if (n > 0) {
	                    result.sets[lt] = i;
	                    result.n += n;
	                }
	            }
	        });
	        return result;
	    };
	    return LinkSets;
	}());
	exports.LinkSets = LinkSets;
	function getGroups(nodes, links, la, rootGroup) {
	    var n = nodes.length, c = new Configuration(n, links, la, rootGroup);
	    while (c.greedyMerge())
	        ;
	    var powerEdges = [];
	    var g = c.getGroupHierarchy(powerEdges);
	    powerEdges.forEach(function (e) {
	        var f = function (end) {
	            var g = e[end];
	            if (typeof g == "number")
	                e[end] = nodes[g];
	        };
	        f("source");
	        f("target");
	    });
	    return { groups: g, powerEdges: powerEdges };
	}
	exports.getGroups = getGroups;

	});

	unwrapExports(powergraph);
	var powergraph_1 = powergraph.PowerEdge;
	var powergraph_2 = powergraph.Configuration;
	var powergraph_3 = powergraph.Module;
	var powergraph_4 = powergraph.ModuleSet;
	var powergraph_5 = powergraph.LinkSets;
	var powergraph_6 = powergraph.getGroups;

	var linklengths = createCommonjsModule(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	function unionCount(a, b) {
	    var u = {};
	    for (var i in a)
	        u[i] = {};
	    for (var i in b)
	        u[i] = {};
	    return Object.keys(u).length;
	}
	function intersectionCount(a, b) {
	    var n = 0;
	    for (var i in a)
	        if (typeof b[i] !== 'undefined')
	            ++n;
	    return n;
	}
	function getNeighbours(links, la) {
	    var neighbours = {};
	    var addNeighbours = function (u, v) {
	        if (typeof neighbours[u] === 'undefined')
	            neighbours[u] = {};
	        neighbours[u][v] = {};
	    };
	    links.forEach(function (e) {
	        var u = la.getSourceIndex(e), v = la.getTargetIndex(e);
	        addNeighbours(u, v);
	        addNeighbours(v, u);
	    });
	    return neighbours;
	}
	function computeLinkLengths(links, w, f, la) {
	    var neighbours = getNeighbours(links, la);
	    links.forEach(function (l) {
	        var a = neighbours[la.getSourceIndex(l)];
	        var b = neighbours[la.getTargetIndex(l)];
	        la.setLength(l, 1 + w * f(a, b));
	    });
	}
	function symmetricDiffLinkLengths(links, la, w) {
	    if (w === void 0) { w = 1; }
	    computeLinkLengths(links, w, function (a, b) { return Math.sqrt(unionCount(a, b) - intersectionCount(a, b)); }, la);
	}
	exports.symmetricDiffLinkLengths = symmetricDiffLinkLengths;
	function jaccardLinkLengths(links, la, w) {
	    if (w === void 0) { w = 1; }
	    computeLinkLengths(links, w, function (a, b) {
	        return Math.min(Object.keys(a).length, Object.keys(b).length) < 1.1 ? 0 : intersectionCount(a, b) / unionCount(a, b);
	    }, la);
	}
	exports.jaccardLinkLengths = jaccardLinkLengths;
	function generateDirectedEdgeConstraints(n, links, axis, la) {
	    var components = stronglyConnectedComponents(n, links, la);
	    var nodes = {};
	    components.forEach(function (c, i) {
	        return c.forEach(function (v) { return nodes[v] = i; });
	    });
	    var constraints = [];
	    links.forEach(function (l) {
	        var ui = la.getSourceIndex(l), vi = la.getTargetIndex(l), u = nodes[ui], v = nodes[vi];
	        if (u !== v) {
	            constraints.push({
	                axis: axis,
	                left: ui,
	                right: vi,
	                gap: la.getMinSeparation(l)
	            });
	        }
	    });
	    return constraints;
	}
	exports.generateDirectedEdgeConstraints = generateDirectedEdgeConstraints;
	function stronglyConnectedComponents(numVertices, edges, la) {
	    var nodes = [];
	    var index = 0;
	    var stack = [];
	    var components = [];
	    function strongConnect(v) {
	        v.index = v.lowlink = index++;
	        stack.push(v);
	        v.onStack = true;
	        for (var _i = 0, _a = v.out; _i < _a.length; _i++) {
	            var w = _a[_i];
	            if (typeof w.index === 'undefined') {
	                strongConnect(w);
	                v.lowlink = Math.min(v.lowlink, w.lowlink);
	            }
	            else if (w.onStack) {
	                v.lowlink = Math.min(v.lowlink, w.index);
	            }
	        }
	        if (v.lowlink === v.index) {
	            var component = [];
	            while (stack.length) {
	                w = stack.pop();
	                w.onStack = false;
	                component.push(w);
	                if (w === v)
	                    break;
	            }
	            components.push(component.map(function (v) { return v.id; }));
	        }
	    }
	    for (var i = 0; i < numVertices; i++) {
	        nodes.push({ id: i, out: [] });
	    }
	    for (var _i = 0, edges_1 = edges; _i < edges_1.length; _i++) {
	        var e = edges_1[_i];
	        var v_1 = nodes[la.getSourceIndex(e)], w = nodes[la.getTargetIndex(e)];
	        v_1.out.push(w);
	    }
	    for (var _a = 0, nodes_1 = nodes; _a < nodes_1.length; _a++) {
	        var v = nodes_1[_a];
	        if (typeof v.index === 'undefined')
	            strongConnect(v);
	    }
	    return components;
	}
	exports.stronglyConnectedComponents = stronglyConnectedComponents;

	});

	unwrapExports(linklengths);
	var linklengths_1 = linklengths.symmetricDiffLinkLengths;
	var linklengths_2 = linklengths.jaccardLinkLengths;
	var linklengths_3 = linklengths.generateDirectedEdgeConstraints;
	var linklengths_4 = linklengths.stronglyConnectedComponents;

	var descent = createCommonjsModule(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	var Locks = (function () {
	    function Locks() {
	        this.locks = {};
	    }
	    Locks.prototype.add = function (id, x) {
	        this.locks[id] = x;
	    };
	    Locks.prototype.clear = function () {
	        this.locks = {};
	    };
	    Locks.prototype.isEmpty = function () {
	        for (var l in this.locks)
	            return false;
	        return true;
	    };
	    Locks.prototype.apply = function (f) {
	        for (var l in this.locks) {
	            f(Number(l), this.locks[l]);
	        }
	    };
	    return Locks;
	}());
	exports.Locks = Locks;
	var Descent = (function () {
	    function Descent(x, D, G) {
	        if (G === void 0) { G = null; }
	        this.D = D;
	        this.G = G;
	        this.threshold = 0.0001;
	        this.numGridSnapNodes = 0;
	        this.snapGridSize = 100;
	        this.snapStrength = 1000;
	        this.scaleSnapByMaxH = false;
	        this.random = new PseudoRandom();
	        this.project = null;
	        this.x = x;
	        this.k = x.length;
	        var n = this.n = x[0].length;
	        this.H = new Array(this.k);
	        this.g = new Array(this.k);
	        this.Hd = new Array(this.k);
	        this.a = new Array(this.k);
	        this.b = new Array(this.k);
	        this.c = new Array(this.k);
	        this.d = new Array(this.k);
	        this.e = new Array(this.k);
	        this.ia = new Array(this.k);
	        this.ib = new Array(this.k);
	        this.xtmp = new Array(this.k);
	        this.locks = new Locks();
	        this.minD = Number.MAX_VALUE;
	        var i = n, j;
	        while (i--) {
	            j = n;
	            while (--j > i) {
	                var d = D[i][j];
	                if (d > 0 && d < this.minD) {
	                    this.minD = d;
	                }
	            }
	        }
	        if (this.minD === Number.MAX_VALUE)
	            this.minD = 1;
	        i = this.k;
	        while (i--) {
	            this.g[i] = new Array(n);
	            this.H[i] = new Array(n);
	            j = n;
	            while (j--) {
	                this.H[i][j] = new Array(n);
	            }
	            this.Hd[i] = new Array(n);
	            this.a[i] = new Array(n);
	            this.b[i] = new Array(n);
	            this.c[i] = new Array(n);
	            this.d[i] = new Array(n);
	            this.e[i] = new Array(n);
	            this.ia[i] = new Array(n);
	            this.ib[i] = new Array(n);
	            this.xtmp[i] = new Array(n);
	        }
	    }
	    Descent.createSquareMatrix = function (n, f) {
	        var M = new Array(n);
	        for (var i = 0; i < n; ++i) {
	            M[i] = new Array(n);
	            for (var j = 0; j < n; ++j) {
	                M[i][j] = f(i, j);
	            }
	        }
	        return M;
	    };
	    Descent.prototype.offsetDir = function () {
	        var _this = this;
	        var u = new Array(this.k);
	        var l = 0;
	        for (var i = 0; i < this.k; ++i) {
	            var x = u[i] = this.random.getNextBetween(0.01, 1) - 0.5;
	            l += x * x;
	        }
	        l = Math.sqrt(l);
	        return u.map(function (x) { return x *= _this.minD / l; });
	    };
	    Descent.prototype.computeDerivatives = function (x) {
	        var _this = this;
	        var n = this.n;
	        if (n < 1)
	            return;
	        var i;
	        var d = new Array(this.k);
	        var d2 = new Array(this.k);
	        var Huu = new Array(this.k);
	        var maxH = 0;
	        for (var u = 0; u < n; ++u) {
	            for (i = 0; i < this.k; ++i)
	                Huu[i] = this.g[i][u] = 0;
	            for (var v = 0; v < n; ++v) {
	                if (u === v)
	                    continue;
	                var maxDisplaces = n;
	                while (maxDisplaces--) {
	                    var sd2 = 0;
	                    for (i = 0; i < this.k; ++i) {
	                        var dx = d[i] = x[i][u] - x[i][v];
	                        sd2 += d2[i] = dx * dx;
	                    }
	                    if (sd2 > 1e-9)
	                        break;
	                    var rd = this.offsetDir();
	                    for (i = 0; i < this.k; ++i)
	                        x[i][v] += rd[i];
	                }
	                var l = Math.sqrt(sd2);
	                var D = this.D[u][v];
	                var weight = this.G != null ? this.G[u][v] : 1;
	                if (weight > 1 && l > D || !isFinite(D)) {
	                    for (i = 0; i < this.k; ++i)
	                        this.H[i][u][v] = 0;
	                    continue;
	                }
	                if (weight > 1) {
	                    weight = 1;
	                }
	                var D2 = D * D;
	                var gs = 2 * weight * (l - D) / (D2 * l);
	                var l3 = l * l * l;
	                var hs = 2 * -weight / (D2 * l3);
	                if (!isFinite(gs))
	                    console.log(gs);
	                for (i = 0; i < this.k; ++i) {
	                    this.g[i][u] += d[i] * gs;
	                    Huu[i] -= this.H[i][u][v] = hs * (l3 + D * (d2[i] - sd2) + l * sd2);
	                }
	            }
	            for (i = 0; i < this.k; ++i)
	                maxH = Math.max(maxH, this.H[i][u][u] = Huu[i]);
	        }
	        var r = this.snapGridSize / 2;
	        var g = this.snapGridSize;
	        var w = this.snapStrength;
	        var k = w / (r * r);
	        var numNodes = this.numGridSnapNodes;
	        for (var u = 0; u < numNodes; ++u) {
	            for (i = 0; i < this.k; ++i) {
	                var xiu = this.x[i][u];
	                var m = xiu / g;
	                var f = m % 1;
	                var q = m - f;
	                var a = Math.abs(f);
	                var dx = (a <= 0.5) ? xiu - q * g :
	                    (xiu > 0) ? xiu - (q + 1) * g : xiu - (q - 1) * g;
	                if (-r < dx && dx <= r) {
	                    if (this.scaleSnapByMaxH) {
	                        this.g[i][u] += maxH * k * dx;
	                        this.H[i][u][u] += maxH * k;
	                    }
	                    else {
	                        this.g[i][u] += k * dx;
	                        this.H[i][u][u] += k;
	                    }
	                }
	            }
	        }
	        if (!this.locks.isEmpty()) {
	            this.locks.apply(function (u, p) {
	                for (i = 0; i < _this.k; ++i) {
	                    _this.H[i][u][u] += maxH;
	                    _this.g[i][u] -= maxH * (p[i] - x[i][u]);
	                }
	            });
	        }
	    };
	    Descent.dotProd = function (a, b) {
	        var x = 0, i = a.length;
	        while (i--)
	            x += a[i] * b[i];
	        return x;
	    };
	    Descent.rightMultiply = function (m, v, r) {
	        var i = m.length;
	        while (i--)
	            r[i] = Descent.dotProd(m[i], v);
	    };
	    Descent.prototype.computeStepSize = function (d) {
	        var numerator = 0, denominator = 0;
	        for (var i = 0; i < this.k; ++i) {
	            numerator += Descent.dotProd(this.g[i], d[i]);
	            Descent.rightMultiply(this.H[i], d[i], this.Hd[i]);
	            denominator += Descent.dotProd(d[i], this.Hd[i]);
	        }
	        if (denominator === 0 || !isFinite(denominator))
	            return 0;
	        return 1 * numerator / denominator;
	    };
	    Descent.prototype.reduceStress = function () {
	        this.computeDerivatives(this.x);
	        var alpha = this.computeStepSize(this.g);
	        for (var i = 0; i < this.k; ++i) {
	            this.takeDescentStep(this.x[i], this.g[i], alpha);
	        }
	        return this.computeStress();
	    };
	    Descent.copy = function (a, b) {
	        var m = a.length, n = b[0].length;
	        for (var i = 0; i < m; ++i) {
	            for (var j = 0; j < n; ++j) {
	                b[i][j] = a[i][j];
	            }
	        }
	    };
	    Descent.prototype.stepAndProject = function (x0, r, d, stepSize) {
	        Descent.copy(x0, r);
	        this.takeDescentStep(r[0], d[0], stepSize);
	        if (this.project)
	            this.project[0](x0[0], x0[1], r[0]);
	        this.takeDescentStep(r[1], d[1], stepSize);
	        if (this.project)
	            this.project[1](r[0], x0[1], r[1]);
	        for (var i = 2; i < this.k; i++)
	            this.takeDescentStep(r[i], d[i], stepSize);
	    };
	    Descent.mApply = function (m, n, f) {
	        var i = m;
	        while (i-- > 0) {
	            var j = n;
	            while (j-- > 0)
	                f(i, j);
	        }
	    };
	    Descent.prototype.matrixApply = function (f) {
	        Descent.mApply(this.k, this.n, f);
	    };
	    Descent.prototype.computeNextPosition = function (x0, r) {
	        var _this = this;
	        this.computeDerivatives(x0);
	        var alpha = this.computeStepSize(this.g);
	        this.stepAndProject(x0, r, this.g, alpha);
	        if (this.project) {
	            this.matrixApply(function (i, j) { return _this.e[i][j] = x0[i][j] - r[i][j]; });
	            var beta = this.computeStepSize(this.e);
	            beta = Math.max(0.2, Math.min(beta, 1));
	            this.stepAndProject(x0, r, this.e, beta);
	        }
	    };
	    Descent.prototype.run = function (iterations) {
	        var stress = Number.MAX_VALUE, converged = false;
	        while (!converged && iterations-- > 0) {
	            var s = this.rungeKutta();
	            converged = Math.abs(stress / s - 1) < this.threshold;
	            stress = s;
	        }
	        return stress;
	    };
	    Descent.prototype.rungeKutta = function () {
	        var _this = this;
	        this.computeNextPosition(this.x, this.a);
	        Descent.mid(this.x, this.a, this.ia);
	        this.computeNextPosition(this.ia, this.b);
	        Descent.mid(this.x, this.b, this.ib);
	        this.computeNextPosition(this.ib, this.c);
	        this.computeNextPosition(this.c, this.d);
	        var disp = 0;
	        this.matrixApply(function (i, j) {
	            var x = (_this.a[i][j] + 2.0 * _this.b[i][j] + 2.0 * _this.c[i][j] + _this.d[i][j]) / 6.0, d = _this.x[i][j] - x;
	            disp += d * d;
	            _this.x[i][j] = x;
	        });
	        return disp;
	    };
	    Descent.mid = function (a, b, m) {
	        Descent.mApply(a.length, a[0].length, function (i, j) {
	            return m[i][j] = a[i][j] + (b[i][j] - a[i][j]) / 2.0;
	        });
	    };
	    Descent.prototype.takeDescentStep = function (x, d, stepSize) {
	        for (var i = 0; i < this.n; ++i) {
	            x[i] = x[i] - stepSize * d[i];
	        }
	    };
	    Descent.prototype.computeStress = function () {
	        var stress = 0;
	        for (var u = 0, nMinus1 = this.n - 1; u < nMinus1; ++u) {
	            for (var v = u + 1, n = this.n; v < n; ++v) {
	                var l = 0;
	                for (var i = 0; i < this.k; ++i) {
	                    var dx = this.x[i][u] - this.x[i][v];
	                    l += dx * dx;
	                }
	                l = Math.sqrt(l);
	                var d = this.D[u][v];
	                if (!isFinite(d))
	                    continue;
	                var rl = d - l;
	                var d2 = d * d;
	                stress += rl * rl / d2;
	            }
	        }
	        return stress;
	    };
	    Descent.zeroDistance = 1e-10;
	    return Descent;
	}());
	exports.Descent = Descent;
	var PseudoRandom = (function () {
	    function PseudoRandom(seed) {
	        if (seed === void 0) { seed = 1; }
	        this.seed = seed;
	        this.a = 214013;
	        this.c = 2531011;
	        this.m = 2147483648;
	        this.range = 32767;
	    }
	    PseudoRandom.prototype.getNext = function () {
	        this.seed = (this.seed * this.a + this.c) % this.m;
	        return (this.seed >> 16) / this.range;
	    };
	    PseudoRandom.prototype.getNextBetween = function (min, max) {
	        return min + this.getNext() * (max - min);
	    };
	    return PseudoRandom;
	}());
	exports.PseudoRandom = PseudoRandom;

	});

	unwrapExports(descent);
	var descent_1 = descent.Locks;
	var descent_2 = descent.Descent;
	var descent_3 = descent.PseudoRandom;

	var vpsc = createCommonjsModule(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	var PositionStats = (function () {
	    function PositionStats(scale) {
	        this.scale = scale;
	        this.AB = 0;
	        this.AD = 0;
	        this.A2 = 0;
	    }
	    PositionStats.prototype.addVariable = function (v) {
	        var ai = this.scale / v.scale;
	        var bi = v.offset / v.scale;
	        var wi = v.weight;
	        this.AB += wi * ai * bi;
	        this.AD += wi * ai * v.desiredPosition;
	        this.A2 += wi * ai * ai;
	    };
	    PositionStats.prototype.getPosn = function () {
	        return (this.AD - this.AB) / this.A2;
	    };
	    return PositionStats;
	}());
	exports.PositionStats = PositionStats;
	var Constraint = (function () {
	    function Constraint(left, right, gap, equality) {
	        if (equality === void 0) { equality = false; }
	        this.left = left;
	        this.right = right;
	        this.gap = gap;
	        this.equality = equality;
	        this.active = false;
	        this.unsatisfiable = false;
	        this.left = left;
	        this.right = right;
	        this.gap = gap;
	        this.equality = equality;
	    }
	    Constraint.prototype.slack = function () {
	        return this.unsatisfiable ? Number.MAX_VALUE
	            : this.right.scale * this.right.position() - this.gap
	                - this.left.scale * this.left.position();
	    };
	    return Constraint;
	}());
	exports.Constraint = Constraint;
	var Variable = (function () {
	    function Variable(desiredPosition, weight, scale) {
	        if (weight === void 0) { weight = 1; }
	        if (scale === void 0) { scale = 1; }
	        this.desiredPosition = desiredPosition;
	        this.weight = weight;
	        this.scale = scale;
	        this.offset = 0;
	    }
	    Variable.prototype.dfdv = function () {
	        return 2.0 * this.weight * (this.position() - this.desiredPosition);
	    };
	    Variable.prototype.position = function () {
	        return (this.block.ps.scale * this.block.posn + this.offset) / this.scale;
	    };
	    Variable.prototype.visitNeighbours = function (prev, f) {
	        var ff = function (c, next) { return c.active && prev !== next && f(c, next); };
	        this.cOut.forEach(function (c) { return ff(c, c.right); });
	        this.cIn.forEach(function (c) { return ff(c, c.left); });
	    };
	    return Variable;
	}());
	exports.Variable = Variable;
	var Block = (function () {
	    function Block(v) {
	        this.vars = [];
	        v.offset = 0;
	        this.ps = new PositionStats(v.scale);
	        this.addVariable(v);
	    }
	    Block.prototype.addVariable = function (v) {
	        v.block = this;
	        this.vars.push(v);
	        this.ps.addVariable(v);
	        this.posn = this.ps.getPosn();
	    };
	    Block.prototype.updateWeightedPosition = function () {
	        this.ps.AB = this.ps.AD = this.ps.A2 = 0;
	        for (var i = 0, n = this.vars.length; i < n; ++i)
	            this.ps.addVariable(this.vars[i]);
	        this.posn = this.ps.getPosn();
	    };
	    Block.prototype.compute_lm = function (v, u, postAction) {
	        var _this = this;
	        var dfdv = v.dfdv();
	        v.visitNeighbours(u, function (c, next) {
	            var _dfdv = _this.compute_lm(next, v, postAction);
	            if (next === c.right) {
	                dfdv += _dfdv * c.left.scale;
	                c.lm = _dfdv;
	            }
	            else {
	                dfdv += _dfdv * c.right.scale;
	                c.lm = -_dfdv;
	            }
	            postAction(c);
	        });
	        return dfdv / v.scale;
	    };
	    Block.prototype.populateSplitBlock = function (v, prev) {
	        var _this = this;
	        v.visitNeighbours(prev, function (c, next) {
	            next.offset = v.offset + (next === c.right ? c.gap : -c.gap);
	            _this.addVariable(next);
	            _this.populateSplitBlock(next, v);
	        });
	    };
	    Block.prototype.traverse = function (visit, acc, v, prev) {
	        var _this = this;
	        if (v === void 0) { v = this.vars[0]; }
	        if (prev === void 0) { prev = null; }
	        v.visitNeighbours(prev, function (c, next) {
	            acc.push(visit(c));
	            _this.traverse(visit, acc, next, v);
	        });
	    };
	    Block.prototype.findMinLM = function () {
	        var m = null;
	        this.compute_lm(this.vars[0], null, function (c) {
	            if (!c.equality && (m === null || c.lm < m.lm))
	                m = c;
	        });
	        return m;
	    };
	    Block.prototype.findMinLMBetween = function (lv, rv) {
	        this.compute_lm(lv, null, function () { });
	        var m = null;
	        this.findPath(lv, null, rv, function (c, next) {
	            if (!c.equality && c.right === next && (m === null || c.lm < m.lm))
	                m = c;
	        });
	        return m;
	    };
	    Block.prototype.findPath = function (v, prev, to, visit) {
	        var _this = this;
	        var endFound = false;
	        v.visitNeighbours(prev, function (c, next) {
	            if (!endFound && (next === to || _this.findPath(next, v, to, visit))) {
	                endFound = true;
	                visit(c, next);
	            }
	        });
	        return endFound;
	    };
	    Block.prototype.isActiveDirectedPathBetween = function (u, v) {
	        if (u === v)
	            return true;
	        var i = u.cOut.length;
	        while (i--) {
	            var c = u.cOut[i];
	            if (c.active && this.isActiveDirectedPathBetween(c.right, v))
	                return true;
	        }
	        return false;
	    };
	    Block.split = function (c) {
	        c.active = false;
	        return [Block.createSplitBlock(c.left), Block.createSplitBlock(c.right)];
	    };
	    Block.createSplitBlock = function (startVar) {
	        var b = new Block(startVar);
	        b.populateSplitBlock(startVar, null);
	        return b;
	    };
	    Block.prototype.splitBetween = function (vl, vr) {
	        var c = this.findMinLMBetween(vl, vr);
	        if (c !== null) {
	            var bs = Block.split(c);
	            return { constraint: c, lb: bs[0], rb: bs[1] };
	        }
	        return null;
	    };
	    Block.prototype.mergeAcross = function (b, c, dist) {
	        c.active = true;
	        for (var i = 0, n = b.vars.length; i < n; ++i) {
	            var v = b.vars[i];
	            v.offset += dist;
	            this.addVariable(v);
	        }
	        this.posn = this.ps.getPosn();
	    };
	    Block.prototype.cost = function () {
	        var sum = 0, i = this.vars.length;
	        while (i--) {
	            var v = this.vars[i], d = v.position() - v.desiredPosition;
	            sum += d * d * v.weight;
	        }
	        return sum;
	    };
	    return Block;
	}());
	exports.Block = Block;
	var Blocks = (function () {
	    function Blocks(vs) {
	        this.vs = vs;
	        var n = vs.length;
	        this.list = new Array(n);
	        while (n--) {
	            var b = new Block(vs[n]);
	            this.list[n] = b;
	            b.blockInd = n;
	        }
	    }
	    Blocks.prototype.cost = function () {
	        var sum = 0, i = this.list.length;
	        while (i--)
	            sum += this.list[i].cost();
	        return sum;
	    };
	    Blocks.prototype.insert = function (b) {
	        b.blockInd = this.list.length;
	        this.list.push(b);
	    };
	    Blocks.prototype.remove = function (b) {
	        var last = this.list.length - 1;
	        var swapBlock = this.list[last];
	        this.list.length = last;
	        if (b !== swapBlock) {
	            this.list[b.blockInd] = swapBlock;
	            swapBlock.blockInd = b.blockInd;
	        }
	    };
	    Blocks.prototype.merge = function (c) {
	        var l = c.left.block, r = c.right.block;
	        var dist = c.right.offset - c.left.offset - c.gap;
	        if (l.vars.length < r.vars.length) {
	            r.mergeAcross(l, c, dist);
	            this.remove(l);
	        }
	        else {
	            l.mergeAcross(r, c, -dist);
	            this.remove(r);
	        }
	    };
	    Blocks.prototype.forEach = function (f) {
	        this.list.forEach(f);
	    };
	    Blocks.prototype.updateBlockPositions = function () {
	        this.list.forEach(function (b) { return b.updateWeightedPosition(); });
	    };
	    Blocks.prototype.split = function (inactive) {
	        var _this = this;
	        this.updateBlockPositions();
	        this.list.forEach(function (b) {
	            var v = b.findMinLM();
	            if (v !== null && v.lm < Solver.LAGRANGIAN_TOLERANCE) {
	                b = v.left.block;
	                Block.split(v).forEach(function (nb) { return _this.insert(nb); });
	                _this.remove(b);
	                inactive.push(v);
	            }
	        });
	    };
	    return Blocks;
	}());
	exports.Blocks = Blocks;
	var Solver = (function () {
	    function Solver(vs, cs) {
	        this.vs = vs;
	        this.cs = cs;
	        this.vs = vs;
	        vs.forEach(function (v) {
	            v.cIn = [], v.cOut = [];
	        });
	        this.cs = cs;
	        cs.forEach(function (c) {
	            c.left.cOut.push(c);
	            c.right.cIn.push(c);
	        });
	        this.inactive = cs.map(function (c) { c.active = false; return c; });
	        this.bs = null;
	    }
	    Solver.prototype.cost = function () {
	        return this.bs.cost();
	    };
	    Solver.prototype.setStartingPositions = function (ps) {
	        this.inactive = this.cs.map(function (c) { c.active = false; return c; });
	        this.bs = new Blocks(this.vs);
	        this.bs.forEach(function (b, i) { return b.posn = ps[i]; });
	    };
	    Solver.prototype.setDesiredPositions = function (ps) {
	        this.vs.forEach(function (v, i) { return v.desiredPosition = ps[i]; });
	    };
	    Solver.prototype.mostViolated = function () {
	        var minSlack = Number.MAX_VALUE, v = null, l = this.inactive, n = l.length, deletePoint = n;
	        for (var i = 0; i < n; ++i) {
	            var c = l[i];
	            if (c.unsatisfiable)
	                continue;
	            var slack = c.slack();
	            if (c.equality || slack < minSlack) {
	                minSlack = slack;
	                v = c;
	                deletePoint = i;
	                if (c.equality)
	                    break;
	            }
	        }
	        if (deletePoint !== n &&
	            (minSlack < Solver.ZERO_UPPERBOUND && !v.active || v.equality)) {
	            l[deletePoint] = l[n - 1];
	            l.length = n - 1;
	        }
	        return v;
	    };
	    Solver.prototype.satisfy = function () {
	        if (this.bs == null) {
	            this.bs = new Blocks(this.vs);
	        }
	        this.bs.split(this.inactive);
	        var v = null;
	        while ((v = this.mostViolated()) && (v.equality || v.slack() < Solver.ZERO_UPPERBOUND && !v.active)) {
	            var lb = v.left.block, rb = v.right.block;
	            if (lb !== rb) {
	                this.bs.merge(v);
	            }
	            else {
	                if (lb.isActiveDirectedPathBetween(v.right, v.left)) {
	                    v.unsatisfiable = true;
	                    continue;
	                }
	                var split = lb.splitBetween(v.left, v.right);
	                if (split !== null) {
	                    this.bs.insert(split.lb);
	                    this.bs.insert(split.rb);
	                    this.bs.remove(lb);
	                    this.inactive.push(split.constraint);
	                }
	                else {
	                    v.unsatisfiable = true;
	                    continue;
	                }
	                if (v.slack() >= 0) {
	                    this.inactive.push(v);
	                }
	                else {
	                    this.bs.merge(v);
	                }
	            }
	        }
	    };
	    Solver.prototype.solve = function () {
	        this.satisfy();
	        var lastcost = Number.MAX_VALUE, cost = this.bs.cost();
	        while (Math.abs(lastcost - cost) > 0.0001) {
	            this.satisfy();
	            lastcost = cost;
	            cost = this.bs.cost();
	        }
	        return cost;
	    };
	    Solver.LAGRANGIAN_TOLERANCE = -1e-4;
	    Solver.ZERO_UPPERBOUND = -1e-10;
	    return Solver;
	}());
	exports.Solver = Solver;
	function removeOverlapInOneDimension(spans, lowerBound, upperBound) {
	    var vs = spans.map(function (s) { return new Variable(s.desiredCenter); });
	    var cs = [];
	    var n = spans.length;
	    for (var i = 0; i < n - 1; i++) {
	        var left = spans[i], right = spans[i + 1];
	        cs.push(new Constraint(vs[i], vs[i + 1], (left.size + right.size) / 2));
	    }
	    var leftMost = vs[0], rightMost = vs[n - 1], leftMostSize = spans[0].size / 2, rightMostSize = spans[n - 1].size / 2;
	    var vLower = null, vUpper = null;
	    if (lowerBound) {
	        vLower = new Variable(lowerBound, leftMost.weight * 1000);
	        vs.push(vLower);
	        cs.push(new Constraint(vLower, leftMost, leftMostSize));
	    }
	    if (upperBound) {
	        vUpper = new Variable(upperBound, rightMost.weight * 1000);
	        vs.push(vUpper);
	        cs.push(new Constraint(rightMost, vUpper, rightMostSize));
	    }
	    var solver = new Solver(vs, cs);
	    solver.solve();
	    return {
	        newCenters: vs.slice(0, spans.length).map(function (v) { return v.position(); }),
	        lowerBound: vLower ? vLower.position() : leftMost.position() - leftMostSize,
	        upperBound: vUpper ? vUpper.position() : rightMost.position() + rightMostSize
	    };
	}
	exports.removeOverlapInOneDimension = removeOverlapInOneDimension;

	});

	unwrapExports(vpsc);
	var vpsc_1 = vpsc.PositionStats;
	var vpsc_2 = vpsc.Constraint;
	var vpsc_3 = vpsc.Variable;
	var vpsc_4 = vpsc.Block;
	var vpsc_5 = vpsc.Blocks;
	var vpsc_6 = vpsc.Solver;
	var vpsc_7 = vpsc.removeOverlapInOneDimension;

	var rbtree = createCommonjsModule(function (module, exports) {
	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	var TreeBase = (function () {
	    function TreeBase() {
	        this.findIter = function (data) {
	            var res = this._root;
	            var iter = this.iterator();
	            while (res !== null) {
	                var c = this._comparator(data, res.data);
	                if (c === 0) {
	                    iter._cursor = res;
	                    return iter;
	                }
	                else {
	                    iter._ancestors.push(res);
	                    res = res.get_child(c > 0);
	                }
	            }
	            return null;
	        };
	    }
	    TreeBase.prototype.clear = function () {
	        this._root = null;
	        this.size = 0;
	    };
	    TreeBase.prototype.find = function (data) {
	        var res = this._root;
	        while (res !== null) {
	            var c = this._comparator(data, res.data);
	            if (c === 0) {
	                return res.data;
	            }
	            else {
	                res = res.get_child(c > 0);
	            }
	        }
	        return null;
	    };
	    TreeBase.prototype.lowerBound = function (data) {
	        return this._bound(data, this._comparator);
	    };
	    TreeBase.prototype.upperBound = function (data) {
	        var cmp = this._comparator;
	        function reverse_cmp(a, b) {
	            return cmp(b, a);
	        }
	        return this._bound(data, reverse_cmp);
	    };
	    TreeBase.prototype.min = function () {
	        var res = this._root;
	        if (res === null) {
	            return null;
	        }
	        while (res.left !== null) {
	            res = res.left;
	        }
	        return res.data;
	    };
	    TreeBase.prototype.max = function () {
	        var res = this._root;
	        if (res === null) {
	            return null;
	        }
	        while (res.right !== null) {
	            res = res.right;
	        }
	        return res.data;
	    };
	    TreeBase.prototype.iterator = function () {
	        return new Iterator(this);
	    };
	    TreeBase.prototype.each = function (cb) {
	        var it = this.iterator(), data;
	        while ((data = it.next()) !== null) {
	            cb(data);
	        }
	    };
	    TreeBase.prototype.reach = function (cb) {
	        var it = this.iterator(), data;
	        while ((data = it.prev()) !== null) {
	            cb(data);
	        }
	    };
	    TreeBase.prototype._bound = function (data, cmp) {
	        var cur = this._root;
	        var iter = this.iterator();
	        while (cur !== null) {
	            var c = this._comparator(data, cur.data);
	            if (c === 0) {
	                iter._cursor = cur;
	                return iter;
	            }
	            iter._ancestors.push(cur);
	            cur = cur.get_child(c > 0);
	        }
	        for (var i = iter._ancestors.length - 1; i >= 0; --i) {
	            cur = iter._ancestors[i];
	            if (cmp(data, cur.data) > 0) {
	                iter._cursor = cur;
	                iter._ancestors.length = i;
	                return iter;
	            }
	        }
	        iter._ancestors.length = 0;
	        return iter;
	    };
	    return TreeBase;
	}());
	exports.TreeBase = TreeBase;
	var Iterator = (function () {
	    function Iterator(tree) {
	        this._tree = tree;
	        this._ancestors = [];
	        this._cursor = null;
	    }
	    Iterator.prototype.data = function () {
	        return this._cursor !== null ? this._cursor.data : null;
	    };
	    Iterator.prototype.next = function () {
	        if (this._cursor === null) {
	            var root = this._tree._root;
	            if (root !== null) {
	                this._minNode(root);
	            }
	        }
	        else {
	            if (this._cursor.right === null) {
	                var save;
	                do {
	                    save = this._cursor;
	                    if (this._ancestors.length) {
	                        this._cursor = this._ancestors.pop();
	                    }
	                    else {
	                        this._cursor = null;
	                        break;
	                    }
	                } while (this._cursor.right === save);
	            }
	            else {
	                this._ancestors.push(this._cursor);
	                this._minNode(this._cursor.right);
	            }
	        }
	        return this._cursor !== null ? this._cursor.data : null;
	    };
	    Iterator.prototype.prev = function () {
	        if (this._cursor === null) {
	            var root = this._tree._root;
	            if (root !== null) {
	                this._maxNode(root);
	            }
	        }
	        else {
	            if (this._cursor.left === null) {
	                var save;
	                do {
	                    save = this._cursor;
	                    if (this._ancestors.length) {
	                        this._cursor = this._ancestors.pop();
	                    }
	                    else {
	                        this._cursor = null;
	                        break;
	                    }
	                } while (this._cursor.left === save);
	            }
	            else {
	                this._ancestors.push(this._cursor);
	                this._maxNode(this._cursor.left);
	            }
	        }
	        return this._cursor !== null ? this._cursor.data : null;
	    };
	    Iterator.prototype._minNode = function (start) {
	        while (start.left !== null) {
	            this._ancestors.push(start);
	            start = start.left;
	        }
	        this._cursor = start;
	    };
	    Iterator.prototype._maxNode = function (start) {
	        while (start.right !== null) {
	            this._ancestors.push(start);
	            start = start.right;
	        }
	        this._cursor = start;
	    };
	    return Iterator;
	}());
	exports.Iterator = Iterator;
	var Node = (function () {
	    function Node(data) {
	        this.data = data;
	        this.left = null;
	        this.right = null;
	        this.red = true;
	    }
	    Node.prototype.get_child = function (dir) {
	        return dir ? this.right : this.left;
	    };
	    Node.prototype.set_child = function (dir, val) {
	        if (dir) {
	            this.right = val;
	        }
	        else {
	            this.left = val;
	        }
	    };
	    return Node;
	}());
	var RBTree = (function (_super) {
	    __extends(RBTree, _super);
	    function RBTree(comparator) {
	        var _this = _super.call(this) || this;
	        _this._root = null;
	        _this._comparator = comparator;
	        _this.size = 0;
	        return _this;
	    }
	    RBTree.prototype.insert = function (data) {
	        var ret = false;
	        if (this._root === null) {
	            this._root = new Node(data);
	            ret = true;
	            this.size++;
	        }
	        else {
	            var head = new Node(undefined);
	            var dir = false;
	            var last = false;
	            var gp = null;
	            var ggp = head;
	            var p = null;
	            var node = this._root;
	            ggp.right = this._root;
	            while (true) {
	                if (node === null) {
	                    node = new Node(data);
	                    p.set_child(dir, node);
	                    ret = true;
	                    this.size++;
	                }
	                else if (RBTree.is_red(node.left) && RBTree.is_red(node.right)) {
	                    node.red = true;
	                    node.left.red = false;
	                    node.right.red = false;
	                }
	                if (RBTree.is_red(node) && RBTree.is_red(p)) {
	                    var dir2 = ggp.right === gp;
	                    if (node === p.get_child(last)) {
	                        ggp.set_child(dir2, RBTree.single_rotate(gp, !last));
	                    }
	                    else {
	                        ggp.set_child(dir2, RBTree.double_rotate(gp, !last));
	                    }
	                }
	                var cmp = this._comparator(node.data, data);
	                if (cmp === 0) {
	                    break;
	                }
	                last = dir;
	                dir = cmp < 0;
	                if (gp !== null) {
	                    ggp = gp;
	                }
	                gp = p;
	                p = node;
	                node = node.get_child(dir);
	            }
	            this._root = head.right;
	        }
	        this._root.red = false;
	        return ret;
	    };
	    RBTree.prototype.remove = function (data) {
	        if (this._root === null) {
	            return false;
	        }
	        var head = new Node(undefined);
	        var node = head;
	        node.right = this._root;
	        var p = null;
	        var gp = null;
	        var found = null;
	        var dir = true;
	        while (node.get_child(dir) !== null) {
	            var last = dir;
	            gp = p;
	            p = node;
	            node = node.get_child(dir);
	            var cmp = this._comparator(data, node.data);
	            dir = cmp > 0;
	            if (cmp === 0) {
	                found = node;
	            }
	            if (!RBTree.is_red(node) && !RBTree.is_red(node.get_child(dir))) {
	                if (RBTree.is_red(node.get_child(!dir))) {
	                    var sr = RBTree.single_rotate(node, dir);
	                    p.set_child(last, sr);
	                    p = sr;
	                }
	                else if (!RBTree.is_red(node.get_child(!dir))) {
	                    var sibling = p.get_child(!last);
	                    if (sibling !== null) {
	                        if (!RBTree.is_red(sibling.get_child(!last)) && !RBTree.is_red(sibling.get_child(last))) {
	                            p.red = false;
	                            sibling.red = true;
	                            node.red = true;
	                        }
	                        else {
	                            var dir2 = gp.right === p;
	                            if (RBTree.is_red(sibling.get_child(last))) {
	                                gp.set_child(dir2, RBTree.double_rotate(p, last));
	                            }
	                            else if (RBTree.is_red(sibling.get_child(!last))) {
	                                gp.set_child(dir2, RBTree.single_rotate(p, last));
	                            }
	                            var gpc = gp.get_child(dir2);
	                            gpc.red = true;
	                            node.red = true;
	                            gpc.left.red = false;
	                            gpc.right.red = false;
	                        }
	                    }
	                }
	            }
	        }
	        if (found !== null) {
	            found.data = node.data;
	            p.set_child(p.right === node, node.get_child(node.left === null));
	            this.size--;
	        }
	        this._root = head.right;
	        if (this._root !== null) {
	            this._root.red = false;
	        }
	        return found !== null;
	    };
	    RBTree.is_red = function (node) {
	        return node !== null && node.red;
	    };
	    RBTree.single_rotate = function (root, dir) {
	        var save = root.get_child(!dir);
	        root.set_child(!dir, save.get_child(dir));
	        save.set_child(dir, root);
	        root.red = true;
	        save.red = false;
	        return save;
	    };
	    RBTree.double_rotate = function (root, dir) {
	        root.set_child(!dir, RBTree.single_rotate(root.get_child(!dir), !dir));
	        return RBTree.single_rotate(root, dir);
	    };
	    return RBTree;
	}(TreeBase));
	exports.RBTree = RBTree;

	});

	unwrapExports(rbtree);
	var rbtree_1 = rbtree.TreeBase;
	var rbtree_2 = rbtree.Iterator;
	var rbtree_3 = rbtree.RBTree;

	var rectangle = createCommonjsModule(function (module, exports) {
	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });


	function computeGroupBounds(g) {
	    g.bounds = typeof g.leaves !== "undefined" ?
	        g.leaves.reduce(function (r, c) { return c.bounds.union(r); }, Rectangle.empty()) :
	        Rectangle.empty();
	    if (typeof g.groups !== "undefined")
	        g.bounds = g.groups.reduce(function (r, c) { return computeGroupBounds(c).union(r); }, g.bounds);
	    g.bounds = g.bounds.inflate(g.padding);
	    return g.bounds;
	}
	exports.computeGroupBounds = computeGroupBounds;
	var Rectangle = (function () {
	    function Rectangle(x, X, y, Y) {
	        this.x = x;
	        this.X = X;
	        this.y = y;
	        this.Y = Y;
	    }
	    Rectangle.empty = function () { return new Rectangle(Number.POSITIVE_INFINITY, Number.NEGATIVE_INFINITY, Number.POSITIVE_INFINITY, Number.NEGATIVE_INFINITY); };
	    Rectangle.prototype.cx = function () { return (this.x + this.X) / 2; };
	    Rectangle.prototype.cy = function () { return (this.y + this.Y) / 2; };
	    Rectangle.prototype.overlapX = function (r) {
	        var ux = this.cx(), vx = r.cx();
	        if (ux <= vx && r.x < this.X)
	            return this.X - r.x;
	        if (vx <= ux && this.x < r.X)
	            return r.X - this.x;
	        return 0;
	    };
	    Rectangle.prototype.overlapY = function (r) {
	        var uy = this.cy(), vy = r.cy();
	        if (uy <= vy && r.y < this.Y)
	            return this.Y - r.y;
	        if (vy <= uy && this.y < r.Y)
	            return r.Y - this.y;
	        return 0;
	    };
	    Rectangle.prototype.setXCentre = function (cx) {
	        var dx = cx - this.cx();
	        this.x += dx;
	        this.X += dx;
	    };
	    Rectangle.prototype.setYCentre = function (cy) {
	        var dy = cy - this.cy();
	        this.y += dy;
	        this.Y += dy;
	    };
	    Rectangle.prototype.width = function () {
	        return this.X - this.x;
	    };
	    Rectangle.prototype.height = function () {
	        return this.Y - this.y;
	    };
	    Rectangle.prototype.union = function (r) {
	        return new Rectangle(Math.min(this.x, r.x), Math.max(this.X, r.X), Math.min(this.y, r.y), Math.max(this.Y, r.Y));
	    };
	    Rectangle.prototype.lineIntersections = function (x1, y1, x2, y2) {
	        var sides = [[this.x, this.y, this.X, this.y],
	            [this.X, this.y, this.X, this.Y],
	            [this.X, this.Y, this.x, this.Y],
	            [this.x, this.Y, this.x, this.y]];
	        var intersections = [];
	        for (var i = 0; i < 4; ++i) {
	            var r = Rectangle.lineIntersection(x1, y1, x2, y2, sides[i][0], sides[i][1], sides[i][2], sides[i][3]);
	            if (r !== null)
	                intersections.push({ x: r.x, y: r.y });
	        }
	        return intersections;
	    };
	    Rectangle.prototype.rayIntersection = function (x2, y2) {
	        var ints = this.lineIntersections(this.cx(), this.cy(), x2, y2);
	        return ints.length > 0 ? ints[0] : null;
	    };
	    Rectangle.prototype.vertices = function () {
	        return [
	            { x: this.x, y: this.y },
	            { x: this.X, y: this.y },
	            { x: this.X, y: this.Y },
	            { x: this.x, y: this.Y }
	        ];
	    };
	    Rectangle.lineIntersection = function (x1, y1, x2, y2, x3, y3, x4, y4) {
	        var dx12 = x2 - x1, dx34 = x4 - x3, dy12 = y2 - y1, dy34 = y4 - y3, denominator = dy34 * dx12 - dx34 * dy12;
	        if (denominator == 0)
	            return null;
	        var dx31 = x1 - x3, dy31 = y1 - y3, numa = dx34 * dy31 - dy34 * dx31, a = numa / denominator, numb = dx12 * dy31 - dy12 * dx31, b = numb / denominator;
	        if (a >= 0 && a <= 1 && b >= 0 && b <= 1) {
	            return {
	                x: x1 + a * dx12,
	                y: y1 + a * dy12
	            };
	        }
	        return null;
	    };
	    Rectangle.prototype.inflate = function (pad) {
	        return new Rectangle(this.x - pad, this.X + pad, this.y - pad, this.Y + pad);
	    };
	    return Rectangle;
	}());
	exports.Rectangle = Rectangle;
	function makeEdgeBetween(source, target, ah) {
	    var si = source.rayIntersection(target.cx(), target.cy()) || { x: source.cx(), y: source.cy() }, ti = target.rayIntersection(source.cx(), source.cy()) || { x: target.cx(), y: target.cy() }, dx = ti.x - si.x, dy = ti.y - si.y, l = Math.sqrt(dx * dx + dy * dy), al = l - ah;
	    return {
	        sourceIntersection: si,
	        targetIntersection: ti,
	        arrowStart: { x: si.x + al * dx / l, y: si.y + al * dy / l }
	    };
	}
	exports.makeEdgeBetween = makeEdgeBetween;
	function makeEdgeTo(s, target, ah) {
	    var ti = target.rayIntersection(s.x, s.y);
	    if (!ti)
	        ti = { x: target.cx(), y: target.cy() };
	    var dx = ti.x - s.x, dy = ti.y - s.y, l = Math.sqrt(dx * dx + dy * dy);
	    return { x: ti.x - ah * dx / l, y: ti.y - ah * dy / l };
	}
	exports.makeEdgeTo = makeEdgeTo;
	var Node = (function () {
	    function Node(v, r, pos) {
	        this.v = v;
	        this.r = r;
	        this.pos = pos;
	        this.prev = makeRBTree();
	        this.next = makeRBTree();
	    }
	    return Node;
	}());
	var Event = (function () {
	    function Event(isOpen, v, pos) {
	        this.isOpen = isOpen;
	        this.v = v;
	        this.pos = pos;
	    }
	    return Event;
	}());
	function compareEvents(a, b) {
	    if (a.pos > b.pos) {
	        return 1;
	    }
	    if (a.pos < b.pos) {
	        return -1;
	    }
	    if (a.isOpen) {
	        return -1;
	    }
	    if (b.isOpen) {
	        return 1;
	    }
	    return 0;
	}
	function makeRBTree() {
	    return new rbtree.RBTree(function (a, b) { return a.pos - b.pos; });
	}
	var xRect = {
	    getCentre: function (r) { return r.cx(); },
	    getOpen: function (r) { return r.y; },
	    getClose: function (r) { return r.Y; },
	    getSize: function (r) { return r.width(); },
	    makeRect: function (open, close, center, size) { return new Rectangle(center - size / 2, center + size / 2, open, close); },
	    findNeighbours: findXNeighbours
	};
	var yRect = {
	    getCentre: function (r) { return r.cy(); },
	    getOpen: function (r) { return r.x; },
	    getClose: function (r) { return r.X; },
	    getSize: function (r) { return r.height(); },
	    makeRect: function (open, close, center, size) { return new Rectangle(open, close, center - size / 2, center + size / 2); },
	    findNeighbours: findYNeighbours
	};
	function generateGroupConstraints(root, f, minSep, isContained) {
	    if (isContained === void 0) { isContained = false; }
	    var padding = root.padding, gn = typeof root.groups !== 'undefined' ? root.groups.length : 0, ln = typeof root.leaves !== 'undefined' ? root.leaves.length : 0, childConstraints = !gn ? []
	        : root.groups.reduce(function (ccs, g) { return ccs.concat(generateGroupConstraints(g, f, minSep, true)); }, []), n = (isContained ? 2 : 0) + ln + gn, vs = new Array(n), rs = new Array(n), i = 0, add = function (r, v) { rs[i] = r; vs[i++] = v; };
	    if (isContained) {
	        var b = root.bounds, c = f.getCentre(b), s = f.getSize(b) / 2, open = f.getOpen(b), close = f.getClose(b), min = c - s + padding / 2, max = c + s - padding / 2;
	        root.minVar.desiredPosition = min;
	        add(f.makeRect(open, close, min, padding), root.minVar);
	        root.maxVar.desiredPosition = max;
	        add(f.makeRect(open, close, max, padding), root.maxVar);
	    }
	    if (ln)
	        root.leaves.forEach(function (l) { return add(l.bounds, l.variable); });
	    if (gn)
	        root.groups.forEach(function (g) {
	            var b = g.bounds;
	            add(f.makeRect(f.getOpen(b), f.getClose(b), f.getCentre(b), f.getSize(b)), g.minVar);
	        });
	    var cs = generateConstraints(rs, vs, f, minSep);
	    if (gn) {
	        vs.forEach(function (v) { v.cOut = [], v.cIn = []; });
	        cs.forEach(function (c) { c.left.cOut.push(c), c.right.cIn.push(c); });
	        root.groups.forEach(function (g) {
	            var gapAdjustment = (g.padding - f.getSize(g.bounds)) / 2;
	            g.minVar.cIn.forEach(function (c) { return c.gap += gapAdjustment; });
	            g.minVar.cOut.forEach(function (c) { c.left = g.maxVar; c.gap += gapAdjustment; });
	        });
	    }
	    return childConstraints.concat(cs);
	}
	function generateConstraints(rs, vars, rect, minSep) {
	    var i, n = rs.length;
	    var N = 2 * n;
	    console.assert(vars.length >= n);
	    var events = new Array(N);
	    for (i = 0; i < n; ++i) {
	        var r = rs[i];
	        var v = new Node(vars[i], r, rect.getCentre(r));
	        events[i] = new Event(true, v, rect.getOpen(r));
	        events[i + n] = new Event(false, v, rect.getClose(r));
	    }
	    events.sort(compareEvents);
	    var cs = new Array();
	    var scanline = makeRBTree();
	    for (i = 0; i < N; ++i) {
	        var e = events[i];
	        var v = e.v;
	        if (e.isOpen) {
	            scanline.insert(v);
	            rect.findNeighbours(v, scanline);
	        }
	        else {
	            scanline.remove(v);
	            var makeConstraint = function (l, r) {
	                var sep = (rect.getSize(l.r) + rect.getSize(r.r)) / 2 + minSep;
	                cs.push(new vpsc.Constraint(l.v, r.v, sep));
	            };
	            var visitNeighbours = function (forward, reverse, mkcon) {
	                var u, it = v[forward].iterator();
	                while ((u = it[forward]()) !== null) {
	                    mkcon(u, v);
	                    u[reverse].remove(v);
	                }
	            };
	            visitNeighbours("prev", "next", function (u, v) { return makeConstraint(u, v); });
	            visitNeighbours("next", "prev", function (u, v) { return makeConstraint(v, u); });
	        }
	    }
	    console.assert(scanline.size === 0);
	    return cs;
	}
	function findXNeighbours(v, scanline) {
	    var f = function (forward, reverse) {
	        var it = scanline.findIter(v);
	        var u;
	        while ((u = it[forward]()) !== null) {
	            var uovervX = u.r.overlapX(v.r);
	            if (uovervX <= 0 || uovervX <= u.r.overlapY(v.r)) {
	                v[forward].insert(u);
	                u[reverse].insert(v);
	            }
	            if (uovervX <= 0) {
	                break;
	            }
	        }
	    };
	    f("next", "prev");
	    f("prev", "next");
	}
	function findYNeighbours(v, scanline) {
	    var f = function (forward, reverse) {
	        var u = scanline.findIter(v)[forward]();
	        if (u !== null && u.r.overlapX(v.r) > 0) {
	            v[forward].insert(u);
	            u[reverse].insert(v);
	        }
	    };
	    f("next", "prev");
	    f("prev", "next");
	}
	function generateXConstraints(rs, vars) {
	    return generateConstraints(rs, vars, xRect, 1e-6);
	}
	exports.generateXConstraints = generateXConstraints;
	function generateYConstraints(rs, vars) {
	    return generateConstraints(rs, vars, yRect, 1e-6);
	}
	exports.generateYConstraints = generateYConstraints;
	function generateXGroupConstraints(root) {
	    return generateGroupConstraints(root, xRect, 1e-6);
	}
	exports.generateXGroupConstraints = generateXGroupConstraints;
	function generateYGroupConstraints(root) {
	    return generateGroupConstraints(root, yRect, 1e-6);
	}
	exports.generateYGroupConstraints = generateYGroupConstraints;
	function removeOverlaps(rs) {
	    var vs = rs.map(function (r) { return new vpsc.Variable(r.cx()); });
	    var cs = generateXConstraints(rs, vs);
	    var solver = new vpsc.Solver(vs, cs);
	    solver.solve();
	    vs.forEach(function (v, i) { return rs[i].setXCentre(v.position()); });
	    vs = rs.map(function (r) { return new vpsc.Variable(r.cy()); });
	    cs = generateYConstraints(rs, vs);
	    solver = new vpsc.Solver(vs, cs);
	    solver.solve();
	    vs.forEach(function (v, i) { return rs[i].setYCentre(v.position()); });
	}
	exports.removeOverlaps = removeOverlaps;
	var IndexedVariable = (function (_super) {
	    __extends(IndexedVariable, _super);
	    function IndexedVariable(index, w) {
	        var _this = _super.call(this, 0, w) || this;
	        _this.index = index;
	        return _this;
	    }
	    return IndexedVariable;
	}(vpsc.Variable));
	exports.IndexedVariable = IndexedVariable;
	var Projection = (function () {
	    function Projection(nodes, groups, rootGroup, constraints, avoidOverlaps) {
	        var _this = this;
	        if (rootGroup === void 0) { rootGroup = null; }
	        if (constraints === void 0) { constraints = null; }
	        if (avoidOverlaps === void 0) { avoidOverlaps = false; }
	        this.nodes = nodes;
	        this.groups = groups;
	        this.rootGroup = rootGroup;
	        this.avoidOverlaps = avoidOverlaps;
	        this.variables = nodes.map(function (v, i) {
	            return v.variable = new IndexedVariable(i, 1);
	        });
	        if (constraints)
	            this.createConstraints(constraints);
	        if (avoidOverlaps && rootGroup && typeof rootGroup.groups !== 'undefined') {
	            nodes.forEach(function (v) {
	                if (!v.width || !v.height) {
	                    v.bounds = new Rectangle(v.x, v.x, v.y, v.y);
	                    return;
	                }
	                var w2 = v.width / 2, h2 = v.height / 2;
	                v.bounds = new Rectangle(v.x - w2, v.x + w2, v.y - h2, v.y + h2);
	            });
	            computeGroupBounds(rootGroup);
	            var i = nodes.length;
	            groups.forEach(function (g) {
	                _this.variables[i] = g.minVar = new IndexedVariable(i++, typeof g.stiffness !== "undefined" ? g.stiffness : 0.01);
	                _this.variables[i] = g.maxVar = new IndexedVariable(i++, typeof g.stiffness !== "undefined" ? g.stiffness : 0.01);
	            });
	        }
	    }
	    Projection.prototype.createSeparation = function (c) {
	        return new vpsc.Constraint(this.nodes[c.left].variable, this.nodes[c.right].variable, c.gap, typeof c.equality !== "undefined" ? c.equality : false);
	    };
	    Projection.prototype.makeFeasible = function (c) {
	        var _this = this;
	        if (!this.avoidOverlaps)
	            return;
	        var axis = 'x', dim = 'width';
	        if (c.axis === 'x')
	            axis = 'y', dim = 'height';
	        var vs = c.offsets.map(function (o) { return _this.nodes[o.node]; }).sort(function (a, b) { return a[axis] - b[axis]; });
	        var p = null;
	        vs.forEach(function (v) {
	            if (p) {
	                var nextPos = p[axis] + p[dim];
	                if (nextPos > v[axis]) {
	                    v[axis] = nextPos;
	                }
	            }
	            p = v;
	        });
	    };
	    Projection.prototype.createAlignment = function (c) {
	        var _this = this;
	        var u = this.nodes[c.offsets[0].node].variable;
	        this.makeFeasible(c);
	        var cs = c.axis === 'x' ? this.xConstraints : this.yConstraints;
	        c.offsets.slice(1).forEach(function (o) {
	            var v = _this.nodes[o.node].variable;
	            cs.push(new vpsc.Constraint(u, v, o.offset, true));
	        });
	    };
	    Projection.prototype.createConstraints = function (constraints) {
	        var _this = this;
	        var isSep = function (c) { return typeof c.type === 'undefined' || c.type === 'separation'; };
	        this.xConstraints = constraints
	            .filter(function (c) { return c.axis === "x" && isSep(c); })
	            .map(function (c) { return _this.createSeparation(c); });
	        this.yConstraints = constraints
	            .filter(function (c) { return c.axis === "y" && isSep(c); })
	            .map(function (c) { return _this.createSeparation(c); });
	        constraints
	            .filter(function (c) { return c.type === 'alignment'; })
	            .forEach(function (c) { return _this.createAlignment(c); });
	    };
	    Projection.prototype.setupVariablesAndBounds = function (x0, y0, desired, getDesired) {
	        this.nodes.forEach(function (v, i) {
	            if (v.fixed) {
	                v.variable.weight = v.fixedWeight ? v.fixedWeight : 1000;
	                desired[i] = getDesired(v);
	            }
	            else {
	                v.variable.weight = 1;
	            }
	            var w = (v.width || 0) / 2, h = (v.height || 0) / 2;
	            var ix = x0[i], iy = y0[i];
	            v.bounds = new Rectangle(ix - w, ix + w, iy - h, iy + h);
	        });
	    };
	    Projection.prototype.xProject = function (x0, y0, x) {
	        if (!this.rootGroup && !(this.avoidOverlaps || this.xConstraints))
	            return;
	        this.project(x0, y0, x0, x, function (v) { return v.px; }, this.xConstraints, generateXGroupConstraints, function (v) { return v.bounds.setXCentre(x[v.variable.index] = v.variable.position()); }, function (g) {
	            var xmin = x[g.minVar.index] = g.minVar.position();
	            var xmax = x[g.maxVar.index] = g.maxVar.position();
	            var p2 = g.padding / 2;
	            g.bounds.x = xmin - p2;
	            g.bounds.X = xmax + p2;
	        });
	    };
	    Projection.prototype.yProject = function (x0, y0, y) {
	        if (!this.rootGroup && !this.yConstraints)
	            return;
	        this.project(x0, y0, y0, y, function (v) { return v.py; }, this.yConstraints, generateYGroupConstraints, function (v) { return v.bounds.setYCentre(y[v.variable.index] = v.variable.position()); }, function (g) {
	            var ymin = y[g.minVar.index] = g.minVar.position();
	            var ymax = y[g.maxVar.index] = g.maxVar.position();
	            var p2 = g.padding / 2;
	            g.bounds.y = ymin - p2;
	            g.bounds.Y = ymax + p2;
	        });
	    };
	    Projection.prototype.projectFunctions = function () {
	        var _this = this;
	        return [
	            function (x0, y0, x) { return _this.xProject(x0, y0, x); },
	            function (x0, y0, y) { return _this.yProject(x0, y0, y); }
	        ];
	    };
	    Projection.prototype.project = function (x0, y0, start, desired, getDesired, cs, generateConstraints, updateNodeBounds, updateGroupBounds) {
	        this.setupVariablesAndBounds(x0, y0, desired, getDesired);
	        if (this.rootGroup && this.avoidOverlaps) {
	            computeGroupBounds(this.rootGroup);
	            cs = cs.concat(generateConstraints(this.rootGroup));
	        }
	        this.solve(this.variables, cs, start, desired);
	        this.nodes.forEach(updateNodeBounds);
	        if (this.rootGroup && this.avoidOverlaps) {
	            this.groups.forEach(updateGroupBounds);
	            computeGroupBounds(this.rootGroup);
	        }
	    };
	    Projection.prototype.solve = function (vs, cs, starting, desired) {
	        var solver = new vpsc.Solver(vs, cs);
	        solver.setStartingPositions(starting);
	        solver.setDesiredPositions(desired);
	        solver.solve();
	    };
	    return Projection;
	}());
	exports.Projection = Projection;

	});

	unwrapExports(rectangle);
	var rectangle_1 = rectangle.computeGroupBounds;
	var rectangle_2 = rectangle.Rectangle;
	var rectangle_3 = rectangle.makeEdgeBetween;
	var rectangle_4 = rectangle.makeEdgeTo;
	var rectangle_5 = rectangle.generateXConstraints;
	var rectangle_6 = rectangle.generateYConstraints;
	var rectangle_7 = rectangle.generateXGroupConstraints;
	var rectangle_8 = rectangle.generateYGroupConstraints;
	var rectangle_9 = rectangle.removeOverlaps;
	var rectangle_10 = rectangle.IndexedVariable;
	var rectangle_11 = rectangle.Projection;

	var pqueue = createCommonjsModule(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	var PairingHeap = (function () {
	    function PairingHeap(elem) {
	        this.elem = elem;
	        this.subheaps = [];
	    }
	    PairingHeap.prototype.toString = function (selector) {
	        var str = "", needComma = false;
	        for (var i = 0; i < this.subheaps.length; ++i) {
	            var subheap = this.subheaps[i];
	            if (!subheap.elem) {
	                needComma = false;
	                continue;
	            }
	            if (needComma) {
	                str = str + ",";
	            }
	            str = str + subheap.toString(selector);
	            needComma = true;
	        }
	        if (str !== "") {
	            str = "(" + str + ")";
	        }
	        return (this.elem ? selector(this.elem) : "") + str;
	    };
	    PairingHeap.prototype.forEach = function (f) {
	        if (!this.empty()) {
	            f(this.elem, this);
	            this.subheaps.forEach(function (s) { return s.forEach(f); });
	        }
	    };
	    PairingHeap.prototype.count = function () {
	        return this.empty() ? 0 : 1 + this.subheaps.reduce(function (n, h) {
	            return n + h.count();
	        }, 0);
	    };
	    PairingHeap.prototype.min = function () {
	        return this.elem;
	    };
	    PairingHeap.prototype.empty = function () {
	        return this.elem == null;
	    };
	    PairingHeap.prototype.contains = function (h) {
	        if (this === h)
	            return true;
	        for (var i = 0; i < this.subheaps.length; i++) {
	            if (this.subheaps[i].contains(h))
	                return true;
	        }
	        return false;
	    };
	    PairingHeap.prototype.isHeap = function (lessThan) {
	        var _this = this;
	        return this.subheaps.every(function (h) { return lessThan(_this.elem, h.elem) && h.isHeap(lessThan); });
	    };
	    PairingHeap.prototype.insert = function (obj, lessThan) {
	        return this.merge(new PairingHeap(obj), lessThan);
	    };
	    PairingHeap.prototype.merge = function (heap2, lessThan) {
	        if (this.empty())
	            return heap2;
	        else if (heap2.empty())
	            return this;
	        else if (lessThan(this.elem, heap2.elem)) {
	            this.subheaps.push(heap2);
	            return this;
	        }
	        else {
	            heap2.subheaps.push(this);
	            return heap2;
	        }
	    };
	    PairingHeap.prototype.removeMin = function (lessThan) {
	        if (this.empty())
	            return null;
	        else
	            return this.mergePairs(lessThan);
	    };
	    PairingHeap.prototype.mergePairs = function (lessThan) {
	        if (this.subheaps.length == 0)
	            return new PairingHeap(null);
	        else if (this.subheaps.length == 1) {
	            return this.subheaps[0];
	        }
	        else {
	            var firstPair = this.subheaps.pop().merge(this.subheaps.pop(), lessThan);
	            var remaining = this.mergePairs(lessThan);
	            return firstPair.merge(remaining, lessThan);
	        }
	    };
	    PairingHeap.prototype.decreaseKey = function (subheap, newValue, setHeapNode, lessThan) {
	        var newHeap = subheap.removeMin(lessThan);
	        subheap.elem = newHeap.elem;
	        subheap.subheaps = newHeap.subheaps;
	        if (setHeapNode !== null && newHeap.elem !== null) {
	            setHeapNode(subheap.elem, subheap);
	        }
	        var pairingNode = new PairingHeap(newValue);
	        if (setHeapNode !== null) {
	            setHeapNode(newValue, pairingNode);
	        }
	        return this.merge(pairingNode, lessThan);
	    };
	    return PairingHeap;
	}());
	exports.PairingHeap = PairingHeap;
	var PriorityQueue = (function () {
	    function PriorityQueue(lessThan) {
	        this.lessThan = lessThan;
	    }
	    PriorityQueue.prototype.top = function () {
	        if (this.empty()) {
	            return null;
	        }
	        return this.root.elem;
	    };
	    PriorityQueue.prototype.push = function () {
	        var args = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            args[_i] = arguments[_i];
	        }
	        var pairingNode;
	        for (var i = 0, arg; arg = args[i]; ++i) {
	            pairingNode = new PairingHeap(arg);
	            this.root = this.empty() ?
	                pairingNode : this.root.merge(pairingNode, this.lessThan);
	        }
	        return pairingNode;
	    };
	    PriorityQueue.prototype.empty = function () {
	        return !this.root || !this.root.elem;
	    };
	    PriorityQueue.prototype.isHeap = function () {
	        return this.root.isHeap(this.lessThan);
	    };
	    PriorityQueue.prototype.forEach = function (f) {
	        this.root.forEach(f);
	    };
	    PriorityQueue.prototype.pop = function () {
	        if (this.empty()) {
	            return null;
	        }
	        var obj = this.root.min();
	        this.root = this.root.removeMin(this.lessThan);
	        return obj;
	    };
	    PriorityQueue.prototype.reduceKey = function (heapNode, newKey, setHeapNode) {
	        if (setHeapNode === void 0) { setHeapNode = null; }
	        this.root = this.root.decreaseKey(heapNode, newKey, setHeapNode, this.lessThan);
	    };
	    PriorityQueue.prototype.toString = function (selector) {
	        return this.root.toString(selector);
	    };
	    PriorityQueue.prototype.count = function () {
	        return this.root.count();
	    };
	    return PriorityQueue;
	}());
	exports.PriorityQueue = PriorityQueue;

	});

	unwrapExports(pqueue);
	var pqueue_1 = pqueue.PairingHeap;
	var pqueue_2 = pqueue.PriorityQueue;

	var shortestpaths = createCommonjsModule(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });

	var Neighbour = (function () {
	    function Neighbour(id, distance) {
	        this.id = id;
	        this.distance = distance;
	    }
	    return Neighbour;
	}());
	var Node = (function () {
	    function Node(id) {
	        this.id = id;
	        this.neighbours = [];
	    }
	    return Node;
	}());
	var QueueEntry = (function () {
	    function QueueEntry(node, prev, d) {
	        this.node = node;
	        this.prev = prev;
	        this.d = d;
	    }
	    return QueueEntry;
	}());
	var Calculator = (function () {
	    function Calculator(n, es, getSourceIndex, getTargetIndex, getLength) {
	        this.n = n;
	        this.es = es;
	        this.neighbours = new Array(this.n);
	        var i = this.n;
	        while (i--)
	            this.neighbours[i] = new Node(i);
	        i = this.es.length;
	        while (i--) {
	            var e = this.es[i];
	            var u = getSourceIndex(e), v = getTargetIndex(e);
	            var d = getLength(e);
	            this.neighbours[u].neighbours.push(new Neighbour(v, d));
	            this.neighbours[v].neighbours.push(new Neighbour(u, d));
	        }
	    }
	    Calculator.prototype.DistanceMatrix = function () {
	        var D = new Array(this.n);
	        for (var i = 0; i < this.n; ++i) {
	            D[i] = this.dijkstraNeighbours(i);
	        }
	        return D;
	    };
	    Calculator.prototype.DistancesFromNode = function (start) {
	        return this.dijkstraNeighbours(start);
	    };
	    Calculator.prototype.PathFromNodeToNode = function (start, end) {
	        return this.dijkstraNeighbours(start, end);
	    };
	    Calculator.prototype.PathFromNodeToNodeWithPrevCost = function (start, end, prevCost) {
	        var q = new pqueue.PriorityQueue(function (a, b) { return a.d <= b.d; }), u = this.neighbours[start], qu = new QueueEntry(u, null, 0), visitedFrom = {};
	        q.push(qu);
	        while (!q.empty()) {
	            qu = q.pop();
	            u = qu.node;
	            if (u.id === end) {
	                break;
	            }
	            var i = u.neighbours.length;
	            while (i--) {
	                var neighbour = u.neighbours[i], v = this.neighbours[neighbour.id];
	                if (qu.prev && v.id === qu.prev.node.id)
	                    continue;
	                var viduid = v.id + ',' + u.id;
	                if (viduid in visitedFrom && visitedFrom[viduid] <= qu.d)
	                    continue;
	                var cc = qu.prev ? prevCost(qu.prev.node.id, u.id, v.id) : 0, t = qu.d + neighbour.distance + cc;
	                visitedFrom[viduid] = t;
	                q.push(new QueueEntry(v, qu, t));
	            }
	        }
	        var path = [];
	        while (qu.prev) {
	            qu = qu.prev;
	            path.push(qu.node.id);
	        }
	        return path;
	    };
	    Calculator.prototype.dijkstraNeighbours = function (start, dest) {
	        if (dest === void 0) { dest = -1; }
	        var q = new pqueue.PriorityQueue(function (a, b) { return a.d <= b.d; }), i = this.neighbours.length, d = new Array(i);
	        while (i--) {
	            var node = this.neighbours[i];
	            node.d = i === start ? 0 : Number.POSITIVE_INFINITY;
	            node.q = q.push(node);
	        }
	        while (!q.empty()) {
	            var u = q.pop();
	            d[u.id] = u.d;
	            if (u.id === dest) {
	                var path = [];
	                var v = u;
	                while (typeof v.prev !== 'undefined') {
	                    path.push(v.prev.id);
	                    v = v.prev;
	                }
	                return path;
	            }
	            i = u.neighbours.length;
	            while (i--) {
	                var neighbour = u.neighbours[i];
	                var v = this.neighbours[neighbour.id];
	                var t = u.d + neighbour.distance;
	                if (u.d !== Number.MAX_VALUE && v.d > t) {
	                    v.d = t;
	                    v.prev = u;
	                    q.reduceKey(v.q, v, function (e, q) { return e.q = q; });
	                }
	            }
	        }
	        return d;
	    };
	    return Calculator;
	}());
	exports.Calculator = Calculator;

	});

	unwrapExports(shortestpaths);
	var shortestpaths_1 = shortestpaths.Calculator;

	var geom = createCommonjsModule(function (module, exports) {
	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });

	var Point = (function () {
	    function Point() {
	    }
	    return Point;
	}());
	exports.Point = Point;
	var LineSegment = (function () {
	    function LineSegment(x1, y1, x2, y2) {
	        this.x1 = x1;
	        this.y1 = y1;
	        this.x2 = x2;
	        this.y2 = y2;
	    }
	    return LineSegment;
	}());
	exports.LineSegment = LineSegment;
	var PolyPoint = (function (_super) {
	    __extends(PolyPoint, _super);
	    function PolyPoint() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    return PolyPoint;
	}(Point));
	exports.PolyPoint = PolyPoint;
	function isLeft(P0, P1, P2) {
	    return (P1.x - P0.x) * (P2.y - P0.y) - (P2.x - P0.x) * (P1.y - P0.y);
	}
	exports.isLeft = isLeft;
	function above(p, vi, vj) {
	    return isLeft(p, vi, vj) > 0;
	}
	function below(p, vi, vj) {
	    return isLeft(p, vi, vj) < 0;
	}
	function ConvexHull(S) {
	    var P = S.slice(0).sort(function (a, b) { return a.x !== b.x ? b.x - a.x : b.y - a.y; });
	    var n = S.length, i;
	    var minmin = 0;
	    var xmin = P[0].x;
	    for (i = 1; i < n; ++i) {
	        if (P[i].x !== xmin)
	            break;
	    }
	    var minmax = i - 1;
	    var H = [];
	    H.push(P[minmin]);
	    if (minmax === n - 1) {
	        if (P[minmax].y !== P[minmin].y)
	            H.push(P[minmax]);
	    }
	    else {
	        var maxmin, maxmax = n - 1;
	        var xmax = P[n - 1].x;
	        for (i = n - 2; i >= 0; i--)
	            if (P[i].x !== xmax)
	                break;
	        maxmin = i + 1;
	        i = minmax;
	        while (++i <= maxmin) {
	            if (isLeft(P[minmin], P[maxmin], P[i]) >= 0 && i < maxmin)
	                continue;
	            while (H.length > 1) {
	                if (isLeft(H[H.length - 2], H[H.length - 1], P[i]) > 0)
	                    break;
	                else
	                    H.length -= 1;
	            }
	            if (i != minmin)
	                H.push(P[i]);
	        }
	        if (maxmax != maxmin)
	            H.push(P[maxmax]);
	        var bot = H.length;
	        i = maxmin;
	        while (--i >= minmax) {
	            if (isLeft(P[maxmax], P[minmax], P[i]) >= 0 && i > minmax)
	                continue;
	            while (H.length > bot) {
	                if (isLeft(H[H.length - 2], H[H.length - 1], P[i]) > 0)
	                    break;
	                else
	                    H.length -= 1;
	            }
	            if (i != minmin)
	                H.push(P[i]);
	        }
	    }
	    return H;
	}
	exports.ConvexHull = ConvexHull;
	function clockwiseRadialSweep(p, P, f) {
	    P.slice(0).sort(function (a, b) { return Math.atan2(a.y - p.y, a.x - p.x) - Math.atan2(b.y - p.y, b.x - p.x); }).forEach(f);
	}
	exports.clockwiseRadialSweep = clockwiseRadialSweep;
	function tangent_PointPolyC(P, V) {
	    var Vclosed = V.slice(0);
	    Vclosed.push(V[0]);
	    return { rtan: Rtangent_PointPolyC(P, Vclosed), ltan: Ltangent_PointPolyC(P, Vclosed) };
	}
	function Rtangent_PointPolyC(P, V) {
	    var n = V.length - 1;
	    var a, b, c;
	    var upA, dnC;
	    if (below(P, V[1], V[0]) && !above(P, V[n - 1], V[0]))
	        return 0;
	    for (a = 0, b = n;;) {
	        if (b - a === 1)
	            if (above(P, V[a], V[b]))
	                return a;
	            else
	                return b;
	        c = Math.floor((a + b) / 2);
	        dnC = below(P, V[c + 1], V[c]);
	        if (dnC && !above(P, V[c - 1], V[c]))
	            return c;
	        upA = above(P, V[a + 1], V[a]);
	        if (upA) {
	            if (dnC)
	                b = c;
	            else {
	                if (above(P, V[a], V[c]))
	                    b = c;
	                else
	                    a = c;
	            }
	        }
	        else {
	            if (!dnC)
	                a = c;
	            else {
	                if (below(P, V[a], V[c]))
	                    b = c;
	                else
	                    a = c;
	            }
	        }
	    }
	}
	function Ltangent_PointPolyC(P, V) {
	    var n = V.length - 1;
	    var a, b, c;
	    var dnA, dnC;
	    if (above(P, V[n - 1], V[0]) && !below(P, V[1], V[0]))
	        return 0;
	    for (a = 0, b = n;;) {
	        if (b - a === 1)
	            if (below(P, V[a], V[b]))
	                return a;
	            else
	                return b;
	        c = Math.floor((a + b) / 2);
	        dnC = below(P, V[c + 1], V[c]);
	        if (above(P, V[c - 1], V[c]) && !dnC)
	            return c;
	        dnA = below(P, V[a + 1], V[a]);
	        if (dnA) {
	            if (!dnC)
	                b = c;
	            else {
	                if (below(P, V[a], V[c]))
	                    b = c;
	                else
	                    a = c;
	            }
	        }
	        else {
	            if (dnC)
	                a = c;
	            else {
	                if (above(P, V[a], V[c]))
	                    b = c;
	                else
	                    a = c;
	            }
	        }
	    }
	}
	function tangent_PolyPolyC(V, W, t1, t2, cmp1, cmp2) {
	    var ix1, ix2;
	    ix1 = t1(W[0], V);
	    ix2 = t2(V[ix1], W);
	    var done = false;
	    while (!done) {
	        done = true;
	        while (true) {
	            if (ix1 === V.length - 1)
	                ix1 = 0;
	            if (cmp1(W[ix2], V[ix1], V[ix1 + 1]))
	                break;
	            ++ix1;
	        }
	        while (true) {
	            if (ix2 === 0)
	                ix2 = W.length - 1;
	            if (cmp2(V[ix1], W[ix2], W[ix2 - 1]))
	                break;
	            --ix2;
	            done = false;
	        }
	    }
	    return { t1: ix1, t2: ix2 };
	}
	exports.tangent_PolyPolyC = tangent_PolyPolyC;
	function LRtangent_PolyPolyC(V, W) {
	    var rl = RLtangent_PolyPolyC(W, V);
	    return { t1: rl.t2, t2: rl.t1 };
	}
	exports.LRtangent_PolyPolyC = LRtangent_PolyPolyC;
	function RLtangent_PolyPolyC(V, W) {
	    return tangent_PolyPolyC(V, W, Rtangent_PointPolyC, Ltangent_PointPolyC, above, below);
	}
	exports.RLtangent_PolyPolyC = RLtangent_PolyPolyC;
	function LLtangent_PolyPolyC(V, W) {
	    return tangent_PolyPolyC(V, W, Ltangent_PointPolyC, Ltangent_PointPolyC, below, below);
	}
	exports.LLtangent_PolyPolyC = LLtangent_PolyPolyC;
	function RRtangent_PolyPolyC(V, W) {
	    return tangent_PolyPolyC(V, W, Rtangent_PointPolyC, Rtangent_PointPolyC, above, above);
	}
	exports.RRtangent_PolyPolyC = RRtangent_PolyPolyC;
	var BiTangent = (function () {
	    function BiTangent(t1, t2) {
	        this.t1 = t1;
	        this.t2 = t2;
	    }
	    return BiTangent;
	}());
	exports.BiTangent = BiTangent;
	var BiTangents = (function () {
	    function BiTangents() {
	    }
	    return BiTangents;
	}());
	exports.BiTangents = BiTangents;
	var TVGPoint = (function (_super) {
	    __extends(TVGPoint, _super);
	    function TVGPoint() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    return TVGPoint;
	}(Point));
	exports.TVGPoint = TVGPoint;
	var VisibilityVertex = (function () {
	    function VisibilityVertex(id, polyid, polyvertid, p) {
	        this.id = id;
	        this.polyid = polyid;
	        this.polyvertid = polyvertid;
	        this.p = p;
	        p.vv = this;
	    }
	    return VisibilityVertex;
	}());
	exports.VisibilityVertex = VisibilityVertex;
	var VisibilityEdge = (function () {
	    function VisibilityEdge(source, target) {
	        this.source = source;
	        this.target = target;
	    }
	    VisibilityEdge.prototype.length = function () {
	        var dx = this.source.p.x - this.target.p.x;
	        var dy = this.source.p.y - this.target.p.y;
	        return Math.sqrt(dx * dx + dy * dy);
	    };
	    return VisibilityEdge;
	}());
	exports.VisibilityEdge = VisibilityEdge;
	var TangentVisibilityGraph = (function () {
	    function TangentVisibilityGraph(P, g0) {
	        this.P = P;
	        this.V = [];
	        this.E = [];
	        if (!g0) {
	            var n = P.length;
	            for (var i = 0; i < n; i++) {
	                var p = P[i];
	                for (var j = 0; j < p.length; ++j) {
	                    var pj = p[j], vv = new VisibilityVertex(this.V.length, i, j, pj);
	                    this.V.push(vv);
	                    if (j > 0)
	                        this.E.push(new VisibilityEdge(p[j - 1].vv, vv));
	                }
	                if (p.length > 1)
	                    this.E.push(new VisibilityEdge(p[0].vv, p[p.length - 1].vv));
	            }
	            for (var i = 0; i < n - 1; i++) {
	                var Pi = P[i];
	                for (var j = i + 1; j < n; j++) {
	                    var Pj = P[j], t = tangents(Pi, Pj);
	                    for (var q in t) {
	                        var c = t[q], source = Pi[c.t1], target = Pj[c.t2];
	                        this.addEdgeIfVisible(source, target, i, j);
	                    }
	                }
	            }
	        }
	        else {
	            this.V = g0.V.slice(0);
	            this.E = g0.E.slice(0);
	        }
	    }
	    TangentVisibilityGraph.prototype.addEdgeIfVisible = function (u, v, i1, i2) {
	        if (!this.intersectsPolys(new LineSegment(u.x, u.y, v.x, v.y), i1, i2)) {
	            this.E.push(new VisibilityEdge(u.vv, v.vv));
	        }
	    };
	    TangentVisibilityGraph.prototype.addPoint = function (p, i1) {
	        var n = this.P.length;
	        this.V.push(new VisibilityVertex(this.V.length, n, 0, p));
	        for (var i = 0; i < n; ++i) {
	            if (i === i1)
	                continue;
	            var poly = this.P[i], t = tangent_PointPolyC(p, poly);
	            this.addEdgeIfVisible(p, poly[t.ltan], i1, i);
	            this.addEdgeIfVisible(p, poly[t.rtan], i1, i);
	        }
	        return p.vv;
	    };
	    TangentVisibilityGraph.prototype.intersectsPolys = function (l, i1, i2) {
	        for (var i = 0, n = this.P.length; i < n; ++i) {
	            if (i != i1 && i != i2 && intersects(l, this.P[i]).length > 0) {
	                return true;
	            }
	        }
	        return false;
	    };
	    return TangentVisibilityGraph;
	}());
	exports.TangentVisibilityGraph = TangentVisibilityGraph;
	function intersects(l, P) {
	    var ints = [];
	    for (var i = 1, n = P.length; i < n; ++i) {
	        var int = rectangle.Rectangle.lineIntersection(l.x1, l.y1, l.x2, l.y2, P[i - 1].x, P[i - 1].y, P[i].x, P[i].y);
	        if (int)
	            ints.push(int);
	    }
	    return ints;
	}
	function tangents(V, W) {
	    var m = V.length - 1, n = W.length - 1;
	    var bt = new BiTangents();
	    for (var i = 0; i < m; ++i) {
	        for (var j = 0; j < n; ++j) {
	            var v1 = V[i == 0 ? m - 1 : i - 1];
	            var v2 = V[i];
	            var v3 = V[i + 1];
	            var w1 = W[j == 0 ? n - 1 : j - 1];
	            var w2 = W[j];
	            var w3 = W[j + 1];
	            var v1v2w2 = isLeft(v1, v2, w2);
	            var v2w1w2 = isLeft(v2, w1, w2);
	            var v2w2w3 = isLeft(v2, w2, w3);
	            var w1w2v2 = isLeft(w1, w2, v2);
	            var w2v1v2 = isLeft(w2, v1, v2);
	            var w2v2v3 = isLeft(w2, v2, v3);
	            if (v1v2w2 >= 0 && v2w1w2 >= 0 && v2w2w3 < 0
	                && w1w2v2 >= 0 && w2v1v2 >= 0 && w2v2v3 < 0) {
	                bt.ll = new BiTangent(i, j);
	            }
	            else if (v1v2w2 <= 0 && v2w1w2 <= 0 && v2w2w3 > 0
	                && w1w2v2 <= 0 && w2v1v2 <= 0 && w2v2v3 > 0) {
	                bt.rr = new BiTangent(i, j);
	            }
	            else if (v1v2w2 <= 0 && v2w1w2 > 0 && v2w2w3 <= 0
	                && w1w2v2 >= 0 && w2v1v2 < 0 && w2v2v3 >= 0) {
	                bt.rl = new BiTangent(i, j);
	            }
	            else if (v1v2w2 >= 0 && v2w1w2 < 0 && v2w2w3 >= 0
	                && w1w2v2 <= 0 && w2v1v2 > 0 && w2v2v3 <= 0) {
	                bt.lr = new BiTangent(i, j);
	            }
	        }
	    }
	    return bt;
	}
	exports.tangents = tangents;
	function isPointInsidePoly(p, poly) {
	    for (var i = 1, n = poly.length; i < n; ++i)
	        if (below(poly[i - 1], poly[i], p))
	            return false;
	    return true;
	}
	function isAnyPInQ(p, q) {
	    return !p.every(function (v) { return !isPointInsidePoly(v, q); });
	}
	function polysOverlap(p, q) {
	    if (isAnyPInQ(p, q))
	        return true;
	    if (isAnyPInQ(q, p))
	        return true;
	    for (var i = 1, n = p.length; i < n; ++i) {
	        var v = p[i], u = p[i - 1];
	        if (intersects(new LineSegment(u.x, u.y, v.x, v.y), q).length > 0)
	            return true;
	    }
	    return false;
	}
	exports.polysOverlap = polysOverlap;

	});

	unwrapExports(geom);
	var geom_1 = geom.Point;
	var geom_2 = geom.LineSegment;
	var geom_3 = geom.PolyPoint;
	var geom_4 = geom.isLeft;
	var geom_5 = geom.ConvexHull;
	var geom_6 = geom.clockwiseRadialSweep;
	var geom_7 = geom.tangent_PolyPolyC;
	var geom_8 = geom.LRtangent_PolyPolyC;
	var geom_9 = geom.RLtangent_PolyPolyC;
	var geom_10 = geom.LLtangent_PolyPolyC;
	var geom_11 = geom.RRtangent_PolyPolyC;
	var geom_12 = geom.BiTangent;
	var geom_13 = geom.BiTangents;
	var geom_14 = geom.TVGPoint;
	var geom_15 = geom.VisibilityVertex;
	var geom_16 = geom.VisibilityEdge;
	var geom_17 = geom.TangentVisibilityGraph;
	var geom_18 = geom.tangents;
	var geom_19 = geom.polysOverlap;

	var handledisconnected = createCommonjsModule(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	var packingOptions = {
	    PADDING: 10,
	    GOLDEN_SECTION: (1 + Math.sqrt(5)) / 2,
	    FLOAT_EPSILON: 0.0001,
	    MAX_INERATIONS: 100
	};
	function applyPacking(graphs, w, h, node_size, desired_ratio, centerGraph) {
	    if (desired_ratio === void 0) { desired_ratio = 1; }
	    if (centerGraph === void 0) { centerGraph = true; }
	    var init_x = 0, init_y = 0, svg_width = w, svg_height = h, desired_ratio = typeof desired_ratio !== 'undefined' ? desired_ratio : 1, node_size = typeof node_size !== 'undefined' ? node_size : 0, real_width = 0, real_height = 0, min_width = 0, global_bottom = 0, line = [];
	    if (graphs.length == 0)
	        return;
	    calculate_bb(graphs);
	    apply(graphs, desired_ratio);
	    if (centerGraph) {
	        put_nodes_to_right_positions(graphs);
	    }
	    function calculate_bb(graphs) {
	        graphs.forEach(function (g) {
	            calculate_single_bb(g);
	        });
	        function calculate_single_bb(graph) {
	            var min_x = Number.MAX_VALUE, min_y = Number.MAX_VALUE, max_x = 0, max_y = 0;
	            graph.array.forEach(function (v) {
	                var w = typeof v.width !== 'undefined' ? v.width : node_size;
	                var h = typeof v.height !== 'undefined' ? v.height : node_size;
	                w /= 2;
	                h /= 2;
	                max_x = Math.max(v.x + w, max_x);
	                min_x = Math.min(v.x - w, min_x);
	                max_y = Math.max(v.y + h, max_y);
	                min_y = Math.min(v.y - h, min_y);
	            });
	            graph.width = max_x - min_x;
	            graph.height = max_y - min_y;
	        }
	    }
	    function put_nodes_to_right_positions(graphs) {
	        graphs.forEach(function (g) {
	            var center = { x: 0, y: 0 };
	            g.array.forEach(function (node) {
	                center.x += node.x;
	                center.y += node.y;
	            });
	            center.x /= g.array.length;
	            center.y /= g.array.length;
	            var corner = { x: center.x - g.width / 2, y: center.y - g.height / 2 };
	            var offset = { x: g.x - corner.x + svg_width / 2 - real_width / 2, y: g.y - corner.y + svg_height / 2 - real_height / 2 };
	            g.array.forEach(function (node) {
	                node.x += offset.x;
	                node.y += offset.y;
	            });
	        });
	    }
	    function apply(data, desired_ratio) {
	        var curr_best_f = Number.POSITIVE_INFINITY;
	        var curr_best = 0;
	        data.sort(function (a, b) { return b.height - a.height; });
	        min_width = data.reduce(function (a, b) {
	            return a.width < b.width ? a.width : b.width;
	        });
	        var left = x1 = min_width;
	        var right = x2 = get_entire_width(data);
	        var iterationCounter = 0;
	        var f_x1 = Number.MAX_VALUE;
	        var f_x2 = Number.MAX_VALUE;
	        var flag = -1;
	        var dx = Number.MAX_VALUE;
	        var df = Number.MAX_VALUE;
	        while ((dx > min_width) || df > packingOptions.FLOAT_EPSILON) {
	            if (flag != 1) {
	                var x1 = right - (right - left) / packingOptions.GOLDEN_SECTION;
	                var f_x1 = step(data, x1);
	            }
	            if (flag != 0) {
	                var x2 = left + (right - left) / packingOptions.GOLDEN_SECTION;
	                var f_x2 = step(data, x2);
	            }
	            dx = Math.abs(x1 - x2);
	            df = Math.abs(f_x1 - f_x2);
	            if (f_x1 < curr_best_f) {
	                curr_best_f = f_x1;
	                curr_best = x1;
	            }
	            if (f_x2 < curr_best_f) {
	                curr_best_f = f_x2;
	                curr_best = x2;
	            }
	            if (f_x1 > f_x2) {
	                left = x1;
	                x1 = x2;
	                f_x1 = f_x2;
	                flag = 1;
	            }
	            else {
	                right = x2;
	                x2 = x1;
	                f_x2 = f_x1;
	                flag = 0;
	            }
	            if (iterationCounter++ > 100) {
	                break;
	            }
	        }
	        step(data, curr_best);
	    }
	    function step(data, max_width) {
	        line = [];
	        real_width = 0;
	        real_height = 0;
	        global_bottom = init_y;
	        for (var i = 0; i < data.length; i++) {
	            var o = data[i];
	            put_rect(o, max_width);
	        }
	        return Math.abs(get_real_ratio() - desired_ratio);
	    }
	    function put_rect(rect, max_width) {
	        var parent = undefined;
	        for (var i = 0; i < line.length; i++) {
	            if ((line[i].space_left >= rect.height) && (line[i].x + line[i].width + rect.width + packingOptions.PADDING - max_width) <= packingOptions.FLOAT_EPSILON) {
	                parent = line[i];
	                break;
	            }
	        }
	        line.push(rect);
	        if (parent !== undefined) {
	            rect.x = parent.x + parent.width + packingOptions.PADDING;
	            rect.y = parent.bottom;
	            rect.space_left = rect.height;
	            rect.bottom = rect.y;
	            parent.space_left -= rect.height + packingOptions.PADDING;
	            parent.bottom += rect.height + packingOptions.PADDING;
	        }
	        else {
	            rect.y = global_bottom;
	            global_bottom += rect.height + packingOptions.PADDING;
	            rect.x = init_x;
	            rect.bottom = rect.y;
	            rect.space_left = rect.height;
	        }
	        if (rect.y + rect.height - real_height > -packingOptions.FLOAT_EPSILON)
	            real_height = rect.y + rect.height - init_y;
	        if (rect.x + rect.width - real_width > -packingOptions.FLOAT_EPSILON)
	            real_width = rect.x + rect.width - init_x;
	    }
	    function get_entire_width(data) {
	        var width = 0;
	        data.forEach(function (d) { return width += d.width + packingOptions.PADDING; });
	        return width;
	    }
	    function get_real_ratio() {
	        return (real_width / real_height);
	    }
	}
	exports.applyPacking = applyPacking;
	function separateGraphs(nodes, links) {
	    var marks = {};
	    var ways = {};
	    var graphs = [];
	    var clusters = 0;
	    for (var i = 0; i < links.length; i++) {
	        var link = links[i];
	        var n1 = link.source;
	        var n2 = link.target;
	        if (ways[n1.index])
	            ways[n1.index].push(n2);
	        else
	            ways[n1.index] = [n2];
	        if (ways[n2.index])
	            ways[n2.index].push(n1);
	        else
	            ways[n2.index] = [n1];
	    }
	    for (var i = 0; i < nodes.length; i++) {
	        var node = nodes[i];
	        if (marks[node.index])
	            continue;
	        explore_node(node, true);
	    }
	    function explore_node(n, is_new) {
	        if (marks[n.index] !== undefined)
	            return;
	        if (is_new) {
	            clusters++;
	            graphs.push({ array: [] });
	        }
	        marks[n.index] = clusters;
	        graphs[clusters - 1].array.push(n);
	        var adjacent = ways[n.index];
	        if (!adjacent)
	            return;
	        for (var j = 0; j < adjacent.length; j++) {
	            explore_node(adjacent[j], false);
	        }
	    }
	    return graphs;
	}
	exports.separateGraphs = separateGraphs;

	});

	unwrapExports(handledisconnected);
	var handledisconnected_1 = handledisconnected.applyPacking;
	var handledisconnected_2 = handledisconnected.separateGraphs;

	var layout = createCommonjsModule(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });







	var EventType;
	(function (EventType) {
	    EventType[EventType["start"] = 0] = "start";
	    EventType[EventType["tick"] = 1] = "tick";
	    EventType[EventType["end"] = 2] = "end";
	})(EventType = exports.EventType || (exports.EventType = {}));
	function isGroup(g) {
	    return typeof g.leaves !== 'undefined' || typeof g.groups !== 'undefined';
	}
	var Layout = (function () {
	    function Layout() {
	        var _this = this;
	        this._canvasSize = [1, 1];
	        this._linkDistance = 20;
	        this._defaultNodeSize = 10;
	        this._linkLengthCalculator = null;
	        this._linkType = null;
	        this._avoidOverlaps = false;
	        this._handleDisconnected = true;
	        this._running = false;
	        this._nodes = [];
	        this._groups = [];
	        this._rootGroup = null;
	        this._links = [];
	        this._constraints = [];
	        this._distanceMatrix = null;
	        this._descent = null;
	        this._directedLinkConstraints = null;
	        this._threshold = 0.01;
	        this._visibilityGraph = null;
	        this._groupCompactness = 1e-6;
	        this.event = null;
	        this.linkAccessor = {
	            getSourceIndex: Layout.getSourceIndex,
	            getTargetIndex: Layout.getTargetIndex,
	            setLength: Layout.setLinkLength,
	            getType: function (l) { return typeof _this._linkType === "function" ? _this._linkType(l) : 0; }
	        };
	    }
	    Layout.prototype.on = function (e, listener) {
	        if (!this.event)
	            this.event = {};
	        if (typeof e === 'string') {
	            this.event[EventType[e]] = listener;
	        }
	        else {
	            this.event[e] = listener;
	        }
	        return this;
	    };
	    Layout.prototype.trigger = function (e) {
	        if (this.event && typeof this.event[e.type] !== 'undefined') {
	            this.event[e.type](e);
	        }
	    };
	    Layout.prototype.kick = function () {
	        while (!this.tick())
	            ;
	    };
	    Layout.prototype.tick = function () {
	        if (this._alpha < this._threshold) {
	            this._running = false;
	            this.trigger({ type: EventType.end, alpha: this._alpha = 0, stress: this._lastStress });
	            return true;
	        }
	        var n = this._nodes.length, m = this._links.length;
	        var o, i;
	        this._descent.locks.clear();
	        for (i = 0; i < n; ++i) {
	            o = this._nodes[i];
	            if (o.fixed) {
	                if (typeof o.px === 'undefined' || typeof o.py === 'undefined') {
	                    o.px = o.x;
	                    o.py = o.y;
	                }
	                var p = [o.px, o.py];
	                this._descent.locks.add(i, p);
	            }
	        }
	        var s1 = this._descent.rungeKutta();
	        if (s1 === 0) {
	            this._alpha = 0;
	        }
	        else if (typeof this._lastStress !== 'undefined') {
	            this._alpha = s1;
	        }
	        this._lastStress = s1;
	        this.updateNodePositions();
	        this.trigger({ type: EventType.tick, alpha: this._alpha, stress: this._lastStress });
	        return false;
	    };
	    Layout.prototype.updateNodePositions = function () {
	        var x = this._descent.x[0], y = this._descent.x[1];
	        var o, i = this._nodes.length;
	        while (i--) {
	            o = this._nodes[i];
	            o.x = x[i];
	            o.y = y[i];
	        }
	    };
	    Layout.prototype.nodes = function (v) {
	        if (!v) {
	            if (this._nodes.length === 0 && this._links.length > 0) {
	                var n = 0;
	                this._links.forEach(function (l) {
	                    n = Math.max(n, l.source, l.target);
	                });
	                this._nodes = new Array(++n);
	                for (var i = 0; i < n; ++i) {
	                    this._nodes[i] = {};
	                }
	            }
	            return this._nodes;
	        }
	        this._nodes = v;
	        return this;
	    };
	    Layout.prototype.groups = function (x) {
	        var _this = this;
	        if (!x)
	            return this._groups;
	        this._groups = x;
	        this._rootGroup = {};
	        this._groups.forEach(function (g) {
	            if (typeof g.padding === "undefined")
	                g.padding = 1;
	            if (typeof g.leaves !== "undefined") {
	                g.leaves.forEach(function (v, i) {
	                    if (typeof v === 'number')
	                        (g.leaves[i] = _this._nodes[v]).parent = g;
	                });
	            }
	            if (typeof g.groups !== "undefined") {
	                g.groups.forEach(function (gi, i) {
	                    if (typeof gi === 'number')
	                        (g.groups[i] = _this._groups[gi]).parent = g;
	                });
	            }
	        });
	        this._rootGroup.leaves = this._nodes.filter(function (v) { return typeof v.parent === 'undefined'; });
	        this._rootGroup.groups = this._groups.filter(function (g) { return typeof g.parent === 'undefined'; });
	        return this;
	    };
	    Layout.prototype.powerGraphGroups = function (f) {
	        var g = powergraph.getGroups(this._nodes, this._links, this.linkAccessor, this._rootGroup);
	        this.groups(g.groups);
	        f(g);
	        return this;
	    };
	    Layout.prototype.avoidOverlaps = function (v) {
	        if (!arguments.length)
	            return this._avoidOverlaps;
	        this._avoidOverlaps = v;
	        return this;
	    };
	    Layout.prototype.handleDisconnected = function (v) {
	        if (!arguments.length)
	            return this._handleDisconnected;
	        this._handleDisconnected = v;
	        return this;
	    };
	    Layout.prototype.flowLayout = function (axis, minSeparation) {
	        if (!arguments.length)
	            axis = 'y';
	        this._directedLinkConstraints = {
	            axis: axis,
	            getMinSeparation: typeof minSeparation === 'number' ? function () { return minSeparation; } : minSeparation
	        };
	        return this;
	    };
	    Layout.prototype.links = function (x) {
	        if (!arguments.length)
	            return this._links;
	        this._links = x;
	        return this;
	    };
	    Layout.prototype.constraints = function (c) {
	        if (!arguments.length)
	            return this._constraints;
	        this._constraints = c;
	        return this;
	    };
	    Layout.prototype.distanceMatrix = function (d) {
	        if (!arguments.length)
	            return this._distanceMatrix;
	        this._distanceMatrix = d;
	        return this;
	    };
	    Layout.prototype.size = function (x) {
	        if (!x)
	            return this._canvasSize;
	        this._canvasSize = x;
	        return this;
	    };
	    Layout.prototype.defaultNodeSize = function (x) {
	        if (!x)
	            return this._defaultNodeSize;
	        this._defaultNodeSize = x;
	        return this;
	    };
	    Layout.prototype.groupCompactness = function (x) {
	        if (!x)
	            return this._groupCompactness;
	        this._groupCompactness = x;
	        return this;
	    };
	    Layout.prototype.linkDistance = function (x) {
	        if (!x) {
	            return this._linkDistance;
	        }
	        this._linkDistance = typeof x === "function" ? x : +x;
	        this._linkLengthCalculator = null;
	        return this;
	    };
	    Layout.prototype.linkType = function (f) {
	        this._linkType = f;
	        return this;
	    };
	    Layout.prototype.convergenceThreshold = function (x) {
	        if (!x)
	            return this._threshold;
	        this._threshold = typeof x === "function" ? x : +x;
	        return this;
	    };
	    Layout.prototype.alpha = function (x) {
	        if (!arguments.length)
	            return this._alpha;
	        else {
	            x = +x;
	            if (this._alpha) {
	                if (x > 0)
	                    this._alpha = x;
	                else
	                    this._alpha = 0;
	            }
	            else if (x > 0) {
	                if (!this._running) {
	                    this._running = true;
	                    this.trigger({ type: EventType.start, alpha: this._alpha = x });
	                    this.kick();
	                }
	            }
	            return this;
	        }
	    };
	    Layout.prototype.getLinkLength = function (link) {
	        return typeof this._linkDistance === "function" ? +(this._linkDistance(link)) : this._linkDistance;
	    };
	    Layout.setLinkLength = function (link, length) {
	        link.length = length;
	    };
	    Layout.prototype.getLinkType = function (link) {
	        return typeof this._linkType === "function" ? this._linkType(link) : 0;
	    };
	    Layout.prototype.symmetricDiffLinkLengths = function (idealLength, w) {
	        var _this = this;
	        if (w === void 0) { w = 1; }
	        this.linkDistance(function (l) { return idealLength * l.length; });
	        this._linkLengthCalculator = function () { return linklengths.symmetricDiffLinkLengths(_this._links, _this.linkAccessor, w); };
	        return this;
	    };
	    Layout.prototype.jaccardLinkLengths = function (idealLength, w) {
	        var _this = this;
	        if (w === void 0) { w = 1; }
	        this.linkDistance(function (l) { return idealLength * l.length; });
	        this._linkLengthCalculator = function () { return linklengths.jaccardLinkLengths(_this._links, _this.linkAccessor, w); };
	        return this;
	    };
	    Layout.prototype.start = function (initialUnconstrainedIterations, initialUserConstraintIterations, initialAllConstraintsIterations, gridSnapIterations, keepRunning, centerGraph) {
	        var _this = this;
	        if (initialUnconstrainedIterations === void 0) { initialUnconstrainedIterations = 0; }
	        if (initialUserConstraintIterations === void 0) { initialUserConstraintIterations = 0; }
	        if (initialAllConstraintsIterations === void 0) { initialAllConstraintsIterations = 0; }
	        if (gridSnapIterations === void 0) { gridSnapIterations = 0; }
	        if (keepRunning === void 0) { keepRunning = true; }
	        if (centerGraph === void 0) { centerGraph = true; }
	        var i, n = this.nodes().length, N = n + 2 * this._groups.length, m = this._links.length, w = this._canvasSize[0], h = this._canvasSize[1];
	        var x = new Array(N), y = new Array(N);
	        var G = null;
	        var ao = this._avoidOverlaps;
	        this._nodes.forEach(function (v, i) {
	            v.index = i;
	            if (typeof v.x === 'undefined') {
	                v.x = w / 2, v.y = h / 2;
	            }
	            x[i] = v.x, y[i] = v.y;
	        });
	        if (this._linkLengthCalculator)
	            this._linkLengthCalculator();
	        var distances;
	        if (this._distanceMatrix) {
	            distances = this._distanceMatrix;
	        }
	        else {
	            distances = (new shortestpaths.Calculator(N, this._links, Layout.getSourceIndex, Layout.getTargetIndex, function (l) { return _this.getLinkLength(l); })).DistanceMatrix();
	            G = descent.Descent.createSquareMatrix(N, function () { return 2; });
	            this._links.forEach(function (l) {
	                if (typeof l.source == "number")
	                    l.source = _this._nodes[l.source];
	                if (typeof l.target == "number")
	                    l.target = _this._nodes[l.target];
	            });
	            this._links.forEach(function (e) {
	                var u = Layout.getSourceIndex(e), v = Layout.getTargetIndex(e);
	                G[u][v] = G[v][u] = e.weight || 1;
	            });
	        }
	        var D = descent.Descent.createSquareMatrix(N, function (i, j) {
	            return distances[i][j];
	        });
	        if (this._rootGroup && typeof this._rootGroup.groups !== 'undefined') {
	            var i = n;
	            var addAttraction = function (i, j, strength, idealDistance) {
	                G[i][j] = G[j][i] = strength;
	                D[i][j] = D[j][i] = idealDistance;
	            };
	            this._groups.forEach(function (g) {
	                addAttraction(i, i + 1, _this._groupCompactness, 0.1);
	                x[i] = 0, y[i++] = 0;
	                x[i] = 0, y[i++] = 0;
	            });
	        }
	        else
	            this._rootGroup = { leaves: this._nodes, groups: [] };
	        var curConstraints = this._constraints || [];
	        if (this._directedLinkConstraints) {
	            this.linkAccessor.getMinSeparation = this._directedLinkConstraints.getMinSeparation;
	            curConstraints = curConstraints.concat(linklengths.generateDirectedEdgeConstraints(n, this._links, this._directedLinkConstraints.axis, (this.linkAccessor)));
	        }
	        this.avoidOverlaps(false);
	        this._descent = new descent.Descent([x, y], D);
	        this._descent.locks.clear();
	        for (var i = 0; i < n; ++i) {
	            var o = this._nodes[i];
	            if (o.fixed) {
	                o.px = o.x;
	                o.py = o.y;
	                var p = [o.x, o.y];
	                this._descent.locks.add(i, p);
	            }
	        }
	        this._descent.threshold = this._threshold;
	        this.initialLayout(initialUnconstrainedIterations, x, y);
	        if (curConstraints.length > 0)
	            this._descent.project = new rectangle.Projection(this._nodes, this._groups, this._rootGroup, curConstraints).projectFunctions();
	        this._descent.run(initialUserConstraintIterations);
	        this.separateOverlappingComponents(w, h, centerGraph);
	        this.avoidOverlaps(ao);
	        if (ao) {
	            this._nodes.forEach(function (v, i) { v.x = x[i], v.y = y[i]; });
	            this._descent.project = new rectangle.Projection(this._nodes, this._groups, this._rootGroup, curConstraints, true).projectFunctions();
	            this._nodes.forEach(function (v, i) { x[i] = v.x, y[i] = v.y; });
	        }
	        this._descent.G = G;
	        this._descent.run(initialAllConstraintsIterations);
	        if (gridSnapIterations) {
	            this._descent.snapStrength = 1000;
	            this._descent.snapGridSize = this._nodes[0].width;
	            this._descent.numGridSnapNodes = n;
	            this._descent.scaleSnapByMaxH = n != N;
	            var G0 = descent.Descent.createSquareMatrix(N, function (i, j) {
	                if (i >= n || j >= n)
	                    return G[i][j];
	                return 0;
	            });
	            this._descent.G = G0;
	            this._descent.run(gridSnapIterations);
	        }
	        this.updateNodePositions();
	        this.separateOverlappingComponents(w, h, centerGraph);
	        return keepRunning ? this.resume() : this;
	    };
	    Layout.prototype.initialLayout = function (iterations, x, y) {
	        if (this._groups.length > 0 && iterations > 0) {
	            var n = this._nodes.length;
	            var edges = this._links.map(function (e) { return ({ source: e.source.index, target: e.target.index }); });
	            var vs = this._nodes.map(function (v) { return ({ index: v.index }); });
	            this._groups.forEach(function (g, i) {
	                vs.push({ index: g.index = n + i });
	            });
	            this._groups.forEach(function (g, i) {
	                if (typeof g.leaves !== 'undefined')
	                    g.leaves.forEach(function (v) { return edges.push({ source: g.index, target: v.index }); });
	                if (typeof g.groups !== 'undefined')
	                    g.groups.forEach(function (gg) { return edges.push({ source: g.index, target: gg.index }); });
	            });
	            new Layout()
	                .size(this.size())
	                .nodes(vs)
	                .links(edges)
	                .avoidOverlaps(false)
	                .linkDistance(this.linkDistance())
	                .symmetricDiffLinkLengths(5)
	                .convergenceThreshold(1e-4)
	                .start(iterations, 0, 0, 0, false);
	            this._nodes.forEach(function (v) {
	                x[v.index] = vs[v.index].x;
	                y[v.index] = vs[v.index].y;
	            });
	        }
	        else {
	            this._descent.run(iterations);
	        }
	    };
	    Layout.prototype.separateOverlappingComponents = function (width, height, centerGraph) {
	        var _this = this;
	        if (centerGraph === void 0) { centerGraph = true; }
	        if (!this._distanceMatrix && this._handleDisconnected) {
	            var x_1 = this._descent.x[0], y_1 = this._descent.x[1];
	            this._nodes.forEach(function (v, i) { v.x = x_1[i], v.y = y_1[i]; });
	            var graphs = handledisconnected.separateGraphs(this._nodes, this._links);
	            handledisconnected.applyPacking(graphs, width, height, this._defaultNodeSize, 1, centerGraph);
	            this._nodes.forEach(function (v, i) {
	                _this._descent.x[0][i] = v.x, _this._descent.x[1][i] = v.y;
	                if (v.bounds) {
	                    v.bounds.setXCentre(v.x);
	                    v.bounds.setYCentre(v.y);
	                }
	            });
	        }
	    };
	    Layout.prototype.resume = function () {
	        return this.alpha(0.1);
	    };
	    Layout.prototype.stop = function () {
	        return this.alpha(0);
	    };
	    Layout.prototype.prepareEdgeRouting = function (nodeMargin) {
	        if (nodeMargin === void 0) { nodeMargin = 0; }
	        this._visibilityGraph = new geom.TangentVisibilityGraph(this._nodes.map(function (v) {
	            return v.bounds.inflate(-nodeMargin).vertices();
	        }));
	    };
	    Layout.prototype.routeEdge = function (edge, ah, draw) {
	        if (ah === void 0) { ah = 5; }
	        var lineData = [];
	        var vg2 = new geom.TangentVisibilityGraph(this._visibilityGraph.P, { V: this._visibilityGraph.V, E: this._visibilityGraph.E }), port1 = { x: edge.source.x, y: edge.source.y }, port2 = { x: edge.target.x, y: edge.target.y }, start = vg2.addPoint(port1, edge.source.index), end = vg2.addPoint(port2, edge.target.index);
	        vg2.addEdgeIfVisible(port1, port2, edge.source.index, edge.target.index);
	        if (typeof draw !== 'undefined') {
	            draw(vg2);
	        }
	        var sourceInd = function (e) { return e.source.id; }, targetInd = function (e) { return e.target.id; }, length = function (e) { return e.length(); }, spCalc = new shortestpaths.Calculator(vg2.V.length, vg2.E, sourceInd, targetInd, length), shortestPath = spCalc.PathFromNodeToNode(start.id, end.id);
	        if (shortestPath.length === 1 || shortestPath.length === vg2.V.length) {
	            var route = rectangle.makeEdgeBetween(edge.source.innerBounds, edge.target.innerBounds, ah);
	            lineData = [route.sourceIntersection, route.arrowStart];
	        }
	        else {
	            var n = shortestPath.length - 2, p = vg2.V[shortestPath[n]].p, q = vg2.V[shortestPath[0]].p, lineData = [edge.source.innerBounds.rayIntersection(p.x, p.y)];
	            for (var i = n; i >= 0; --i)
	                lineData.push(vg2.V[shortestPath[i]].p);
	            lineData.push(rectangle.makeEdgeTo(q, edge.target.innerBounds, ah));
	        }
	        return lineData;
	    };
	    Layout.getSourceIndex = function (e) {
	        return typeof e.source === 'number' ? e.source : e.source.index;
	    };
	    Layout.getTargetIndex = function (e) {
	        return typeof e.target === 'number' ? e.target : e.target.index;
	    };
	    Layout.linkId = function (e) {
	        return Layout.getSourceIndex(e) + "-" + Layout.getTargetIndex(e);
	    };
	    Layout.dragStart = function (d) {
	        if (isGroup(d)) {
	            Layout.storeOffset(d, Layout.dragOrigin(d));
	        }
	        else {
	            Layout.stopNode(d);
	            d.fixed |= 2;
	        }
	    };
	    Layout.stopNode = function (v) {
	        v.px = v.x;
	        v.py = v.y;
	    };
	    Layout.storeOffset = function (d, origin) {
	        if (typeof d.leaves !== 'undefined') {
	            d.leaves.forEach(function (v) {
	                v.fixed |= 2;
	                Layout.stopNode(v);
	                v._dragGroupOffsetX = v.x - origin.x;
	                v._dragGroupOffsetY = v.y - origin.y;
	            });
	        }
	        if (typeof d.groups !== 'undefined') {
	            d.groups.forEach(function (g) { return Layout.storeOffset(g, origin); });
	        }
	    };
	    Layout.dragOrigin = function (d) {
	        if (isGroup(d)) {
	            return {
	                x: d.bounds.cx(),
	                y: d.bounds.cy()
	            };
	        }
	        else {
	            return d;
	        }
	    };
	    Layout.drag = function (d, position) {
	        if (isGroup(d)) {
	            if (typeof d.leaves !== 'undefined') {
	                d.leaves.forEach(function (v) {
	                    d.bounds.setXCentre(position.x);
	                    d.bounds.setYCentre(position.y);
	                    v.px = v._dragGroupOffsetX + position.x;
	                    v.py = v._dragGroupOffsetY + position.y;
	                });
	            }
	            if (typeof d.groups !== 'undefined') {
	                d.groups.forEach(function (g) { return Layout.drag(g, position); });
	            }
	        }
	        else {
	            d.px = position.x;
	            d.py = position.y;
	        }
	    };
	    Layout.dragEnd = function (d) {
	        if (isGroup(d)) {
	            if (typeof d.leaves !== 'undefined') {
	                d.leaves.forEach(function (v) {
	                    Layout.dragEnd(v);
	                    delete v._dragGroupOffsetX;
	                    delete v._dragGroupOffsetY;
	                });
	            }
	            if (typeof d.groups !== 'undefined') {
	                d.groups.forEach(Layout.dragEnd);
	            }
	        }
	        else {
	            d.fixed &= ~6;
	        }
	    };
	    Layout.mouseOver = function (d) {
	        d.fixed |= 4;
	        d.px = d.x, d.py = d.y;
	    };
	    Layout.mouseOut = function (d) {
	        d.fixed &= ~4;
	    };
	    return Layout;
	}());
	exports.Layout = Layout;

	});

	unwrapExports(layout);
	var layout_1 = layout.EventType;
	var layout_2 = layout.Layout;

	var adaptor_1 = createCommonjsModule(function (module, exports) {
	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });

	var LayoutAdaptor = (function (_super) {
	    __extends(LayoutAdaptor, _super);
	    function LayoutAdaptor(options) {
	        var _this = _super.call(this) || this;
	        var o = options;
	        if (o.trigger) {
	            _this.trigger = o.trigger;
	        }
	        if (o.kick) {
	            _this.kick = o.kick;
	        }
	        if (o.drag) {
	            _this.drag = o.drag;
	        }
	        if (o.on) {
	            _this.on = o.on;
	        }
	        _this.dragstart = _this.dragStart = layout.Layout.dragStart;
	        _this.dragend = _this.dragEnd = layout.Layout.dragEnd;
	        return _this;
	    }
	    LayoutAdaptor.prototype.trigger = function (e) { };
	    LayoutAdaptor.prototype.kick = function () { };
	    LayoutAdaptor.prototype.drag = function () { };
	    LayoutAdaptor.prototype.on = function (eventType, listener) { return this; };
	    return LayoutAdaptor;
	}(layout.Layout));
	exports.LayoutAdaptor = LayoutAdaptor;
	function adaptor(options) {
	    return new LayoutAdaptor(options);
	}
	exports.adaptor = adaptor;

	});

	unwrapExports(adaptor_1);
	var adaptor_2 = adaptor_1.LayoutAdaptor;
	var adaptor_3 = adaptor_1.adaptor;

	var d3v3adaptor = createCommonjsModule(function (module, exports) {
	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });

	var D3StyleLayoutAdaptor = (function (_super) {
	    __extends(D3StyleLayoutAdaptor, _super);
	    function D3StyleLayoutAdaptor() {
	        var _this = _super.call(this) || this;
	        _this.event = d3.dispatch(layout.EventType[layout.EventType.start], layout.EventType[layout.EventType.tick], layout.EventType[layout.EventType.end]);
	        var d3layout = _this;
	        _this.drag = function () {
	            if (!drag) {
	                var drag = d3.behavior.drag()
	                    .origin(layout.Layout.dragOrigin)
	                    .on("dragstart.d3adaptor", layout.Layout.dragStart)
	                    .on("drag.d3adaptor", function (d) {
	                    layout.Layout.drag(d, d3.event);
	                    d3layout.resume();
	                })
	                    .on("dragend.d3adaptor", layout.Layout.dragEnd);
	            }
	            if (!arguments.length)
	                return drag;
	            this
	                .call(drag);
	        };
	        return _this;
	    }
	    D3StyleLayoutAdaptor.prototype.trigger = function (e) {
	        var d3event = { type: layout.EventType[e.type], alpha: e.alpha, stress: e.stress };
	        this.event[d3event.type](d3event);
	    };
	    D3StyleLayoutAdaptor.prototype.kick = function () {
	        var _this = this;
	        d3.timer(function () { return _super.prototype.tick.call(_this); });
	    };
	    D3StyleLayoutAdaptor.prototype.on = function (eventType, listener) {
	        if (typeof eventType === 'string') {
	            this.event.on(eventType, listener);
	        }
	        else {
	            this.event.on(layout.EventType[eventType], listener);
	        }
	        return this;
	    };
	    return D3StyleLayoutAdaptor;
	}(layout.Layout));
	exports.D3StyleLayoutAdaptor = D3StyleLayoutAdaptor;
	function d3adaptor() {
	    return new D3StyleLayoutAdaptor();
	}
	exports.d3adaptor = d3adaptor;

	});

	unwrapExports(d3v3adaptor);
	var d3v3adaptor_1 = d3v3adaptor.D3StyleLayoutAdaptor;
	var d3v3adaptor_2 = d3v3adaptor.d3adaptor;

	var d3v4adaptor = createCommonjsModule(function (module, exports) {
	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });

	var D3StyleLayoutAdaptor = (function (_super) {
	    __extends(D3StyleLayoutAdaptor, _super);
	    function D3StyleLayoutAdaptor(d3Context) {
	        var _this = _super.call(this) || this;
	        _this.d3Context = d3Context;
	        _this.event = d3Context.dispatch(layout.EventType[layout.EventType.start], layout.EventType[layout.EventType.tick], layout.EventType[layout.EventType.end]);
	        var d3layout = _this;
	        _this.drag = function () {
	            if (!drag) {
	                var drag = d3Context.drag()
	                    .subject(layout.Layout.dragOrigin)
	                    .on("start.d3adaptor", layout.Layout.dragStart)
	                    .on("drag.d3adaptor", function (d) {
	                    layout.Layout.drag(d, d3Context.event);
	                    d3layout.resume();
	                })
	                    .on("end.d3adaptor", layout.Layout.dragEnd);
	            }
	            if (!arguments.length)
	                return drag;
	            arguments[0].call(drag);
	        };
	        return _this;
	    }
	    D3StyleLayoutAdaptor.prototype.trigger = function (e) {
	        var d3event = { type: layout.EventType[e.type], alpha: e.alpha, stress: e.stress };
	        this.event.call(d3event.type, d3event);
	    };
	    D3StyleLayoutAdaptor.prototype.kick = function () {
	        var _this = this;
	        var t = this.d3Context.timer(function () { return _super.prototype.tick.call(_this) && t.stop(); });
	    };
	    D3StyleLayoutAdaptor.prototype.on = function (eventType, listener) {
	        if (typeof eventType === 'string') {
	            this.event.on(eventType, listener);
	        }
	        else {
	            this.event.on(layout.EventType[eventType], listener);
	        }
	        return this;
	    };
	    return D3StyleLayoutAdaptor;
	}(layout.Layout));
	exports.D3StyleLayoutAdaptor = D3StyleLayoutAdaptor;

	});

	unwrapExports(d3v4adaptor);
	var d3v4adaptor_1 = d3v4adaptor.D3StyleLayoutAdaptor;

	var d3adaptor_1 = createCommonjsModule(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	function d3adaptor(d3Context) {
	    if (!d3Context || isD3V3(d3Context)) {
	        return new d3v3adaptor.D3StyleLayoutAdaptor();
	    }
	    return new d3v4adaptor.D3StyleLayoutAdaptor(d3Context);
	}
	exports.d3adaptor = d3adaptor;
	function isD3V3(d3Context) {
	    var v3exp = /^3\./;
	    return d3Context.version && d3Context.version.match(v3exp) !== null;
	}

	});

	unwrapExports(d3adaptor_1);
	var d3adaptor_2 = d3adaptor_1.d3adaptor;

	var gridrouter = createCommonjsModule(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });



	var NodeWrapper = (function () {
	    function NodeWrapper(id, rect, children) {
	        this.id = id;
	        this.rect = rect;
	        this.children = children;
	        this.leaf = typeof children === 'undefined' || children.length === 0;
	    }
	    return NodeWrapper;
	}());
	exports.NodeWrapper = NodeWrapper;
	var Vert = (function () {
	    function Vert(id, x, y, node, line) {
	        if (node === void 0) { node = null; }
	        if (line === void 0) { line = null; }
	        this.id = id;
	        this.x = x;
	        this.y = y;
	        this.node = node;
	        this.line = line;
	    }
	    return Vert;
	}());
	exports.Vert = Vert;
	var LongestCommonSubsequence = (function () {
	    function LongestCommonSubsequence(s, t) {
	        this.s = s;
	        this.t = t;
	        var mf = LongestCommonSubsequence.findMatch(s, t);
	        var tr = t.slice(0).reverse();
	        var mr = LongestCommonSubsequence.findMatch(s, tr);
	        if (mf.length >= mr.length) {
	            this.length = mf.length;
	            this.si = mf.si;
	            this.ti = mf.ti;
	            this.reversed = false;
	        }
	        else {
	            this.length = mr.length;
	            this.si = mr.si;
	            this.ti = t.length - mr.ti - mr.length;
	            this.reversed = true;
	        }
	    }
	    LongestCommonSubsequence.findMatch = function (s, t) {
	        var m = s.length;
	        var n = t.length;
	        var match = { length: 0, si: -1, ti: -1 };
	        var l = new Array(m);
	        for (var i = 0; i < m; i++) {
	            l[i] = new Array(n);
	            for (var j = 0; j < n; j++)
	                if (s[i] === t[j]) {
	                    var v = l[i][j] = (i === 0 || j === 0) ? 1 : l[i - 1][j - 1] + 1;
	                    if (v > match.length) {
	                        match.length = v;
	                        match.si = i - v + 1;
	                        match.ti = j - v + 1;
	                    }
	                }
	                else
	                    l[i][j] = 0;
	        }
	        return match;
	    };
	    LongestCommonSubsequence.prototype.getSequence = function () {
	        return this.length >= 0 ? this.s.slice(this.si, this.si + this.length) : [];
	    };
	    return LongestCommonSubsequence;
	}());
	exports.LongestCommonSubsequence = LongestCommonSubsequence;
	var GridRouter = (function () {
	    function GridRouter(originalnodes, accessor, groupPadding) {
	        var _this = this;
	        if (groupPadding === void 0) { groupPadding = 12; }
	        this.originalnodes = originalnodes;
	        this.groupPadding = groupPadding;
	        this.leaves = null;
	        this.nodes = originalnodes.map(function (v, i) { return new NodeWrapper(i, accessor.getBounds(v), accessor.getChildren(v)); });
	        this.leaves = this.nodes.filter(function (v) { return v.leaf; });
	        this.groups = this.nodes.filter(function (g) { return !g.leaf; });
	        this.cols = this.getGridLines('x');
	        this.rows = this.getGridLines('y');
	        this.groups.forEach(function (v) {
	            return v.children.forEach(function (c) { return _this.nodes[c].parent = v; });
	        });
	        this.root = { children: [] };
	        this.nodes.forEach(function (v) {
	            if (typeof v.parent === 'undefined') {
	                v.parent = _this.root;
	                _this.root.children.push(v.id);
	            }
	            v.ports = [];
	        });
	        this.backToFront = this.nodes.slice(0);
	        this.backToFront.sort(function (x, y) { return _this.getDepth(x) - _this.getDepth(y); });
	        var frontToBackGroups = this.backToFront.slice(0).reverse().filter(function (g) { return !g.leaf; });
	        frontToBackGroups.forEach(function (v) {
	            var r = rectangle.Rectangle.empty();
	            v.children.forEach(function (c) { return r = r.union(_this.nodes[c].rect); });
	            v.rect = r.inflate(_this.groupPadding);
	        });
	        var colMids = this.midPoints(this.cols.map(function (r) { return r.pos; }));
	        var rowMids = this.midPoints(this.rows.map(function (r) { return r.pos; }));
	        var rowx = colMids[0], rowX = colMids[colMids.length - 1];
	        var coly = rowMids[0], colY = rowMids[rowMids.length - 1];
	        var hlines = this.rows.map(function (r) { return ({ x1: rowx, x2: rowX, y1: r.pos, y2: r.pos }); })
	            .concat(rowMids.map(function (m) { return ({ x1: rowx, x2: rowX, y1: m, y2: m }); }));
	        var vlines = this.cols.map(function (c) { return ({ x1: c.pos, x2: c.pos, y1: coly, y2: colY }); })
	            .concat(colMids.map(function (m) { return ({ x1: m, x2: m, y1: coly, y2: colY }); }));
	        var lines = hlines.concat(vlines);
	        lines.forEach(function (l) { return l.verts = []; });
	        this.verts = [];
	        this.edges = [];
	        hlines.forEach(function (h) {
	            return vlines.forEach(function (v) {
	                var p = new Vert(_this.verts.length, v.x1, h.y1);
	                h.verts.push(p);
	                v.verts.push(p);
	                _this.verts.push(p);
	                var i = _this.backToFront.length;
	                while (i-- > 0) {
	                    var node = _this.backToFront[i], r = node.rect;
	                    var dx = Math.abs(p.x - r.cx()), dy = Math.abs(p.y - r.cy());
	                    if (dx < r.width() / 2 && dy < r.height() / 2) {
	                        p.node = node;
	                        break;
	                    }
	                }
	            });
	        });
	        lines.forEach(function (l, li) {
	            _this.nodes.forEach(function (v, i) {
	                v.rect.lineIntersections(l.x1, l.y1, l.x2, l.y2).forEach(function (intersect, j) {
	                    var p = new Vert(_this.verts.length, intersect.x, intersect.y, v, l);
	                    _this.verts.push(p);
	                    l.verts.push(p);
	                    v.ports.push(p);
	                });
	            });
	            var isHoriz = Math.abs(l.y1 - l.y2) < 0.1;
	            var delta = function (a, b) { return isHoriz ? b.x - a.x : b.y - a.y; };
	            l.verts.sort(delta);
	            for (var i = 1; i < l.verts.length; i++) {
	                var u = l.verts[i - 1], v = l.verts[i];
	                if (u.node && u.node === v.node && u.node.leaf)
	                    continue;
	                _this.edges.push({ source: u.id, target: v.id, length: Math.abs(delta(u, v)) });
	            }
	        });
	    }
	    GridRouter.prototype.avg = function (a) { return a.reduce(function (x, y) { return x + y; }) / a.length; };
	    GridRouter.prototype.getGridLines = function (axis) {
	        var columns = [];
	        var ls = this.leaves.slice(0, this.leaves.length);
	        while (ls.length > 0) {
	            var overlapping = ls.filter(function (v) { return v.rect['overlap' + axis.toUpperCase()](ls[0].rect); });
	            var col = {
	                nodes: overlapping,
	                pos: this.avg(overlapping.map(function (v) { return v.rect['c' + axis](); }))
	            };
	            columns.push(col);
	            col.nodes.forEach(function (v) { return ls.splice(ls.indexOf(v), 1); });
	        }
	        columns.sort(function (a, b) { return a.pos - b.pos; });
	        return columns;
	    };
	    GridRouter.prototype.getDepth = function (v) {
	        var depth = 0;
	        while (v.parent !== this.root) {
	            depth++;
	            v = v.parent;
	        }
	        return depth;
	    };
	    GridRouter.prototype.midPoints = function (a) {
	        var gap = a[1] - a[0];
	        var mids = [a[0] - gap / 2];
	        for (var i = 1; i < a.length; i++) {
	            mids.push((a[i] + a[i - 1]) / 2);
	        }
	        mids.push(a[a.length - 1] + gap / 2);
	        return mids;
	    };
	    GridRouter.prototype.findLineage = function (v) {
	        var lineage = [v];
	        do {
	            v = v.parent;
	            lineage.push(v);
	        } while (v !== this.root);
	        return lineage.reverse();
	    };
	    GridRouter.prototype.findAncestorPathBetween = function (a, b) {
	        var aa = this.findLineage(a), ba = this.findLineage(b), i = 0;
	        while (aa[i] === ba[i])
	            i++;
	        return { commonAncestor: aa[i - 1], lineages: aa.slice(i).concat(ba.slice(i)) };
	    };
	    GridRouter.prototype.siblingObstacles = function (a, b) {
	        var _this = this;
	        var path = this.findAncestorPathBetween(a, b);
	        var lineageLookup = {};
	        path.lineages.forEach(function (v) { return lineageLookup[v.id] = {}; });
	        var obstacles = path.commonAncestor.children.filter(function (v) { return !(v in lineageLookup); });
	        path.lineages
	            .filter(function (v) { return v.parent !== path.commonAncestor; })
	            .forEach(function (v) { return obstacles = obstacles.concat(v.parent.children.filter(function (c) { return c !== v.id; })); });
	        return obstacles.map(function (v) { return _this.nodes[v]; });
	    };
	    GridRouter.getSegmentSets = function (routes, x, y) {
	        var vsegments = [];
	        for (var ei = 0; ei < routes.length; ei++) {
	            var route = routes[ei];
	            for (var si = 0; si < route.length; si++) {
	                var s = route[si];
	                s.edgeid = ei;
	                s.i = si;
	                var sdx = s[1][x] - s[0][x];
	                if (Math.abs(sdx) < 0.1) {
	                    vsegments.push(s);
	                }
	            }
	        }
	        vsegments.sort(function (a, b) { return a[0][x] - b[0][x]; });
	        var vsegmentsets = [];
	        var segmentset = null;
	        for (var i = 0; i < vsegments.length; i++) {
	            var s = vsegments[i];
	            if (!segmentset || Math.abs(s[0][x] - segmentset.pos) > 0.1) {
	                segmentset = { pos: s[0][x], segments: [] };
	                vsegmentsets.push(segmentset);
	            }
	            segmentset.segments.push(s);
	        }
	        return vsegmentsets;
	    };
	    GridRouter.nudgeSegs = function (x, y, routes, segments, leftOf, gap) {
	        var n = segments.length;
	        if (n <= 1)
	            return;
	        var vs = segments.map(function (s) { return new vpsc.Variable(s[0][x]); });
	        var cs = [];
	        for (var i = 0; i < n; i++) {
	            for (var j = 0; j < n; j++) {
	                if (i === j)
	                    continue;
	                var s1 = segments[i], s2 = segments[j], e1 = s1.edgeid, e2 = s2.edgeid, lind = -1, rind = -1;
	                if (x == 'x') {
	                    if (leftOf(e1, e2)) {
	                        if (s1[0][y] < s1[1][y]) {
	                            lind = j, rind = i;
	                        }
	                        else {
	                            lind = i, rind = j;
	                        }
	                    }
	                }
	                else {
	                    if (leftOf(e1, e2)) {
	                        if (s1[0][y] < s1[1][y]) {
	                            lind = i, rind = j;
	                        }
	                        else {
	                            lind = j, rind = i;
	                        }
	                    }
	                }
	                if (lind >= 0) {
	                    cs.push(new vpsc.Constraint(vs[lind], vs[rind], gap));
	                }
	            }
	        }
	        var solver = new vpsc.Solver(vs, cs);
	        solver.solve();
	        vs.forEach(function (v, i) {
	            var s = segments[i];
	            var pos = v.position();
	            s[0][x] = s[1][x] = pos;
	            var route = routes[s.edgeid];
	            if (s.i > 0)
	                route[s.i - 1][1][x] = pos;
	            if (s.i < route.length - 1)
	                route[s.i + 1][0][x] = pos;
	        });
	    };
	    GridRouter.nudgeSegments = function (routes, x, y, leftOf, gap) {
	        var vsegmentsets = GridRouter.getSegmentSets(routes, x, y);
	        for (var i = 0; i < vsegmentsets.length; i++) {
	            var ss = vsegmentsets[i];
	            var events = [];
	            for (var j = 0; j < ss.segments.length; j++) {
	                var s = ss.segments[j];
	                events.push({ type: 0, s: s, pos: Math.min(s[0][y], s[1][y]) });
	                events.push({ type: 1, s: s, pos: Math.max(s[0][y], s[1][y]) });
	            }
	            events.sort(function (a, b) { return a.pos - b.pos + a.type - b.type; });
	            var open = [];
	            var openCount = 0;
	            events.forEach(function (e) {
	                if (e.type === 0) {
	                    open.push(e.s);
	                    openCount++;
	                }
	                else {
	                    openCount--;
	                }
	                if (openCount == 0) {
	                    GridRouter.nudgeSegs(x, y, routes, open, leftOf, gap);
	                    open = [];
	                }
	            });
	        }
	    };
	    GridRouter.prototype.routeEdges = function (edges, nudgeGap, source, target) {
	        var _this = this;
	        var routePaths = edges.map(function (e) { return _this.route(source(e), target(e)); });
	        var order = GridRouter.orderEdges(routePaths);
	        var routes = routePaths.map(function (e) { return GridRouter.makeSegments(e); });
	        GridRouter.nudgeSegments(routes, 'x', 'y', order, nudgeGap);
	        GridRouter.nudgeSegments(routes, 'y', 'x', order, nudgeGap);
	        GridRouter.unreverseEdges(routes, routePaths);
	        return routes;
	    };
	    GridRouter.unreverseEdges = function (routes, routePaths) {
	        routes.forEach(function (segments, i) {
	            var path = routePaths[i];
	            if (path.reversed) {
	                segments.reverse();
	                segments.forEach(function (segment) {
	                    segment.reverse();
	                });
	            }
	        });
	    };
	    GridRouter.angleBetween2Lines = function (line1, line2) {
	        var angle1 = Math.atan2(line1[0].y - line1[1].y, line1[0].x - line1[1].x);
	        var angle2 = Math.atan2(line2[0].y - line2[1].y, line2[0].x - line2[1].x);
	        var diff = angle1 - angle2;
	        if (diff > Math.PI || diff < -Math.PI) {
	            diff = angle2 - angle1;
	        }
	        return diff;
	    };
	    GridRouter.isLeft = function (a, b, c) {
	        return ((b.x - a.x) * (c.y - a.y) - (b.y - a.y) * (c.x - a.x)) <= 0;
	    };
	    GridRouter.getOrder = function (pairs) {
	        var outgoing = {};
	        for (var i = 0; i < pairs.length; i++) {
	            var p = pairs[i];
	            if (typeof outgoing[p.l] === 'undefined')
	                outgoing[p.l] = {};
	            outgoing[p.l][p.r] = true;
	        }
	        return function (l, r) { return typeof outgoing[l] !== 'undefined' && outgoing[l][r]; };
	    };
	    GridRouter.orderEdges = function (edges) {
	        var edgeOrder = [];
	        for (var i = 0; i < edges.length - 1; i++) {
	            for (var j = i + 1; j < edges.length; j++) {
	                var e = edges[i], f = edges[j], lcs = new LongestCommonSubsequence(e, f);
	                var u, vi, vj;
	                if (lcs.length === 0)
	                    continue;
	                if (lcs.reversed) {
	                    f.reverse();
	                    f.reversed = true;
	                    lcs = new LongestCommonSubsequence(e, f);
	                }
	                if ((lcs.si <= 0 || lcs.ti <= 0) &&
	                    (lcs.si + lcs.length >= e.length || lcs.ti + lcs.length >= f.length)) {
	                    edgeOrder.push({ l: i, r: j });
	                    continue;
	                }
	                if (lcs.si + lcs.length >= e.length || lcs.ti + lcs.length >= f.length) {
	                    u = e[lcs.si + 1];
	                    vj = e[lcs.si - 1];
	                    vi = f[lcs.ti - 1];
	                }
	                else {
	                    u = e[lcs.si + lcs.length - 2];
	                    vi = e[lcs.si + lcs.length];
	                    vj = f[lcs.ti + lcs.length];
	                }
	                if (GridRouter.isLeft(u, vi, vj)) {
	                    edgeOrder.push({ l: j, r: i });
	                }
	                else {
	                    edgeOrder.push({ l: i, r: j });
	                }
	            }
	        }
	        return GridRouter.getOrder(edgeOrder);
	    };
	    GridRouter.makeSegments = function (path) {
	        function copyPoint(p) {
	            return { x: p.x, y: p.y };
	        }
	        var isStraight = function (a, b, c) { return Math.abs((b.x - a.x) * (c.y - a.y) - (b.y - a.y) * (c.x - a.x)) < 0.001; };
	        var segments = [];
	        var a = copyPoint(path[0]);
	        for (var i = 1; i < path.length; i++) {
	            var b = copyPoint(path[i]), c = i < path.length - 1 ? path[i + 1] : null;
	            if (!c || !isStraight(a, b, c)) {
	                segments.push([a, b]);
	                a = b;
	            }
	        }
	        return segments;
	    };
	    GridRouter.prototype.route = function (s, t) {
	        var _this = this;
	        var source = this.nodes[s], target = this.nodes[t];
	        this.obstacles = this.siblingObstacles(source, target);
	        var obstacleLookup = {};
	        this.obstacles.forEach(function (o) { return obstacleLookup[o.id] = o; });
	        this.passableEdges = this.edges.filter(function (e) {
	            var u = _this.verts[e.source], v = _this.verts[e.target];
	            return !(u.node && u.node.id in obstacleLookup
	                || v.node && v.node.id in obstacleLookup);
	        });
	        for (var i = 1; i < source.ports.length; i++) {
	            var u = source.ports[0].id;
	            var v = source.ports[i].id;
	            this.passableEdges.push({
	                source: u,
	                target: v,
	                length: 0
	            });
	        }
	        for (var i = 1; i < target.ports.length; i++) {
	            var u = target.ports[0].id;
	            var v = target.ports[i].id;
	            this.passableEdges.push({
	                source: u,
	                target: v,
	                length: 0
	            });
	        }
	        var getSource = function (e) { return e.source; }, getTarget = function (e) { return e.target; }, getLength = function (e) { return e.length; };
	        var shortestPathCalculator = new shortestpaths.Calculator(this.verts.length, this.passableEdges, getSource, getTarget, getLength);
	        var bendPenalty = function (u, v, w) {
	            var a = _this.verts[u], b = _this.verts[v], c = _this.verts[w];
	            var dx = Math.abs(c.x - a.x), dy = Math.abs(c.y - a.y);
	            if (a.node === source && a.node === b.node || b.node === target && b.node === c.node)
	                return 0;
	            return dx > 1 && dy > 1 ? 1000 : 0;
	        };
	        var shortestPath = shortestPathCalculator.PathFromNodeToNodeWithPrevCost(source.ports[0].id, target.ports[0].id, bendPenalty);
	        var pathPoints = shortestPath.reverse().map(function (vi) { return _this.verts[vi]; });
	        pathPoints.push(this.nodes[target.id].ports[0]);
	        return pathPoints.filter(function (v, i) {
	            return !(i < pathPoints.length - 1 && pathPoints[i + 1].node === source && v.node === source
	                || i > 0 && v.node === target && pathPoints[i - 1].node === target);
	        });
	    };
	    GridRouter.getRoutePath = function (route, cornerradius, arrowwidth, arrowheight) {
	        var result = {
	            routepath: 'M ' + route[0][0].x + ' ' + route[0][0].y + ' ',
	            arrowpath: ''
	        };
	        if (route.length > 1) {
	            for (var i = 0; i < route.length; i++) {
	                var li = route[i];
	                var x = li[1].x, y = li[1].y;
	                var dx = x - li[0].x;
	                var dy = y - li[0].y;
	                if (i < route.length - 1) {
	                    if (Math.abs(dx) > 0) {
	                        x -= dx / Math.abs(dx) * cornerradius;
	                    }
	                    else {
	                        y -= dy / Math.abs(dy) * cornerradius;
	                    }
	                    result.routepath += 'L ' + x + ' ' + y + ' ';
	                    var l = route[i + 1];
	                    var x0 = l[0].x, y0 = l[0].y;
	                    var x1 = l[1].x;
	                    var y1 = l[1].y;
	                    dx = x1 - x0;
	                    dy = y1 - y0;
	                    var angle = GridRouter.angleBetween2Lines(li, l) < 0 ? 1 : 0;
	                    var x2, y2;
	                    if (Math.abs(dx) > 0) {
	                        x2 = x0 + dx / Math.abs(dx) * cornerradius;
	                        y2 = y0;
	                    }
	                    else {
	                        x2 = x0;
	                        y2 = y0 + dy / Math.abs(dy) * cornerradius;
	                    }
	                    var cx = Math.abs(x2 - x);
	                    var cy = Math.abs(y2 - y);
	                    result.routepath += 'A ' + cx + ' ' + cy + ' 0 0 ' + angle + ' ' + x2 + ' ' + y2 + ' ';
	                }
	                else {
	                    var arrowtip = [x, y];
	                    var arrowcorner1, arrowcorner2;
	                    if (Math.abs(dx) > 0) {
	                        x -= dx / Math.abs(dx) * arrowheight;
	                        arrowcorner1 = [x, y + arrowwidth];
	                        arrowcorner2 = [x, y - arrowwidth];
	                    }
	                    else {
	                        y -= dy / Math.abs(dy) * arrowheight;
	                        arrowcorner1 = [x + arrowwidth, y];
	                        arrowcorner2 = [x - arrowwidth, y];
	                    }
	                    result.routepath += 'L ' + x + ' ' + y + ' ';
	                    if (arrowheight > 0) {
	                        result.arrowpath = 'M ' + arrowtip[0] + ' ' + arrowtip[1] + ' L ' + arrowcorner1[0] + ' ' + arrowcorner1[1]
	                            + ' L ' + arrowcorner2[0] + ' ' + arrowcorner2[1];
	                    }
	                }
	            }
	        }
	        else {
	            var li = route[0];
	            var x = li[1].x, y = li[1].y;
	            var dx = x - li[0].x;
	            var dy = y - li[0].y;
	            var arrowtip = [x, y];
	            var arrowcorner1, arrowcorner2;
	            if (Math.abs(dx) > 0) {
	                x -= dx / Math.abs(dx) * arrowheight;
	                arrowcorner1 = [x, y + arrowwidth];
	                arrowcorner2 = [x, y - arrowwidth];
	            }
	            else {
	                y -= dy / Math.abs(dy) * arrowheight;
	                arrowcorner1 = [x + arrowwidth, y];
	                arrowcorner2 = [x - arrowwidth, y];
	            }
	            result.routepath += 'L ' + x + ' ' + y + ' ';
	            if (arrowheight > 0) {
	                result.arrowpath = 'M ' + arrowtip[0] + ' ' + arrowtip[1] + ' L ' + arrowcorner1[0] + ' ' + arrowcorner1[1]
	                    + ' L ' + arrowcorner2[0] + ' ' + arrowcorner2[1];
	            }
	        }
	        return result;
	    };
	    return GridRouter;
	}());
	exports.GridRouter = GridRouter;

	});

	unwrapExports(gridrouter);
	var gridrouter_1 = gridrouter.NodeWrapper;
	var gridrouter_2 = gridrouter.Vert;
	var gridrouter_3 = gridrouter.LongestCommonSubsequence;
	var gridrouter_4 = gridrouter.GridRouter;

	var layout3d = createCommonjsModule(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });




	var Link3D = (function () {
	    function Link3D(source, target) {
	        this.source = source;
	        this.target = target;
	    }
	    Link3D.prototype.actualLength = function (x) {
	        var _this = this;
	        return Math.sqrt(x.reduce(function (c, v) {
	            var dx = v[_this.target] - v[_this.source];
	            return c + dx * dx;
	        }, 0));
	    };
	    return Link3D;
	}());
	exports.Link3D = Link3D;
	var Node3D = (function () {
	    function Node3D(x, y, z) {
	        if (x === void 0) { x = 0; }
	        if (y === void 0) { y = 0; }
	        if (z === void 0) { z = 0; }
	        this.x = x;
	        this.y = y;
	        this.z = z;
	    }
	    return Node3D;
	}());
	exports.Node3D = Node3D;
	var Layout3D = (function () {
	    function Layout3D(nodes, links, idealLinkLength) {
	        var _this = this;
	        if (idealLinkLength === void 0) { idealLinkLength = 1; }
	        this.nodes = nodes;
	        this.links = links;
	        this.idealLinkLength = idealLinkLength;
	        this.constraints = null;
	        this.useJaccardLinkLengths = true;
	        this.result = new Array(Layout3D.k);
	        for (var i = 0; i < Layout3D.k; ++i) {
	            this.result[i] = new Array(nodes.length);
	        }
	        nodes.forEach(function (v, i) {
	            for (var _i = 0, _a = Layout3D.dims; _i < _a.length; _i++) {
	                var dim = _a[_i];
	                if (typeof v[dim] == 'undefined')
	                    v[dim] = Math.random();
	            }
	            _this.result[0][i] = v.x;
	            _this.result[1][i] = v.y;
	            _this.result[2][i] = v.z;
	        });
	    }
	    Layout3D.prototype.linkLength = function (l) {
	        return l.actualLength(this.result);
	    };
	    Layout3D.prototype.start = function (iterations) {
	        var _this = this;
	        if (iterations === void 0) { iterations = 100; }
	        var n = this.nodes.length;
	        var linkAccessor = new LinkAccessor();
	        if (this.useJaccardLinkLengths)
	            linklengths.jaccardLinkLengths(this.links, linkAccessor, 1.5);
	        this.links.forEach(function (e) { return e.length *= _this.idealLinkLength; });
	        var distanceMatrix = (new shortestpaths.Calculator(n, this.links, function (e) { return e.source; }, function (e) { return e.target; }, function (e) { return e.length; })).DistanceMatrix();
	        var D = descent.Descent.createSquareMatrix(n, function (i, j) { return distanceMatrix[i][j]; });
	        var G = descent.Descent.createSquareMatrix(n, function () { return 2; });
	        this.links.forEach(function (_a) {
	            var source = _a.source, target = _a.target;
	            return G[source][target] = G[target][source] = 1;
	        });
	        this.descent = new descent.Descent(this.result, D);
	        this.descent.threshold = 1e-3;
	        this.descent.G = G;
	        if (this.constraints)
	            this.descent.project = new rectangle.Projection(this.nodes, null, null, this.constraints).projectFunctions();
	        for (var i = 0; i < this.nodes.length; i++) {
	            var v = this.nodes[i];
	            if (v.fixed) {
	                this.descent.locks.add(i, [v.x, v.y, v.z]);
	            }
	        }
	        this.descent.run(iterations);
	        return this;
	    };
	    Layout3D.prototype.tick = function () {
	        this.descent.locks.clear();
	        for (var i = 0; i < this.nodes.length; i++) {
	            var v = this.nodes[i];
	            if (v.fixed) {
	                this.descent.locks.add(i, [v.x, v.y, v.z]);
	            }
	        }
	        return this.descent.rungeKutta();
	    };
	    Layout3D.dims = ['x', 'y', 'z'];
	    Layout3D.k = Layout3D.dims.length;
	    return Layout3D;
	}());
	exports.Layout3D = Layout3D;
	var LinkAccessor = (function () {
	    function LinkAccessor() {
	    }
	    LinkAccessor.prototype.getSourceIndex = function (e) { return e.source; };
	    LinkAccessor.prototype.getTargetIndex = function (e) { return e.target; };
	    LinkAccessor.prototype.getLength = function (e) { return e.length; };
	    LinkAccessor.prototype.setLength = function (e, l) { e.length = l; };
	    return LinkAccessor;
	}());

	});

	unwrapExports(layout3d);
	var layout3d_1 = layout3d.Link3D;
	var layout3d_2 = layout3d.Node3D;
	var layout3d_3 = layout3d.Layout3D;

	var batch = createCommonjsModule(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });


	function gridify(pgLayout, nudgeGap, margin, groupMargin) {
	    pgLayout.cola.start(0, 0, 0, 10, false);
	    var gridrouter = route(pgLayout.cola.nodes(), pgLayout.cola.groups(), margin, groupMargin);
	    return gridrouter.routeEdges(pgLayout.powerGraph.powerEdges, nudgeGap, function (e) { return e.source.routerNode.id; }, function (e) { return e.target.routerNode.id; });
	}
	exports.gridify = gridify;
	function route(nodes, groups, margin, groupMargin) {
	    nodes.forEach(function (d) {
	        d.routerNode = {
	            name: d.name,
	            bounds: d.bounds.inflate(-margin)
	        };
	    });
	    groups.forEach(function (d) {
	        d.routerNode = {
	            bounds: d.bounds.inflate(-groupMargin),
	            children: (typeof d.groups !== 'undefined' ? d.groups.map(function (c) { return nodes.length + c.id; }) : [])
	                .concat(typeof d.leaves !== 'undefined' ? d.leaves.map(function (c) { return c.index; }) : [])
	        };
	    });
	    var gridRouterNodes = nodes.concat(groups).map(function (d, i) {
	        d.routerNode.id = i;
	        return d.routerNode;
	    });
	    return new gridrouter.GridRouter(gridRouterNodes, {
	        getChildren: function (v) { return v.children; },
	        getBounds: function (v) { return v.bounds; }
	    }, margin - groupMargin);
	}
	function powerGraphGridLayout(graph, size, grouppadding) {
	    var powerGraph;
	    graph.nodes.forEach(function (v, i) { return v.index = i; });
	    new layout.Layout()
	        .avoidOverlaps(false)
	        .nodes(graph.nodes)
	        .links(graph.links)
	        .powerGraphGroups(function (d) {
	        powerGraph = d;
	        powerGraph.groups.forEach(function (v) { return v.padding = grouppadding; });
	    });
	    var n = graph.nodes.length;
	    var edges = [];
	    var vs = graph.nodes.slice(0);
	    vs.forEach(function (v, i) { return v.index = i; });
	    powerGraph.groups.forEach(function (g) {
	        var sourceInd = g.index = g.id + n;
	        vs.push(g);
	        if (typeof g.leaves !== 'undefined')
	            g.leaves.forEach(function (v) { return edges.push({ source: sourceInd, target: v.index }); });
	        if (typeof g.groups !== 'undefined')
	            g.groups.forEach(function (gg) { return edges.push({ source: sourceInd, target: gg.id + n }); });
	    });
	    powerGraph.powerEdges.forEach(function (e) {
	        edges.push({ source: e.source.index, target: e.target.index });
	    });
	    new layout.Layout()
	        .size(size)
	        .nodes(vs)
	        .links(edges)
	        .avoidOverlaps(false)
	        .linkDistance(30)
	        .symmetricDiffLinkLengths(5)
	        .convergenceThreshold(1e-4)
	        .start(100, 0, 0, 0, false);
	    return {
	        cola: new layout.Layout()
	            .convergenceThreshold(1e-3)
	            .size(size)
	            .avoidOverlaps(true)
	            .nodes(graph.nodes)
	            .links(graph.links)
	            .groupCompactness(1e-4)
	            .linkDistance(30)
	            .symmetricDiffLinkLengths(5)
	            .powerGraphGroups(function (d) {
	            powerGraph = d;
	            powerGraph.groups.forEach(function (v) {
	                v.padding = grouppadding;
	            });
	        }).start(50, 0, 100, 0, false),
	        powerGraph: powerGraph
	    };
	}
	exports.powerGraphGridLayout = powerGraphGridLayout;

	});

	unwrapExports(batch);
	var batch_1 = batch.gridify;
	var batch_2 = batch.powerGraphGridLayout;

	var dist = createCommonjsModule(function (module, exports) {
	function __export(m) {
	    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
	}
	Object.defineProperty(exports, "__esModule", { value: true });
	__export(adaptor_1);
	__export(d3adaptor_1);
	__export(descent);
	__export(geom);
	__export(gridrouter);
	__export(handledisconnected);
	__export(layout);
	__export(layout3d);
	__export(linklengths);
	__export(powergraph);
	__export(pqueue);
	__export(rbtree);
	__export(rectangle);
	__export(shortestpaths);
	__export(vpsc);
	__export(batch);

	});

	unwrapExports(dist);

	var cytoscapeCola = createCommonjsModule(function (module, exports) {
	(function webpackUniversalModuleDefinition(root, factory) {
		module.exports = factory(dist);
	})(commonjsGlobal, function(__WEBPACK_EXTERNAL_MODULE_5__) {
	return /******/ (function(modules) { // webpackBootstrap
	/******/ 	// The module cache
	/******/ 	var installedModules = {};
	/******/
	/******/ 	// The require function
	/******/ 	function __webpack_require__(moduleId) {
	/******/
	/******/ 		// Check if module is in cache
	/******/ 		if(installedModules[moduleId]) {
	/******/ 			return installedModules[moduleId].exports;
	/******/ 		}
	/******/ 		// Create a new module (and put it into the cache)
	/******/ 		var module = installedModules[moduleId] = {
	/******/ 			i: moduleId,
	/******/ 			l: false,
	/******/ 			exports: {}
	/******/ 		};
	/******/
	/******/ 		// Execute the module function
	/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
	/******/
	/******/ 		// Flag the module as loaded
	/******/ 		module.l = true;
	/******/
	/******/ 		// Return the exports of the module
	/******/ 		return module.exports;
	/******/ 	}
	/******/
	/******/
	/******/ 	// expose the modules object (__webpack_modules__)
	/******/ 	__webpack_require__.m = modules;
	/******/
	/******/ 	// expose the module cache
	/******/ 	__webpack_require__.c = installedModules;
	/******/
	/******/ 	// identity function for calling harmony imports with the correct context
	/******/ 	__webpack_require__.i = function(value) { return value; };
	/******/
	/******/ 	// define getter function for harmony exports
	/******/ 	__webpack_require__.d = function(exports, name, getter) {
	/******/ 		if(!__webpack_require__.o(exports, name)) {
	/******/ 			Object.defineProperty(exports, name, {
	/******/ 				configurable: false,
	/******/ 				enumerable: true,
	/******/ 				get: getter
	/******/ 			});
	/******/ 		}
	/******/ 	};
	/******/
	/******/ 	// getDefaultExport function for compatibility with non-harmony modules
	/******/ 	__webpack_require__.n = function(module) {
	/******/ 		var getter = module && module.__esModule ?
	/******/ 			function getDefault() { return module['default']; } :
	/******/ 			function getModuleExports() { return module; };
	/******/ 		__webpack_require__.d(getter, 'a', getter);
	/******/ 		return getter;
	/******/ 	};
	/******/
	/******/ 	// Object.prototype.hasOwnProperty.call
	/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
	/******/
	/******/ 	// __webpack_public_path__
	/******/ 	__webpack_require__.p = "";
	/******/
	/******/ 	// Load entry module and return exports
	/******/ 	return __webpack_require__(__webpack_require__.s = 3);
	/******/ })
	/************************************************************************/
	/******/ ([
	/* 0 */
	/***/ (function(module, exports, __webpack_require__) {


	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	var assign = __webpack_require__(1);
	var defaults = __webpack_require__(2);
	var cola = __webpack_require__(5) || (typeof window !== 'undefined' ? window.cola : null);
	var raf = __webpack_require__(4);
	var isString = function isString(o) {
	  return (typeof o === 'undefined' ? 'undefined' : _typeof(o)) === _typeof('');
	};
	var isNumber = function isNumber(o) {
	  return (typeof o === 'undefined' ? 'undefined' : _typeof(o)) === _typeof(0);
	};
	var isObject = function isObject(o) {
	  return o != null && (typeof o === 'undefined' ? 'undefined' : _typeof(o)) === _typeof({});
	};
	var isFunction = function isFunction(o) {
	  return o != null && (typeof o === 'undefined' ? 'undefined' : _typeof(o)) === _typeof(function () {});
	};
	var nop = function nop() {};

	var getOptVal = function getOptVal(val, ele) {
	  if (isFunction(val)) {
	    var fn = val;
	    return fn.apply(ele, [ele]);
	  } else {
	    return val;
	  }
	};

	// constructor
	// options : object containing layout options
	function ColaLayout(options) {
	  this.options = assign({}, defaults, options);
	}

	// runs the layout
	ColaLayout.prototype.run = function () {
	  var layout = this;
	  var options = this.options;

	  layout.manuallyStopped = false;

	  var cy = options.cy; // cy is automatically populated for us in the constructor
	  var eles = options.eles;
	  var nodes = eles.nodes();
	  var edges = eles.edges();
	  var ready = false;

	  var isParent = function isParent(ele) {
	    return ele.isParent();
	  };

	  var parentNodes = nodes.filter(isParent);

	  var nonparentNodes = nodes.subtract(parentNodes);

	  var bb = options.boundingBox || { x1: 0, y1: 0, w: cy.width(), h: cy.height() };
	  if (bb.x2 === undefined) {
	    bb.x2 = bb.x1 + bb.w;
	  }
	  if (bb.w === undefined) {
	    bb.w = bb.x2 - bb.x1;
	  }
	  if (bb.y2 === undefined) {
	    bb.y2 = bb.y1 + bb.h;
	  }
	  if (bb.h === undefined) {
	    bb.h = bb.y2 - bb.y1;
	  }

	  var updateNodePositions = function updateNodePositions() {
	    for (var i = 0; i < nodes.length; i++) {
	      var node = nodes[i];
	      var dimensions = node.layoutDimensions(options);
	      var scratch = node.scratch('cola');

	      // update node dims
	      if (!scratch.updatedDims) {
	        var padding = getOptVal(options.nodeSpacing, node);

	        scratch.width = dimensions.w + 2 * padding;
	        scratch.height = dimensions.h + 2 * padding;
	      }
	    }

	    nodes.positions(function (node) {
	      var scratch = node.scratch().cola;
	      var retPos = void 0;

	      if (!node.grabbed() && nonparentNodes.contains(node)) {
	        retPos = {
	          x: bb.x1 + scratch.x,
	          y: bb.y1 + scratch.y
	        };

	        if (!isNumber(retPos.x) || !isNumber(retPos.y)) {
	          retPos = undefined;
	        }
	      }

	      return retPos;
	    });

	    nodes.updateCompoundBounds(); // because the way this layout sets positions is buggy for some reason; ref #878

	    if (!ready) {
	      onReady();
	      ready = true;
	    }

	    if (options.fit) {
	      cy.fit(options.padding);
	    }
	  };

	  var onDone = function onDone() {
	    if (options.ungrabifyWhileSimulating) {
	      grabbableNodes.grabify();
	    }

	    cy.off('destroy', destroyHandler);

	    nodes.off('grab free position', grabHandler);
	    nodes.off('lock unlock', lockHandler);

	    // trigger layoutstop when the layout stops (e.g. finishes)
	    layout.one('layoutstop', options.stop);
	    layout.trigger({ type: 'layoutstop', layout: layout });
	  };

	  var onReady = function onReady() {
	    // trigger layoutready when each node has had its position set at least once
	    layout.one('layoutready', options.ready);
	    layout.trigger({ type: 'layoutready', layout: layout });
	  };

	  var ticksPerFrame = options.refresh;

	  if (options.refresh < 0) {
	    ticksPerFrame = 1;
	  } else {
	    ticksPerFrame = Math.max(1, ticksPerFrame); // at least 1
	  }

	  var adaptor = layout.adaptor = cola.adaptor({
	    trigger: function trigger(e) {
	      // on sim event
	      var TICK = cola.EventType ? cola.EventType.tick : null;
	      var END = cola.EventType ? cola.EventType.end : null;

	      switch (e.type) {
	        case 'tick':
	        case TICK:
	          if (options.animate) {
	            updateNodePositions();
	          }
	          break;

	        case 'end':
	        case END:
	          updateNodePositions();
	          if (!options.infinite) {
	            onDone();
	          }
	          break;
	      }
	    },

	    kick: function kick() {
	      // kick off the simulation
	      //let skip = 0;

	      var firstTick = true;

	      var inftick = function inftick() {
	        if (layout.manuallyStopped) {
	          onDone();

	          return true;
	        }

	        var ret = adaptor.tick();

	        if (!options.infinite && !firstTick) {
	          adaptor.convergenceThreshold(options.convergenceThreshold);
	        }

	        firstTick = false;

	        if (ret && options.infinite) {
	          // resume layout if done
	          adaptor.resume(); // resume => new kick
	        }

	        return ret; // allow regular finish b/c of new kick
	      };

	      var multitick = function multitick() {
	        // multiple ticks in a row
	        var ret = void 0;

	        for (var i = 0; i < ticksPerFrame && !ret; i++) {
	          ret = ret || inftick(); // pick up true ret vals => sim done
	        }

	        return ret;
	      };

	      if (options.animate) {
	        var frame = function frame() {
	          if (multitick()) {
	            return;
	          }

	          raf(frame);
	        };

	        raf(frame);
	      } else {
	        while (!inftick()) {
	          // keep going...
	        }
	      }
	    },

	    on: nop, // dummy; not needed

	    drag: nop // not needed for our case
	  });
	  layout.adaptor = adaptor;

	  // if set no grabbing during layout
	  var grabbableNodes = nodes.filter(':grabbable');
	  if (options.ungrabifyWhileSimulating) {
	    grabbableNodes.ungrabify();
	  }

	  var destroyHandler = void 0;
	  cy.one('destroy', destroyHandler = function destroyHandler() {
	    layout.stop();
	  });

	  // handle node dragging
	  var grabHandler = void 0;
	  nodes.on('grab free position', grabHandler = function grabHandler(e) {
	    var node = this;
	    var scrCola = node.scratch().cola;
	    var pos = node.position();
	    var nodeIsTarget = e.cyTarget === node || e.target === node;

	    if (!nodeIsTarget) {
	      return;
	    }

	    switch (e.type) {
	      case 'grab':
	        adaptor.dragstart(scrCola);
	        break;
	      case 'free':
	        adaptor.dragend(scrCola);
	        break;
	      case 'position':
	        // only update when different (i.e. manual .position() call or drag) so we don't loop needlessly
	        if (scrCola.px !== pos.x - bb.x1 || scrCola.py !== pos.y - bb.y1) {
	          scrCola.px = pos.x - bb.x1;
	          scrCola.py = pos.y - bb.y1;
	        }
	        break;
	    }
	  });

	  var lockHandler = void 0;
	  nodes.on('lock unlock', lockHandler = function lockHandler() {
	    var node = this;
	    var scrCola = node.scratch().cola;

	    scrCola.fixed = node.locked();

	    if (node.locked()) {
	      adaptor.dragstart(scrCola);
	    } else {
	      adaptor.dragend(scrCola);
	    }
	  });

	  // add nodes to cola
	  adaptor.nodes(nonparentNodes.map(function (node, i) {
	    var padding = getOptVal(options.nodeSpacing, node);
	    var pos = node.position();
	    var dimensions = node.layoutDimensions(options);

	    var struct = node.scratch().cola = {
	      x: options.randomize || pos.x === undefined ? Math.round(Math.random() * bb.w) : pos.x,
	      y: options.randomize || pos.y === undefined ? Math.round(Math.random() * bb.h) : pos.y,
	      width: dimensions.w + 2 * padding,
	      height: dimensions.h + 2 * padding,
	      index: i,
	      fixed: node.locked()
	    };

	    return struct;
	  }));

	  // the constraints to be added on nodes
	  var constraints = [];

	  if (options.alignment) {
	    // then set alignment constraints

	    var offsetsX = [];
	    var offsetsY = [];

	    nonparentNodes.forEach(function (node) {
	      var align = getOptVal(options.alignment, node);
	      var scrCola = node.scratch().cola;
	      var index = scrCola.index;

	      if (!align) {
	        return;
	      }

	      if (align.x != null) {
	        offsetsX.push({
	          node: index,
	          offset: align.x
	        });
	      }

	      if (align.y != null) {
	        offsetsY.push({
	          node: index,
	          offset: align.y
	        });
	      }
	    });

	    if (offsetsX.length > 0) {
	      constraints.push({
	        type: 'alignment',
	        axis: 'x',
	        offsets: offsetsX
	      });
	    }

	    if (offsetsY.length > 0) {
	      constraints.push({
	        type: 'alignment',
	        axis: 'y',
	        offsets: offsetsY
	      });
	    }
	  }

	  // if gapInequalities variable is set add each inequality constraint to list of constraints
	  if (options.gapInequalities) {
	    options.gapInequalities.forEach(function (inequality) {

	      // for the constraints to be passed to cola layout adaptor use indices of nodes,
	      // not the nodes themselves
	      var leftIndex = inequality.left.scratch().cola.index;
	      var rightIndex = inequality.right.scratch().cola.index;

	      constraints.push({
	        axis: inequality.axis,
	        left: leftIndex,
	        right: rightIndex,
	        gap: inequality.gap,
	        equality: inequality.equality
	      });
	    });
	  }

	  // add constraints if any
	  if (constraints.length > 0) {
	    adaptor.constraints(constraints);
	  }

	  // add compound nodes to cola
	  adaptor.groups(parentNodes.map(function (node, i) {
	    // add basic group incl leaf nodes
	    var optPadding = getOptVal(options.nodeSpacing, node);
	    var getPadding = function getPadding(d) {
	      return parseFloat(node.style('padding-' + d));
	    };

	    var pleft = getPadding('left') + optPadding;
	    var pright = getPadding('right') + optPadding;
	    var ptop = getPadding('top') + optPadding;
	    var pbottom = getPadding('bottom') + optPadding;

	    node.scratch().cola = {
	      index: i,

	      padding: Math.max(pleft, pright, ptop, pbottom),

	      // leaves should only contain direct descendants (children),
	      // not the leaves of nested compound nodes or any nodes that are compounds themselves
	      leaves: node.children().intersection(nonparentNodes).map(function (child) {
	        return child[0].scratch().cola.index;
	      }),

	      fixed: node.locked()
	    };

	    return node;
	  }).map(function (node) {
	    // add subgroups
	    node.scratch().cola.groups = node.children().intersection(parentNodes).map(function (child) {
	      return child.scratch().cola.index;
	    });

	    return node.scratch().cola;
	  }));

	  // get the edge length setting mechanism
	  var length = void 0;
	  var lengthFnName = void 0;
	  if (options.edgeLength != null) {
	    length = options.edgeLength;
	    lengthFnName = 'linkDistance';
	  } else if (options.edgeSymDiffLength != null) {
	    length = options.edgeSymDiffLength;
	    lengthFnName = 'symmetricDiffLinkLengths';
	  } else if (options.edgeJaccardLength != null) {
	    length = options.edgeJaccardLength;
	    lengthFnName = 'jaccardLinkLengths';
	  } else {
	    length = 100;
	    lengthFnName = 'linkDistance';
	  }

	  var lengthGetter = function lengthGetter(link) {
	    return link.calcLength;
	  };

	  // add the edges to cola
	  adaptor.links(edges.stdFilter(function (edge) {
	    return nonparentNodes.contains(edge.source()) && nonparentNodes.contains(edge.target());
	  }).map(function (edge) {
	    var c = edge.scratch().cola = {
	      source: edge.source()[0].scratch().cola.index,
	      target: edge.target()[0].scratch().cola.index
	    };

	    if (length != null) {
	      c.calcLength = getOptVal(length, edge);
	    }

	    return c;
	  }));

	  adaptor.size([bb.w, bb.h]);

	  if (length != null) {
	    adaptor[lengthFnName](lengthGetter);
	  }

	  // set the flow of cola
	  if (options.flow) {
	    var flow = void 0;
	    var defAxis = 'y';
	    var defMinSep = 50;

	    if (isString(options.flow)) {
	      flow = {
	        axis: options.flow,
	        minSeparation: defMinSep
	      };
	    } else if (isNumber(options.flow)) {
	      flow = {
	        axis: defAxis,
	        minSeparation: options.flow
	      };
	    } else if (isObject(options.flow)) {
	      flow = options.flow;

	      flow.axis = flow.axis || defAxis;
	      flow.minSeparation = flow.minSeparation != null ? flow.minSeparation : defMinSep;
	    } else {
	      // e.g. options.flow: true
	      flow = {
	        axis: defAxis,
	        minSeparation: defMinSep
	      };
	    }

	    adaptor.flowLayout(flow.axis, flow.minSeparation);
	  }

	  layout.trigger({ type: 'layoutstart', layout: layout });

	  adaptor.avoidOverlaps(options.avoidOverlap).handleDisconnected(options.handleDisconnected).start(options.unconstrIter, options.userConstIter, options.allConstIter);

	  if (!options.infinite) {
	    setTimeout(function () {
	      if (!layout.manuallyStopped) {
	        adaptor.stop();
	      }
	    }, options.maxSimulationTime);
	  }

	  return this; // chaining
	};

	// called on continuous layouts to stop them before they finish
	ColaLayout.prototype.stop = function () {
	  if (this.adaptor) {
	    this.manuallyStopped = true;
	    this.adaptor.stop();
	  }

	  return this; // chaining
	};

	module.exports = ColaLayout;

	/***/ }),
	/* 1 */
	/***/ (function(module, exports, __webpack_require__) {


	// Simple, internal Object.assign() polyfill for options objects etc.

	module.exports = Object.assign != null ? Object.assign.bind(Object) : function (tgt) {
	  for (var _len = arguments.length, srcs = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	    srcs[_key - 1] = arguments[_key];
	  }

	  srcs.filter(function (src) {
	    return src != null;
	  }).forEach(function (src) {
	    Object.keys(src).forEach(function (k) {
	      return tgt[k] = src[k];
	    });
	  });

	  return tgt;
	};

	/***/ }),
	/* 2 */
	/***/ (function(module, exports, __webpack_require__) {


	// default layout options
	var defaults = {
	  animate: true, // whether to show the layout as it's running
	  refresh: 1, // number of ticks per frame; higher is faster but more jerky
	  maxSimulationTime: 4000, // max length in ms to run the layout
	  ungrabifyWhileSimulating: false, // so you can't drag nodes during layout
	  fit: true, // on every layout reposition of nodes, fit the viewport
	  padding: 30, // padding around the simulation
	  boundingBox: undefined, // constrain layout bounds; { x1, y1, x2, y2 } or { x1, y1, w, h }
	  nodeDimensionsIncludeLabels: false, // whether labels should be included in determining the space used by a node

	  // layout event callbacks
	  ready: function ready() {}, // on layoutready
	  stop: function stop() {}, // on layoutstop

	  // positioning options
	  randomize: false, // use random node positions at beginning of layout
	  avoidOverlap: true, // if true, prevents overlap of node bounding boxes
	  handleDisconnected: true, // if true, avoids disconnected components from overlapping
	  convergenceThreshold: 0.01, // when the alpha value (system energy) falls below this value, the layout stops
	  nodeSpacing: function nodeSpacing(node) {
	    return 10;
	  }, // extra spacing around nodes
	  flow: undefined, // use DAG/tree flow layout if specified, e.g. { axis: 'y', minSeparation: 30 }
	  alignment: undefined, // relative alignment constraints on nodes, e.g. function( node ){ return { x: 0, y: 1 } }
	  gapInequalities: undefined, // list of inequality constraints for the gap between the nodes, e.g. [{"axis":"y", "left":node1, "right":node2, "gap":25}]

	  // different methods of specifying edge length
	  // each can be a constant numerical value or a function like `function( edge ){ return 2; }`
	  edgeLength: undefined, // sets edge length directly in simulation
	  edgeSymDiffLength: undefined, // symmetric diff edge length in simulation
	  edgeJaccardLength: undefined, // jaccard edge length in simulation

	  // iterations of cola algorithm; uses default values on undefined
	  unconstrIter: undefined, // unconstrained initial layout iterations
	  userConstIter: undefined, // initial layout iterations with user-specified constraints
	  allConstIter: undefined, // initial layout iterations with all constraints including non-overlap

	  // infinite layout options
	  infinite: false // overrides all other options for a forces-all-the-time mode
	};

	module.exports = defaults;

	/***/ }),
	/* 3 */
	/***/ (function(module, exports, __webpack_require__) {


	var impl = __webpack_require__(0);

	// registers the extension on a cytoscape lib ref
	var register = function register(cytoscape) {
	  if (!cytoscape) {
	    return;
	  } // can't register if cytoscape unspecified

	  cytoscape('layout', 'cola', impl); // register with cytoscape.js
	};

	if (typeof cytoscape !== 'undefined') {
	  // expose to global cytoscape (i.e. window.cytoscape)
	  register(cytoscape);
	}

	module.exports = register;

	/***/ }),
	/* 4 */
	/***/ (function(module, exports, __webpack_require__) {


	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	var raf = void 0;

	if ((typeof window === "undefined" ? "undefined" : _typeof(window)) !== ( "undefined")) {
	  raf = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.msRequestAnimationFrame || function (fn) {
	    return setTimeout(fn, 16);
	  };
	} else {
	  // if not available, all you get is immediate calls
	  raf = function raf(cb) {
	    cb();
	  };
	}

	module.exports = raf;

	/***/ }),
	/* 5 */
	/***/ (function(module, exports) {

	module.exports = __WEBPACK_EXTERNAL_MODULE_5__;

	/***/ })
	/******/ ]);
	});
	});

	var cola = unwrapExports(cytoscapeCola);

	function _typeof$f(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof$f = function _typeof(obj) { return typeof obj; }; } else { _typeof$f = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof$f(obj); }

	function _classCallCheck$p(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _defineProperties$o(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

	function _createClass$o(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties$o(Constructor.prototype, protoProps); if (staticProps) _defineProperties$o(Constructor, staticProps); return Constructor; }

	function _possibleConstructorReturn$f(self, call) { if (call && (_typeof$f(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized$f(self); }

	function _assertThisInitialized$f(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

	function _get$c(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get$c = Reflect.get; } else { _get$c = function _get(target, property, receiver) { var base = _superPropBase$c(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get$c(target, property, receiver || target); }

	function _superPropBase$c(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf$f(object); if (object === null) break; } return object; }

	function _getPrototypeOf$f(o) { _getPrototypeOf$f = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf$f(o); }

	function _inherits$f(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf$f(subClass, superClass); }

	function _setPrototypeOf$f(o, p) { _setPrototypeOf$f = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf$f(o, p); }

	var EasyGscapeRenderer =
	/*#__PURE__*/
	function (_GrapholscapeRenderer) {
	  _inherits$f(EasyGscapeRenderer, _GrapholscapeRenderer);

	  function EasyGscapeRenderer(container) {
	    var _this;

	    _classCallCheck$p(this, EasyGscapeRenderer);

	    _this = _possibleConstructorReturn$f(this, _getPrototypeOf$f(EasyGscapeRenderer).call(this, container));
	    cytoscape$1.use(cola);
	    return _this;
	  }

	  _createClass$o(EasyGscapeRenderer, [{
	    key: "drawDiagram",
	    value: function drawDiagram(diagram) {
	      _get$c(_getPrototypeOf$f(EasyGscapeRenderer.prototype), "drawDiagram", this).call(this, diagram);

	      this.cy.autoungrabify(false);
	      this.cy.nodes().lock();
	      this.cy.nodes('.repositioned').unlock();
	      var layout = this.cy.$('.repositioned').closedNeighborhood().closedNeighborhood().layout({
	        name: 'cola',
	        randomize: false,
	        fit: false,
	        refresh: 3,
	        maxSimulationTime: 8000,
	        convergenceThreshold: 0.0000001
	      });
	      layout.run();
	    }
	  }]);

	  return EasyGscapeRenderer;
	}(GrapholscapeRenderer);

	function _classCallCheck$q(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _defineProperties$p(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

	function _createClass$p(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties$p(Constructor.prototype, protoProps); if (staticProps) _defineProperties$p(Constructor, staticProps); return Constructor; }

	var GrapholscapeView =
	/*#__PURE__*/
	function () {
	  function GrapholscapeView(container) {
	    _classCallCheck$q(this, GrapholscapeView);

	    this.container = container;
	    this.graph_container = document.createElement('div');
	    this.graph_container.style.width = '100%';
	    this.graph_container.style.height = '100%';
	    this.graph_container.style.position = 'absolute';
	    this.container.appendChild(this.graph_container);
	    this.onEdgeSelection = {};
	    this.onNodeSelection = {}; // this.filters = config.widgets.filters.filter_list

	    this.renderers = {
	      "default": new GrapholscapeRenderer(this.graph_container),
	      lite: new EasyGscapeRenderer(this.graph_container)
	    };
	    this.setRenderer(this.renderers["default"]);
	    this.container.requestFullscreen = this.container.requestFullscreen || this.container.mozRequestFullscreen || // Mozilla
	    this.container.mozRequestFullScreen || // Mozilla older API use uppercase 'S'.
	    this.container.webkitRequestFullscreen || // Webkit
	    this.container.msRequestFullscreen; // IE

	    document.cancelFullscreen = document.exitFullscreen || document.cancelFullscreen || document.mozCancelFullScreen || document.webkitCancelFullScreen || document.msExitFullscreen;
	    this.graph_container.style.background = gscape.background;
	    this.setTheme(gscape);
	  }

	  _createClass$p(GrapholscapeView, [{
	    key: "createUi",
	    value: function createUi(ontology, diagrams, predicates, settings) {
	      var _this = this;

	      this.filters = settings.filters.filter_list;
	      this.widgets = new Set();
	      this.diagram_selector = new GscapeDiagramSelector(diagrams);
	      this.diagram_selector.onDiagramChange = this.onDiagramChange;
	      this.container.appendChild(this.diagram_selector);
	      this.widgets.add(this.diagram_selector);
	      this.explorer = new GscapeExplorer(predicates, diagrams);
	      this.explorer.onEntitySelect = this.onEntitySelection;
	      this.explorer.onNodeNavigation = this.onNodeNavigation;
	      !settings.explorer.enabled ? this.explorer.hide() : null;
	      this.container.appendChild(this.explorer);
	      this.widgets.add(this.explorer);
	      this.entity_details = new GscapeEntityDetails();
	      !settings.details.enabled ? this.entity_details.hide() : null;
	      this.container.appendChild(this.entity_details);
	      this.widgets.add(this.entity_details);
	      var btn_fullscreen = new GscapeButton('fullscreen', 'fullscreen_exit');
	      btn_fullscreen.style.top = '10px';
	      btn_fullscreen.style.right = '10px';
	      btn_fullscreen.onClick = this.toggleFullscreen.bind(this);
	      this.container.appendChild(btn_fullscreen);
	      this.widgets.add(btn_fullscreen);
	      var btn_reset = new GscapeButton('filter_center_focus');
	      btn_reset.style.bottom = '10px';
	      btn_reset.style.right = '10px';
	      btn_reset.onClick = this.resetView.bind(this);
	      this.container.appendChild(btn_reset);
	      this.widgets.add(btn_reset);
	      this.filters_widget = new GscapeFilters(this.filters);
	      this.filters_widget.onFilterOn = this.filter.bind(this);
	      this.filters_widget.onFilterOff = this.unfilter.bind(this);

	      this.filters_widget.btn.onClick = function () {
	        _this.blurAll(_this.filters_widget);

	        _this.filters_widget.toggleBody();
	      };

	      !settings.filters.enabled ? this.filters_widget.hide() : null;
	      this.container.appendChild(this.filters_widget);
	      this.widgets.add(this.filters_widget);
	      this.ontology_info = new GscapeOntologyInfo(ontology);

	      this.ontology_info.btn.onClick = function () {
	        _this.blurAll(_this.ontology_info);

	        _this.ontology_info.toggleBody();
	      };

	      this.container.appendChild(this.ontology_info);
	      this.widgets.add(this.ontology_info);
	      this.owl_translator = new GscapeOwlTranslator();
	      !settings.owl_translator.enabled ? this.owl_translator.hide() : null;
	      this.container.appendChild(this.owl_translator);
	      this.widgets.add(this.owl_translator);
	      var zoom_widget = new GscapeZoomTools();
	      zoom_widget.onZoomIn = this.zoomIn.bind(this);
	      zoom_widget.onZoomOut = this.zoomOut.bind(this);
	      this.container.appendChild(zoom_widget);
	      this.widgets.add(zoom_widget);
	      this.btn_lite_mode = new GscapeButton('flash_on', 'flash_off');
	      this.btn_lite_mode.onClick = this.toggleLiteMode.bind(this);
	      this.btn_lite_mode.highlight = true;
	      this.btn_lite_mode.style.bottom = '10px';
	      this.btn_lite_mode.style.left = '94px';
	      !settings.lite_mode.enabled ? this.btn_lite_mode.hide() : null;
	      this.container.appendChild(this.btn_lite_mode);
	      this.widgets.add(this.btn_lite_mode);
	      this.registerEvents(this.renderers["default"]);
	      this.registerEvents(this.renderers.lite);
	    }
	  }, {
	    key: "registerEvents",
	    value: function registerEvents(renderer) {
	      renderer.onEdgeSelection = this.onEdgeSelection;
	      renderer.onNodeSelection = this.onNodeSelection;
	      renderer.onBackgroundClick = this.blurAll.bind(this);
	    }
	  }, {
	    key: "drawDiagram",
	    value: function drawDiagram(diagramViewData) {
	      this.diagram_selector.actual_diagram_id = diagramViewData.id;
	      this.renderer.drawDiagram(diagramViewData); // check if any filter is active and if yes, apply them

	      this.applyActiveFilters();
	    }
	  }, {
	    key: "applyActiveFilters",
	    value: function applyActiveFilters() {
	      var _this2 = this;

	      Object.keys(this.filters).map(function (key) {
	        if (_this2.filters[key].active) _this2.filter(_this2.filters[key]);
	      });
	    }
	  }, {
	    key: "filter",
	    value: function filter(filter_properties) {
	      this.renderer.filter(filter_properties);
	      /**
	       * force the value_domain filter to stay disabled
	       * (activating the attributes filter may able the value_domain filter
	       *  which must stay always disabled in simplified visualization)
	       */

	      if (this.btn_lite_mode.active) {
	        this.filters.value_domain.disabled = true;
	      }
	    }
	  }, {
	    key: "unfilter",
	    value: function unfilter(filter_properties) {
	      this.renderer.unfilter(filter_properties); // Re-Apply other active filters to resolve ambiguity

	      this.applyActiveFilters();
	      /**
	       * force the value_domain filter to stay disabled
	       * (activating the attributes filter may able the value_domain filter
	       *  which must stay always disabled in simplified visualization)
	       */

	      if (this.btn_lite_mode.active) {
	        this.filters.value_domain.disabled = true;
	      }
	    }
	  }, {
	    key: "zoomIn",
	    value: function zoomIn() {
	      this.renderer.zoomIn();
	    }
	  }, {
	    key: "zoomOut",
	    value: function zoomOut() {
	      this.renderer.zoomOut();
	    }
	  }, {
	    key: "resetView",
	    value: function resetView() {
	      this.renderer.resetView();
	    }
	  }, {
	    key: "centerOnNode",
	    value: function centerOnNode(nodeViewData, zoom) {
	      this.renderer.centerOnNode(nodeViewData.id, zoom);
	    }
	  }, {
	    key: "showDetails",
	    value: function showDetails(entityViewData) {
	      var unselect = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
	      this.entity_details.entity = entityViewData;
	      this.entity_details.show();
	      if (unselect) this.renderer.cy.$(':selected').unselect();
	    }
	  }, {
	    key: "hideDetails",
	    value: function hideDetails() {
	      this.entity_details.hide();
	    }
	  }, {
	    key: "showOwlTranslation",
	    value: function showOwlTranslation(text) {
	      if (!this.btn_lite_mode.active) {
	        this.owl_translator.owl_text = text;
	        this.owl_translator.show();
	      }
	    }
	  }, {
	    key: "hideOwlTranslation",
	    value: function hideOwlTranslation() {
	      this.owl_translator.hide();
	    }
	  }, {
	    key: "toggleFullscreen",
	    value: function toggleFullscreen() {
	      var c = this.container;

	      if (this.isFullscreen()) {
	        document.cancelFullscreen();
	      } else {
	        c.requestFullscreen();
	      }
	    }
	  }, {
	    key: "isFullscreen",
	    value: function isFullscreen() {
	      return document.fullScreenElement || document.mozFullScreenElement || // Mozilla
	      document.webkitFullscreenElement || // Webkit
	      document.msFullscreenElement; // IE
	    }
	  }, {
	    key: "blurAll",
	    value: function blurAll(widgtet_to_skip) {
	      this.widgets.forEach(function (widget) {
	        if (!Object.is(widget, widgtet_to_skip)) widget.blur();
	      });
	    }
	  }, {
	    key: "setRenderer",
	    value: function setRenderer(renderer) {
	      if (this.renderer) this.renderer.unmount();
	      renderer.mount(this.graph_container);
	      this.renderer = renderer;
	    }
	  }, {
	    key: "toggleLiteMode",
	    value: function toggleLiteMode() {
	      var _this3 = this;

	      var actual_position = this.renderer.getActualPosition();

	      if (this.renderer instanceof EasyGscapeRenderer) {
	        this.setRenderer(this.renderers["default"]);
	        Object.keys(this.filters).map(function (key) {
	          if (key != 'all' && key != 'attributes' && key != 'individuals') {
	            // enable filters that may have been disabled by lite mode 
	            _this3.filters[key].disabled = false;
	            if (key == 'value_domain' && _this3.filters.attributes.active) _this3.filters.value_domain.disabled = true;
	          }
	        });
	        this.onDefaultModeActive(actual_position);
	      } else {
	        this.setRenderer(this.renderers.lite);
	        Object.keys(this.filters).map(function (key) {
	          if (key != 'all' && key != 'attributes' && key != 'individuals') {
	            // disable all unnecessary filters
	            _this3.filters[key].disabled = true;
	          }
	        });
	        this.onLiteModeActive(actual_position);
	      }

	      this.filters_widget.requestUpdate();
	      this.blurAll();
	    }
	  }, {
	    key: "setViewPort",
	    value: function setViewPort(state) {
	      this.renderer.centerOnRenderedPosition(state.x, state.y, state.zoom);
	    }
	  }, {
	    key: "updateEntitiesList",
	    value: function updateEntitiesList(entitiesViewData) {
	      this.explorer.predicates = entitiesViewData;
	      this.explorer.requestUpdate();
	    }
	  }, {
	    key: "setTheme",
	    value: function setTheme(theme) {
	      var _this4 = this;

	      // update theme with custom variables "--theme-gscape-[var]" values
	      var container_style = window.getComputedStyle(this.container);
	      var theme_aux = {};
	      var prefix = '--theme-gscape-';
	      Object.keys(theme).map(function (key) {
	        var css_key = prefix + key.replace(/_/g, '-');

	        if (container_style.getPropertyValue(css_key)) {
	          // update color in the theme from custom variable
	          theme_aux[key] = container_style.getPropertyValue(css_key);
	        } else {
	          // normalize theme using plain strings
	          theme_aux[key] = theme[key].cssText;
	        }
	      }); // Apply theme to graph

	      Object.keys(this.renderers).map(function (key) {
	        _this4.renderers[key].setTheme(theme_aux);
	      });
	    }
	    /*
	    getDefaultTheme() {
	      Object.keys(themes).forEach(key => {
	        if (config.rendering.theme.list[key].default)
	          return themes[key]
	      })
	        return themes.gscape
	    }
	    */

	  }, {
	    key: "actual_diagram_id",
	    get: function get() {
	      return this.diagram_selector.actual_diagram_id;
	    }
	  }]);

	  return GrapholscapeView;
	}();

	function _classCallCheck$r(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _defineProperties$q(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

	function _createClass$q(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties$q(Constructor.prototype, protoProps); if (staticProps) _defineProperties$q(Constructor, staticProps); return Constructor; }

	var OwlTranslator =
	/*#__PURE__*/
	function () {
	  function OwlTranslator() {
	    _classCallCheck$r(this, OwlTranslator);
	  }

	  _createClass$q(OwlTranslator, [{
	    key: "edgeToOwlString",
	    value: function edgeToOwlString(edge) {
	      var source = edge.source();
	      var target = edge.target();
	      var malformed = '<span class="owl_error">Malformed Axiom</span>';
	      var missing_operand = '<span class="owl_error">Missing Operand</span>';

	      switch (edge.data('type')) {
	        case 'inclusion':
	          if (source.data('identity') == 'concept' && target.data('identity') == 'concept') {
	            if (source.data('type') == 'domain-restriction' && source.data('label') != 'self' && target.data('label') != 'self') {
	              return propertyDomain(this, edge);
	            } else if (source.data('type') == 'range-restriction' && source.data('label') != 'self' && target.data('label') != 'self') {
	              return propertyRange(this, edge);
	            } else if (target.data('type') == 'complement' || source.data('type') == 'complement') {
	              return disjointClasses(this, edge.connectedNodes());
	            }

	            return subClassOf(this, edge);
	          } else if (source.data('identity') == 'role' && target.data('identity') == 'role') {
	            if (target.data('type') == 'complement') {
	              return disjointTypeProperties(this, edge);
	            }

	            return subTypePropertyOf(this, edge);
	          } else if (source.data('identity') == 'value_domain' && target.data('identity') == 'value_domain') {
	            return propertyRange(this, edge);
	          } else if (source.data('identity') == 'attribute' && target.data('identity') == 'attribute') {
	            if (target.data('type') == 'complement') {
	              return disjointTypeProperties(this, edge);
	            } else {
	              return subTypePropertyOf(this, edge);
	            }
	          } else {
	            return malformed;
	          }

	          break;

	        case 'equivalence':
	          if (source.data('identity') == 'concept' && target.data('identity') == 'concept') {
	            return equivalentClasses(this, edge);
	          } else if (source.data('identity') == 'role' && target.data('identity') == 'role') {
	            if (source.data('type') == 'role-inverse' || target.data('type') == 'role-inverse') {
	              return inverseObjectProperties(this, edge);
	            } else {
	              return equivalentTypeProperties(this, edge);
	            }
	          } else if (source.data('identity') == 'attribute' && target.data('identity') == 'attribute') {
	            return equivalentTypeProperties(this, edge);
	          } else {
	            return malformed;
	          }

	          break;

	        case 'membership':
	          if (target.data('identity') == 'concept') {
	            return classAssertion(this, edge);
	          } else {
	            return propertyAssertion(this, edge);
	          }

	          break;
	      }

	      function propertyAssertion(self, edge) {
	        var axiom_type = 'Object';
	        var owl_string;

	        if (edge.target().data('identity') == 'attribute') {
	          axiom_type = 'Data';
	        }

	        owl_string = axiom_type + 'PropertyAssertion(' + self.nodeToOwlString(edge.target()) + ' ';

	        if (edge.source().data('type') == 'property-assertion') {
	          var property_node = edge.source();
	          property_node.data('inputs').forEach(function (input_id) {
	            input = self.cy.$('edge[id_xml = "' + input_id + '"]').source();
	            owl_string += self.nodeToOwlString(input) + ' ';
	          });
	          owl_string = owl_string.slice(0, owl_string.length - 1);
	        } else {
	          owl_string += self.nodeToOwlString(edge.source());
	        }

	        return owl_string + ')';
	      }

	      function classAssertion(self, edge) {
	        return 'ClassAssertion(' + self.nodeToOwlString(edge.source()) + ' ' + self.nodeToOwlString(edge.target()) + ')';
	      }

	      function inverseObjectProperties(self, edge) {
	        var complement_input;
	        var input;

	        if (edge.source().data('type') == 'role-inverse') {
	          input = edge.target();
	          complement_input = edge.source().incomers('[type = "input"]').sources().first();
	        } else {
	          input = edge.source();
	          complement_input = edge.target().incomers('[type = "input"]').sources().first();
	        }

	        if (!complement_input.length) {
	          return missing_operand;
	        }

	        return 'InverseObjectProperties(' + self.nodeToOwlString(input) + ' ' + self.nodeToOwlString(complement_input) + ')';
	      }

	      function equivalentClasses(self, edge) {
	        return 'EquivalentClasses(' + self.nodeToOwlString(edge.source()) + ' ' + self.nodeToOwlString(edge.target()) + ')';
	      }

	      function equivalentTypeProperties(self, edge) {
	        var axiom_type;

	        if (edge.source().data('idenity') == 'role') {
	          axiom_type = 'Object';
	        } else {
	          axiom_type = 'Data';
	        }

	        return 'Equivalent' + axiom_type + 'Properties(' + self.nodeToOwlString(edge.source()) + ' ' + self.nodeToOwlString(edge.target()) + ')';
	      }

	      function subClassOf(self, edge) {
	        return 'SubClassOf(' + self.nodeToOwlString(edge.source()) + ' ' + self.nodeToOwlString(edge.target()) + ')';
	      }

	      function subTypePropertyOf(self, edge) {
	        var axiom_type;

	        if (edge.target().data('identity') == 'role') {
	          axiom_type = 'Object';
	        } else if (edge.target().data('type') == 'attribute') {
	          axiom_type = 'Data';
	        } else {
	          return null;
	        }

	        return 'Sub' + axiom_type + 'PropertyOf(' + self.nodeToOwlString(edge.source()) + ' ' + self.nodeToOwlString(edge.target()) + ')';
	      }

	      function propertyDomain(self, edge) {
	        var node = edge.source().incomers('[type = "input"]').sources();

	        if (node.size() > 1) {
	          return subClassOf(self, edge);
	        }

	        if (node.data('type') == 'role') {
	          return 'ObjectPropertyDomain(' + self.nodeToOwlString(node) + ' ' + self.nodeToOwlString(edge.target()) + ')';
	        } else if (node.data('type') == 'attribute') {
	          return 'DataPropertyDomain(' + self.nodeToOwlString(node) + ' ' + self.nodeToOwlString(edge.target()) + ')';
	        }
	      }

	      function propertyRange(self, edge) {
	        var node = edge.source().incomers('[type = "input"]').sources();

	        if (node.size() > 1) {
	          return subClassOf(self, edge);
	        }

	        if (node.data('type') == 'role') {
	          return 'ObjectPropertyRange(' + self.nodeToOwlString(node) + ' ' + self.nodeToOwlString(edge.target()) + ')';
	        } else if (node.data('type') == 'attribute') {
	          return 'DataPropertyRange(' + self.nodeToOwlString(node) + ' ' + self.nodeToOwlString(edge.target()) + ')';
	        }
	      }

	      function disjointClasses(self, inputs) {
	        var owl_string = 'DisjointClasses(';
	        inputs.forEach(function (input) {
	          if (input.data('type') == 'complement') {
	            input = input.incomers('[type = "input"]').source();
	          }

	          owl_string += self.nodeToOwlString(input) + ' ';
	        });
	        owl_string = owl_string.slice(0, owl_string.length - 1);
	        owl_string += ')';
	        return owl_string;
	      }

	      function disjointTypeProperties(self, edge) {
	        var axiom_type, owl_string;

	        if (edge.target().data('identity') == 'role') {
	          axiom_type = 'Object';
	        } else if (edge.target().data('identity') == 'attribute') {
	          axiom_type = 'Data';
	        } else {
	          return null;
	        }

	        owl_string = 'Disjoint' + axiom_type + 'Properties(';
	        edge.connectedNodes().forEach(function (node) {
	          if (node.data('type') == 'complement') {
	            node = node.incomers('[type = "input"]').source();
	          }

	          owl_string += self.nodeToOwlString(node) + ' ';
	        });
	        owl_string = owl_string.slice(0, owl_string.length - 1);
	        return owl_string + ')';
	      }
	    }
	  }, {
	    key: "nodeToOwlString",
	    value: function nodeToOwlString(node, from_node) {
	      var owl_thing = '<span class="axiom_predicate_prefix">owl:</span><span class="axiom_predefinite_obj">Thing</span>';
	      var rdfs_literal = '<span class="axiom_predicate_prefix">rdfs:</span><span class="axiom_predefinite_obj">Literal</span>';
	      var missing_operand = '<span class="owl_error">Missing Operand</span>';
	      var not_defined = 'Undefined';
	      var from_node_flag = from_node || null;

	      if (from_node_flag && (node.hasClass('predicate') || node.data('type') == 'value-domain')) {
	        var owl_predicate = '<span class="axiom_predicate_prefix">' + node.data('prefix_iri') + '</span><span class="owl_' + node.data('type') + '">' + node.data('remaining_chars') + '</span>';
	        var owl_type;

	        switch (node.data('type')) {
	          case 'concept':
	            owl_type = 'Class';
	            return 'Declaration(' + owl_type + '(' + owl_predicate + '))';
	            break;

	          case 'role':
	            owl_type = 'ObjectProperty';
	            var owl_string = 'Declaration(' + owl_type + '(' + owl_predicate + '))';

	            if (node.data('functional')) {
	              owl_string += '<br/>Functional' + owl_type + '(' + owl_predicate + ')';
	            }

	            if (node.data('inverseFunctional')) {
	              owl_string += '<br/>InverseFunctional' + owl_type + '(' + owl_predicate + ')';
	            }

	            if (node.data('asymmetric')) {
	              owl_string += '<br />Asymmetric' + owl_type + '(' + owl_predicate + ')';
	            }

	            if (node.data('irreflexive')) {
	              owl_string += '<br/>Irreflexive' + owl_type + '(' + owl_predicate + ')';
	            }

	            if (node.data('reflexive')) {
	              owl_string += '<br/>Reflexive' + owl_type + '(' + owl_predicate + ')';
	            }

	            if (node.data('symmetric')) {
	              owl_string += '<br/>Symmetric' + owl_type + '(' + owl_predicate + ')';
	            }

	            if (node.data('transitive')) {
	              owl_string += '<br/>Transitive' + owl_type + '(' + owl_predicate + ')';
	            }

	            return owl_string;
	            break;

	          case 'attribute':
	            owl_type = 'DataProperty';
	            var owl_string = 'Declaration(' + owl_type + '(' + owl_predicate + '))';

	            if (node.data('functional')) {
	              owl_string += '<br/>Functional' + owl_type + '(' + owl_predicate + '))';
	            }

	            return owl_string;
	            break;

	          case 'individual':
	            if (node.data('remaining_chars').search(/"[\w]+"\^\^[\w]+:/) != -1) {
	              var value = node.data('remaining_chars').split('^^')[0];
	              var datatype = node.data('remaining_chars').split(':')[1];
	              owl_predicate = '<span class="owl_value">' + value + '</span>^^' + '<span class="axiom_predicate_prefix">' + node.data('prefix_iri') + '</span>' + '<span class="owl_value-domain">' + datatype + '</span>';
	            }

	            owl_type = 'NamedIndividual';
	            return 'Declaration(' + owl_type + '(' + owl_predicate + '))';
	            break;

	          case 'value-domain':
	            owl_type = 'Datatype';
	            return 'Declaration(' + owl_type + '(' + owl_predicate + '))';
	            break;
	        }
	      }

	      switch (node.data('type')) {
	        case 'individual':
	          if (node.data('remaining_chars').search(/"[\w]+"\^\^[\w]+:/) != -1) {
	            var value = node.data('remaining_chars').split('^^')[0];
	            var datatype = node.data('remaining_chars').split(':')[1];
	            return '<span class="owl_value">' + value + '</span>^^' + '<span class="axiom_predicate_prefix">' + node.data('prefix_iri') + '</span>' + '<span class="owl_value-domain">' + datatype + '</span>';
	          }

	        case 'concept':
	        case 'role':
	        case 'value-domain':
	        case 'attribute':
	        case 'individual':
	          return '<span class="axiom_predicate_prefix">' + node.data('prefix_iri') + '</span><span class="owl_' + node.data('type') + '">' + node.data('remaining_chars') + '</span>';
	          break;

	        case 'facet':
	          var rem_chars = node.data('remaining_chars').split('^^');
	          return '<span class="axiom_predicate_prefix">' + node.data('prefix_iri') + '</span><span class="owl_value-domain">' + rem_chars[0] + '</span><span class="owl_value">' + rem_chars[1] + '</span>';
	          break;

	        case 'domain-restriction':
	        case 'range-restriction':
	          var input_edges = node.connectedEdges('edge[target = "' + node.id() + '"][type = "input"]');
	          var input_first;
	          var input_other;

	          if (!input_edges.length) {
	            return missing_operand;
	          }

	          input_edges.forEach(function (e) {
	            if (e.source().data('type') == 'role' || e.source().data('type') == 'attribute') {
	              input_first = e.source();
	            }

	            if (e.source().data('type') != 'role' && e.source().data('type') != 'attribute') {
	              input_other = e.source();
	            }
	          });

	          if (input_first) {
	            if (input_first.data('type') == 'attribute' && node.data('type') == 'range-restriction') {
	              return not_defined;
	            }

	            if (node.data('label') == 'exists') {
	              return someValuesFrom(this, input_first, input_other, node.data('type'));
	            } else if (node.data('label') == 'forall') {
	              return allValuesFrom(this, input_first, input_other, node.data('type'));
	            } else if (node.data('label').search(/\(([-]|[\d]+),([-]|[\d]+)\)/) != -1) {
	              var cardinality = node.data('label').replace(/\(|\)/g, '').split(/,/);
	              return minMaxExactCardinality(this, input_first, input_other, cardinality, node.data('type'));
	            } else if (node.data('label') == 'self') {
	              return hasSelf(this, input_first, node.data('type'));
	            }
	          } else return missing_operand;

	        case 'role-inverse':
	          var input = node.incomers('[type = "input"]').sources();

	          if (!input.length) {
	            return missing_operand;
	          }

	          return objectInverseOf(this, input);
	          break;

	        case 'role-chain':
	          if (!node.data('inputs')) {
	            return missing_operand;
	          }

	          return objectPropertyChain(this, node.data('inputs'));
	          break;

	        case 'union':
	        case 'intersection':
	        case 'complement':
	        case 'enumeration':
	        case 'disjoint-union':
	          var inputs = node.incomers('[type = "input"]').sources();

	          if (!inputs.length) {
	            return missing_operand;
	          }

	          var axiom_type = 'Object';

	          if (node.data('identity') != 'concept' && node.data('identity') != 'role') {
	            axiom_type = 'Data';
	          }

	          if (node.data('type') == 'disjoint-union') {
	            if (!from_node_flag) {
	              return logicalConstructors(this, inputs, 'union', axiom_type);
	            } else {
	              return logicalConstructors(this, inputs, 'union', axiom_type) + '<br />' + disjointClasses(this, inputs);
	            }
	          }

	          return logicalConstructors(this, inputs, node.data('type'), axiom_type);
	          break;

	        case 'datatype-restriction':
	          var inputs = node.incomers('[type = "input"]').sources();

	          if (!inputs.length) {
	            return missing_operand;
	          }

	          return datatypeRestriction(this, inputs);
	          break;

	        case 'property-assertion':
	          return not_defined;
	      }

	      function someValuesFrom(self, first, other, restr_type) {
	        var axiom_type, owl_string;

	        if (first.data('type') == 'role') {
	          axiom_type = 'Object';
	        }

	        if (first.data('type') == 'attribute') {
	          axiom_type = 'Data';
	        }

	        owl_string = axiom_type + 'SomeValuesFrom('; // if the node is a range-restriction, put the inverse of the role

	        if (restr_type == 'range-restriction') {
	          owl_string += objectInverseOf(self, first);
	        } else {
	          owl_string += self.nodeToOwlString(first);
	        }

	        if (!other && axiom_type == 'Object') {
	          return owl_string += ' ' + owl_thing + ')';
	        }

	        if (!other && axiom_type == 'Data') {
	          return owl_string += ' ' + rdfs_literal + ')';
	        }

	        return owl_string += ' ' + self.nodeToOwlString(other) + ')';
	      }

	      function allValuesFrom(self, first, other, restr_type) {
	        var axiom_type, owl_string;

	        if (first.data('type') == 'role') {
	          axiom_type = 'Object';
	        }

	        if (first.data('type') == 'attribute') {
	          axiom_type = 'Data';
	        }

	        owl_string = axiom_type + 'AllValuesFrom('; // if the node is a range-restriction, put the inverse of the role

	        if (restr_type == 'range-restriction') {
	          owl_string += objectInverseOf(self, first);
	        } else {
	          owl_string += self.nodeToOwlString(first);
	        }

	        if (!other && axiom_type == 'Object') {
	          return owl_string += ' ' + owl_thing + ')';
	        }

	        if (!other && axiom_type == 'Data') {
	          return owl_string += ' ' + rdfs_literal + ')';
	        }

	        return owl_string += ' ' + self.nodeToOwlString(other) + ')';
	      }

	      function minMaxExactCardinality(self, first, other, cardinality, restr_type) {
	        var axiom_type;

	        if (first.data('type') == 'role') {
	          axiom_type = 'Object';
	        }

	        if (first.data('type') == 'attribute') {
	          axiom_type = 'Data';
	        }

	        if (cardinality[0] == '-') {
	          if (restr_type == 'range-restriction') {
	            if (!other) {
	              return axiom_type + 'MaxCardinality(' + cardinality[1] + ' ' + objectInverseOf(self, first) + ')';
	            } else {
	              return axiom_type + 'MaxCardinality(' + cardinality[1] + ' ' + objectInverseOf(self, first) + ' ' + self.nodeToOwlString(other) + ')';
	            }
	          } else {
	            if (!other) {
	              return axiom_type + 'MaxCardinality(' + cardinality[1] + ' ' + self.nodeToOwlString(first) + ')';
	            } else {
	              return axiom_type + 'MaxCardinality(' + cardinality[1] + ' ' + self.nodeToOwlString(first) + ' ' + self.nodeToOwlString(other) + ')';
	            }
	          }
	        }

	        if (cardinality[1] == '-') {
	          if (restr_type == 'range-restriction') {
	            if (!other) {
	              return axiom_type + 'MinCardinality(' + cardinality[0] + ' ' + objectInverseOf(self, first) + ')';
	            } else {
	              return axiom_type + 'MinCardinality(' + cardinality[0] + ' ' + objectInverseOf(self, first) + ' ' + self.nodeToOwlString(other) + ')';
	            }
	          } else {
	            if (!other) {
	              return axiom_type + 'MinCardinality(' + cardinality[0] + ' ' + self.nodeToOwlString(first) + ')';
	            } else {
	              return axiom_type + 'MinCardinality(' + cardinality[0] + ' ' + self.nodeToOwlString(first) + ' ' + self.nodeToOwlString(other) + ')';
	            }
	          }
	        }

	        if (cardinality[0] != '-' && cardinality[1] != '-') {
	          var min = [];
	          var max = [];
	          min.push(cardinality[0]);
	          min.push('-');
	          max.push('-');
	          max.push(cardinality[1]);
	          return axiom_type + 'IntersectionOf(' + minMaxExactCardinality(self, first, other, min, restr_type) + ' ' + minMaxExactCardinality(self, first, other, max, restr_type) + ')';
	        }
	      }

	      function objectInverseOf(self, node) {
	        return 'ObjectInverseOf(' + self.nodeToOwlString(node) + ')';
	      }

	      function objectPropertyChain(self, inputs) {
	        var owl_string;
	        var owl_string = 'ObjectPropertyChain(';
	        inputs.forEach(function (input_id) {
	          input = self.cy.$('edge[id_xml = "' + input_id + '"]').source();
	          owl_string += self.nodeToOwlString(input) + ' ';
	        });
	        owl_string = owl_string.slice(0, owl_string.length - 1);
	        owl_string += ')';
	        return owl_string;
	      }

	      function logicalConstructors(self, inputs, constructor_name, axiom_type) {
	        var owl_string;

	        if (constructor_name == 'enumeration') {
	          constructor_name = 'One';
	        } else // Capitalize first char
	          {
	            constructor_name = constructor_name.charAt(0).toUpperCase() + constructor_name.slice(1);
	          }

	        owl_string = axiom_type + constructor_name + 'Of(';
	        inputs.forEach(function (input) {
	          owl_string += self.nodeToOwlString(input) + ' ';
	        });
	        owl_string = owl_string.slice(0, owl_string.length - 1);
	        owl_string += ')';
	        return owl_string;
	      }

	      function disjointClasses(self, inputs) {
	        var owl_string = 'DisjointClasses(';
	        inputs.forEach(function (input) {
	          owl_string += self.nodeToOwlString(input) + ' ';
	        });
	        owl_string = owl_string.slice(0, owl_string.length - 1);
	        owl_string += ')';
	        return owl_string;
	      }

	      function datatypeRestriction(self, inputs) {
	        var owl_string = 'DatatypeRestriction(';
	        var value_domain = inputs.filter('[type = "value-domain"]').first();
	        owl_string += self.nodeToOwlString(value_domain) + ' ';
	        inputs.forEach(function (input) {
	          if (input.data('type') == 'facet') {
	            owl_string += self.nodeToOwlString(input) + '^^';
	            owl_string += self.nodeToOwlString(value_domain) + ' ';
	          }
	        });
	        owl_string = owl_string.slice(0, owl_string.length - 1);
	        owl_string += ')';
	        return owl_string;
	      }

	      function hasSelf(self, input, restr_type) {
	        // if the restriction is on the range, put the inverse of node
	        if (restr_type == 'range-restriction') {
	          return 'ObjectHasSelf(' + objectInverseOf(self, input) + ')';
	        }

	        return 'ObjectHasSelf(' + self.nodeToOwlString(input) + ')';
	      }
	    }
	  }]);

	  return OwlTranslator;
	}();

	function computeLiteOntology(ontology) {
	  var aux_renderer = new GrapholscapeRenderer(null);
	  var lite_ontology = new Ontology(ontology.name, ontology.version);
	  return new Promise(function (resolve, reject) {
	    try {
	      window.setTimeout(function () {
	        ontology.diagrams.forEach(function (diagram) {
	          var lite_diagram = new Diagram(diagram.name, diagram.id);
	          lite_diagram.addElems(simplifyDiagram(diagram.nodes, diagram.edges));
	          lite_ontology.addDiagram(lite_diagram);
	        });
	        resolve(lite_ontology);
	      }, 100);
	    } catch (e) {
	      reject(e);
	    }
	  }); // ----------------------------------

	  function simplifyDiagram(nodes, edges) {
	    var cy = cytoscape$1();
	    cy.add(nodes);
	    cy.add(edges);
	    filterByCriterion(cy, function (node) {
	      switch (node.data('type')) {
	        case 'complement':
	        case 'value-domain':
	        case 'role-chain':
	        case 'enumeration':
	          return true;

	        case 'domain-restriction':
	        case 'range-restriction':
	          if (node.data('label') == 'forall') return true;else return false;
	      }
	    });
	    filterByCriterion(cy, isQualifiedExistential);
	    filterByCriterion(cy, isExistentialWithCardinality);
	    cy.remove('.filtered');
	    simplifyDomainAndRange(cy);
	    simplifyComplexHierarchies(cy);
	    simplifyUnions(cy);
	    simplifyIntersections(cy);
	    simplifyRoleInverse(cy);
	    return cy.$('*');
	  }

	  function simplifyDomainAndRange(cy) {
	    var eles = cy.$('*'); // select domain and range restrictions
	    // type start with 'domain' or 'range'

	    var selector = "[type ^= \"domain\"],[type ^= \"range\"]";
	    eles.filter(selector).forEach(function (restriction) {
	      var input_edge = getInputEdgeFromPropertyToRestriction(restriction);
	      var new_edge = null;

	      if (restriction.data('type') == 'domain-restriction') {
	        // there can be only inclusion and equivalence edges, for each of them we 
	        // create a new edge that will have a concept as source and a role/attribute as target
	        restriction.connectedEdges('[type != "input"]').forEach(function (edge, i) {
	          var edges = [];
	          /**
	           * if the actual edge is between two existential, remove it and filter the other existential 
	           */

	          if ((edge.source().data('type') == 'domain-restriction' || edge.source().data('type') == 'range-restriction') && (edge.target().data('type') == 'domain-restriction' || edge.target().data('type') == 'range-restriction')) {
	            cy.remove(edge);
	            return;
	          } // being a domain restriction, the simplified edge must go from a concept to the role/attribute
	          // connected in input to the restriction.
	          // if the actual edge has the restriction as source, the target is a concept and we consider it
	          // as the source of the new edge          


	          if (restriction.id() === edge.source().id()) {
	            edges.push(reverseEdge(edge));
	          } else edges.push(edge.json()); // move attribute on restriction node position


	          if (input_edge.source().data('type') == "attribute") {
	            input_edge.source().position(restriction.position());
	            new_edge = edges[0];
	            new_edge.data.target = input_edge.source().id();
	            new_edge.data.id += '_' + i;
	          } else {
	            // concatenation only if the input is not an attribute
	            edges.push(reverseEdge(input_edge));
	            new_edge = createConcatenatedEdge(edges, cy, edges[0].data.id + '_' + i);
	          } // add the type of input to the restriction as a class of the new edge
	          // role or attribute, used in the stylesheet to assign different colors


	          new_edge.classes += "".concat(input_edge.source().data('type'), " domain");
	          new_edge.data.type = 'default';
	          cy.add(new_edge);
	          cy.remove(edge);
	        });
	      }

	      if (restriction.data('type') == 'range-restriction') {
	        // there can be only inclusion and equivalence edges, for each of them we 
	        // create a new edge that will have a role/attribute as source and a concept as target
	        restriction.connectedEdges('[type != "input"]').forEach(function (edge, i) {
	          var edges = [];
	          /**
	           * if the actual edge is between two existential, remove it and filter the other existential 
	           */

	          if ((edge.source().data('type') == 'domain-restriction' || edge.source().data('type') == 'range-restriction') && (edge.target().data('type') == 'domain-restriction' || edge.target().data('type') == 'range-restriction')) {
	            cy.remove(edge);
	            return;
	          }

	          edges.push(input_edge.json()); // being a range restriction, the simplified edge must go from a role/attribute to the concept
	          // if the actual edge has the concept as source, the target is a role/attribute and we need to
	          // revert the edge

	          if (restriction.id() === edge.source().id()) {
	            edges.push(edge.json());
	          } else edges.push(reverseEdge(edge));

	          new_edge = createConcatenatedEdge(edges, cy, edges[0].data.id + '_' + i); // add the type of input to the restriction as a class of the new edge
	          // role or attribute, used in the stylesheet to assign a different color

	          new_edge.classes += "".concat(input_edge.source().data('type'), " range");
	          new_edge.data.type = 'default';
	          cy.add(new_edge);
	          cy.remove(edge);
	        });
	      }

	      aux_renderer.filterElem(restriction, cy);
	    });
	    cy.remove('.filtered');

	    function getInputEdgeFromPropertyToRestriction(restriction_node) {
	      var e = null;
	      restriction_node.incomers('[type = "input"]').forEach(function (edge) {
	        if (edge.source().data('type') == 'role' || edge.source().data('type') == 'attribute') {
	          e = edge;
	        }
	      });
	      return e;
	    }
	  }

	  function reverseEdge(edge) {
	    var new_edge = edge.json();
	    var source_aux = edge.source().id();
	    new_edge.data.source = edge.target().id();
	    new_edge.data.target = source_aux;
	    var endpoint_aux = edge.data('source_endpoint');
	    new_edge.data.source_endpoint = edge.data('target_endpoint');
	    new_edge.data.target_endpoint = endpoint_aux;
	    new_edge.data.breakpoints = edge.data('breakpoints').reverse();

	    if (edge.data('segment_distances')) {
	      new_edge.data.segment_distances = [];
	      new_edge.data.segment_weights = [];
	      new_edge.data.breakpoints.forEach(function (breakpoint) {
	        var aux = getDistanceWeight(edge.source().position(), edge.target().position(), breakpoint);
	        new_edge.data.segment_distances.push(aux[0]);
	        new_edge.data.segment_weights.push(aux[1]);
	      });
	    }

	    return new_edge;
	  }
	  /**
	   * @param {array} edges - array of edges in json format
	   * @param {cytoscape} cy
	   * @param {string} id - the id to assign to the new edge
	   */


	  function createConcatenatedEdge(edges, cy, id) {
	    var source = edges[0].data.source;
	    var target = edges[edges.length - 1].data.target;
	    var segment_distances = [];
	    var segment_weights = [];
	    var breakpoints = [];
	    var aux = undefined;
	    edges.forEach(function (edge, i, array) {
	      if (edge.data.breakpoints) {
	        breakpoints = breakpoints.concat(edge.data.breakpoints);
	        edge.data.breakpoints.forEach(function (breakpoint) {
	          aux = getDistanceWeight(cy.getElementById(target).position(), cy.getElementById(source).position(), breakpoint);
	          segment_distances.push(aux[0]);
	          segment_weights.push(aux[1]);
	        });
	      } // add target position as new breakpoint


	      if (i < array.length - 1) {
	        aux = getDistanceWeight(cy.getElementById(target).position(), cy.getElementById(source).position(), cy.getElementById(edge.data.target).position());
	        segment_distances.push(aux[0]);
	        segment_weights.push(aux[1]);
	        breakpoints.push(cy.getElementById(edge.data.target).position());
	      }
	    });
	    var new_edge = edges[0];
	    new_edge.data.id = id;
	    new_edge.data.source = source;
	    new_edge.data.target = target;
	    new_edge.data.target_endpoint = edges[edges.length - 1].data.target_endpoint;
	    new_edge.data.type = 'inclusion';
	    new_edge.data.segment_distances = segment_distances;
	    new_edge.data.segment_weights = segment_weights;
	    new_edge.data.breakpoints = breakpoints;
	    return new_edge;
	  } // filter nodes if the criterion function return true
	  // criterion must be a function returning a boolean value for a given a node


	  function filterByCriterion(cy_instance, criterion) {
	    var cy = cy_instance;
	    cy.$('*').forEach(function (node) {
	      if (criterion(node)) {
	        aux_renderer.filterElem(node, cy);
	      }
	    });
	  }

	  function isQualifiedExistential(node) {
	    if ((node.data('type') == 'domain-restriction' || node.data('type') == 'range-restriction') && node.data('label') == 'exists') {
	      return node.incomers('edge[type = "input"]').size() > 1 ? true : false;
	    }

	    return false;
	  }

	  function isExistentialWithCardinality(node) {
	    if ((node.data('type') == 'domain-restriction' || node.data('type') == 'range-restriction') && node.data('label').search(/[0-9]/g) >= 0) {
	      return true;
	    }

	    return false;
	  }

	  function isComplexHierarchy(node) {
	    if (node.data('type') != 'union' && node.data('type') != 'disjoint-union' && node.data('type') != 'intersection') return false;
	    var outcome = false;
	    node.incomers('[type *= "input"]').forEach(function (input) {
	      if (input.source().data('type') != 'concept') {
	        outcome = true;
	      }
	    });
	    return outcome;
	  }

	  function simplifyUnions(cy) {
	    var eles = cy.$('*');
	    eles.filter('[type $= "union"]').forEach(function (union) {
	      makeDummyPoint(union);
	      union.incomers('edge[type = "input"]').data('type', 'easy_input');
	      cy.remove(union.incomers('edge[type = "inclusion"]')); // process equivalence edges

	      union.connectedEdges('edge[type = "equivalence"]').forEach(function (edge) {
	        edge.data('type', 'inclusion');
	        edge.data('target_label', 'C');

	        if (edge.source().id() != union.id()) {
	          var reversed_edge = reverseEdge(edge);
	          cy.remove(edge);
	          cy.add(reversed_edge);
	        }
	      }); // process inclusion edges

	      union.outgoers('edge[type = "inclusion"]').forEach(function (inclusion) {
	        inclusion.addClass('hierarchy');
	        if (union.data('type') == 'disjoint-union') inclusion.addClass('disjoint');
	      });
	      if (union.data('label')) union.data('label', '');
	      replicateAttributes(union); // replicate attributes on input classes

	      /*
	      let input_classes = union.incomers('[type *= "input"]').sources()
	      union.neighborhood('[type = "attribute"]').forEach(attribute => {
	        
	        input_classes.forEach( (concept,i) => {
	          let new_attribute = attribute.json()
	          new_attribute.position = concept.position()
	          new_attribute.data.id += '_clone'+i
	          new_attribute.classes += ' repositioned'
	          cy.add(new_attribute)
	          let edge = {
	            data: {
	              id: new_attribute.data.id + '_edge',
	              source: new_attribute.data.id,
	              target: concept.id(),
	            },
	            classes: 'attribute',
	          }
	            cy.add(edge)
	        })
	          cy.remove(attribute)
	      })
	      */
	      // replicate role tipization on input classes

	      replicateRoleTypizations(union); // if the union has not any connected non-input edges, then remove it

	      if (union.connectedEdges('[type !*= "input"]').size() == 0) cy.remove(union);
	    });
	  }

	  function makeDummyPoint(node) {
	    node.data('width', 0.1);
	    node.data('height', 0.1);
	  }

	  function simplifyIntersections(cytoscape_instance) {
	    var cy = cytoscape_instance;
	    cy.$('node[type = "intersection"]').forEach(function (and) {
	      replicateAttributes(and);
	      replicateRoleTypizations(and); // if there are no incoming inclusions or equivalence and no equivalences connected,
	      // remove the intersection

	      if (and.incomers('edge[type !*= "input"]').size() == 0 && and.connectedEdges('edge[type = "equivalence"]').size() == 0) {
	        aux_renderer.filterElem(and, cy);
	      } else {
	        // process incoming inclusion
	        and.incomers('edge[type !*= "input"]').forEach(function (edge) {
	          /**
	           * create a new ISA edge for each input class
	           * the new edge will be a concatenation:
	           *  - ISA towards the 'and' node + input edge
	           * 
	           * the input edge must be reversed
	           * In case of equivalence edge, we only consider the
	           * isa towards the 'and' node and discard the other direction
	           */
	          and.incomers('edge[type = "input"]').forEach(function (input, i) {
	            /**
	             * if the edge is an equivalence, we must consider it as an
	             * incoming edge in any case and ignore the opposite direction.
	             * so if the edge is outgoing from the intersection, we reverse it
	             */
	            var edges = [];

	            if (edge.source().id() == and.id()) {
	              edges.push(reverseEdge(edge));
	            } else edges.push(edge.json());

	            var new_id = "".concat(edge.id(), "_").concat(i);
	            edges.push(reverseEdge(input));
	            var new_isa = createConcatenatedEdge(edges, cy, new_id);
	            cy.remove(edge);
	            cy.add(new_isa);
	          });
	        });
	        cy.remove(and);
	      }
	    });
	  }

	  function replicateRoleTypizations(constructor) {
	    var cy = constructor.cy(); // replicate role tipization on input classes

	    constructor.connectedEdges('edge.role').forEach(function (role_edge) {
	      constructor.incomers('[type *= "input"]').forEach(function (input, i) {
	        var new_id = "".concat(role_edge.id(), "_").concat(i);
	        var new_edge = {};
	        var edges = [];
	        /**
	         * if the connected non input edge is only one (the one we are processing)
	         * then the new edge will be the concatenation of the input edge + role edge
	         */

	        if (constructor.connectedEdges('[type !*= "input"]').size() == 1) {
	          if (role_edge.hasClass('range')) {
	            edges.push(role_edge.json());
	            edges.push(reverseEdge(input));
	          } else {
	            edges.push(input.json());
	            edges.push(role_edge.json());
	          }

	          new_edge = createConcatenatedEdge(edges, cy, new_id);
	          new_edge.data.type = 'default';
	          new_edge.classes = role_edge.json().classes;
	        } else {
	          /**
	           * Otherwise the constructor node will not be deleted and the new role edges can't
	           * pass over the constructor node. We then just properly change the source/target
	           * of the role edge. In this way the resulting edges will go from the last
	           * breakpoint of the original role edge towards the input classes of the constructor  
	          */
	          new_edge = role_edge.json();
	          new_edge.data.id = new_id;
	          var target = undefined;
	          var source = undefined;

	          if (role_edge.hasClass('range')) {
	            target = input.source();
	            source = role_edge.source();
	            new_edge.data.target = input.source().id();
	          } else {
	            target = role_edge.target();
	            source = input.source();
	            new_edge.data.source = input.source().id();
	          } // Keep the original role edge breakpoints


	          var segment_distances = [];
	          var segment_weights = [];
	          new_edge.data.breakpoints.forEach(function (breakpoint) {
	            var aux = getDistanceWeight(target.position(), source.position(), breakpoint);
	            segment_distances.push(aux[0]);
	            segment_weights.push(aux[1]);
	          });
	          new_edge.data.segment_distances = segment_distances;
	          new_edge.data.segment_weights = segment_weights;
	        }

	        cy.add(new_edge);
	      });
	      cy.remove(role_edge);
	    });
	  }

	  function simplifyComplexHierarchies(cytoscape_instance) {
	    var cy = cytoscape_instance;
	    cy.nodes('[type = "intersection"],[type = "union"],[type = "disjoint-union"]').forEach(function (node) {
	      if (isComplexHierarchy(node)) {
	        replicateAttributes(node);
	        aux_renderer.filterElem(node, cy);
	      }
	    });
	    cy.remove('.filtered');
	  }

	  function replicateAttributes(node) {
	    var cy = node.cy();
	    var all_classes = getAllInputs(node);
	    var all_attributes = node.neighborhood('[type = "attribute"]');
	    var all_inclusion_attributes = cy.collection();
	    all_classes.forEach(function (concept, i) {
	      all_attributes.forEach(function (attribute, j) {
	        addAttribute(concept, i, attribute, 'attribute');
	      });
	    });
	    cy.remove(all_attributes);
	    aux_renderer.filterElem(all_inclusion_attributes, cy);

	    function addAttribute(target, i, attribute, edge_classes) {
	      var new_attribute = attribute.json();
	      new_attribute.position = target.position();
	      new_attribute.data.id += '_' + i + '_' + target.id();
	      new_attribute.classes += ' repositioned'; //attribute.addClass('repositioned')

	      cy.add(new_attribute);
	      var edge = {
	        data: {
	          id: new_attribute.data.id + '_edge',
	          target: new_attribute.data.id,
	          source: target.id()
	        },
	        classes: edge_classes
	      };
	      cy.add(edge); // recursively add new attributes connected to replicated attributes by inclusions

	      if (!target.hasClass('repositioned')) {
	        attribute.neighborhood('[type = "attribute"]').forEach(function (inclusion_attribute, j) {
	          if (all_attributes.contains(inclusion_attribute)) {
	            return;
	          }

	          addAttribute(cy.$id(new_attribute.data.id), j, inclusion_attribute, 'inclusion');
	          all_inclusion_attributes = all_inclusion_attributes.union(inclusion_attribute);
	        });
	      }
	    }

	    function getAllInputs(node) {
	      var all_classes = node.cy().collection();
	      var input_edges = node.incomers('edge[type *= "input"]');
	      all_classes = all_classes.union(input_edges.sources('[type = "concept"]'));
	      input_edges.sources('[type != "concept"]').forEach(function (constructor) {
	        all_classes = all_classes.union(getAllInputs(constructor));
	        constructor.addClass('attr_replicated');
	      });
	      return all_classes;
	    }
	  }

	  function simplifyRoleInverse(cytoscape_instance) {
	    var cy = cytoscape_instance;
	    cy.nodes('[type = "role-inverse"]').forEach(function (role_inverse) {
	      var new_edges_count = 0; // the input role is only one

	      var input_edge = role_inverse.incomers('[type *= "input"]'); // for each other edge connected, create a concatenated edge
	      // the edge is directed towards the input_role

	      role_inverse.connectedEdges('[type !*= "input"]').forEach(function (edge, i) {
	        var edges = []; // if the edge is outgoing from the role-inverse node, then we need to reverse it

	        if (edge.source().id() == role_inverse.id()) {
	          edges.push(reverseEdge(edge));
	        } else {
	          edges.push(edge.json());
	        } // the input edge must always be reversed 


	        edges.push(reverseEdge(input_edge));
	        var new_id = input_edge.id() + '_' + i;
	        var new_edge = createConcatenatedEdge(edges, cy, new_id);
	        new_edge.data.type = 'inclusion';
	        new_edge.classes = 'inverse-of';
	        cy.add(new_edge);
	        cy.remove(edge);
	        new_edges_count += 1;
	      });

	      if (new_edges_count > 1) {
	        cy.remove(input_edge);
	        makeDummyPoint(role_inverse);
	        role_inverse.data('label', 'inverse Of');
	        role_inverse.data('labelXpos', 0);
	        role_inverse.data('labelYpos', 0);
	        role_inverse.data('text_background', true);
	      } else {
	        input_edge.source().connectedEdges('edge.inverse-of').data('edge_label', 'inverse Of');
	        cy.remove(role_inverse);
	      }
	    });
	  }
	}

	const rendering={theme:{type:"list",label:"Select a theme",list:{gscape:{label:"Grapholscape White","default":true},dark:{label:"Grapholscape Dark","default":false}}}};const widgets={explorer:{type:"boolean",enabled:true,label:"Enable Ontology Explorer widget"},details:{type:"boolean",enabled:true,label:"Enable Entity Details widget"},owl_translator:{type:"boolean",enabled:true,label:"Enable Owl Translation widget"},filters:{type:"boolean",enabled:true,label:"Enable Filters widget",filter_list:{all:{selector:"#undefined",label:"Filter All",active:false,disabled:false,"class":"undefined"},attributes:{selector:"[type = \"attribute\"]",label:"Attributes",active:false,disabled:false,"class":"filterattributes"},value_domain:{selector:"[type = \"value-domain\"]",label:"Value Domain",active:false,disabled:false,"class":"filtervaluedomains"},individuals:{selector:"[type = \"individual\"]",label:"Individuals",active:false,disabled:false,"class":"filterindividuals"},universal_quantifier:{selector:"[type $= \"-restriction\"][label = \"forall\"]",label:"Universal Quantifier",active:false,disabled:false,"class":"filterforall"},not:{selector:"[type = \"complement\"]",label:"Not",active:false,disabled:false,"class":"filtercomplements"}}},lite_mode:{type:"boolean",enabled:true,label:"Allow lite mode switching"}};var config = {rendering:rendering,widgets:widgets};

	var default_config = /*#__PURE__*/Object.freeze({
		rendering: rendering,
		widgets: widgets,
		'default': config
	});

	function _classCallCheck$s(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _defineProperties$r(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

	function _createClass$r(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties$r(Constructor.prototype, protoProps); if (staticProps) _defineProperties$r(Constructor, staticProps); return Constructor; }

	var GrapholscapeController =
	/*#__PURE__*/
	function () {
	  function GrapholscapeController(ontology) {
	    var _this = this;

	    var view = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
	    var config = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

	    _classCallCheck$s(this, GrapholscapeController);

	    this.config = default_config;
	    if (config) this.setConfig(config);
	    this.ontologies = {
	      "default": ontology,
	      lite: null
	    };
	    this._ontology = ontology;
	    this.view = view;
	    this.owl_translator = new OwlTranslator();
	    this.liteMode = false;
	    this.liteOntologyPromise = computeLiteOntology(ontology).then(function (result) {
	      _this.ontologies.lite = result;
	    })["catch"](function (reason) {
	      console.log(reason);
	    });
	  }

	  _createClass$r(GrapholscapeController, [{
	    key: "init",
	    value: function init() {
	      var _this2 = this;

	      var diagramsModelData = this.ontology.diagrams;
	      var entitiesModelData = this.ontology.getEntities();
	      var diagramsViewData = diagramsModelData.map(function (diagram) {
	        return _this2.constructor.diagramModelToViewData(diagram);
	      });
	      var entitiesViewData = entitiesModelData.map(function (entity) {
	        return _this2.constructor.entityModelToViewData(entity);
	      });
	      var ontologyViewData = {
	        name: this.ontology.name,
	        version: this.ontology.version,
	        iriSet: this.ontology.iriSet // event handlers

	      };
	      this.view.onDiagramChange = this.onDiagramChange.bind(this);
	      this.view.onNodeNavigation = this.onNodeNavigation.bind(this);
	      this.view.onEntitySelection = this.onEntitySelection.bind(this);
	      this.view.onNodeSelection = this.onNodeSelection.bind(this);
	      this.view.onBackgroundClick = this.onBackgroundClick.bind(this);
	      this.view.onEdgeSelection = this.onEdgeSelection.bind(this);
	      this.view.onLiteModeActive = this.onLiteModeActive.bind(this);
	      this.view.onDefaultModeActive = this.onDefaultModeActive.bind(this);
	      this.view.createUi(ontologyViewData, diagramsViewData, entitiesViewData, this.config.widgets);
	    }
	    /**
	     * Event handler for clicks on empty area of the graph.
	     * It collapse all widgets' body.
	     */

	  }, {
	    key: "onBackgroundClick",
	    value: function onBackgroundClick() {
	      this.view.blurAll();
	    }
	    /**
	     * Event handler for the click on a node in the explorer widget.
	     * Focus on the node and show its details
	     * @param {String} node_id - the id of the node to navigate to
	     */

	  }, {
	    key: "onNodeNavigation",
	    value: function onNodeNavigation(node_id) {
	      var node = this.ontology.getElem(node_id);
	      this.centerOnNode(node, 1.5);
	      this.showDetails(node);
	    }
	    /**
	     * Event handler for a digram change.
	     * @param {string} diagram_index The index of the diagram to display
	     */

	  }, {
	    key: "onDiagramChange",
	    value: function onDiagramChange(diagram_index) {
	      var diagram = this.ontology.getDiagram(diagram_index);
	      this.showDiagram(diagram);
	    }
	    /**
	     * Display a diagram on the screen.
	     * @param {JSON} diagramModelData The diagram retrieved from model
	     */

	  }, {
	    key: "showDiagram",
	    value: function showDiagram(diagramModelData) {
	      var diagramViewData = this.constructor.diagramModelToViewData(diagramModelData);
	      this.view.drawDiagram(diagramViewData);
	    }
	    /**
	     * Event Handler for an entity selection.
	     * @param {String} entity_id - The Id of the selected entity 
	     * @param {Boolean} unselect - Flag for unselecting elements on graph
	     */

	  }, {
	    key: "onEntitySelection",
	    value: function onEntitySelection(entity_id, unselect) {
	      var entity = this.ontology.getElem(entity_id);
	      this.showDetails(entity, unselect);
	    }
	    /**
	     * Show to the user the details of an entity.
	     * @param {JSON} entityModelData The entity retrieved from model
	     */

	  }, {
	    key: "showDetails",
	    value: function showDetails(entityModelData, unselect) {
	      if (this.config.widgets.details.enabled) {
	        var entityViewData = this.constructor.entityModelToViewData(entityModelData);
	        this.view.showDetails(entityViewData, unselect);
	      }
	    }
	  }, {
	    key: "onEdgeSelection",
	    value: function onEdgeSelection(edge_id, diagram_id) {
	      /**
	       * To be refactored.
	       * Owl Translator uses cytoscape representation for navigating the graph.
	       * We need then the node as a cytoscape object and not as plain json.
	       */
	      var edge_cy = this.ontology.getElemByDiagramAndId(edge_id, diagram_id, false);
	      if (edge_cy) this.showOwlTranslation(edge_cy);
	    }
	    /**
	     * Event handler for a node selection on the graph.
	     * Show the details and owl translation if the node is an entity, hide it otherwise.
	     * @param {String} node_id - The id of the node to center on
	     * @param {string} diagram_id - The id of the diagram containing the element
	     */

	  }, {
	    key: "onNodeSelection",
	    value: function onNodeSelection(node_id, diagram_id) {
	      var node = this.ontology.getElemByDiagramAndId(node_id, diagram_id);

	      if (!node) {
	        console.error('Unable to find the node with {id= ' + node_id + '} in the ontology');
	        return;
	      }

	      if (node.classes.includes('predicate')) {
	        this.showDetails(node, false);
	      } else {
	        this.view.hideDetails();
	      }
	      /**
	       * To be refactored.
	       * Owl Translator uses cytoscape representation for navigating the graph.
	       * We need then the node as a cytoscape object and not as plain json.
	       */


	      var node_cy = this.ontology.getElemByDiagramAndId(node_id, diagram_id, false);
	      this.showOwlTranslation(node_cy);
	    }
	    /**
	     * Focus on a single node and zoom on it. 
	     * If necessary it also display the diagram containing the node.
	     * @param {JSON} nodeModelData - The node retrieved from model
	     * @param {Number} zoom - The zoom level to apply
	     */

	  }, {
	    key: "centerOnNode",
	    value: function centerOnNode(nodeModelData, zoom) {
	      if (this.view.actual_diagram_id != nodeModelData.data.diagram_id) {
	        var diagram = this.ontology.getDiagram(nodeModelData.data.diagram_id);
	        this.showDiagram(diagram);
	      }

	      var nodeViewData = {
	        id: nodeModelData.data.id,
	        position: nodeModelData.position
	      };
	      this.view.centerOnNode(nodeViewData, zoom);
	    }
	    /**
	     * Get OWL translation from a node and give the result to the view.
	     * To be refactored.
	     * @param {object} node - cytoscape representation of a node
	     */

	  }, {
	    key: "showOwlTranslation",
	    value: function showOwlTranslation(elem) {
	      if (this.config.widgets.owl_translator.enabled) {
	        var owl_text = null;
	        if (elem.isNode()) owl_text = this.owl_translator.nodeToOwlString(elem, true);else if (elem.isEdge()) owl_text = this.owl_translator.edgeToOwlString(elem);
	        this.view.showOwlTranslation(owl_text);
	      }
	    }
	  }, {
	    key: "onLiteModeActive",
	    value: function onLiteModeActive(state) {
	      var _this3 = this;

	      this.liteMode = true;
	      this.liteOntologyPromise.then(function () {
	        if (_this3.liteMode) {
	          _this3.ontology = _this3.ontologies.lite;

	          _this3.updateGraphView(state);

	          _this3.updateEntitiesList();
	        }
	      });
	    }
	  }, {
	    key: "onDefaultModeActive",
	    value: function onDefaultModeActive(state) {
	      this.liteMode = false;
	      this.ontology = this.ontologies["default"];
	      this.updateGraphView(state);
	      this.updateEntitiesList();
	    }
	  }, {
	    key: "updateGraphView",
	    value: function updateGraphView(state) {
	      this.onDiagramChange(this.view.actual_diagram_id);
	      this.view.setViewPort(state);
	    }
	  }, {
	    key: "updateEntitiesList",
	    value: function updateEntitiesList() {
	      var _this4 = this;

	      var entitiesViewData = this.ontology.getEntities().map(function (entity) {
	        return _this4.constructor.entityModelToViewData(entity);
	      });
	      this.view.updateEntitiesList(entitiesViewData);
	    }
	  }, {
	    key: "setConfig",
	    value: function setConfig(new_config) {
	      var _this5 = this;

	      Object.keys(new_config).forEach(function (entry) {
	        if (typeof new_config[entry] !== "boolean") return;

	        try {
	          _this5.config.widgets[entry].enabled = new_config[entry];
	        } catch (e) {
	          return;
	        }
	      });
	    }
	  }, {
	    key: "ontology",
	    set: function set(ontology) {
	      this._ontology = ontology;
	    },
	    get: function get() {
	      return this._ontology;
	    }
	  }], [{
	    key: "entityModelToViewData",
	    value: function entityModelToViewData(entityModelData) {
	      var entityViewData = {
	        id: entityModelData.data.id,
	        id_xml: entityModelData.data.id_xml,
	        diagram_id: entityModelData.data.diagram_id,
	        label: entityModelData.data.label,
	        type: entityModelData.data.type,
	        iri: entityModelData.data.iri,
	        description: entityModelData.data.description,
	        functional: entityModelData.data.functional,
	        inverseFunctional: entityModelData.data.inverseFunctional,
	        asymmetric: entityModelData.data.asymmetric,
	        irreflexive: entityModelData.data.irreflexive,
	        reflexive: entityModelData.data.reflexive,
	        symmetric: entityModelData.data.symmetric,
	        transitive: entityModelData.data.transitive
	      };
	      return JSON.parse(JSON.stringify(entityViewData));
	    }
	  }, {
	    key: "diagramModelToViewData",
	    value: function diagramModelToViewData(diagramModelData) {
	      var diagramViewData = {
	        name: diagramModelData.name,
	        id: diagramModelData.id,
	        nodes: diagramModelData.nodes,
	        edges: diagramModelData.edges
	      };
	      return JSON.parse(JSON.stringify(diagramViewData));
	    }
	  }]);

	  return GrapholscapeController;
	}();

	function _typeof$g(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof$g = function _typeof(obj) { return typeof obj; }; } else { _typeof$g = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof$g(obj); }

	function _classCallCheck$t(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _defineProperties$s(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

	function _createClass$s(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties$s(Constructor.prototype, protoProps); if (staticProps) _defineProperties$s(Constructor, staticProps); return Constructor; }

	var GrapholScape =
	/*#__PURE__*/
	function () {
	  function GrapholScape(file) {
	    var container = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

	    _classCallCheck$t(this, GrapholScape);

	    this.ontology = file;

	    if (container) {
	      return this.init(container);
	    }
	  }

	  _createClass$s(GrapholScape, [{
	    key: "init",
	    value: function init(container) {
	      var _this = this;

	      var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
	      return new Promise(function (resolve, reject) {
	        _this.readFilePromise.then(function () {
	          _this.view = new GrapholscapeView(container);
	          _this.controller = new GrapholscapeController(_this.ontology, _this.view, config);

	          _this.controller.init();

	          resolve(_this);
	        })["catch"](function (reason) {
	          return reject(reason);
	        });
	      });
	    }
	  }, {
	    key: "readGraphol",
	    value: function readGraphol(file) {
	      this.readFilePromise = new Promise(function (resolve, reject) {
	        var result = null;

	        if (_typeof$g(file) === 'object') {
	          var reader = new FileReader();

	          reader.onloadend = function () {
	            result = getResult(reader.result);
	            resolve(result);
	          };

	          reader.readAsText(file);
	          setTimeout(function () {
	            reject('Error: timeout expired');
	          }, 10000);
	        } else if (typeof file === 'string') {
	          result = getResult(file);
	          resolve(result);
	        } else {
	          reject('Err: Grapholscape needs a Graphol File or the corresponding string to be initialized');
	        }
	      });
	      return this.readFilePromise;

	      function getResult(file) {
	        var graphol_parser = new GrapholParser();
	        return graphol_parser.parseGraphol(file);
	      }
	    }
	  }, {
	    key: "showDiagram",
	    value: function showDiagram(id) {
	      this.controller.onDiagramChange(id);
	    }
	  }, {
	    key: "ontology",
	    set: function set(file) {
	      var _this2 = this;

	      this.readGraphol(file).then(function (result) {
	        _this2._ontology = result;
	      })["catch"](function (error) {
	        console.error(error);
	        window.alert(error);
	      });
	    },
	    get: function get() {
	      return this._ontology;
	    }
	  }]);

	  return GrapholScape;
	}();

	return GrapholScape;

}));
